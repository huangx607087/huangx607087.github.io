<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>24Nov4</title>
    <link href="/2024/12/13/24Nov4/"/>
    <url>/2024/12/13/24Nov4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-11月的切题4-Unfinished"><a href="#huangx607087-11月的切题4-Unfinished" class="headerlink" title="huangx607087 11月的切题4[Unfinished]"></a>huangx607087 11月的切题4[Unfinished]</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><h2 id="1-强网拟态2024-brokenoracle"><a href="#1-强网拟态2024-brokenoracle" class="headerlink" title="1.[强网拟态2024]brokenoracle"></a>1.[强网拟态2024]brokenoracle</h2><p>11月25日，向外校的师傅要了一个强网拟态的题目，感觉不是很难，但因为自己想简单了，所以本地搞还是用了 3 小时。</p><p>先看一眼题目代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,getStrongPrime<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">4096</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;&gt; &#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        p=getStrongPrime(<span class="hljs-number">512</span>)<br>        q=getStrongPrime(<span class="hljs-number">512</span>)<br>        e=<span class="hljs-number">65537</span><br>        n=p*q<br>        phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>        token=os.urandom(<span class="hljs-number">1000</span>//<span class="hljs-number">8</span>)<br>        c=<span class="hljs-built_in">pow</span>(bytes_to_long(token),e,n)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;n=&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">hex</span>(n).encode())<br>        <br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;your token is&quot;</span>)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">hex</span>(c).encode())<br>        <br>        signal.alarm(<span class="hljs-number">60</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;give me your message to decrypt&quot;</span>)<br>            c=<span class="hljs-variable language_">self</span>.recv()<br>            <span class="hljs-keyword">try</span>:<br>                c=<span class="hljs-built_in">int</span>(c,<span class="hljs-number">16</span>)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;wrong!&quot;</span>)<br>                <span class="hljs-variable language_">self</span>.request.close()<br>                <br>            <br>            m=<span class="hljs-built_in">pow</span>(c,d,n)<br>            brokenm=m&amp;((<span class="hljs-number">2</span>**(<span class="hljs-number">40</span>)-<span class="hljs-number">1</span>)*(<span class="hljs-number">2</span>**<span class="hljs-number">492</span>))<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">hex</span>(brokenm).encode())<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;give me your token&quot;</span>)<br>        t1=<span class="hljs-variable language_">self</span>.recv()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">bytes</span>.fromhex(t1.decode())==token:<br>            f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<span class="hljs-comment">#此部分本地复现时有所修改</span><br>            flag=f.read()<br>            f.close()<br>            <span class="hljs-variable language_">self</span>.send(flag)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;wrong! try again!&quot;</span>)    <br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span> <span class="hljs-comment">#本地复现改成了60712端口，呃，自己本地复现一般从60709端口开始启用。</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HOST:POST &quot;</span> + HOST+<span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(PORT))<br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><p>很明显，这个题和 RSA ParityOracle类似，不过既不知道最高位，也不是知道最低位，当构造密文发过去之后，服务器会给你解密，并返回对应明文的 $40$ 比特内容，对应的位权为 $2^{492}\sim2^{531}$。时间限制 1min，查询限制 100 次。</p><p>既然这样，那就可以从Parity Oracle那里想。可以先本地写个代码测一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=getStrongPrime(<span class="hljs-number">512</span>)<br>q=getStrongPrime(<span class="hljs-number">512</span>)<br>e=<span class="hljs-number">65537</span><br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>token=bytes_to_long(os.urandom(<span class="hljs-number">1000</span>//<span class="hljs-number">8</span>))<br>c=<span class="hljs-built_in">pow</span>((token),e,n)<br>mask=(<span class="hljs-number">2</span>**<span class="hljs-number">40</span>-<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">492</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:0256X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(token))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">E</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(x,e,n))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">D</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(x,d,n))&amp;mask<br>u=<span class="hljs-built_in">pow</span>(<span class="hljs-number">16</span>,e,n)<br>c0=c<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    dc0=D(c0)<br>    dc0&gt;&gt;=<span class="hljs-number">492</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:10X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(dc0))<br>    c0=c0*u%n<br><span class="hljs-comment">#D887DFB86E</span><br><span class="hljs-comment">#887DFB86E2</span><br><span class="hljs-comment">#87DFB86E2F</span><br><span class="hljs-comment">#7DFB86E2F7</span><br><span class="hljs-comment">#DFB86E2F73</span><br><span class="hljs-comment">#FB86E2F731</span><br><span class="hljs-comment">#FD147B8278</span><br><span class="hljs-comment">#15EE0436F4</span><br><span class="hljs-comment">#B61FBFBC52</span><br></code></pre></td></tr></table></figure><p>观察前6个数据，结果分别为：$\mathtt{D887DFB86EH,887DF86E2H,87DFB86E2FH,7DFB86E2F7H,DFB86E2F73H,FB86E2F731H}$。有很明显的移位特征，因为你对密文乘了个 $16^e$ 的系数，解密后明文也乘 $16$，对应到十六进制输出就是明显的移位特征。</p><p>由于 $t$ 是 $1000$ 位，$n$ 是 $1024$ 位，因此从第 $7$ 个数据开始，本应是 $\mathtt{B86E2F731XH}$，却变成了 $\mathtt{FD147B8278H}$，很明显，这应该是取模过的结果，也就是 $16^{6}t&#x3D;xn+y$。这里把 $16^6t$ 写成了 $n$ 进制的格式，$x,y&lt;n$。由于是乘了 $16$ 之后，才超过了 $n$，因此 $x$ 一定不超过 $15$。看看能不能搞出 $x$？</p><p><img src="/2024/12/13/24Nov4/1.png" alt="1"></p><p>可以发现，这里 $x&#x3D;1$，也就是这一次在取模前，数值为 $x$ 的一倍多，也就是 $\left \lfloor\dfrac{16^6t}{n} \right \rfloor&#x3D;1$。</p><p>再测两组可以发现：$\mathtt{FD147B8278H}$ 变为 $\mathtt{15EE0436E8H}$ 对应的 $x$ 也是 $1$ ，和 $\mathtt{15EE0436F4H}$ 有很小的误差。同理，$\mathtt{15EE0436F4H}$ 变为 $\mathtt{B61FBFC52H}$ 对应的 $x $ 为 $5$ （实际计算为 $\mathtt{B61FBFC49H}$），也就是当 $t$ 再乘 $16$ 之后，$t$ 达到了 $n$ 的 $5$ 倍。</p><p><img src="/2024/12/13/24Nov4/2.png" alt="2"></p><p>结合三个 $x$，大概可以知道：<br>$$<br>\left \lfloor\dfrac{16^8t}{n} \right \rfloor&#x3D;277<br>$$<br>（其中 $277&#x3D;\mathtt{115H}$）</p><p>因此，我们可以利用这个方法，求出 $\left \lfloor\dfrac{16^{k}t}{n}\right\rfloor$ 对应的值。这里会带有误差，但可以认为误差不超过 $16$ 就是正确的。不过问题是，如果想要获得一个非常精准的值，最后的值应该超过 $n$。并且你只有 $100$ 次机会，$16^{100}&#x3D;2^{400}$，看来不太可行。</p><p>但可以利用这个方法，一次爆破三位十六进制数，即将上面所有的 $16$ 换成 $4096$，然后我们开一个数组 $M$，记录上个解密的有效状态，再开一个数组 $T$，代表  $\left \lfloor\dfrac{4096^{k}t}{n}\right\rfloor$ 结果的 $4096$ 进制表示。</p><p>最终本地测试代码如下，耗时只有两秒，估计就算对靶机应该也不会超过 5 秒吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>sh=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">60712</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;n=&#x27;</span>)<br>n=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>n=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>n=<span class="hljs-built_in">eval</span>(n)<br>t=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>t=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>t=<span class="hljs-built_in">eval</span>(t)<br><span class="hljs-built_in">print</span>(n,t)<br><br>M=[]<br>T=[]<br>mask=(<span class="hljs-number">2</span>**<span class="hljs-number">40</span>-<span class="hljs-number">1</span>)&lt;&lt;<span class="hljs-number">492</span><br>RATE2N=<span class="hljs-number">4096</span><br>POW2NE=<span class="hljs-built_in">pow</span>(RATE2N,<span class="hljs-number">65537</span>,n)%n<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">99</span>+<span class="hljs-number">1</span>):<br><span class="hljs-comment">#print(len(M),len(T))</span><br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.send(<span class="hljs-built_in">hex</span>(t)[<span class="hljs-number">2</span>:].encode())<br>msg=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>middval=<span class="hljs-built_in">eval</span>(msg)&gt;&gt;<span class="hljs-number">492</span><br>M.append(middval)<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>):<br>t=t*POW2NE%n<br><span class="hljs-keyword">continue</span><br>prevmid=(M[-<span class="hljs-number">2</span>]&amp;<span class="hljs-number">0x000fffffffffffffffff</span>)*RATE2N<br>prevmid&lt;&lt;=<span class="hljs-number">492</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(RATE2N):<br>y=prevmid-(j*n)<br>y=y&amp;mask<br>y=y&gt;&gt;<span class="hljs-number">492</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(y-middval)&lt;RATE2N):<br>T.append(j)<br><span class="hljs-keyword">break</span><br>t=t*POW2NE%n<br><span class="hljs-built_in">print</span>(M)<br><span class="hljs-built_in">print</span>(T)<br>RR2=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(T)):<br>RR2*=<span class="hljs-number">4096</span><br>RR2+=T[i]<br>C=(RR2*n)&gt;&gt;(<span class="hljs-number">12</span>*<span class="hljs-number">99</span>)<br><br><span class="hljs-built_in">print</span>(C.bit_length())<br><br>ansstr=<span class="hljs-string">&#x27;&#123;:0250x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(C+<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(ansstr)<br>sh.sendline(ansstr.encode())<br>sh.interactive()<br><br></code></pre></td></tr></table></figure><p>测试结果图中，<code>[0,1,1166,...,3942]</code> 的数组表就表示的相除向下取整得到结果的从高位到低位的 $4096$ 进制的表示。不过最后解出来 $t$ 之后，经过测试，再加1才是正确答案。</p><p><img src="/2024/12/13/24Nov4/3.png" alt="3"></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes8</title>
    <link href="/2024/12/05/LatticeNotes8/"/>
    <url>/2024/12/05/LatticeNotes8/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087构造格LLL的笔记-8"><a href="#huangx607087构造格LLL的笔记-8" class="headerlink" title="huangx607087构造格LLL的笔记 8"></a>huangx607087构造格LLL的笔记 8</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><p>最近看到几个题目构造矩阵然后LLL的，发现自己以前的一些做法存在一些问题，因此在这边记录一下新学到的一些内容。</p><p>和前面的笔记不一样，这篇笔记中，很多题目都是以前出现过的，因此在这里对部分题目再进行一个复盘。</p><p>最近发现很多师傅都看过我博客？并且这里有些师傅还是在我退役后入坑的。（其实，我自己都不知道，自己在2021年写了写啥了）</p><h2 id="1-回顾以前的知识"><a href="#1-回顾以前的知识" class="headerlink" title="1. 回顾以前的知识"></a>1. 回顾以前的知识</h2><h3 id="1x01-几个定理"><a href="#1x01-几个定理" class="headerlink" title="1x01 几个定理"></a>1x01 几个定理</h3><p><strong>高斯启发式：</strong>在笔记2中，我们提到了高斯启发式，也就是对于一个格矩阵 $L$ ，若想在原点构造一个半径为 $r$ 的（高维）球，使得这个球中至少有一个格点向量 $\vec v$，那么对应的半径的最小值 $r$ 为</p><script type="math/tex; mode=display">r≈\sqrt{\dfrac{n}{2\pi e}}·\sqrt[n]{\det L}=\sigma (L)</script><p><strong>Hermite定理：</strong> 维数 $n$ 的每一个格矩阵 $L$ 中，其最短向量长度 $|\vec v_1|$ 满足</p><script type="math/tex; mode=display">|\vec v_1|\le\sqrt n· \sqrt[n]{\det L}</script><p><strong>Minkowski定理：</strong> 设 $L$ 是 $\mathbb R^n$ 中的一个格，$S$ 是 $\mathbb R^n$ 中的一个对称凸集，那么 $S$ 的体积 $\text{Vol }S&gt; 2^n \det L$ 时，$S$ 中就包含一个非零格向量。</p><p>这边重点是第二个的Hermite定理，因为这个定理，明确了最短向量的大小。如果忽略掉 $\sqrt n$ 这一系数，我们可以大概得出结论：</p><blockquote><p>如果待求的目标向量 $\vec v$ 的长度小于 $\sqrt[n]{\det L}$，则在解题中，构造矩阵LLL后，大概率最短向量就是所求的解。</p></blockquote><h3 id="1x02-格的构造方法回顾"><a href="#1x02-格的构造方法回顾" class="headerlink" title="1x02 格的构造方法回顾"></a>1x02 格的构造方法回顾</h3><h4 id="Example-1-单个线性关系式"><a href="#Example-1-单个线性关系式" class="headerlink" title="Example 1 单个线性关系式"></a>Example 1 单个线性关系式</h4><p>构造格主要是当确定部分未知量相对于模数 $n$ 很小，并且有较为明显线性关系时，通过矩阵的方法连接已知量和未知量，然后构造。比如在下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#T1</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>x=[(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">95</span>)|getrandbits(<span class="hljs-number">96</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>p=getPrime(<span class="hljs-number">1024</span>)<br>veca=vector(GF(p),a)<br>vecx=vector(GF(p),x)<br>y=veca*vecx<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(veca)<br></code></pre></td></tr></table></figure><p>可以看出，这里每个 $x$ 的值为 $96$ 位，然后 $a,y,p$ 均为 $1024$ 位，且这个线性关系给得非常明显：</p><script type="math/tex; mode=display">a_1x_1+a_2x_2+a_3x_3\equiv y \pmod p</script><p>去同余，可以有</p><script type="math/tex; mode=display">a_1x_1+a_2x_2+a_3x_3-y-kp=0</script><p>因为我们要求的内容是 $x$，因此我们可以暂时把 $x$ 放在前 $3$ 个。因为上面的线性关系一共是五项，因此可以有 $1\times -y$ 和 $-k\times p$ 项。因此，矩阵的最后一列可以放入 $(a_1,a_2,a_3,-y,p)$。而第四列的 $1$，是为了第五列第四行的 $y$ 匹配。这个 $1$ 也可以作为一个标志使用。因为我们结出来的向量 <strong>可能不是</strong> 最短向量，这个 $1$ 和最后的 $0$ 可以当成一个哨兵，如果我们最后LLL的后矩阵中，我们只需要筛选出倒数第二个分量为 $1$，最后一个分量为 $0$ 的向量，那么这个向量的前三个分量就 <strong>可能是</strong> $x_1,x_2,x_3$。</p><p><img src="/2024/12/05/LatticeNotes8/1.png" alt="1"></p><p>然后我们可以写个代码测试一下：</p><p><img src="/2024/12/05/LatticeNotes8/2.png" alt="2"></p><p>可以看出，最后求出的第一个向量，恰好就是三个未知的 $x$ 值。</p><h4 id="Example-2-多个线性关系式"><a href="#Example-2-多个线性关系式" class="headerlink" title="Example 2 多个线性关系式"></a>Example 2 多个线性关系式</h4><p>当然，其实也不一定要构造对角线全 $1$，因为这样的话，会严重拉低矩阵的行列式的值，这样就会导致求出来的向量不在最短的 $n$ 个向量中。如果有未知量和未知量之间的关系，也可以从未知量到未知量构造线性关系，比如下面这个题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#T2</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">1024</span>)<br>x=[getPrime(<span class="hljs-number">160</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>y=[getPrime(<span class="hljs-number">160</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>b=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>z=[(a[i]*x[i]+b[i]*y[i])%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(p)<br></code></pre></td></tr></table></figure><p>这个题的方法是 $a_ix_i+b_iy_i\equiv z_i \pmod p$ ，有两个未知量 $x,y$，并且数字都很小。如果像刚才那样构造矩阵，会导致矩阵中对角线上的 $1$ 过多，扩大了矩阵的维数，导致矩阵中的最短向量变得很短（甚至LLL后得到的是一个单位矩阵的行置换）。</p><p>由于 $x$ 和 $y$ 都很小，因此我们可以考虑从 $x$ 到 $y$ 的一个表达式，由于</p><script type="math/tex; mode=display">a_ix_i+b_iy_i\equiv z_i\pmod p</script><p>因此：</p><script type="math/tex; mode=display">y_i\equiv \frac{z_i-a_ix_i}{b_i}\pmod p</script><p>也就是：</p><script type="math/tex; mode=display">y_i\equiv Z_i-A_ix_i\pmod p</script><p>其中：</p><script type="math/tex; mode=display">Z_i\equiv \frac{z_i}{b_i}\pmod p,A_i\equiv \frac{a_i}{b_i} \pmod p</script><p>对上面的式子去同余，可以得到：</p><script type="math/tex; mode=display">y_i=Z_i-A_ix_i-k_ip</script><p>因此，可以构造下面的线性关系：</p><p><img src="/2024/12/05/LatticeNotes8/3.png" alt="3"></p><p>当然，这么看着好像有点不太顺眼，实际上，这么解出来也得不到任何有价值的信息，因为这个矩阵形状有点怪异：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp2-1</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [-diagonal_matrix(A)],<br>        [matrix(Z)],<br>        [p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-built_in">print</span>(M3L)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Output:</span><br><span class="hljs-string">[ 0  0  0]</span><br><span class="hljs-string">[ 0  0  0]</span><br><span class="hljs-string">[ 0  0  0]</span><br><span class="hljs-string">[ 0  0  0]</span><br><span class="hljs-string">[-1  0  0]</span><br><span class="hljs-string">[ 0  1  0]</span><br><span class="hljs-string">[ 0  0  1]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>不过，我们可以在这个矩阵的左上角塞一个单位矩阵，这样就是 $7\times6$，效果好多了：</p><p><img src="/2024/12/05/LatticeNotes8/4.png" alt="4"></p><p>然后运行一下这个代码看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp2-2</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Output:</span><br><span class="hljs-string">0 0 0 0 0 0 </span><br><span class="hljs-string">160 160 160 160 160 160 </span><br><span class="hljs-string">377 376 376 376 376 376 </span><br><span class="hljs-string">373 376 376 373 377 376 </span><br><span class="hljs-string">377 377 374 375 373 373 </span><br><span class="hljs-string">375 374 377 378 377 375 </span><br><span class="hljs-string">375 375 375 374 377 378 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>然后我们看一下第一行内容，经过测试没有问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exptest2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;x=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;x1=<span class="hljs-subst">&#123;M3L[<span class="hljs-number">1</span>][:<span class="hljs-number">3</span>]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;y=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;y1=<span class="hljs-subst">&#123;M3L[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>:]&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(vector(x)==M3L[<span class="hljs-number">1</span>][:<span class="hljs-number">3</span>] <span class="hljs-keyword">or</span> -vector(x)==M3L[<span class="hljs-number">1</span>][:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(vector(y)==M3L[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>:] <span class="hljs-keyword">or</span> -vector(y)==M3L[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>:])<br><span class="hljs-comment">#x=[1059875609154052394049446554149851904167774738381, 898532734274997387994126363047576903953022594169, 1461113197585095174694740018880741222582006584223]</span><br><span class="hljs-comment">#x1=(1059875609154052394049446554149851904167774738381, 898532734274997387994126363047576903953022594169, 1461113197585095174694740018880741222582006584223)</span><br><span class="hljs-comment">#y=[1325343819676712371092085429082944496756103571807, 745378211847616885781181840559736682949015771531, 800128726102435929010952852039360480436507220627]</span><br><span class="hljs-comment">#y1=(1325343819676712371092085429082944496756103571807, 745378211847616885781181840559736682949015771531, 800128726102435929010952852039360480436507220627)</span><br><span class="hljs-comment">#True</span><br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>当然，如果你有强迫症，想要构造方阵，让最短向量成为答案，当然没有问题，可以构造矩阵</p><p><img src="/2024/12/05/LatticeNotes8/6.png" alt="6"></p><p>这边只输出了每个分量的比特数，经过测试，可以发现，第一个分量就是 $(x_1,x_2,x_3,1,y_1,y_2,y_3)$，符合条件！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp2-3</span><br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix([<span class="hljs-number">1</span>]),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(vector(x)==M3L[<span class="hljs-number">0</span>][:<span class="hljs-number">3</span>] <span class="hljs-keyword">or</span> -vector(x)==M3L[<span class="hljs-number">0</span>][:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(vector(y)==M3L[<span class="hljs-number">0</span>][-<span class="hljs-number">3</span>:] <span class="hljs-keyword">or</span> -vector(y)==M3L[<span class="hljs-number">0</span>][-<span class="hljs-number">3</span>:])<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">160 160 160 1 160 160 160 </span><br><span class="hljs-string">484 484 483 482 481 484 478 </span><br><span class="hljs-string">481 483 484 483 484 484 483 </span><br><span class="hljs-string">484 483 483 485 484 483 481 </span><br><span class="hljs-string">485 484 484 485 480 481 484 </span><br><span class="hljs-string">484 484 484 484 483 484 485 </span><br><span class="hljs-string">485 483 485 484 484 485 485 </span><br><span class="hljs-string">True</span><br><span class="hljs-string">True</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Example-3-第一题的加强版"><a href="#Example-3-第一题的加强版" class="headerlink" title="Example 3 第一题的加强版"></a>Example 3 第一题的加强版</h4><p>如果我们改一下Example 1，啥也没有改，就把第一行的 $x$ 每个分量从 $96$ 比特改成 $240$ 比特：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#T3</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>x=[getPrime(<span class="hljs-number">240</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>p=getPrime(<span class="hljs-number">1024</span>)<br>veca=vector(GF(p),a)<br>vecx=vector(GF(p),x)<br>y=veca*vecx<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(veca)<br></code></pre></td></tr></table></figure><p>现在如果我们构造那个代码，会怎样呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp1</span><br>M=[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">0</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">1</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">2</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-y],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]<br>]<br>M=Matrix(ZZ,M)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">204 204 202 204 203 </span><br><span class="hljs-string">204 202 204 204 203 </span><br><span class="hljs-string">205 203 205 203 198 </span><br><span class="hljs-string">203 206 202 204 201 </span><br><span class="hljs-string">204 201 203 204 205 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>好像解不出啥东西来了！我们期待的 $(x_1,x_2,x_3,1,0)$ 对应的比特数分别为 $(240,240,240,1,0)$，这里得到的向量的比特数都是 $204$ 左右。如果我们回顾定理，可以发现 $\log_2 \det M=\log_2 p=1024$，矩阵阶数为 $5$，因此矩阵中最短向量长度是 $1024/5=205$ 比特，最后事实也确实如此。我们期待的向量并不是最短的 $5$ 个向量。</p><p>因为这个矩阵是三角矩阵，因此以前我的操作就是在最后一列乘上一个很大的数字（可以用定理算出来，但我几乎是乱乘的），然后我们期待的向量就又在其中了，因为这个时候矩阵行列式的值达到了 $2^{10000}$ 以上，最短向量大小范围被扩大，因此我们期待的向量也就出来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp3</span><br>M=[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">0</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">1</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a[<span class="hljs-number">2</span>]],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-y],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]<br>]<br>C=<span class="hljs-number">2</span>**<span class="hljs-number">9999</span><br>M=Matrix(ZZ,M)*diagonal_matrix(ZZ,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,C])<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">240 240 240 1 0 </span><br><span class="hljs-string">258 260 260 260 0 </span><br><span class="hljs-string">261 261 261 259 0 </span><br><span class="hljs-string">260 259 261 262 0 </span><br><span class="hljs-string">260 259 259 260 10000 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Example-4-第二题的加强版"><a href="#Example-4-第二题的加强版" class="headerlink" title="Example 4 第二题的加强版"></a>Example 4 第二题的加强版</h4><p>同理，我们改一下Example 2，$x$ 和 $y$ 大小从 $2^{160}$ 变成 $2^{450}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#T4</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">1024</span>)<br>x=[getPrime(<span class="hljs-number">450</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>y=[getPrime(<span class="hljs-number">450</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>b=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>z=[(a[i]*x[i]+b[i]*y[i])%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(p)<br></code></pre></td></tr></table></figure><p>然后我们再看看会怎样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp2-3</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix([<span class="hljs-number">1</span>]),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">439 438 436 438 436 434 438 </span><br><span class="hljs-string">439 438 437 438 436 437 438 </span><br><span class="hljs-string">438 438 438 438 438 434 435 </span><br><span class="hljs-string">438 434 439 435 436 439 437 </span><br><span class="hljs-string">436 438 437 436 438 436 439 </span><br><span class="hljs-string">433 438 439 439 439 437 436 </span><br><span class="hljs-string">438 437 439 439 434 438 438 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到，因为矩阵大小为 $7\times7$，行列式值为 $p^3$，因此最短向量长度为 $p^{3/7}$，对应长度也就是 $438$ 比特左右，可以看出，最后得到的$7$ 个向量长度都是 $438$ 比特左右。</p><p>然后以前我做到这边，直接大力出奇迹，还真别说，最后解出来，最后一个向量还真是答案。。。</p><p><img src="/2024/12/05/LatticeNotes8/7.png" alt="7"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp4</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix([<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20000</span>]),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">0 0 511 0 0 0 510 </span><br><span class="hljs-string">508 0 0 0 512 0 0 </span><br><span class="hljs-string">0 512 0 0 0 512 0 </span><br><span class="hljs-string">0 512 0 0 0 512 0 </span><br><span class="hljs-string">513 0 0 0 509 0 0 </span><br><span class="hljs-string">0 0 512 0 0 0 513 </span><br><span class="hljs-string">450 450 450 20001 450 450 450 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>然后，好像就没啥然后了，似乎这么做还挺对的，直到我遇到。。。</p><h4 id="Example-5-出现问题"><a href="#Example-5-出现问题" class="headerlink" title="Example 5 出现问题"></a>Example 5 出现问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#T5</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p=getPrime(<span class="hljs-number">1024</span>)<br>x=[getPrime(<span class="hljs-number">333</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>y=[getPrime(<span class="hljs-number">633</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>b=[getrandbits(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>z=[(a[i]*x[i]+b[i]*y[i])%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(p)<br></code></pre></td></tr></table></figure><p>然后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp4</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix([<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">20000</span>]),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">0 0 511 0 0 0 509 </span><br><span class="hljs-string">510 0 0 0 512 0 0 </span><br><span class="hljs-string">0 511 0 0 0 511 0 </span><br><span class="hljs-string">0 512 0 0 0 512 0 </span><br><span class="hljs-string">512 0 0 0 512 0 0 </span><br><span class="hljs-string">0 0 512 0 0 0 514 </span><br><span class="hljs-string">509 512 511 20001 506 510 512 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>怎么回事呢？</p><h2 id="2-观察解出的向量特点"><a href="#2-观察解出的向量特点" class="headerlink" title="2.观察解出的向量特点"></a>2.观察解出的向量特点</h2><p>观察一下前面LLL生成的每个向量各个分量的比特长度，我们可以发现，Example1,2两个例子中，解出来的向量每个分量的比特数都比较近似。这甚至也包括了Example 3,4中解出来的部分向量的特性。</p><p>而之所以我们可以在Example 3,4中，通过加入一个远大于模数的数字，最后依然能够得到答案，是因为那个矩阵中所有行向量中，只有那唯一一个行向量对应的分量为非 $0$。比如Example 4中构造的矩阵，7​ 个行向量中，只有第 ​4​ 个行向量的第 4 分量为非 0，这是一个bug级别的设置，因为当那个分量值为 $2^{20000}$ 后，LLL后，矩阵中第 4 个分量必须是 $2^{20000}$ 的倍数，且至少有一个向量的第 4 分量不为 0。因此，格中满足第 4 分量非 0 的最短向量的第 4 分量只能为 $2^{20000}$，至于其他的分量，那也只能让其尽量短了。因此最后LLL之后，$2^{20000}$ 就保存下来了。</p><p>并且我们也能发现，加入 $2^{20000}$ 后，包含 $2^{20000}$ 项的那个向量的其他几个分量长度也比较接近。并且抛开对应矩阵的第四分量不看，其他向量的比特数也比较接近。而之所以会出现这种情况，可以这么想：</p><blockquote><p>已知两个向量 $\log_2\vec v_1=(500,600,700)$ 和 $\log_2 \vec v_2=(600,600,600)$，很显然，$\vec v_1$ 的长度远远长于 $\vec v_2$，因为向量长度是所有分量的平方和开根号。越大的数字平方后，会变得更大，而此时小数字相对于大数字就可以被忽略了！</p></blockquote><p>请注意，这两个向量前面加了 $\log_2$ 符号，$(500,600,700)$ 和 $(600,600,600)$ 都是取对数后的结果，这里 $700$ 代表的数字比 $600$ 代表的数字大 $2^{100}$ 倍！那么最后算长度，$\vec v_1$ 的长度就是 $700$ 位，而 $\vec v_2$ 的长度大概是 $601$ 位，这样明确的感觉就来了！换句话说，LLL格基归约时，如果<strong>遇到某个分量较大时</strong>，会通过线性计算，扩大较小的分量，来降低较大的分量的大小，<strong>因为LLL是要求最短向量，也就是每个向量的平方和尽量短，因此，最后得到的向量，每个分量的结果就会趋近于平均</strong>。</p><p>而Example 5中出现的问题，就是 $x$ 为 $333$ 位，$y$ 为 $633$ 位。 两个数字之间不平衡所导致的，因此我们可以通过乘入一个系数的方法，将该向量中的每一个分量凑平衡。</p><p>由于我们的目标向量为 $(x_1,x_2,x_3,1,y_1,y_2,y_3)$，每个数字比特数分别为 $(333,333,333,1,633,633,633)$，因此可以对构造的原矩阵的前 $3$ 列乘入一个 $2^{300}$，第四列乘一个 $2^{633}$，最后得到的目标向量就变成了：</p><script type="math/tex; mode=display">(2^{300}x_1,2^{300}x_2,2^{300}x_3,2^{633},y_1,y_2,y_3)</script><p>这个向量每个分量均为 $633$ 位，原矩阵为 $7$ 阶方阵，此时乘入这个平衡系数后，矩阵的行列式满足：</p><script type="math/tex; mode=display">\log_2 \det M=300\times3+633+1024\times3=4605</script><p>因此，最短向量的长度大概为：</p><script type="math/tex; mode=display">\log_2 |\vec v_1|<\frac{4605}{7}=657.85</script><p>而我们所求的向量，每个分量均为 $633$ 位，因此其长度大概为 $2^{633}\sqrt7$，对应位数为 $635$ 位不到，比 $657.85$ 小，因此可能为最短向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#exp5</span><br>A=[a[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>Z=[z[i]*inverse(b[i],p)%p <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>M=block_matrix(ZZ,<br>    [<br>        [identity_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),-diagonal_matrix(A)],<br>        [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),matrix([<span class="hljs-number">1</span>]),matrix(Z)],<br>        [zero_matrix(<span class="hljs-number">3</span>),zero_matrix(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),p*identity_matrix(<span class="hljs-number">3</span>)]<br>    ]<br>)<br>M=M*diagonal_matrix(ZZ,[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">300</span>]*<span class="hljs-number">3</span>+[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">633</span>]+[<span class="hljs-number">1</span>]*<span class="hljs-number">3</span>)<br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M3L.ncols()):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">abs</span>(M3L[i][j]).nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">633 633 633 634 633 633 633 </span><br><span class="hljs-string">657 661 657 658 657 660 658 </span><br><span class="hljs-string">660 659 658 659 661 658 659 </span><br><span class="hljs-string">658 658 662 658 658 657 660 </span><br><span class="hljs-string">656 661 659 661 660 660 662 </span><br><span class="hljs-string">659 660 660 662 661 662 661 </span><br><span class="hljs-string">662 659 658 659 662 658 659 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>第一行很明显是答案（呃，因为 $2^{633}$ 比特数为 $634$），当然我们可以验证一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">vans=<span class="hljs-built_in">list</span>(M3L[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">abs</span>(vans[<span class="hljs-number">3</span>])==(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">633</span>)<br>xguess=vans[:<span class="hljs-number">3</span>]<br>yguess=vans[<span class="hljs-number">4</span>:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    xguess[i]=<span class="hljs-built_in">abs</span>(xguess[i])&gt;&gt;<span class="hljs-number">300</span><br>    yguess[i]=<span class="hljs-built_in">abs</span>(yguess[i])<br><span class="hljs-built_in">print</span>(xguess==x,yguess==y)<br><span class="hljs-comment">#True True</span><br></code></pre></td></tr></table></figure><h2 id="3-网鼎杯2024半决赛-RSA加密分析"><a href="#3-网鼎杯2024半决赛-RSA加密分析" class="headerlink" title="3. [网鼎杯2024半决赛] RSA加密分析"></a>3. [网鼎杯2024半决赛] RSA加密分析</h2><p>之所以写这篇博客，是因为当时wdb半决赛的时候，自己没考虑平衡常数，结果构造的矩阵左上角为 $1$，怎么解也解不出东西来。。。</p><p>还好，这个题只有 $1$ 解，本质还是一个套娃题。但CTF只有4h，最后做起来还挺繁琐的。</p><h3 id="3x01-题目大意"><a href="#3x01-题目大意" class="headerlink" title="3x01 题目大意"></a>3x01 题目大意</h3><p>先看看题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><br>k = <span class="hljs-number">3</span><br>d = k/(<span class="hljs-number">2</span>*(k+<span class="hljs-number">1</span>))<br>ns = []<br>pqs = []<br>es = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    <span class="hljs-keyword">if</span> p &lt; q:<br>        tmp = p<br>        p = q<br>        q = tmp<br>    n = p*q<br>    ns.append(n)<br>    pqs.append((p,q))<br><br>n = <span class="hljs-built_in">min</span>(ns)<br>x = random.randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">int</span>(n^(d/<span class="hljs-number">2</span>)))<br>x = next_prime(x)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    p,q = pqs[i][<span class="hljs-number">0</span>],pqs[i][<span class="hljs-number">1</span>]<br>    bound1 = <span class="hljs-built_in">int</span>((p-q)/(<span class="hljs-number">3</span>*(p+q)) * x * n ^ <span class="hljs-number">0.25</span>)<br>    bound2 = <span class="hljs-built_in">int</span>((p-q)/(<span class="hljs-number">3</span>*(p+q)) * x^<span class="hljs-number">2</span> * n ^ <span class="hljs-number">0.25</span>)<br>    z = random.randint(bound1,bound2)<br>    f = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    e = inverse(x^<span class="hljs-number">2</span>,f) * z % f<br>    es.append(e)<br><br>e = <span class="hljs-number">8462913</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag),e,ns[<span class="hljs-number">0</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ns=<span class="hljs-subst">&#123;ns&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;es=<span class="hljs-subst">&#123;es&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c=<span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">ns=[58456238154727772714762362790039415372652580738847549549926175214592421074440425380491278175531057453959583518365006871715668115289674464868754600641087664868445977308497244134179400977293896807231964047365956545629327100737851868274388108150918741474301542596310528990700043925342513137054619092876834352167, 77621328849675766747673031143217563980503830449890233197117569566535170499356584333526498228802079135043121885950830320777642529199704224484173792215691924850086027618183393165197503325417741686635820334799489140360184827244176669486536901652827052817389390205607840551799799037689580359943641014734459153393, 112244920700186260026594736958318991062998987080230137582151100770199379608284829383065111800934933346946496041561749555085922429662611986339400029890877247514987095240380019377389184545006798594193383230298132838994539491402564579629017309643629910561998268286162916487705908044261914142200286678017692930877]</span><br><span class="hljs-string">es=[46762963588977775648213636278524171408894671002158172701955774077187382885695296449518850546775920334764033057745226744111631183010556541467024035131602309988991836959736948179491431343087734419406823467043032520956443072556932946767546576469286010676651317873358203560021064830688914958086524112915123700678, 49605058941818136068558533413619424099600243928109466352604646203354430655695939177245076016870792265350960174089601299549033530643078866868937787258274475767441534991912769995268058506952466739575911255510940326565376471493045685544056383561868628029099619187607579109612157304977780126730283103824111801708, 35433601810279274137096137736120773703247868305827931187532982974242279082633517463016086358856291932337981126992048059591164336008738979183437333221010305682689432537562502148059203087673302900990705589870381203411821061168753251557946997898741497047442934600089950257888693394999451561437497637827070063398]</span><br><span class="hljs-string">c=45042826649205831967869785980034342377048541926664036544108272069702081866501394370318117629151408517708467341069558466115205805860156690204194355692872459196902123082567148537856941845388225814307822482217762135547080677443326657146552580523747535577686386312386011950929734955156100305548239483424574706729</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>根据题目数据的规模，大致可以得到： $x$ 是 $192$ 位，因此 $x^2$ 是 $384$ 位。<code>bound1</code> 是 $192+256=448$ 位， <code>bound2</code> 是$384+512=640$ 位，因此 <code>bound1</code> 相对于 <code>bound2</code> 可以忽略不计。那么，随机数 $z$ 就是 $896$ 位。因此第一步就是求 $x$。</p><h3 id="3x02-求解-x"><a href="#3x02-求解-x" class="headerlink" title="3x02 求解 $x$"></a>3x02 求解 $x$</h3><p> 题目给出的关系式为：</p><script type="math/tex; mode=display">e_i\equiv \frac{z_i}{x^2} \pmod {f_i}</script><p>其中，$f_i=(p_i-1)(q_i-1)$。</p><p>因此，对上面式子，去同余化简，得</p><script type="math/tex; mode=display">e_ix^2-z_i-kf_i=0</script><p>由于 $f_i$ 与 $n_i$ 之间的关系为 $f_i=n_i-(p_i+q_i)+1$，设 $y_i=p_i+q_i$，那么 $y_i$ 的比特数为 $513$。上面的式子可以化成</p><script type="math/tex; mode=display">e_ix^2-z_i-kn_i+ky_i-1=0</script><p>由于 $e_ix^2-z_i=kf_i$ ，$e_i,x^2$ 分别为 $1024$ 和 $384$ 位，因此 $e_ix^2$ 的值（不取模）是 $1408$ 位，$z_i$ 是 $635$ 位，相对于 $1408$ 位可以忽略不计。因此，$kf_i$ 也应当是 $1408$ 位，由于 $f$ 是 $1408$ 位，因此 $k$ 和 $x^2$ 同阶，也是 $384$ 位。且 $k$ 在知道 $x$ 后是可求的，其值为：</p><script type="math/tex; mode=display">k_i=\frac{e_ix^2-z_i}{f_i}=1+ \left \lfloor\frac{e_ix^2}{n_i} \right\rfloor</script><p>同时，我们知道了 $y_i$ 是 $513$ 位，因此 $ky_i$ 为 $513+384=899$ 位。相对于格中 $1024$ 的量，还是比较小的。所以最终的等式为：</p><script type="math/tex; mode=display">e_ix^2-k(n_i+1)=z_i-k_iy_i</script><p>$z_i-ky_i$ 的位数为 $899$ 位，符合预期。所以：</p><p><img src="/2024/12/05/LatticeNotes8/8.png" alt="8"></p><p>然后就GG了，卡了我4h。</p><p>正确做法：因为 $x$ 是 $384$ 位，带 $z_i-ky_i$ 的量是 $899$ 位，中间差了 $515$ 位，因此得带个平衡系数 $2^{515}$。</p><p><img src="/2024/12/05/LatticeNotes8/9.png" alt="9"></p><p>然后就出了。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>M=[<br>    [<span class="hljs-number">2</span>**<span class="hljs-number">515</span>,es[<span class="hljs-number">0</span>],es[<span class="hljs-number">1</span>],es[<span class="hljs-number">2</span>]],<br>    [<span class="hljs-number">0</span>,ns[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,ns[<span class="hljs-number">1</span>],<span class="hljs-number">0</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,ns[<span class="hljs-number">2</span>]]<br>]<br>M=Matrix(ZZ,M)<br>M3L=M.LLL()<br>x2=(<span class="hljs-built_in">abs</span>(M3L[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])&gt;&gt;(<span class="hljs-number">515</span>))<br><span class="hljs-keyword">assert</span> x2.is_square()<br>x=x2.nth_root(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> isPrime(x)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-comment">#1696237025993008832375257492068228509280454088630659960513</span><br></code></pre></td></tr></table></figure><h3 id="3x03-求-y-的值"><a href="#3x03-求-y-的值" class="headerlink" title="3x03 求 $y$ 的值"></a>3x03 求 $y$ 的值</h3><p>有了 $x$ 之后，就可以把三个 $k$ 也给求出来，但我们实际上只需要第一组数据就行。</p><p>目前我们已知的内容为 $x,k_1,z_1-k_1y_1$，目标是求 $y_1$。</p><p>根据前面已知的等式：</p><script type="math/tex; mode=display">e_1x^2-z_1-k_1n_1+k_1y_1-1=0</script><p>变形一下，可以有</p><script type="math/tex; mode=display">e_1x^2-k_1(n_1+1)-z_1-k_1y_1=0</script><p>这个式子中，只有 $y_1,z_1$ 为未知量，其中 $z_1$ 为 $640$ 位， $y_1$ 为 $513$ 位，差值为 $127$。并且还要考虑 已知项 $e_1x^2-k_1(n_1+1)$，对应向量分类中的常数项 $1$。</p><p>因此继续构造：</p><p><img src="/2024/12/05/LatticeNotes8/11.png" alt="11"></p><p>简单瞄一下：对角线元素约为 $127+640=767$ ，这个不是方阵。感觉有点不太够的样子。</p><p>在这里，哨兵元素为 $2^{640}$ 和 $0$，因此我们LLL之后，找第三分量为 $2^{640}$，第四分量为 $0$ 的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">k=<span class="hljs-number">1</span>+(((es[<span class="hljs-number">0</span>])*x)//ns[<span class="hljs-number">0</span>])<br>zky=M3L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>G=[<br>    [<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">127</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-k],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">640</span>,es[<span class="hljs-number">0</span>]*x**<span class="hljs-number">2</span>-k*(ns[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)]<br>]<br>G=matrix(ZZ,G)<br>G=G<span class="hljs-comment">#*diagonal_matrix(ZZ,[1,1,1,2**2000])</span><br>G3L=G.LLL()<br>vans=<span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G3L:<br>    <span class="hljs-keyword">if</span>(v[<span class="hljs-number">2</span>]==<span class="hljs-number">2</span>**<span class="hljs-number">640</span> <span class="hljs-keyword">and</span> v[<span class="hljs-number">3</span>]==<span class="hljs-number">0</span>):<br>        vans=v<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(vans)<br></code></pre></td></tr></table></figure><p>结果没找到，然后输出 <code>G3L</code> 的结果看一眼，发现一个向量满足第三分量是 $2^{640}$，另一个向量满足第四分量是 $0$。</p><p>看来是界不太够了，那就再来一波大力出奇迹。</p><p><img src="/2024/12/05/LatticeNotes8/12.png" alt="12"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">k=<span class="hljs-number">1</span>+(((es[<span class="hljs-number">0</span>])*x*x)//ns[<span class="hljs-number">0</span>])<br>zky=M3L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>G=[<br>    [<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">127</span>,<span class="hljs-number">20</span>,<span class="hljs-number">0</span>,-k],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">640</span>,es[<span class="hljs-number">0</span>]*(x**<span class="hljs-number">2</span>)-k*(ns[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)]<br>]<br>G=matrix(ZZ,G)<br>G=G*diagonal_matrix(ZZ,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>**<span class="hljs-number">20000</span>])<br><span class="hljs-comment">#print(G)</span><br>G3L=G.LLL()<br>vans=<span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> G3L:<br>    <span class="hljs-keyword">if</span>(v[<span class="hljs-number">2</span>]==<span class="hljs-number">2</span>**<span class="hljs-number">640</span> <span class="hljs-keyword">and</span> v[<span class="hljs-number">3</span>]==<span class="hljs-number">0</span>):<br>        vans=v<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(vans)<br>y=<span class="hljs-built_in">abs</span>(vans[<span class="hljs-number">0</span>])&gt;&gt;<span class="hljs-number">127</span><br>z=vans[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(y.nbits(),z.nbits())<br><span class="hljs-comment">#(-2601742433829735205717510958984597054031885650700522469656590841975973352498358057919092577419846355269586088827959437508632269659680389249804349835135992919707882192966293703794747575323590656, -191810479825992932776976119516271570787555880246177445289447710773949638278444955289971892948555085597643726446747043, 4562440617622195218641171605700291324893228507248559930579192517899275167208677386505912811317371399778642309573594407310688704721375437998252661319722214188251994674360264950082874192246603776, 0)</span><br><span class="hljs-comment">#513 387</span><br></code></pre></td></tr></table></figure><p>$y$ 对应的值是 $513$ 位，貌似是正确的，但 $z$ 不对。但我们并不需要那个 $z$。但输出 $y$ 看一下，发现 $y$ 是个奇数。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(y)<br><span class="hljs-comment">#15291667666307414493036951046107275741397940767822287922559621898054774057554431022160493431539991508171319851807097492122079767748903000613100351624105777</span><br></code></pre></td></tr></table></figure><p>说明 $y$ 可能是 $p_1+q_1$ 的高位。由于后面只涉及第一组数据了，因此，下标 $1,2,3$ 将再下一小节被省略。</p><h3 id="3x04-求-p-值"><a href="#3x04-求-p-值" class="headerlink" title="3x04 求 $p$ 值"></a>3x04 求 $p$ 值</h3><p>用题目代码生成其他几组数据测一下，$y$ 确实为 $p+q$ 高位，最低 $254$ 位有偏差，也就是我们知道了 $p+q$ 位数的一半。那么构建方程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">58456238154727772714762362790039415372652580738847549549926175214592421074440425380491278175531057453959583518365006871715668115289674464868754600641087664868445977308497244134179400977293896807231964047365956545629327100737851868274388108150918741474301542596310528990700043925342513137054619092876834352167</span><br>y=<span class="hljs-number">15291667666307414493036951046107275741397940767822287922559621898054774057554431022160493431539991508171319851807097492122079767748903000613100351624105777</span><br>R.&lt;x&gt; = PolynomialRing(RealField(<span class="hljs-number">2048</span>))<br>f = x * ((y) - x) - n<br>res = f.roots()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">longdouble2int</span>(<span class="hljs-params">x</span>):<br>    x=<span class="hljs-built_in">str</span>(x)<br>    x=x.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    x[<span class="hljs-number">1</span>]=x[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;e&#x27;</span>)<br>    <span class="hljs-keyword">return</span> Integer(x[<span class="hljs-number">0</span>]+x[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][:<span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(longdouble2int(i[<span class="hljs-number">0</span>]))<br><span class="hljs-comment">#7595466686419558151205913432118661460574378336265188601308332178368424478703277500529523587366925897212947299535668041397861697290034233117986300118079322</span><br><span class="hljs-comment">#7696200979887856341831037613988614280823562431557099321251289719686349578851153521630969844173065610958372552271429450724218070458868767495114051506026454</span><br></code></pre></td></tr></table></figure><p>得到了 $p$ 的高位和 $q$ 的高位，这个值大概有一半是精确的。尝试爆破 $12$ 位，应该能出解，大概耗时为一小时左右（刚好前几天搞了个58一年的2h2g的服务器）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python">ph=<span class="hljs-number">7696200979887856341831037613988614280823562431557099321251289719686349578851153521630969844173065610958372552271429450724218070458868767495114051506026454</span><br>n=<span class="hljs-number">58456238154727772714762362790039415372652580738847549549926175214592421074440425380491278175531057453959583518365006871715668115289674464868754600641087664868445977308497244134179400977293896807231964047365956545629327100737851868274388108150918741474301542596310528990700043925342513137054619092876834352167</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p4</span>):<br>    pbits = <span class="hljs-number">512</span><br>    kbits = pbits - p4.nbits()<br>    p4 = p4 &lt;&lt; kbits<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    f = x + p4<br>    roots = f.small_roots(X=<span class="hljs-number">2</span>**kbits, beta=<span class="hljs-number">0.42</span>,epsilon=<span class="hljs-number">0.012</span>)<br>    <span class="hljs-keyword">if</span> roots:        <br>        p = p4 + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>        q = n//p<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">f&#x27;p: <span class="hljs-subst">&#123;p&#125;</span>\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;q: <span class="hljs-subst">&#123;q&#125;</span>\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>ph=ph&gt;&gt;<span class="hljs-number">256</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve1</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">11</span>)):<br>        <span class="hljs-keyword">if</span>(solve((ph&lt;&lt;<span class="hljs-number">12</span>)|i)):<br>            <span class="hljs-keyword">return</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve2</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">11</span>,<span class="hljs-number">2</span>**<span class="hljs-number">12</span>)):<br>        <span class="hljs-keyword">if</span>(solve((ph&lt;&lt;<span class="hljs-number">12</span>)|i)):<br>            <span class="hljs-keyword">return</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process, current_process<br>PROC=[]<br>PROC.append(Process(target=solve1))<br>PROC.append(Process(target=solve2))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    PROC[i].start()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    PROC[i].join()<br></code></pre></td></tr></table></figure><p>然后跑了20分钟后，发现服务器负载突然降到了50%，看来是一个进程出了结果，打开result.txt查看结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p: <span class="hljs-number">7696200979887856341831037613988614280823562431557099321251289719686349578851157595313091133333376255237947592610103860940743200558583228583143108125315529</span><br>q: <span class="hljs-number">7595466686419558151205913432118661460574378336265188601308332178368424478703273480167149453312906478797521330243646557948961908036589158891684701262055023</span><br></code></pre></td></tr></table></figure><h3 id="3x05-求最终flag"><a href="#3x05-求最终flag" class="headerlink" title="3x05 求最终flag"></a>3x05 求最终flag</h3><p>发现 $e=8462913$，不是默认的 $65537$ 或 <code>getPrime</code> 得到的数字，看来大事不妙，果然，有 $e=3 \times 2820971$。然后发现：$p-1,q-1$ 都是 $3$ 的倍数，还得把 AMM算法调出来。</p><p>得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cbrtcp=&#123;<span class="hljs-number">5457734212209914607812625325490750749661326921613441346478932389873269831927640313433909213645212354490723810811111424420872595194416663018676652425769843</span>, <span class="hljs-number">2078396872589066084890946019870420517722364119774927920595224513472857788525543374144267568390931958280362619350258000147602830214465571608914879090611743</span>, <span class="hljs-number">160069895088875649127466268627443013439871390168730054177132816340221958397973907734914351297231942466861162448734436372267775149700993955551576608933943</span>&#125;<br>cbrtcq=&#123;<span class="hljs-number">2673359237708120727862398760587900169638391052868557052175750873601678618266229531730282702839716628363656139382035102683850049531165943543150164597396242</span>, <span class="hljs-number">4480948863344673380560358841432740594822756100315860318495558241131293070924509985646332250166426369654468055542550092440114644741178753450051611037785301</span>, <span class="hljs-number">441158585366764042783155830098020696113231183080771230637023063635452789512533962790534500306763480779397135319061362824997213764244461898482925626873480</span>&#125;<br></code></pre></td></tr></table></figure><p>结果发现，$p-1$ 竟然也是 $2820971$ 的倍数</p><p>因为512比特对应64字节，因此可以尝试盲猜flag没有64字节。。。然后就出了 。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>n=p*q<br>e=<span class="hljs-number">2820971</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cbrtcq:<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(i,inverse(e,q-<span class="hljs-number">1</span>),q)))<br><span class="hljs-comment">#flag&#123;N3w_Attacks_4_key_equat1ons&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>那如果flag超过了64字节呢？</p><p>用AMM算法，对 $p$ 再开根 $2820971$ 次根，得到一个特解 $x^*$。然后再求 $x^{2820971}\equiv 1\pmod p$ 的 $2820971$ 次根，能得到 $2820971$ 个满足条件的数据（这个很简单，用群论的知识就可以解决）。然后再CRT。耗时约为 $3^2\times2820971$，也就是 $2538$ 万次CRT。。。</p></blockquote><h2 id="4-关于small-roots-的调参"><a href="#4-关于small-roots-的调参" class="headerlink" title="4. 关于small_roots 的调参"></a>4. 关于small_roots 的调参</h2><p>自己测试了一下，实验环境为 Sagemath 10.4。</p><p><code>f.small_roots</code> 有三个参数： <code>X,beta,epsilon</code>，分别代表结果的上界、模数因子的下界和求解步长。其中， $X$ 越大、 $\beta$ 越大、$\epsilon$ 越小，得到结果的概率越高，但耗时也越长。。。</p><p>在2h2g的云服务器上跑的。得到的结果如下：</p><h3 id="4o01-beta-0-4的实验结果"><a href="#4o01-beta-0-4的实验结果" class="headerlink" title="4o01 beta=0.4的实验结果"></a>4o01 beta=0.4的实验结果</h3><div class="table-container"><table><thead><tr><th>unknownbit</th><th>240</th><th>241</th><th>242</th><th>243</th><th>244</th><th>245</th><th>246</th><th>247</th><th>248</th><th>249</th><th style="text-align:left">250</th></tr></thead><tbody><tr><td>$\beta$</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td>0.4</td><td style="text-align:left">0.4</td></tr><tr><td>$1000\epsilon$</td><td>22</td><td>20</td><td>18</td><td>17</td><td>16</td><td>14</td><td>12</td><td>11</td><td>10</td><td>8</td><td style="text-align:left">7</td></tr><tr><td>timecost(s)</td><td>0.09</td><td>0.15</td><td>0.19</td><td>0.23</td><td>0.34</td><td>0.53</td><td>1.08</td><td>1.53</td><td>2.81</td><td>9.6</td><td style="text-align:left">13.6</td></tr></tbody></table></div><h3 id="4o02-beta-0-495-的实验结果"><a href="#4o02-beta-0-495-的实验结果" class="headerlink" title="4o02 beta=0.495 的实验结果"></a>4o02 beta=0.495 的实验结果</h3><div class="table-container"><table><thead><tr><th>unknownbit</th><th>248</th><th>249</th><th>250</th><th>251</th><th>252</th><th>253</th></tr></thead><tbody><tr><td>$\beta$</td><td>0.495</td><td>0.495</td><td>0.495</td><td>0.495</td><td>0.495</td><td>0.495</td></tr><tr><td>$1000\epsilon$</td><td>13</td><td>12</td><td>10</td><td>$9\sim8$</td><td>$7.5\sim6$</td><td>$5.5\sim5$</td></tr><tr><td>timecost(s)</td><td>3.71</td><td>6.42</td><td>16.9</td><td>$32\sim60$</td><td>$76\sim308$</td><td>$544\sim1400$</td></tr></tbody></table></div><h3 id="4o03-beta-0-498-的实验结果"><a href="#4o03-beta-0-498-的实验结果" class="headerlink" title="4o03 beta=0.498+ 的实验结果"></a>4o03 beta=0.498+ 的实验结果</h3><div class="table-container"><table><thead><tr><th>unknownbit</th><th>252</th><th>253</th><th>254</th><th>255</th></tr></thead><tbody><tr><td>$\beta$</td><td>0.498</td><td>0.498</td><td>0.499</td><td>0.499</td></tr><tr><td>$1000\epsilon$</td><td>$7.5\sim6.5$</td><td>$5.5\sim4.5$</td><td>$3.5\sim3$</td><td>未测</td></tr><tr><td>timecost(s)</td><td>$92\sim238$</td><td>$600\sim2200$</td><td>$5200\sim20000^+$</td><td>未测</td></tr></tbody></table></div><p>前三个的测试代码（只修改for ub，for betak 和for epsk 中的内容）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Sample</span>(<span class="hljs-params">ubits</span>):<br>    p=getPrime(<span class="hljs-number">512</span>)<br>    q=getPrime(<span class="hljs-number">512</span>)<br>    n=p*q<br>    <span class="hljs-keyword">return</span> n,p&gt;&gt;ubits<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p4,n</span>):<br>    pbits = <span class="hljs-number">512</span><br>    kbits = pbits - p4.nbits()<br>    p4 = p4 &lt;&lt; kbits<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    f = x + p4<br>    <span class="hljs-keyword">for</span> betak <span class="hljs-keyword">in</span> [<span class="hljs-number">0.499</span>]:<br>        <span class="hljs-keyword">for</span> epsk <span class="hljs-keyword">in</span>[<span class="hljs-number">0.0045</span>,<span class="hljs-number">0.004</span>,<span class="hljs-number">0.0035</span>,<span class="hljs-number">0.003</span>,<span class="hljs-number">0.0025</span>,<span class="hljs-number">0.002</span>,<span class="hljs-number">0.0015</span>]:<br>            <span class="hljs-built_in">print</span>(epsk)<br>            stime=datetime.now()<br>            roots = f.small_roots(X=<span class="hljs-number">2</span>**kbits, beta=betak,epsilon=epsk)<br>            <span class="hljs-keyword">if</span> roots:        <br>                p = p4 + <span class="hljs-built_in">int</span>(roots[<span class="hljs-number">0</span>])<br>                q = n//p<br>                <span class="hljs-keyword">assert</span> p!=n <span class="hljs-keyword">and</span> q!=n <span class="hljs-keyword">and</span> p!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> q!=<span class="hljs-number">1</span><br>                ttime=datetime.now()<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result0499-254255&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;kbits&#125;</span>,&#x27;</span>+<span class="hljs-string">&#x27;&#123;:.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(betak)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-string">&#x27;&#123;:.4f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(epsk)+<span class="hljs-string">&#x27;,&#x27;</span>+<span class="hljs-built_in">str</span>((ttime-stime).total_seconds())+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">for</span> ub <span class="hljs-keyword">in</span> [<span class="hljs-number">254</span>,<span class="hljs-number">255</span>]:<br>    <span class="hljs-built_in">print</span>(datetime.now())<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        n,ph=Sample(ub)<br>        n,ph=Integer(n),Integer(ph)<br>        <span class="hljs-built_in">print</span>(datetime.now())<br>        <span class="hljs-built_in">print</span>(solve(ph,n))<br></code></pre></td></tr></table></figure><h3 id="4o04-flatter"><a href="#4o04-flatter" class="headerlink" title="4o04 flatter"></a>4o04 flatter</h3><p>根据<a href="https://blog.csdn.net/qwerzbc66?type=blog">striving</a> ✌的提示，可以安装<a href="https://github.com/keeganryan/flatter">flatter</a>后求解似乎更快。</p><div class="table-container"><table><thead><tr><th>unknownbit</th><th>253</th><th>254</th><th>255</th></tr></thead><tbody><tr><td>$\beta$</td><td>0.499</td><td>0.499</td><td>0.499</td></tr><tr><td>$1000\epsilon$</td><td>5</td><td>$3.5\sim3$ （不保证）</td><td>未测</td></tr><tr><td>timecost(s)</td><td>$75\sim120$</td><td>$400\sim820$</td><td>未测</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br><span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M</span>):  <span class="hljs-comment"># flatter</span><br>    z = <span class="hljs-string">&quot;[[&quot;</span> + <span class="hljs-string">&quot;]\n[&quot;</span>.join(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&quot;]]&quot;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, findall(<span class="hljs-string">b&quot;-?\\d+&quot;</span>, ret)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB</span>):  <span class="hljs-comment"># see the shape of matrix</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii, jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Small_Roots_Univariate</span>(<span class="hljs-params">f, X=<span class="hljs-literal">None</span>, beta=<span class="hljs-number">1.0</span>, epsilon=<span class="hljs-literal">None</span></span>):  <span class="hljs-comment"># 多项式f,X,beta,epsilon</span><br><br>    delta = f.degree()  <span class="hljs-comment"># 度delta</span><br>    N = f.parent().characteristic()  <span class="hljs-comment"># 模数N</span><br>    PR = PolynomialRing(ZZ, <span class="hljs-string">&#x27;x&#x27;</span>)<br>    x = PR.gen()<br><br>    Zm = f.base_ring()  <span class="hljs-comment"># Zmod(N)</span><br>    f = f.change_ring(ZZ)  <span class="hljs-comment"># ZZ下f(x)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.is_monic():  <span class="hljs-comment"># 首一</span><br>        f = f.monic()  <span class="hljs-comment"># f = f * f[delta].inverse_mod(N)</span><br><br>    m = ceil(<span class="hljs-built_in">max</span>(beta * beta / (delta * epsilon), <span class="hljs-number">7</span> * beta / delta))  <span class="hljs-comment"># m</span><br>    t = floor(delta * m * (<span class="hljs-number">1</span> / beta - <span class="hljs-number">1</span>))  <span class="hljs-comment"># t</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m=&#123;&#125;, t=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(m, t))<br><br>    f_ij = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(delta):<br>            f_ij.append(x ** j * N ** (m - i) * f ** i)  <span class="hljs-comment"># shift g_ij(x)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(t):<br>        f_ij.append(x ** i * f ** m)  <span class="hljs-comment"># shift h_i(x)</span><br><br>    monomials = []<br>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> f_ij:<br>        monomials += g.monomials()  <span class="hljs-comment"># 统计所有出现的单项 x^i</span><br>    monomials = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(monomials))  <span class="hljs-comment"># 去重并排序</span><br><br>    M = Matrix(ZZ, <span class="hljs-built_in">len</span>(f_ij), <span class="hljs-built_in">len</span>(monomials))  <span class="hljs-comment"># 行数为多项式个数，列数为所有单项可能个数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):<br>        <span class="hljs-keyword">for</span> j, monomial <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(monomials):<br>            M[i, j] = f_ij[i].monomial_coefficient(monomial) * monomial.subs(x=X)  <span class="hljs-comment"># g_ij(xX)和h_i(xX)</span><br>    matrix_overview(M)  <span class="hljs-comment"># see</span><br>    <span class="hljs-keyword">assert</span> M.nrows() == M.ncols()  <span class="hljs-comment"># 方阵 nrows()=ncols()</span><br>    B = flatter(M)  <span class="hljs-comment"># flater加速</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;end LLL&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):  <span class="hljs-comment"># 得到f(xX)，构建f(x)，求根检验</span><br>        Cx = <span class="hljs-built_in">sum</span>(ZZ(B[j, i] // monomials[i](X)) * monomials[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.ncols()))  <span class="hljs-comment"># construct polynomial,</span><br>        R = Cx.roots()  <span class="hljs-comment"># get roots</span><br>        roots = [Zm(r[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> R <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(r[<span class="hljs-number">0</span>]) &lt;= X]  <span class="hljs-comment"># check x0&lt;=X</span><br>        roots = [r <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> roots <span class="hljs-keyword">if</span> gcd(N, ZZ(f(r))) &gt;= ZZ(floor(N ** beta))]  <span class="hljs-comment"># check gcd(f(x_0),N)&gt;N^beta</span><br>        <span class="hljs-keyword">if</span> roots:<br>            <span class="hljs-keyword">return</span> roots  <span class="hljs-comment"># 返回root</span><br><br>N = <span class="hljs-number">135500646574582511239845764710311769260801998982429500680171919823431178899526463566215834234383331374445093363969218810906991784569340270510936759183504496584225937614940086329775325893307453919055830270986601152002191368431527285285313669979358099782497422114870417519470053198217401297960844455029559146309</span><br>h = <span class="hljs-number">918578024558168836638919636090777586135497638818209533615420650282292168631485</span><br>PR = PolynomialRing(Zmod(N), <span class="hljs-string">&#x27;x&#x27;</span>)<br>x = PR.gen()<br>f = (h &lt;&lt; <span class="hljs-number">253</span>) + x<br>roots = Small_Roots_Univariate(f, <span class="hljs-number">2</span> ** <span class="hljs-number">253</span>, <span class="hljs-number">0.499</span>, <span class="hljs-number">0.005</span>)<br><span class="hljs-built_in">print</span>(roots)<br></code></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>回顾了一下自己以前的构造LLL存在的问题，因为之前确实没考虑过LLL求解向量的原理，加上自己这次网鼎杯被卡住了，写篇博客，回顾一下自己没注意到的一些部分，比如平衡参数的构造。</p><p>不过网鼎杯那个题确实挺难的，套了这么多层:(</p><p>期待着，自己在线下赛做出来的第 1 题。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24Nov3</title>
    <link href="/2024/11/20/24Nov3/"/>
    <url>/2024/11/20/24Nov3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-11月的切题3"><a href="#huangx607087-11月的切题3" class="headerlink" title="huangx607087 11月的切题3"></a>huangx607087 11月的切题3</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><p>遇到了几个复杂的题目，对着题解看了2个小时也没有读懂，感觉再这么下去自己迟早得崩。</p><p>上一周几乎没看文献，前3天也就整理了一下之前上课学的内容，后面还有一堆pre得做&gt;</p><blockquote><p>本篇博客由于题目很难，因此多数还是参考了wp做的，如果各位师傅们发现里面引用了你的wp，但没有做标注的话，请邮件联系我，注明博文的title,date以及给出你的wp的地址，我会酌情加上引用（如果我当时确实没想出来的话，一些过于简单的知识不在此范围内），感谢。</p></blockquote><p>（12.2考密码学，无线数字通信技术估计也是12月初考试了，12.15CISCN初赛，期末又有一堆东西要背，也不知道后面会怎么样）</p><h2 id="1-2024强网杯-electronic-game"><a href="#1-2024强网杯-electronic-game" class="headerlink" title="1.[2024强网杯]electronic_game"></a>1.[2024强网杯]electronic_game</h2><h3 id="1x01-题目大意"><a href="#1x01-题目大意" class="headerlink" title="1x01 题目大意"></a>1x01 题目大意</h3><p>还是先看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.rings.finite_rings.hom_finite_field <span class="hljs-keyword">import</span> FiniteFieldHomomorphism_generic<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> * <br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> * <br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> signal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_handle_timeout</span>(<span class="hljs-params">signum, frame</span>):<br>    <span class="hljs-keyword">raise</span> TimeoutError(<span class="hljs-string">&#x27;function timeout&#x27;</span>)<br><br>timeout = <span class="hljs-number">66</span><br>signal.signal(signal.SIGALRM, _handle_timeout)<br>signal.alarm(timeout)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">qary_trans_to_int</span>(<span class="hljs-params">x, q</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(x[i]) * q**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x))])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">f, q</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> b64encode(long_to_bytes(qary_trans_to_int(f.polynomial().coefficients(sparse = <span class="hljs-literal">False</span>), q)))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> b64encode(long_to_bytes(qary_trans_to_int(f.coefficients(sparse = <span class="hljs-literal">False</span>), q)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_irreducible_polynomial</span>(<span class="hljs-params">R, n</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <br>        f = R.random_element(degree=n) <br>        <span class="hljs-keyword">while</span> f.degree() != n:<br>            f = R.random_element(degree=n) <br>        <span class="hljs-keyword">if</span> f.is_irreducible():<br>            <span class="hljs-keyword">return</span> f<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_sparse_irreducible_polynomial</span>(<span class="hljs-params">R, n</span>): <br>    x = R.gen()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        g = <span class="hljs-built_in">sum</span>(choice([-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]) * x**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(randint(<span class="hljs-number">1</span>, n//<span class="hljs-number">2</span> + <span class="hljs-number">1</span>)))<br>        <span class="hljs-keyword">if</span> (x**n + g + <span class="hljs-number">1</span>).is_irreducible():<br>            <span class="hljs-keyword">return</span> x**n + g + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_polynomial</span>(<span class="hljs-params">R, n, beta</span>):  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(randrange(-beta, beta) * R.gen()**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(randint(<span class="hljs-number">0</span>, n))) + R.gen()**n  <br><br>q = <span class="hljs-number">333337</span><br>n = <span class="hljs-number">128</span><br>beta = <span class="hljs-number">333</span> <br>chance = <span class="hljs-number">111</span><br>polyns = beta//chance<br>bound  = <span class="hljs-number">106</span><br>R = PolynomialRing(GF(q),<span class="hljs-string">&#x27;x&#x27;</span>)<br><br>F = generate_irreducible_polynomial(R,n).monic()<br><br>k1 = GF(q**n, name = <span class="hljs-string">&#x27;a&#x27;</span>, modulus = generate_sparse_irreducible_polynomial(R,n).monic())<br>k2 = GF(q**n, name = <span class="hljs-string">&#x27;b&#x27;</span>, modulus = F)<br><br>phi = FiniteFieldHomomorphism_generic(Hom(k1, k2)) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;F:&quot;</span>, encode(F,q).decode())<br><br>win_count = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(chance):<br>    opt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> opt:<br>        As = [phi(random_polynomial(k1,n,beta)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(polyns)] <br>    <span class="hljs-keyword">else</span>:<br>        As = [k2.random_element() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(polyns)]<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(polyns):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;As[<span class="hljs-subst">&#123;i&#125;</span>]: <span class="hljs-subst">&#123;encode(As[i],q).decode()&#125;</span>&quot;</span>)<br><br>    opt_guess = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Guess the option[0/1]: &quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(opt_guess) != opt:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong guess!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        win_count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct guess!&quot;</span>)<br><br><span class="hljs-keyword">if</span> win_count &gt;= bound:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You are so smart! Here is your flag:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No flag for you!&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>题目给出了两个有限域 $K_1$ 和 $K_2$，均为 $GF(333337^{128})$，只是选择的模多项式不同。其中 $K_1$ 的模多项式系数均为 $0,1,-1$，且除了 $x^{128}$ 项之外，所有的项次数不超过 $64$。而 $K_2$ 的模多项式为随机的。</p><p>此外，这里还生成了一个域同态 $\phi$ ，也就是 $K_1$ 到 $K_2$ 上的映射方式。很显然，因为这两个域的元素个数一样，群元素的阶一样，那么一定是存在同态的。然后要求你区分一个结果 $W(x)$ 是在 $K_1$ 上小系数多项式 $A(X)$ 同态到 $K_2$ 得到的 $\phi(A(x))$ ，还是仅仅在 $K_2$ 上随机取的一个多项式。</p><p>参考了一下<a href="https://tangcuxiaojikuai.xyz/post/df3f7032.html#more">糖醋小鸡块的blog</a>，发现正解是和多项式元素的迹有关。速速地补基础知识。</p><h3 id="1x02-基础知识"><a href="#1x02-基础知识" class="headerlink" title="1x02 基础知识"></a>1x02 基础知识</h3><h4 id="1x02o01-不同模多项式下的-GF-q-n-之间的同态是什么？"><a href="#1x02o01-不同模多项式下的-GF-q-n-之间的同态是什么？" class="headerlink" title="1x02o01 不同模多项式下的 $GF(q^n)$ 之间的同态是什么？"></a>1x02o01 不同模多项式下的 $GF(q^n)$ 之间的同态是什么？</h4><p>由于有限域的模多项式肯定是不可约多项式，类比素数 $p$ 有原根 $g$，不可约多项式 $p(x)$ 也有原根 $g(x)$，其原根 $g(x)$ 满足 $g^{p^n-1}(x)\equiv 1\pmod {p(x)}$，且对于任意 $k|p^{n}-1$，$g^{k}(x)\not \equiv 1 \pmod {p(x)}$，也就是指数必须到达 $p^n-1$ 才等于 $1$，达不到 $p^{n}-1$ 一定不等于 $1$。</p><p>举个简单的例子： $B_1&#x3D;GF(2^{8},x^8+x^4+x^3+x^2+1)$ 和 $B_2&#x3D;GF(2^8,x^8+x^4+x^3+x+1)$。对于 $B_1$ 中的模多项式 $x^8+x^4+x^3+x^2+1$，可以发现该多项式的一个原根为 $x$，因为 $2^{8}-1&#x3D;255&#x3D;3\times5\times17$。而 $x$ 不是 $x^8+x^4+x^3+x+1$ 的原根，因为 $x^{51}\equiv 1\pmod {x^8+x^4+x^3+x+1}$，指数还没达到 $255$ ，结果已经等于 $1$ 了。</p><p>但经过验证，$x+1$ 是 $x^8+x^4+x^3+x+1$ 的原根，因此，如果能把 $B_1$ 上的 $x$ 看作 $B_2$ 上的 $x+1$，呃，我们这里还是用 $u$ 和 $v$ 来区分 $B_1$ 和 $B_2$ 上的元素吧。也就是，如果把 $B_1$ 中的 $u$，看作 $B_2$ 上的 $v+1$，那么会产生什么效果？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">sage: B1.&lt;u&gt;=GF(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>,modulus=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>sage: B2.&lt;v&gt;=GF(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>,modulus=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>sage: <span class="hljs-keyword">from</span> sage.rings.finite_rings.hom_finite_field <span class="hljs-keyword">import</span> FiniteFieldHomomorphism_generic<br>sage: phi=FiniteFieldHomomorphism_generic(Hom(B1,B2))<br>sage: phi<br>Ring morphism:<br>  From: Finite Field <span class="hljs-keyword">in</span> u of size <span class="hljs-number">2</span>^<span class="hljs-number">8</span><br>  To:   Finite Field <span class="hljs-keyword">in</span> v of size <span class="hljs-number">2</span>^<span class="hljs-number">8</span><br>  Defn: u |--&gt; v + <span class="hljs-number">1</span><br>sage: u**<span class="hljs-number">116</span><br>u^<span class="hljs-number">7</span> + u^<span class="hljs-number">6</span> + u^<span class="hljs-number">5</span> + u^<span class="hljs-number">4</span> + u^<span class="hljs-number">3</span><br>sage: (v+<span class="hljs-number">1</span>)**<span class="hljs-number">116</span><br>v^<span class="hljs-number">7</span> + v^<span class="hljs-number">2</span> + v + <span class="hljs-number">1</span><br>sage: R.&lt;x&gt;=PolynomialRing(GF(<span class="hljs-number">2</span>)) <span class="hljs-comment">#构造复合函数x^7+x^6+x^5+x^4+x^3</span><br>sage: ((x+<span class="hljs-number">1</span>)**<span class="hljs-number">7</span>+(x+<span class="hljs-number">1</span>)**<span class="hljs-number">6</span>+(x+<span class="hljs-number">1</span>)**<span class="hljs-number">5</span>+(x+<span class="hljs-number">1</span>)**<span class="hljs-number">4</span>+(x+<span class="hljs-number">1</span>)**<span class="hljs-number">3</span>)%(x^<span class="hljs-number">8</span>+x^<span class="hljs-number">4</span>+x^<span class="hljs-number">3</span>+x+<span class="hljs-number">1</span>)<br>x^<span class="hljs-number">7</span> + x^<span class="hljs-number">2</span> + x + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>也就是说， $B_1$ 中的 $u$ 等价于 $B_2$ 中的 $v+1$。不仅仅是原根的关系，如果我们随机取 $u^{116}$，结果为 $u^7+u^6+u^5+u^4+u^3$，那么如果我们把 $u$ 全部替换成 $v+1$，那么在 $B_2$ 的意义下，结果为 $v^7+v^2+v+1$ （具体看上面代码），即 $B_1$ 中的 $u$ 和在 $B_2$ 中的 $v+1$ 是 <strong>等价的</strong> 。因此同态也就这么产生了（域的性质应该都懂吧）。</p><p>当然，也可以这么反过来同态，也就是 $B_2$ 中的 $v$ 等价于 $B_1$ 中的 $u+1$，可以看到这两个的阶都是 $51$，相当于 $B_2$ 的一个 $51$ 个元素的子域也可以同态到 $B_1$ 上的一个 $51$ 元素的子域。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">sage: phinv=FiniteFieldHomomorphism_generic(Hom(B2,B1))<br>sage: phinv<br>Ring morphism:<br>  From: Finite Field <span class="hljs-keyword">in</span> v of size <span class="hljs-number">2</span>^<span class="hljs-number">8</span><br>  To:   Finite Field <span class="hljs-keyword">in</span> u of size <span class="hljs-number">2</span>^<span class="hljs-number">8</span><br>  Defn: v |--&gt; u + <span class="hljs-number">1</span><br>sage: (u+<span class="hljs-number">1</span>)**<span class="hljs-number">51</span><br><span class="hljs-number">1</span><br>sage: v**<span class="hljs-number">51</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当然，并不是原根都是 $x$，就可以从 $x$ 同态到 $x$ 的，比如下面这个例子 （你自己想想，下面这个 $C$ 中的 $u$ 能和 $D$ 中的 $v$ 等价吗，假如 $C([0,1])\equiv D([0,1])$，你构造个复合函数试试看，模多项式都不一样，直接放过去还能一样？）</p><p>注： $\mathbb F_7[x]$ 中，$x^3+x+1$ 和 $x^3+2x^2+4x+2$ 都是不可约多项式，且 $x$ 都是它们的原根。</p><p>为啥这个同态过去是 $5v^2+6v+6$ 呢？随机取 $u^{100}&#x3D;4u^2+3u+3$，你构造 $f(x)&#x3D;4x^2+3x+3$，然后计算 $f(5v^2+6v+6) \bmod (x^3+2x^2+4x+2)$，计算结果肯定和预想的一样，这样才是有意义的同态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">sage: C.&lt;u&gt;=GF(<span class="hljs-number">7</span>**<span class="hljs-number">3</span>,modulus=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>sage: D.&lt;v&gt;=GF(<span class="hljs-number">7</span>**<span class="hljs-number">3</span>,modulus=[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br>sage: <span class="hljs-keyword">from</span> sage.rings.finite_rings.hom_finite_field <span class="hljs-keyword">import</span> FiniteFieldHomomorphism_generic<br>sage: phi=FiniteFieldHomomorphism_generic(Hom(C,D))<br>sage: phi<br>Ring morphism:<br>  From: Finite Field <span class="hljs-keyword">in</span> u of size <span class="hljs-number">7</span>^<span class="hljs-number">3</span><br>  To:   Finite Field <span class="hljs-keyword">in</span> v of size <span class="hljs-number">7</span>^<span class="hljs-number">3</span><br>  Defn: u |--&gt; <span class="hljs-number">5</span>*v^<span class="hljs-number">2</span> + <span class="hljs-number">6</span>*v + <span class="hljs-number">6</span><br>sage: u**<span class="hljs-number">100</span><br><span class="hljs-number">4</span>*u^<span class="hljs-number">2</span> + <span class="hljs-number">3</span>*u + <span class="hljs-number">3</span><br>sage: R.&lt;x&gt;=PolynomialRing(GF(<span class="hljs-number">7</span>))<br>sage: f=<span class="hljs-number">4</span>*x^<span class="hljs-number">2</span>+<span class="hljs-number">3</span>*x+<span class="hljs-number">3</span><br>sage: phi(u**<span class="hljs-number">100</span>)<br><span class="hljs-number">3</span>*v^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*v + <span class="hljs-number">1</span><br>sage: (<span class="hljs-number">5</span>*v^<span class="hljs-number">2</span>+<span class="hljs-number">6</span>*v+<span class="hljs-number">6</span>)**<span class="hljs-number">100</span><br><span class="hljs-number">3</span>*v^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*v + <span class="hljs-number">1</span><br>sage: f(<span class="hljs-number">5</span>*x^<span class="hljs-number">2</span>+<span class="hljs-number">6</span>*x+<span class="hljs-number">6</span>)%(x^<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*x^<span class="hljs-number">2</span>+<span class="hljs-number">4</span>*x+<span class="hljs-number">2</span>)<br><span class="hljs-number">3</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*x + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="1x02o02-什么是域中元素的共轭，迹和极小多项式。"><a href="#1x02o02-什么是域中元素的共轭，迹和极小多项式。" class="headerlink" title="1x02o02 什么是域中元素的共轭，迹和极小多项式。"></a>1x02o02 什么是域中元素的共轭，迹和极小多项式。</h4><p>上次你听到共轭这个说法，还是在复数域中的共轭复数那一块。也就是 $a+b\mathrm i$ 的共轭复数是 $a-b\mathrm i$。而域 $\mathbb F_{p^n}$ 中某元素 $\alpha$ 的共轭一共有 $n-1$ 个，为 $\alpha^q,\alpha^{q^2},\alpha^{q^{3}},…,\alpha^{q^{n-1}}$，这又是为什么呢？</p><p>还是从复数域开始： 在 $\mathbb C_7$ 中 $3+2\mathrm i$ 的共轭复数是 $3+5\mathrm i$，这个能理解。并且你会发现，在 $\mathbb C$ 中，两个共轭复数相加之后，只剩下了实部，虚部清零</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sage: C7.&lt;img&gt;=GF(<span class="hljs-number">49</span>,modulus=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>])<br>sage: <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*img,<span class="hljs-number">7</span>)<br><span class="hljs-number">5</span>*img + <span class="hljs-number">3</span><br>sage: (<span class="hljs-number">3</span>+<span class="hljs-number">2</span>*img)+(<span class="hljs-number">3</span>+<span class="hljs-number">5</span>*img)<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>然后扩展到三阶，任意元素 $a$ 和其两个共轭 $a^{p},a^{p^2}$ 相加，也得到了一个数值，$u,u^2$ 清零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">sage: D13.&lt;u&gt;=GF(<span class="hljs-number">11</span>**<span class="hljs-number">3</span>)<br>sage: D13.modulus()<br>x^<span class="hljs-number">3</span> + <span class="hljs-number">2</span>*x + <span class="hljs-number">9</span><br>sage: a=D13.random_element()<br>sage: a<br><span class="hljs-number">10</span>*u^<span class="hljs-number">2</span> + <span class="hljs-number">3</span>*u + <span class="hljs-number">4</span><br>sage: a+(a**<span class="hljs-number">11</span>)+(a**<span class="hljs-number">121</span>)<br><span class="hljs-number">5</span><br>sage: a.trace()<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>这也就是 $\alpha $  的迹的定义。</p><p>当然，$\alpha$ 和它的 $n$ 个共轭可以成为一个一元 $n$ 次方程 $(x-\alpha)(x-\alpha^{p^2})\cdots(x-\alpha^{p^{n-1}})&#x3D;0$ 的所有根。计等号左边为 $f$，通过根与系数的比较关系可以发现，$-f[n-1]$ 为 $n$ 个根之和，也就是 $x^{n-1}$ 次系数的相反数为 $\alpha$ 的迹。</p><h4 id="1x02o03-同态前后迹不变的原因、-K-1-中小系数多项式迹很小的原因。"><a href="#1x02o03-同态前后迹不变的原因、-K-1-中小系数多项式迹很小的原因。" class="headerlink" title="1x02o03 同态前后迹不变的原因、$K_1$ 中小系数多项式迹很小的原因。"></a>1x02o03 同态前后迹不变的原因、$K_1$ 中小系数多项式迹很小的原因。</h4><p>这边有两个域 $F,G$，换个大点的数字，看看实验结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">1435756429</span><br>R.&lt;x&gt;=PolynomialRing(GF(p))<br>fp2=[<span class="hljs-number">1281051561</span>, <span class="hljs-number">325824623</span>, <span class="hljs-number">587085269</span>, <span class="hljs-number">519016661</span>, <span class="hljs-number">607488613</span>, <span class="hljs-number">349057141</span>, <span class="hljs-number">1328077096</span>, <span class="hljs-number">1307270920</span>, <span class="hljs-number">561010408</span>, <span class="hljs-number">1114525395</span>, <span class="hljs-number">117794890</span>, <span class="hljs-number">713439535</span>, <span class="hljs-number">696507390</span>, <span class="hljs-number">529855506</span>, <span class="hljs-number">773150011</span>, <span class="hljs-number">251203247</span>, <span class="hljs-number">1</span>]<br>fp1=[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>F.&lt;u&gt;=GF(p**<span class="hljs-number">16</span>,modulus=fp1)<br>G.&lt;v&gt;=GF(p**<span class="hljs-number">16</span>,modulus=fp2)<br><span class="hljs-keyword">from</span> sage.rings.finite_rings.hom_finite_field <span class="hljs-keyword">import</span> FiniteFieldHomomorphism_generic<br>phi = FiniteFieldHomomorphism_generic(Hom(F, G)) <br>listAx=[randint(-<span class="hljs-number">607</span>,<span class="hljs-number">607</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><span class="hljs-built_in">print</span>(listAx)<br><span class="hljs-comment">#[-133, 543, 547, -416, -20, -228, 340, 578, 460, -394, 147, 153, -237, -589, 521, 117]</span><br>Axf=F(listAx)<br>Axg=phi(F(listAx))<br>Bx=G.random_element()<br><span class="hljs-built_in">print</span>(Axf.trace(),Axg.trace(),Bx.trace())<br><span class="hljs-comment">#[-133, 543, 547, -416, -20, -228, 340, 578, 460, -394, 147, 153, -237, -589, 521, 117]</span><br><span class="hljs-comment">#8967 8967 965643423</span><br><span class="hljs-built_in">print</span>(Axf)<br><span class="hljs-comment">#117*u^15 + 521*u^14 + 1435755840*u^13 + 1435756192*u^12 + 153*u^11 + 147*u^10 + 1435756035*u^9 + 460*u^8 + 578*u^7 + 340*u^6 + 1435756201*u^5 + 1435756409*u^4 + 1435756013*u^3 + 547*u^2 + 543*u + 1435756296</span><br><span class="hljs-built_in">print</span>(Axg)<br><span class="hljs-comment">#426045453*v^15 + 1095853004*v^14 + 1027534429*v^13 + 199604488*v^12 + 1245066406*v^11 + 491522381*v^10 + 319187049*v^9 + 793800632*v^8 + 179486685*v^7 + 1344029075*v^6 + 926473343*v^5 + 484211635*v^4 + 1047468414*v^3 + 157075129*v^2 + 610169781*v + 917898386</span><br><span class="hljs-built_in">print</span>(Bx)<br><span class="hljs-comment">#779249508*v^15 + 297567236*v^14 + 378700571*v^13 + 1081381084*v^12 + 307273340*v^11 + 64314112*v^10 + 112350563*v^9 + 649766190*v^8 + 424903042*v^7 + 223527316*v^6 + 1393065653*v^5 + 1322430432*v^4 + 457302712*v^3 + 807713883*v^2 + 1191352294*v + 461422786</span><br></code></pre></td></tr></table></figure><p>假设 $F$ 到 $G$ 的同态为 $\phi$。设 $A_F$ 的极小多项式为 $f(x)$，那么 $f(A_F)&#x3D;0$，由同态可以得到 $\phi(f(A_F))&#x3D;f(\phi(A_F))&#x3D;f(A_G)$，因此同态前后，极小多项式不变，迹也不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(Axf.minimal_polynomial())<br><span class="hljs-comment">#x^16 + 1435747462*x^15 + 33455366*x^14 + 1037842702*x^13 + 11109617*x^12 + 832067022*x^11 + 138214583*x^10 + 565542262*x^9 + 1176957343*x^8 + 1394076824*x^7 + 797026202*x^6 + 1386837332*x^5 + 948171790*x^4 + 593354364*x^3 + 495207351*x^2 + 1341667046*x + 1086432282</span><br><span class="hljs-built_in">print</span>(Axg.minimal_polynomial())<br><span class="hljs-comment">#x^16 + 1435747462*x^15 + 33455366*x^14 + 1037842702*x^13 + 11109617*x^12 + 832067022*x^11 + 138214583*x^10 + 565542262*x^9 + 1176957343*x^8 + 1394076824*x^7 + 797026202*x^6 + 1386837332*x^5 + 948171790*x^4 + 593354364*x^3 + 495207351*x^2 + 1341667046*x + 1086432282</span><br>Axg.minimal_polynomial()==Axf.minimal_polynomial()<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>至于为何同态前的迹也很小，我大概的猜测如下：</p><blockquote><p>1.原来生成的的多项式是小系数多项式</p><p>2.因为 $K_1$ 中的取模多项式只有低位有 $0$ 和 $\pm1$，那么 $x^{n}$ 会被分散到低一半的位中去，且变动只有可能是 $x^n$ 的系数。因此对于特定阶数的变换 $q,q^2,q^3,…,q^{n-1}$ 下，多次乘方后的效果会被抵消掉（对应元素的共轭），然后全部加起来，得到的迹也就很小了。</p></blockquote><p>闲得无聊看了一下这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(Hom(F,G))) <span class="hljs-comment">#length:16</span><br></code></pre></td></tr></table></figure><p>然后又调了一下这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">phi(u**(p**<span class="hljs-number">3</span>)) <span class="hljs-comment">#1,2,3,4,5,...,15</span><br></code></pre></td></tr></table></figure><p>发现这些刚好对应 <code>(list(Hom(F,G)))</code> 中出现的所有表达式，有点意思。</p><h3 id="1x03-解题"><a href="#1x03-解题" class="headerlink" title="1x03 解题"></a>1x03 解题</h3><p>既然在 $K_1$ 上取小多项式之后，得到的迹很小，那怎么样个迹才算小呢？随机取样之后，可以看到明显的差距：</p><p><img src="/2024/11/20/24Nov3/1.png" alt="1"></p><p><img src="/2024/11/20/24Nov3/2.png" alt="2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">T=[<span class="hljs-number">3765</span>, <span class="hljs-number">7362</span>, <span class="hljs-number">7440</span>, <span class="hljs-number">7259</span>, <span class="hljs-number">7343</span>, <span class="hljs-number">6932</span>, <span class="hljs-number">1174</span>, <span class="hljs-number">1072</span>, <span class="hljs-number">976</span>, <span class="hljs-number">821</span>, <span class="hljs-number">707</span>, <span class="hljs-number">668</span>, <span class="hljs-number">598</span>, <span class="hljs-number">540</span>, <span class="hljs-number">422</span>, <span class="hljs-number">409</span>, <span class="hljs-number">382</span>, <span class="hljs-number">367</span>, <span class="hljs-number">351</span>, <span class="hljs-number">306</span>, <span class="hljs-number">308</span>, <span class="hljs-number">290</span>, <span class="hljs-number">306</span>, <span class="hljs-number">316</span>, <span class="hljs-number">357</span>, <span class="hljs-number">365</span>, <span class="hljs-number">356</span>, <span class="hljs-number">369</span>, <span class="hljs-number">395</span>, <span class="hljs-number">495</span>, <span class="hljs-number">549</span>, <span class="hljs-number">583</span>, <span class="hljs-number">637</span>, <span class="hljs-number">738</span>, <span class="hljs-number">802</span>, <span class="hljs-number">981</span>, <span class="hljs-number">1060</span>, <span class="hljs-number">1364</span>, <span class="hljs-number">7058</span>, <span class="hljs-number">7249</span>, <span class="hljs-number">7249</span>, <span class="hljs-number">7421</span>, <span class="hljs-number">7434</span>, <span class="hljs-number">4424</span>, <span class="hljs-number">0</span>]<br>S=[<span class="hljs-number">1189</span>, <span class="hljs-number">2334</span>, <span class="hljs-number">2362</span>, <span class="hljs-number">2395</span>, <span class="hljs-number">2329</span>, <span class="hljs-number">2269</span>, <span class="hljs-number">2359</span>, <span class="hljs-number">2378</span>, <span class="hljs-number">2341</span>, <span class="hljs-number">2276</span>, <span class="hljs-number">2333</span>, <span class="hljs-number">2387</span>, <span class="hljs-number">2300</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2347</span>, <span class="hljs-number">2307</span>, <span class="hljs-number">2236</span>, <span class="hljs-number">2272</span>, <span class="hljs-number">2282</span>, <span class="hljs-number">2339</span>, <span class="hljs-number">2285</span>, <span class="hljs-number">2331</span>, <span class="hljs-number">2353</span>, <span class="hljs-number">2308</span>, <span class="hljs-number">2295</span>, <span class="hljs-number">2342</span>, <span class="hljs-number">2308</span>, <span class="hljs-number">2254</span>, <span class="hljs-number">2323</span>, <span class="hljs-number">2275</span>, <span class="hljs-number">2249</span>, <span class="hljs-number">2283</span>, <span class="hljs-number">2306</span>, <span class="hljs-number">2357</span>, <span class="hljs-number">2371</span>, <span class="hljs-number">2375</span>, <span class="hljs-number">2339</span>, <span class="hljs-number">2344</span>, <span class="hljs-number">2411</span>, <span class="hljs-number">2375</span>, <span class="hljs-number">2323</span>, <span class="hljs-number">2327</span>, <span class="hljs-number">2363</span>, <span class="hljs-number">1203</span>, <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>然后你会发现，第一个取样耗时接近第二个的四倍（所以要是在对面服务器上打的话，是不是能直接根据时间去判断(bushi)</p><p>最后主要就是靠trace区分了，因为原题环境没了，所以进行了本地复现。一开始Bound调 $50000$ 和 $60000$ 都没成功，$70000$ 调了一次，成功了，但好像真的比较看脸。。。因为后续我又尝试了几次都没成功。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>sh=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">60733</span>)<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b642poly</span>(<span class="hljs-params">fb64</span>):<br>flist=[<span class="hljs-number">0</span>]*<span class="hljs-number">129</span><br>fi=bytes_to_long(b64decode(fb64))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">129</span>):<br>flist[i]=fi%<span class="hljs-number">333337</span><br>fi//=<span class="hljs-number">333337</span><br><span class="hljs-keyword">return</span> flist<br>sh.recvuntil(<span class="hljs-string">b&#x27;F:&#x27;</span>)<br>Px=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip().decode()<br>Px=(b642poly(Px))<br>K=GF(<span class="hljs-number">333337</span>**<span class="hljs-number">128</span>,modulus=Px,names=(<span class="hljs-string">&#x27;t&#x27;</span>,))<br>BOUND=<span class="hljs-number">70000</span><br>score=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">111</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;score=&#125;</span>,round=<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Fx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Gx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Hx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>Fx,Gx,Hx=b642poly(Fx),b642poly(Gx),b642poly(Hx)<br>Fx,Gx,Hx=K(Fx),K(Gx),K(Hx)<br>a,b,c=(Fx.trace(),Gx.trace(),Hx.trace())<br>judg=<span class="hljs-built_in">sum</span>([a&lt;BOUND,a&gt;<span class="hljs-number">333337</span>-BOUND,b&lt;BOUND,b&gt;<span class="hljs-number">333337</span>-BOUND,c&lt;BOUND,c&gt;<span class="hljs-number">333337</span>-BOUND])<br><span class="hljs-keyword">if</span>(judg&gt;<span class="hljs-number">2</span>):<br>sh.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>sh.sendline(<span class="hljs-string">b&#x27;0&#x27;</span>)<br>jres=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-string">b&#x27;Correct&#x27;</span> <span class="hljs-keyword">in</span> jres):<br>score+=<span class="hljs-number">1</span><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>运行结果，卡线出了一次：</p><img src="/2024/11/20/24Nov3/3.png" alt="3" style="zoom:87%;"><p>然后BOUND调成 $65000$，写了个自动化多次连接多次运行的脚本，反正能出，平均下来有十几分之一的概率。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b642poly</span>(<span class="hljs-params">fb64</span>):<br>flist=[<span class="hljs-number">0</span>]*<span class="hljs-number">129</span><br>fi=bytes_to_long(b64decode(fb64))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">129</span>):<br>flist[i]=fi%<span class="hljs-number">333337</span><br>fi//=<span class="hljs-number">333337</span><br><span class="hljs-keyword">return</span> flist<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Solveeee</span>():<br>sh=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">60733</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;F:&#x27;</span>)<br>Px=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip().decode()<br>Px=(b642poly(Px))<br>K=GF(<span class="hljs-number">333337</span>**<span class="hljs-number">128</span>,modulus=Px,names=(<span class="hljs-string">&#x27;t&#x27;</span>,))<br>BOUND=<span class="hljs-number">65000</span><br>score=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">111</span>):<br><span class="hljs-comment">#print(f&#x27;&#123;score=&#125;,round=&#123;i&#125;&#x27;)</span><br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Fx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Gx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>sh.recvuntil(<span class="hljs-string">b&#x27;]:&#x27;</span>)<br>Hx=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()<br>Fx,Gx,Hx=b642poly(Fx),b642poly(Gx),b642poly(Hx)<br>Fx,Gx,Hx=K(Fx),K(Gx),K(Hx)<br>a,b,c=(Fx.trace(),Gx.trace(),Hx.trace())<br>judg=<span class="hljs-built_in">sum</span>([a&lt;BOUND,a&gt;<span class="hljs-number">333337</span>-BOUND,b&lt;BOUND,b&gt;<span class="hljs-number">333337</span>-BOUND,c&lt;BOUND,c&gt;<span class="hljs-number">333337</span>-BOUND])<br><span class="hljs-keyword">if</span>(judg&gt;<span class="hljs-number">2</span>):<br>sh.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>sh.sendline(<span class="hljs-string">b&#x27;0&#x27;</span>)<br>jres=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-string">b&#x27;Correct&#x27;</span> <span class="hljs-keyword">in</span> jres):<br>score+=<span class="hljs-number">1</span><br>C=(sh.recvall())<br>sh.close()<br><span class="hljs-keyword">return</span> score,C<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>)):<br><span class="hljs-built_in">print</span>(i+<span class="hljs-number">1</span>,Solveeee())<br><span class="hljs-comment">#sh.interactive()</span><br></code></pre></td></tr></table></figure><p>运行结果：（服务器端删除了from secret import flag，改成了自定义flag格式，其他方法等效于原服务器）。</p><p><img src="/2024/11/20/24Nov3/4.png" alt="4"></p><h2 id="2-numbers2"><a href="#2-numbers2" class="headerlink" title="2.numbers2"></a>2.numbers2</h2><h3 id="2x01-题目大意"><a href="#2x01-题目大意" class="headerlink" title="2x01 题目大意"></a>2x01 题目大意</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n  = p*q<br>m = bytes_to_long(os.urandom(<span class="hljs-number">20</span>))<br>x = <span class="hljs-built_in">pow</span>(m,p,n)<br>y = <span class="hljs-built_in">pow</span>(m,q,n)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <br>    file.write(<span class="hljs-string">&#x27;n = &#x27;</span> + <span class="hljs-built_in">str</span>(n) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-string">&#x27;x = &#x27;</span> + <span class="hljs-built_in">str</span>(x) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-string">&#x27;y = &#x27;</span> + <span class="hljs-built_in">str</span>(y) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br>iv = sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()[:<span class="hljs-number">16</span>]<br><br><br>n = <span class="hljs-number">17</span><br>q = getPrime(<span class="hljs-number">1024</span>)<br>x = randint(q//<span class="hljs-number">2</span>,q-<span class="hljs-number">1</span>)<br>S = <span class="hljs-number">2</span>**<span class="hljs-number">544</span><br>K = <span class="hljs-number">2</span>**<span class="hljs-number">480</span><br><br>s = [randint(S//<span class="hljs-number">2</span>,S-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>t = [randint(S//<span class="hljs-number">2</span>,S-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><br>k = [randint(K//<span class="hljs-number">2</span>,K-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>b = [randint(K//<span class="hljs-number">2</span>,K-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br>r = [(s[i]*k[i] - b[i]*t[i]) * inverse(x,q) % q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">f&quot;s = <span class="hljs-subst">&#123;s&#125;</span>\n&quot;</span>)<br>    file.write(<span class="hljs-string">f&quot;t = <span class="hljs-subst">&#123;t&#125;</span>\n&quot;</span>)<br>    file.write(<span class="hljs-string">f&quot;r = <span class="hljs-subst">&#123;r&#125;</span>\n&quot;</span>)<br>    file.write(<span class="hljs-string">&#x27;q = &#x27;</span> + <span class="hljs-built_in">str</span>(q) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>key = sha256(<span class="hljs-built_in">str</span>(<span class="hljs-number">2024</span>*b[<span class="hljs-number">0</span>]+<span class="hljs-number">2023</span>*k[<span class="hljs-number">0</span>] + x).encode()).digest()[:<span class="hljs-number">16</span>]<br><br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>aes = AES.new(key,AES.MODE_CBC,iv)<br>cipher = aes.encrypt(pad(flag.encode(),<span class="hljs-number">16</span>))<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-string">f&quot;cipher = <span class="hljs-subst">&#123;cipher&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>题目的flag使用了AES-CBC加密。分为两部分，对iv的加密和对密钥的加密。下面分别阐述</p><h3 id="2x02-Part-1"><a href="#2x02-Part-1" class="headerlink" title="2x02 Part 1"></a>2x02 Part 1</h3><p>第一部分给出了一个RSA的加密过程加密 iv。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n  = p*q<br>m = bytes_to_long(os.urandom(<span class="hljs-number">20</span>))<br>x = <span class="hljs-built_in">pow</span>(m,p,n)<br>y = <span class="hljs-built_in">pow</span>(m,q,n)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <br>    file.write(<span class="hljs-string">&#x27;n = &#x27;</span> + <span class="hljs-built_in">str</span>(n) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-string">&#x27;x = &#x27;</span> + <span class="hljs-built_in">str</span>(x) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-string">&#x27;y = &#x27;</span> + <span class="hljs-built_in">str</span>(y) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>iv = sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()[:<span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><p>这一问和鹏城杯的那个题一样，CRT化简之后，还是 $g\equiv m\pmod p,h\equiv m \pmod q$ 的形式，完全一样的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">133693649727082259107041662011720823458571250895054242259170170354175642242128965748915759548206594541801234255878757661771526775311636655859201668702890990745739241126384729560433907755687614698569613585182786544165812027959219789602655976970715100245966545577285355634247363922810553139003838578363660449109</span><br>g=<span class="hljs-number">92401219014364912794053160070309527007771356043695463515571328726676546494869270394623052969651083009651771857467561945521106625547418406188430774969043958102947805651169010188202688119325462398122519423459244079993702953589811689050017122705616315531462047800685314554111273134721614734430443067361639605720</span><br>h=<span class="hljs-number">27444123601022148160097636168019280219400389861288181193988463940073215353205764735090720106313510456714820401995714013971697413924167047690200030265762984461900122475812718262941762361406314725034408660419186620573774598548615986428700226735633115570424145980543054306673862989672645266476994517440508647839</span><br><br>K=<span class="hljs-number">2</span>**<span class="hljs-number">1600</span><br>M=Matrix(ZZ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,g*h*K],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-(g+h)*K],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*K],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,K*n]])<br><span class="hljs-built_in">print</span>(M.LLL()[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#(-1, -220100243352092218129491119040565723833151607139, -48444117123650214661388931601686039991652705643026455075715408364262521400552593472298595765321, 0)</span><br></code></pre></td></tr></table></figure><p>只是需要多做一步，计算 $g-m$ 和 $n$ 的最大公约数，因为 $g\equiv m\pmod p$，也就是 $g&#x3D;kp+m$，因此 $g-m&#x3D;kp$，这样就可以得到 $n$ 的分解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">p=GCD(g-m,n)<br>q=n//p<br><span class="hljs-keyword">assert</span> p*q==n<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>iv1= sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()[:<span class="hljs-number">16</span>]<br>iv2= sha256(<span class="hljs-built_in">str</span>(q).encode()).digest()[:<span class="hljs-number">16</span>]<br><span class="hljs-built_in">print</span>(iv1.<span class="hljs-built_in">hex</span>())<br><span class="hljs-built_in">print</span>(iv2.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#8076dd87467b159231123921f92dd39b</span><br><span class="hljs-comment">#313f3a43636d41db93278863b3d50e73</span><br></code></pre></td></tr></table></figure><p>这样我们就得到了两个IV，先保存着，不确定哪个是对的。</p><h3 id="2x03-Part-2"><a href="#2x03-Part-2" class="headerlink" title="2x03 Part 2"></a>2x03 Part 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">17</span><br>q = getPrime(<span class="hljs-number">1024</span>)<br>x = randint(q//<span class="hljs-number">2</span>,q-<span class="hljs-number">1</span>)<br>S = <span class="hljs-number">2</span>**<span class="hljs-number">544</span><br>K = <span class="hljs-number">2</span>**<span class="hljs-number">480</span><br><br>s = [randint(S//<span class="hljs-number">2</span>,S-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>t = [randint(S//<span class="hljs-number">2</span>,S-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br><br>k = [randint(K//<span class="hljs-number">2</span>,K-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>b = [randint(K//<span class="hljs-number">2</span>,K-<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><br>r = [(s[i]*k[i] - b[i]*t[i]) * inverse(x,q) % q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br></code></pre></td></tr></table></figure><p>这一部分给出了 $18$ 组数据、模数 $q$，数组 $s,t,r$。但未知量为 $x$ 和数组 $b$。其中 $q,x$ 均为 $1024$ 比特，$s,t$ 均为 $544$ 比特， $k,b$ 均为 $480$ 比特。很明显一个HNP问题，并且这个式子是一眼看出来的：<br>$$<br>s_ik_i-t_ib_i\equiv r_ix \pmod q<br>$$<br>很明显的线性关系，但这个矩阵属实不好构造。我一开始把所有的 $s_i$ 和 $b_i$ 都放在一起，消 $x$，构造了一个 $37\times37$ 的矩阵，但对角线上全是 $1$，加上 $k,b$ 同阶，不需要平衡因子，矩阵的行列式完全达不到要求。</p><p>最后参考了<a href="https://blog.csdn.net/qwerzbc66">striving</a>✌的构造方法：保留 $x$，化简式子：<br>$$<br>s’_ik_i-r_i’x\equiv b_i \pmod q<br>$$<br>也就是<br>$$<br>s’_ik_i-r_i’x-u_iq&#x3D; b_i<br>$$</p><p>其中 $s_i’&#x3D;\frac{s_i}{t_i},r_i’&#x3D;\frac{r_i}{t_i}$。构造矩阵如下（以三个为例）：</p><p><img src="/2024/11/20/24Nov3/6.png" alt="6"></p><p>根据striving的提醒：根据对角线算界：$\log_2 q^3&#x3D;3072$，$\log_2\vec v_1&#x3D;(k_1,k_2,k_3,b_1,b_2,b_3)&#x3D;480+\log_2 6&#x3D;482$，$6\log_2 \vec v_1&#x3D;2892&lt;3072$，因此算法是可行的。</p><p>打印一下每一行的nbits，可以看到第二行清一色的 $480$，说明这就是所求的值，对应下标为1</p><p><img src="/2024/11/20/24Nov3/7.png" alt="7"></p><p>代码也放一下，方便复现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>sdivt=[s[i]*inverse(t[i],q)%q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s))]<br>rdivt=[r[i]*inverse(t[i],q)%q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r))]<br>M=block_matrix([[identity_matrix(<span class="hljs-built_in">len</span>(s)),diagonal_matrix(ZZ,sdivt)],<br>                [zero_matrix(<span class="hljs-built_in">len</span>(s)),q*identity_matrix(<span class="hljs-built_in">len</span>(s))],<br>                [zero_matrix(<span class="hljs-number">1</span>,<span class="hljs-number">18</span>),Matrix(ZZ,rdivt)]])<br>MLLL=M.LLL()<br></code></pre></td></tr></table></figure><p>有了 $k$ 和 $b$，就可以求出 AES 的密钥了。两个IV分别试一下，第一个是对的，因此原题得解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">v=MLLL[<span class="hljs-number">1</span>]<br>v=v*sgn(v[<span class="hljs-number">0</span>])<br>listv=<span class="hljs-built_in">list</span>(v)<br>k=listv[:<span class="hljs-built_in">len</span>(s)]<br>b=listv[<span class="hljs-built_in">len</span>(s):]<br>x=(k[<span class="hljs-number">0</span>]*s[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>]*t[<span class="hljs-number">0</span>])*inverse(r[<span class="hljs-number">0</span>],q)%q <br><span class="hljs-built_in">print</span>(x,k[<span class="hljs-number">0</span>],b[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>key=sha256(<span class="hljs-built_in">str</span>(<span class="hljs-number">2024</span>*b[<span class="hljs-number">0</span>]+<span class="hljs-number">2023</span>*k[<span class="hljs-number">0</span>]+x).encode()).digest()[:<span class="hljs-number">16</span>]<br>key<br><span class="hljs-comment">#b&#x27;\xe0\x14\x00\x84\xb9\xcd\xa1\t\xec\xa9\x86\x91g\xcb\x8d\x16&#x27;</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>aes = AES.new(key,AES.MODE_CBC,iv=<span class="hljs-string">b&#x27;\x80v\xdd\x87F&#123;\x15\x921\x129!\xf9-\xd3\x9b&#x27;</span>)<br>m=aes.decrypt(cipher)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#DASCTF&#123;b157059c-2871-421f-8cec-332b617de4d5&#125;\x04\x04\x04\x04</span><br></code></pre></td></tr></table></figure><h3 id="2x04-Part-2-消-x-做法"><a href="#2x04-Part-2-消-x-做法" class="headerlink" title="2x04 Part 2 消 $x$ 做法"></a>2x04 Part 2 消 $x$ 做法</h3><p>当然，我一开始的思路还是想消 $x$，在 striving✌的指点下，我尝试了一下这个矩阵：</p><p>由于<br>$$<br>s_{18}k_{18}-t_{18}b_{18}\equiv r_{18}x\pmod q<br>$$<br>和<br>$$<br>s_2k_2-t_2b_2\equiv r_2x\pmod q<br>$$<br>因此消 $x$，有<br>$$<br>r_2s_{18}k_{18}-r_{18}s_2k_2-r_2t_{18}b_{18}+r_{18}t_2b_{2}\equiv 0\pmod q<br>$$<br>那么可以有<br>$$<br>b_2&#x3D;\frac{r_2s_{18}k_{18}-r_{18}s_2k_2-r_2t_{18}b_{18}}{r_{18}t_2}-u_2q<br>$$<br>固定第一组数据，将上面的 $x$ 换为 $b_{18}$，然后右边向量从 $b_2$ 开始也是可以的。算了一下界，也没有问题。但考虑到他第一组数据与密钥有关，因此这里固定最后一组数据。</p><p>设 $A_i&#x3D;\dfrac{r_is_{18}} {r_{18}t_i},B_i&#x3D;\dfrac{r_{18}s_i} {r_{18}t_i},C_i&#x3D;\dfrac{r_it_{18}} {r_{18}t_i}$，最后构造的矩阵为（两组数据的情况）</p><p><img src="/2024/11/20/24Nov3/9.png" alt="9"></p><p>这边的代码放一下，不知道为啥不需要加负号，很奇怪。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>A=[r[i]*s[-<span class="hljs-number">1</span>]*inverse(r[-<span class="hljs-number">1</span>]*t[i],q)%q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>)]<br>B=[r[-<span class="hljs-number">1</span>]*s[i]*inverse(r[-<span class="hljs-number">1</span>]*t[i],q)%q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>)]<br>C=[r[i]*t[-<span class="hljs-number">1</span>]*inverse(r[-<span class="hljs-number">1</span>]*t[i],q)%q <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>)]<br>M=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">35</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">35</span>):<br>    M[i][i]=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">18</span> <span class="hljs-keyword">else</span> q<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[i][i+<span class="hljs-number">18</span>]=B[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[<span class="hljs-number">17</span>][<span class="hljs-number">18</span>+i]=A[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[-<span class="hljs-number">1</span>][<span class="hljs-number">18</span>+i]=C[i]<br>M=Matrix(ZZ,M)<br>MLLL=M.LLL()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">35</span>):<br>    <span class="hljs-built_in">print</span>(i%<span class="hljs-number">10</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.nrows()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i%<span class="hljs-number">10</span>&#125;</span> &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M.ncols()):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X&#x27;</span><span class="hljs-keyword">if</span> M[i][j] <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;.&#x27;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(MLLL.nrows()):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(MLLL.ncols()):<br>        <span class="hljs-built_in">print</span>(MLLL[i][j].nbits(),end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>v=MLLL[<span class="hljs-number">3</span>]<br>v=v*sgn(v[<span class="hljs-number">0</span>])<br>listv=<span class="hljs-built_in">list</span>(v)<br>k=listv[:<span class="hljs-number">18</span>]<br>b=listv[<span class="hljs-number">18</span>:]<br>x=(k[<span class="hljs-number">0</span>]*s[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>]*t[<span class="hljs-number">0</span>])*inverse(r[<span class="hljs-number">0</span>],q)%q<br><span class="hljs-built_in">print</span>(x,k[<span class="hljs-number">0</span>],b[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>最后第 4 个向量（下标为3）为答案，很奇怪。striving师傅使用的第一组数据，解出来第一个向量就是答案。。</p><p>得到了striving✌的解答：构建对角+方阵这样会好一点，也就是我上面的那个最后一行被移到了第一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">M=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>):<br>    M[i][i]=<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> i&lt;=<span class="hljs-number">18</span> <span class="hljs-keyword">else</span> q<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[i+<span class="hljs-number">1</span>][i+<span class="hljs-number">19</span>]=B[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[<span class="hljs-number">18</span>][<span class="hljs-number">19</span>+i]=A[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    M[<span class="hljs-number">0</span>][<span class="hljs-number">19</span>+i]=C[i]<br></code></pre></td></tr></table></figure><h2 id="3-N1CTF2021-n1token-1"><a href="#3-N1CTF2021-n1token-1" class="headerlink" title="3.[N1CTF2021]n1token-1"></a>3.[N1CTF2021]n1token-1</h2><h3 id="3x01-题目大意"><a href="#3x01-题目大意" class="headerlink" title="3x01 题目大意"></a>3x01 题目大意</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gettoken</span>(<span class="hljs-params">c</span>):<br>    X = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">pow</span>(X, (p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, p)!=<span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> (<span class="hljs-built_in">pow</span>(X, (q-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, q)!=<span class="hljs-number">1</span>)):<br>        X = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> X.bit_length() &lt; <span class="hljs-number">920</span>:<br>            X *= random.choice(primes)<br>    xp = <span class="hljs-built_in">pow</span>(X, (p + <span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, p)<br>    xq = <span class="hljs-built_in">pow</span>(X, (q + <span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, q)<br>    xp = random.choice([xp,-xp%p])<br>    xq = random.choice([xq,-xq%q])<br>    x = c * (xp*inverse(q,p)*q + xq*inverse(p,q)*p) % n<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getmyPrime</span>(<span class="hljs-params">nbits</span>):<br>    p = getPrime(nbits)<br>    <span class="hljs-keyword">while</span>(p%<span class="hljs-number">4</span>==<span class="hljs-number">1</span>):<br>        p = getPrime(nbits)<br>    <span class="hljs-keyword">return</span> p<br><br>primes = random.sample(sieve_base, <span class="hljs-number">920</span>)<br>p = getmyPrime(<span class="hljs-number">512</span>)<br>q = getmyPrime(<span class="hljs-number">512</span>)<br>e = <span class="hljs-number">65537</span><br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;n = &quot;</span> + <span class="hljs-built_in">str</span>(n) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>):<br>        f.write(<span class="hljs-string">&quot;Token #&quot;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;: &#x27;</span>+<span class="hljs-built_in">str</span>(gettoken(c))+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-comment">#最后给出了920组数据</span><br></code></pre></td></tr></table></figure><h3 id="3x02-Easy的Part-1"><a href="#3x02-Easy的Part-1" class="headerlink" title="3x02 Easy的Part 1"></a>3x02 Easy的Part 1</h3><p>题目只给出了 $n,e$，$c$ 没有给出。但题目给出了 $t_i&#x3D;cx_i$ 值，其中 $X&#x3D;x^2\pmod n$，且 $X$ 为 $920$ 位光滑数字。因此可以得到<br>$$<br>t_i^2c^{-2}-k_in&#x3D;X_i<br>$$<br>很明显的LLL，直接一把梭，求出了所有 $X$，并得到了 $c^2$。这个我很容易看出来了，那个看着复杂的式子，只不过是在知道 $n$ 分解时，通过CRT求 $\sqrt x\pmod n$，$p\equiv 3\pmod 4$ 的素数可以用公式开平方。</p><p>矩阵构造在这里，这个其实很简单，wp用了 $64$ 组，我用了 $50$ 组也能出。</p><p><img src="/2024/11/20/24Nov3/10.png" alt="10"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>tokens=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readlines()<br>tokens.pop(<span class="hljs-number">0</span>)<br>n=<span class="hljs-number">68512262030092235082955402685415541014208343583540436164257874839232436153071370815269154345614809159891073442197732980480807167946204103083844856370368201582809851941837996671056932696292853288793127100756079130455873788646267803515293475609923615566516458978625901881951403282617405981962778117066458607117</span><br>tokens=[<span class="hljs-built_in">int</span>(tokens[i].split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>])<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>)]<br>tokens2=[i*i%n <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tokens]<br>M=block_matrix(ZZ,<br>[[Matrix(tokens2[:<span class="hljs-number">50</span>])],<br>[identity_matrix(<span class="hljs-number">50</span>)*n]])<br><br>MLLL=M.LLL()<br>lgMLLL=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>)]<span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">51</span>)]<br>Xarr=<span class="hljs-built_in">list</span>(MLLL[<span class="hljs-number">1</span>])<br><span class="hljs-comment">#print(Xarr)</span><br>C2=tokens2[<span class="hljs-number">0</span>]*inverse(Xarr[<span class="hljs-number">0</span>],n)%n<br><span class="hljs-comment">#print(C2)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>,<span class="hljs-number">920</span>):<br>    Xarr.append(tokens2[i]*inverse(C2,n)%n)<br></code></pre></td></tr></table></figure><p>然后呢？我们要求的是 $c$ 啊。</p><p>考虑到 $X$ 的光滑，我们打算分解每一个 $X$，并将其保存起来。因为素数是 $920$ 个，$X$ 也是 $920$ 个，可以直接factor，获取因子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">FactXarr=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>)):<br>    FactXarr.append(<span class="hljs-built_in">list</span>(factor(Xarr[i])))<br>primeset=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>):<br>    <span class="hljs-keyword">for</span> j,_ <span class="hljs-keyword">in</span> FactXarr[i]:<br>        primeset.append(j)<br>primeset=<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(primeset)))<br>indexdic=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>):<br>    indexdic[primeset[i]]=i<br></code></pre></td></tr></table></figure><p> 然后我就被卡住了。。</p><h3 id="3x03-Tough的Part-2"><a href="#3x03-Tough的Part-2" class="headerlink" title="3x03 Tough的Part 2"></a>3x03 Tough的Part 2</h3><p>瞄一下<a href="https://www.anquanke.com/post/id/261215#h2-9">wp</a>：</p><blockquote><p>WP:</p><p>若 $x^2\equiv y^2 \pmod n$，则 $x&#x3D;ky\pmod n$，其中 $k^2\equiv 1\pmod n$。</p><p>也就是 $(k+1)(k-1)\equiv 0\pmod n$，即 $(k+1)(k-1)&#x3D;gn$。如果 $k$ 不为 $1$，那么就有可能通过公因数分解 $n$，这里 $\gcd(k+1,n)&#x3D;p,\gcd(k-1,n)&#x3D;q$。</p><p>因此，我们要求一个 $k$ 来分解 $n$。</p><p>如果我们从其中选取 $w$ 个表达式相乘，当$w$为偶数时，那么同余式左边由 $t_i^2$累乘得到的项可以看成$(t_0 * t_1 * … * t_w)^2$，同余式右边由$c^2$累乘得到的项可以看成$(c^w)^2$，当剩下的这$w$个$X_i$相乘得到的项也可以写为一个项的平方时，我们即构造出了一个上面所提到的分解$n$所需的表达式，由于这里$t_i$、$X_i$和$c^2$在模$n$下的值我们均已知，因此我们可以直接计算出$k$的值，继而按照上面的方法分解$n$，因此接下来我们只需从这920组数据当中找出符合条件的$w$组即可。</p><p>为了找到这样的$w$组数据，我们可以将每个$X_i$展开为若干素数$prime_i$乘积的形式，然后记录下每个$prime_i$的指数的奇偶性，这样一来可以将其看作一个GF(2)上的920维行向量，由于我们有920组数据，因此可以列出一个920 * 920的矩阵，这样一来寻找若干$X_i$相乘的结果其指数为偶数的问题就转化为了寻找若干$prime_i$其指数之和在GF(2)下为0的问题，因此我们直接对该矩阵求left kernel matrix即可，这样一来我们可以得到若干组$res$向量，其中每一个$res$向量中值为1的下标对应着我们的920组数据当中应当选取的$X_i$的下标，同时为了保证$w$为偶数，我们还需要选择$res$向量中1的个数为偶数的向量，在本题的数据中，我们一共得到了两组$res$向量，其中一组中1的个数为奇数、一组中1的个数为偶数，我们选择偶数这组即可，然后按照上述过程计算出$k$，既而即可分解$N$求出私钥$d$。</p></blockquote><p>貌似有道理，但这是啥意思呢？</p><p>算了，先根据wp做一下。啊？被分解出来了吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">PM=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>)):<br>    cpm=[<span class="hljs-number">0</span>]*<span class="hljs-number">920</span><br>    <span class="hljs-keyword">for</span> j,k <span class="hljs-keyword">in</span> FactXarr[i]:<br>        cpm[indexdic[j]]=k<br>    PM.append(cpm)<br>PM2=Matrix(GF(<span class="hljs-number">2</span>),PM)<br>PM=Matrix(ZZ,PM)<br><span class="hljs-built_in">print</span>(PM2.rank())<br><span class="hljs-comment">#918</span><br>PM2K=PM2.left_kernel()<br>judgvec=<span class="hljs-built_in">list</span>(PM2K[<span class="hljs-number">2</span>])<br>cnt=judgvec.count(<span class="hljs-number">1</span>)<br>Xpro,Tpro=<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">920</span>):<br>    <span class="hljs-keyword">if</span>(judgvec[i]):<br>        Xpro=Xpro*Xarr[i]<br>        Tpro=Tpro*tokens[i]<br><span class="hljs-keyword">assert</span> Xpro.is_square()<br>Xprosq=Xpro.nth_root(<span class="hljs-number">2</span>)<br>k = (((Tpro * inverse_mod(Xprosq, n)) % n) * <span class="hljs-built_in">pow</span>(C2, -(cnt // <span class="hljs-number">2</span>), n)) % n<br><span class="hljs-built_in">print</span>(GCD(<span class="hljs-built_in">int</span>(k-<span class="hljs-number">1</span>),n))<br><span class="hljs-comment">#7066689880579369785256516192953365235434055150846536631329529038878914448897380081597992569628631985623841078424106593028009177867365917709699457885163883</span><br></code></pre></td></tr></table></figure><p>两个平方相等，哪两个相等啊？一个小时的乱搞后，我得到了答案：<br>$$<br>\prod_{\mathrm{judgvec}[i]&#x3D;1} t_i^2\equiv \prod_{\mathrm{judgvec}[i]&#x3D;1}X_ic^{2\sum\mathrm{judgvec}} \pmod n<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Tpro**<span class="hljs-number">2</span>%n==(Xpro*<span class="hljs-built_in">pow</span>(C2,cnt,n))%n <span class="hljs-comment">#cnt=judgvec.count(1)</span><br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>再回顾过程：矩阵 <code>PM</code> 中存放的是每个 $X$ 对应的素数的指数，<code>PM[i][j]</code> 表示 $X_i$ 的分解中第 $j$ 个素数的指数，对 <code>PM</code> 矩阵全体模 $2$，就可以有每个指数是奇数还是偶数。在 <code>PM2=GF(2)(PM)</code> 下求left kernel，就是求满足条件的 $\vec v&#x3D;(v_0,v_1,…,v_{919})$，使得 $\pi_{i&#x3D;0}^{919}  X_i^{v_i}$ 是一个平方数。然后就回到了 WP 中的这句话：</p><blockquote><p>如果我们从其中选取 $w$ 个表达式相乘，当$w$为偶数时，那么同余式左边由 $t_i^2$累乘得到的项可以看成$(t_0 * t_1 * … * t_w)^2$，同余式右边由$c^2$累乘得到的项可以看成$(c^w)^2$，当剩下的这$w$个$X_i$相乘得到的项也可以写为一个项的平方时，我们即构造出了一个上面所提到的分解$n$所需的表达式，由于这里$t_i$、$X_i$和$c^2$在模$n$下的值我们均已知，因此我们可以直接计算出$k$的值，继而按照上面的方法分解$n$，因此接下来我们只需从这920组数据当中找出符合条件的$w$组即可。</p></blockquote><p>验证一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Xpro.is_square()<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>看来没问题了。设这个 $X_{pro}&#x3D;a^2$，这边left kernel保证 $X$ 的分解的指数都是偶数（因为取模原因，$X$ 是模 $n$ 的二次剩余，但 $X$ 的分解指数不全为偶数，是因为部分奇数可以为二次剩余）。又因为 $t^2\equiv Xc^2\pmod n$，因此 $T_{pro}^2&#x3D;X_{pro}c^{2w}$。因此我们可以两边开根：<br>$$<br>T_{pro}&#x3D;ac^{w}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Xprosq.is_square()<br><span class="hljs-comment">#False</span><br></code></pre></td></tr></table></figure><p>OK，这下看看，我们找到了什么？<br>$$<br>T^2_{pro}&#x3D;a^2c^{2w}<br>$$<br>两个平方相等！</p><p>开根测一下：两个平方模 $n$ 相等，但开方后不等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Tpro**<span class="hljs-number">2</span>%n==(Xpro*<span class="hljs-built_in">pow</span>(C2,cnt,n))%n <span class="hljs-comment">#cnt=judgvec.count(1)</span><br><span class="hljs-comment">#True</span><br>Tpro%n==Xprosq*<span class="hljs-built_in">pow</span>(C2,cnt//<span class="hljs-number">2</span>,n)%n<br><span class="hljs-comment">#False</span><br></code></pre></td></tr></table></figure><p>因此，我们找到了所需要的 $k\equiv \dfrac{a}{c^{2(w&#x2F;2)}}$。因为 $c^2$ 是一个整体，所以 $w$ 要保证是偶数才可行。这样思路终于和WP闭环了。。。</p><h3 id="3x04-完结撒花"><a href="#3x04-完结撒花" class="headerlink" title="3x04 完结撒花"></a>3x04 完结撒花</h3><p>分解 $n$ 之后，先用CRT对 $c^2$ 开根，得到四个可能的结果。然后分别RSA解密，找到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">p,q=GCD(<span class="hljs-built_in">int</span>(k-<span class="hljs-number">1</span>),n),GCD(<span class="hljs-built_in">int</span>(k+<span class="hljs-number">1</span>),n)<br><span class="hljs-keyword">assert</span> p <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,n] <span class="hljs-keyword">and</span> q <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,n] <span class="hljs-keyword">and</span> p!=q<br>carr=[]<br>cp=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(C2,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p))<br>cq=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(C2,(q+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,q))<br><span class="hljs-keyword">for</span> sp <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]:<br>    <span class="hljs-keyword">for</span> sq <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]:<br>        carr.append(crt([cp*sp,cq*sq],[p,q]))<br><span class="hljs-built_in">print</span>(carr)<br>d=inverse(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> carr:<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Output:</span><br><span class="hljs-string">[46630614291745334334152762312676921133624051168940817865903892997090214159501097997241603185344424810227360569767886901658508914717819387760635901824660947938796941642460399170111143796793156856634009422349818143947262685178807938549388138287681555995508698977295037594135656538624892517735216104401235804978, 19703989276128579847076476848899002659695039512136459426637790674933329268053509523645116022627877355721599775333883095285751759221736313984198660551863329947412556215691527518951119591197450423277438733191151653085195488305757310694499293449100108574981362635828059309918833297115589471736564051849673468541, 48808272753963655235878925836516538354513304071403976737620084164299106885017861291624038322986931804169473666863849885195055408724467789099646195818504871635397295726146469152105813105095402865515688367564927477370678300340510492820794182160823506991535096342797842572032569985501816510226214065216785138576, 21881647738346900748802640372738619880584292414599618298353981842142221993570272818027551160270384349663712872429846078822298253228384715323208954545707253644012910299377597500945788899499696432159117678406260986508611103467459864965905337322242059571007760001330864287815746743992513464227562012665222802139]</span><br><span class="hljs-string">b&#x27;2v\xa7F0aU\xdaJK\x1e\xff\r!&gt;\x84\xf3\xe3\xe5sC\xd6\xa2\x8a-vJ\xe15g\xf0\xcb-^g\xaeJ\x05o.N\xd2\xb1\x12\x06\xe0\x05\xf9\xcc\x0f\xcf\xac(\x1d\x9c\\\xfcz\xe9\xf4\x04\x99V[\x98\xc7\xeb(\xfe\xa1X\x1a\x89\xaa\x17,\xf7\xc9d\x069\xb3\x1d\x0chd\x9d6Z\xdaT\xf8\xba1\x16\xf8&#123;Z\xb3D\xd9\x05\xf8\xb8E\xb8\xd75V\xcc-\x80al\xc3\xf2\xd6.\xcaNt\xfa\xed\x83\x14T\xb3\xe1&#x27;</span><br><span class="hljs-string">b&#x27;n1ctf&#123;b9e7d419-0df8-438a-9120-efdf3ddf155f&#125;&#x27;</span><br><span class="hljs-string">b&quot;a\x90\x90(K\xa8\x92&amp;\x82\x8f6\xdf\x86^\xa8p\x94\xf9^@wR\x08-g\xc19\x90\xae\x02\xfdQ\x1a\xb21U^(\xe0]9\n\xba\x86\xc1z!\xf1M\xc1\xa1\xcc\xb9~m:w\x0e\xf5\xe2s-\x83\xb0\xb0H^\xed\xe1H\xd5\x83yHp\xcf\x15\xed\xc6\xd8\xf1S\xf1B\xb2\xc1\xce!\xc0\x01\xbc\x82:0\xdd\xdfLy\xe3\xedJ\x9b\x0b\x14\xa0t\xef \x15\x02\xd8O\xfe\x8a&#x27;&#125;3\x96\xc1\xbf\xef\x01\xcf\xf4\xb4\xa1\xc7\x90&quot;</span><br><span class="hljs-string">b&#x27;/\x19\xe8\xe2\x1bG&lt;L8D\x17\xe0y=i\xeb\xa1\x15x\xcd3&#123;e\xa3:J\xee\xafx\x9b\x0c\x85\xedS\xc9\xa7\x14#q.\xea8\tt\xba\x9a\x1b\xf7\x81\xb1\xd2 \x91`\xd0\xddz\x94\x0b\xeen\x94-U\x17\x80s\xc4\xe2\xa7&#125;h\xef\x9eY\xa2\x1e$b\xd2\xb7\xa0\xd46J\xcbbN\xd9\x8d\xe2\xeb\xb9d\xfeK\x05Pi\xd5\xa1\xf9x\x94\x87\xf0K#\x1fc\xe4\x00\xcfM\x90\xef\xc3\xcc]\xa4\xdekH\xa2\xd5\x82z,&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>flag：<code>n1ctf&#123;b9e7d419-0df8-438a-9120-efdf3ddf155f&#125;</code></p><h2 id="4-强网杯2024-traditional-game"><a href="#4-强网杯2024-traditional-game" class="headerlink" title="4.[强网杯2024]traditional game"></a>4.[强网杯2024]traditional game</h2><h3 id="4x01-题目大意"><a href="#4x01-题目大意" class="headerlink" title="4x01 题目大意"></a>4x01 题目大意</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secret,flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_handle_timeout</span>(<span class="hljs-params">signum, frame</span>):<br>    <span class="hljs-keyword">raise</span> TimeoutError(<span class="hljs-string">&#x27;function timeout&#x27;</span>)<br><br>timeout = <span class="hljs-number">300</span><br>signal.signal(signal.SIGALRM, _handle_timeout)<br>signal.alarm(timeout)<br><br>random.seed(secret + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time())).encode())<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.p = getPrime(<span class="hljs-number">512</span>)<br>        <span class="hljs-variable language_">self</span>.q = getPrime(<span class="hljs-number">512</span>)<br>        <span class="hljs-variable language_">self</span>.e = getPrime(<span class="hljs-number">128</span>)<br>        <span class="hljs-variable language_">self</span>.n = <span class="hljs-variable language_">self</span>.p * <span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-variable language_">self</span>.phi = (<span class="hljs-variable language_">self</span>.p - <span class="hljs-number">1</span>) * (<span class="hljs-variable language_">self</span>.q - <span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.d = <span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.e, -<span class="hljs-number">1</span>, <span class="hljs-variable language_">self</span>.phi)  <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pub</span> lic_key(<span class="hljs-variable language_">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.n, <span class="hljs-variable language_">self</span>.e)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_private_key</span>(<span class="hljs-params">self, blind_bit=<span class="hljs-literal">None</span>, unknown_bit=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> blind_bit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> unknown_bit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            blind = getPrime(blind_bit)<br>            d_ = ((<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.d &gt;&gt; unknown_bit) // blind * blind) &lt;&lt; unknown_bit) + <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.d % blind)<br>            <span class="hljs-keyword">return</span> (d_, blind)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.d, <span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == <span class="hljs-built_in">bytes</span>:<br>            m = bytes_to_long(m)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span>(m) == <span class="hljs-built_in">str</span>:<br>            m = bytes_to_long(m.encode())<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-variable language_">self</span>.e, <span class="hljs-variable language_">self</span>.n)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">self,m0,m1,b</span>):   <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.encrypt([m0,m1][b]) <br><br><br>rsa = RSA()<br>token = os.urandom(<span class="hljs-number">66</span>) <br><br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;[+] Welcome to the game!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] rsa public key: <span class="hljs-subst">&#123;rsa.get_public_key()&#125;</span>&quot;</span>)<br><br>coins = <span class="hljs-number">100</span><br>price = <span class="hljs-number">100</span><br><span class="hljs-keyword">while</span> coins &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=================================&quot;</span>)<br>    b = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>    c = rsa.game(<br>        <span class="hljs-string">b&#x27;bit 0:&#x27;</span> + os.urandom(<span class="hljs-number">114</span>), <br>        <span class="hljs-string">b&#x27;bit 1:&#x27;</span> + os.urandom(<span class="hljs-number">114</span>), <br>        b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] c:&quot;</span>,c)<br>    guessb = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[-] b:&quot;</span>))<br>    coins -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> guessb == b:<br>        price -= <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] correct!&quot;</span>) <br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] wrong!&quot;</span>) <br><br><span class="hljs-keyword">if</span> price != <span class="hljs-number">0</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] game over!&quot;</span>)<br>    exit()<br><br>blind_bit = <span class="hljs-number">40</span><br>unknown_bit = <span class="hljs-number">365</span><br><br>d_,blind = rsa.get_private_key(blind_bit, unknown_bit)<br><br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;[+] Now, you have permission to access the privkey!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] privkey is: (<span class="hljs-subst">&#123;d_&#125;</span>,<span class="hljs-subst">&#123;blind&#125;</span>).&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] encrypt token is: <span class="hljs-subst">&#123;rsa.encrypt(bytes_to_long(token))&#125;</span>&quot;</span>)<br><br>guess_token = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[-] guess token:&quot;</span>))<br><span class="hljs-keyword">if</span> guess_token == token:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] correct token, here is your flag:&quot;</span>,flag)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] wrong token&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>题目还是分为两部分，后面一步一步地来看。</p><h3 id="4x02-Part-1"><a href="#4x02-Part-1" class="headerlink" title="4x02 Part 1"></a>4x02 Part 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">coins = <span class="hljs-number">100</span><br>price = <span class="hljs-number">100</span><br><span class="hljs-keyword">while</span> coins &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=================================&quot;</span>)<br>    b = random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>    c = rsa.game(<br>        <span class="hljs-string">b&#x27;bit 0:&#x27;</span> + os.urandom(<span class="hljs-number">114</span>), <br>        <span class="hljs-string">b&#x27;bit 1:&#x27;</span> + os.urandom(<span class="hljs-number">114</span>), <br>        b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] c:&quot;</span>,c)<br>    guessb = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[-] b:&quot;</span>))<br>    coins -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> guessb == b:<br>        price -= <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] correct!&quot;</span>) <br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] wrong!&quot;</span>) <br><br><span class="hljs-keyword">if</span> price != <span class="hljs-number">0</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] game over!&quot;</span>)<br>    exit()<br><br>blind_bit = <span class="hljs-number">40</span><br>unknown_bit = <span class="hljs-number">365</span><br></code></pre></td></tr></table></figure><p>这一部分是区分两个值的特定比特。不是，就前面两个一样，后面 $912$ 位都不一样，这还能区分？</p><p>然后当时在那边想了半天，比赛的时候实在没想出来怎么搞这个。赛后问了其他的师傅：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dns">Dialog huangx607087-DeeBaTo<br><br>huangx6<span class="hljs-number">07087 2024</span>/<span class="hljs-number">11/7 17:29</span>:<span class="hljs-number">09</span><br>师傅在吗？想问问你那边有无前几天强网杯的wp，之前看了rec师傅对那个traditional game的第一问也是开两个进程，同时连接容器，去获得同样的随机数种子做的，我很好奇那个题第一问的正确做法。<br><br>DeeBaTo <span class="hljs-number">2024/11/7</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">22</span><br>就是这个<br><br>DeeBaTo <span class="hljs-number">2024/11/7</span> <span class="hljs-number">17</span>:<span class="hljs-number">29</span>:<span class="hljs-number">34</span><br>网络协议里的反射攻击<br><br>Dialog huangx607087-rec<br><br>rec <span class="hljs-number">2024/11/7</span> <span class="hljs-number">17</span>:<span class="hljs-number">32</span>:<span class="hljs-number">39</span><br>上个月blackhat我和他一起打的<br><br>rec <span class="hljs-number">2024/11/7</span> <span class="hljs-number">17</span>:<span class="hljs-number">32</span>:<span class="hljs-number">43</span><br>有个题就是这样<br><br></code></pre></td></tr></table></figure><p>？？？好家伙，奇怪的知识增加了。所以开两个进程，然后同时连接。真会玩啊。。</p><p>大概代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solve</span>:<br>    <span class="hljs-variable language_">self</span>.sh=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">60716</span>) <span class="hljs-comment"># for solve 2</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>():<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solve1</span>():<br>        th=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">60716</span>) <span class="hljs-comment">#only used in solve1</span><br>        A=[]<br>        <span class="hljs-comment">#solve code,collect results</span><br>        <span class="hljs-keyword">return</span> A<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solve2</span>(<span class="hljs-params">resultarr</span>):<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solveall</span>():<br>        resultarr=solve1()<br>        solve2(resultarr)<br>    <br></code></pre></td></tr></table></figure><p>参考网址：<a href="https://blog.s1um4i.com/2024-QWBCTF/#traditional_game">2024 强网杯 部分题解 - S1uM4i</a></p><h3 id="4x03-Part-2"><a href="#4x03-Part-2" class="headerlink" title="4x03 Part 2"></a>4x03 Part 2</h3><p>参考：<a href="https://tangcuxiaojikuai.xyz/post/df3f7032.html#more">糖醋小鸡块的blog </a></p><p>通过Part1之后，我们可以获得 $d_x$ 的值，其值为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_private_key</span>(<span class="hljs-params">self, blind_bit=<span class="hljs-literal">None</span>, unknown_bit=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> blind_bit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> unknown_bit <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        blind = getPrime(blind_bit)<br>        d_ = ((<span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.d &gt;&gt; unknown_bit) // blind * blind) &lt;&lt; unknown_bit) + <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.d % blind)<br>        <span class="hljs-keyword">return</span> (d_, blind)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.d, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>这边 <code>unknown_bit=365,blind_bit=40</code>。</p><p>根据 $d_x$ 的表达式，如果化成十六进制，最低 40 位就是 $d \bmod b$ 的值，同时，题目中也告诉了我们 $b$ 的值。此时，我们知道了  $d$ 的高位和低位。</p><p>因此可以得到<br>$$<br>C&#x3D;e(bd_h+bd_m+d_l)&#x3D;1+k\varphi<br>$$<br>其中，$ed-1&#x3D;k\varphi&#x3D;k(n-(p+q)+1)\equiv k-k(p+q)\pmod n$。</p><p>但是这边 $k$ 不知道啊，看了参考的wp，然后自己动手实验了一下，因为 $d$ 高位知道了很多，$n$ 和 $\varphi$ 的高 $511$ 位是相同的，所以有<br>$$<br>\left \lfloor \frac{ebd_h}{n}\right \rfloor+1&#x3D;k<br>$$<br>设<br>$$<br>C&#x3D;e(bd_h+d_l-k(n+1)-1)<br>$$<br>到这一步，LLL就很简单了。我们期待求出 $(p+q,d_m)$，根据上面的式子，有<br>$$<br>ebd_m+k(p+q)\equiv n \pmod C<br>$$<br>其中：$d_m$ 预期为 $365$ 位，$(p+q)$ 预期为 $513$ 位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">dh=(((dx&gt;&gt;<span class="hljs-number">365</span>)//b)*<span class="hljs-number">2</span>**<span class="hljs-number">365</span>)<br>dl=(dx&amp;<span class="hljs-number">0xffffffffff</span>)<br><span class="hljs-built_in">print</span>(dh,dl)<br>k=<span class="hljs-number">1</span>+(e*dh*b//n)<br>C=e*(b*dh+dl)-k*(n+<span class="hljs-number">1</span>)-<span class="hljs-number">1</span><br>M=[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,k],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,e*b],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,C]]<br>M=Matrix(ZZ,M)<br>M=M*diagonal_matrix(ZZ,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">148</span>,C]) <span class="hljs-comment">#148=513-365</span><br>M3L=M.LLL()<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> M3L:<br>    <span class="hljs-built_in">print</span>(v)<br><span class="hljs-comment">#(-165382578491530217740294945789051327054550730412409, 6069854417684843869781185345814449921057599813490779103392444182843066433073577984, 0)</span><br><span class="hljs-comment">#(24253655408554923753657477074063654465943861814895829354859517611675085695676047250571909835358720051039798073116052933831237123986406228006920402560817446, 660828381258241436840092787866586880655656505125224479398221243621629860031648793514091179644037262606768135285755491647488, 0)</span><br><span class="hljs-comment">#(13265834046843137898321312630162668582611515930035, -486881279321864056104093205528514024155683530545938397465394105939234142703058944, 412587550651454677464807044872817944212261052389482413806028317495998064325432106958378875349983999689868802166640436956611193538891106166781061387911779019238685876501201863206243588919056176)</span><br></code></pre></td></tr></table></figure><p>然后解出来一看：第二个向量是 $513$ 位，貌似成功了吗？</p><p>拿进去试一下，发现不对。。并且第一个向量非常短，经过测试，里面的结果是 $(-k,2^{148}eb,0)$，是一个非常非常trivial的解。如果令 $p+q&#x3D;x,d_m&#x3D;y$，那么有 $kx+eby$，那么 $(x,y)&#x3D;(-eb,k)$ 当然也是一组解咯。</p><p>设第二组数据为 $(x_2,y_2,0)$，由于 $x_2,y_2$ 大小符合预期，参考wp中的提示，可以认为 $p+q&#x3D;x_2+teb$，也就是<br>$$<br>p+q\equiv x_2\pmod {eb}<br>$$</p><p>因为我是本地数据测试，所以可以有 $p,q$，测一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x2=<span class="hljs-built_in">abs</span>(M3L[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>paddqL=(x2%(e*b))<br>paddqH=(x2//(e*b))*(e*b)<br><span class="hljs-built_in">print</span>(paddqL,paddqH)<br><span class="hljs-built_in">print</span>((p+q)%(e*b)==paddqL)<br><span class="hljs-comment">#True</span><br></code></pre></td></tr></table></figure><p>然后再测一下 $eb$ 进制下，$p+q$ 和 $x_2$ 的差别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getradixb</span>(<span class="hljs-params">x,bb</span>):<br>    arr=[<span class="hljs-number">0</span>]*<span class="hljs-number">30</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        arr[i]=x%bb<br>        x//=bb<br>    <span class="hljs-keyword">return</span> arr<br>A=<span class="hljs-built_in">print</span>(getradixb((dh*b)+dl,e*b))<br>B=<span class="hljs-built_in">print</span>(getradixb(d,e*b))<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-built_in">print</span>(B)<br><span class="hljs-comment">#[104668899241649537541186210781987061154261026601556, 92109567048793027288125736075569023185167845386074, 62813493539693390648778685609015503369769016471552, 80689223742648360656616346585665194908177979489243, 70805628792722422704735895621626856114034836989125, 41818883498127627092744577886150813128254101231100, 711081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-comment">#[157342616402321470506410965081459618389668038679383, 105869422956878578854817467532416606067687308116443, 62813493539693390648778685611216892179500683590388, 80689223742648360656616346585665194908177979489243, 70805628792722422704735895621626856114034836989125, 41818883498127627092744577886150813128254101231100, 711081, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><p> 好像差的不多，不是吗（</p><p>然后就似乎已知 $d$ 部分位求解了，这一部分完全参考了鸡块佬的，下你求一个大概解，然后使用CRT求 $p$ 低位模 $eb$ 的值，可以发现这个题界卡得非常紧。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="hljs-number">2000</span>))<br>f = x*(paddqH-x) - n <br>ph = <span class="hljs-built_in">int</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) // (e*b) * (e*b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br>R.&lt;x&gt; = PolynomialRing(Zmod(e))<br>fe = x*(paddqL-x) - n<br>rese = fe.roots()<br>R.&lt;x&gt; = PolynomialRing(Zmod(b))<br>fb = x*(paddqL-x) - n<br>resb = fb.roots()<br>rese=[rese[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rese))]<br>resb=[resb[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(resb))]<br><span class="hljs-built_in">print</span>(rese,resb)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rese:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> resb:<br>        pl=crt([<span class="hljs-built_in">int</span>(i),<span class="hljs-built_in">int</span>(j)],[e,b])<br>        PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>        f = ph + e*b*x + pl<br>        f = f.monic()<br>        res = f.small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">245</span>,beta=<span class="hljs-number">0.496</span>,epsilon=<span class="hljs-number">0.015</span>)<br>        <span class="hljs-keyword">if</span>(res!=[]):<br>            pg=ph+e*b*res[<span class="hljs-number">0</span>]+pl<br>            <span class="hljs-keyword">assert</span> (n%<span class="hljs-built_in">int</span>(pg)==<span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">print</span>(pg)<br>            qg=<span class="hljs-built_in">int</span>(n)//<span class="hljs-built_in">int</span>(pg)<br>            dg=inverse(<span class="hljs-built_in">int</span>(e),<span class="hljs-built_in">int</span>((pg-<span class="hljs-number">1</span>)*(qg-<span class="hljs-number">1</span>)))<br>            <span class="hljs-built_in">print</span>(pg,qg)<br></code></pre></td></tr></table></figure><p>some situation.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">rec <span class="hljs-number">2024</span><span class="hljs-regexp">/11/</span><span class="hljs-number">3</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">01</span><br>这个我和鸡块搞了一天。。<br><br>rec <span class="hljs-number">2024</span><span class="hljs-regexp">/11/</span><span class="hljs-number">3</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">10</span><br>我一个朋友出的，毫不留情<br></code></pre></td></tr></table></figure><p>麻了。</p><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h2><p>好难啊，不过好在自己学到了很多，也算是挺有收获的了吧。</p><p>计划11月24日从贵阳回来之后，停一段时间CTF，预计12月5日恢复，12月15日打个国赛，后面考试和pre太多了，整个人要爆炸了:(</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24Nov2</title>
    <link href="/2024/11/15/24Nov2/"/>
    <url>/2024/11/15/24Nov2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-11月的切题2"><a href="#huangx607087-11月的切题2" class="headerlink" title="huangx607087 11月的切题2"></a>huangx607087 11月的切题2</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><p>自博客创立以来，ExpLog并不多：分别是21Jan1,21Jan2,21Jan3,21Jan4,21Feb1,21Feb2,21May1和24Nov1。（好家伙，这跨度）。21年那个时候自己确实切了很多题，也是当时进步最快的时候，不过后期因为保研要卷G.所以CTF就没怎么打了。（当然如果本科保研和CTF二选一让我再选一次的话，当然还是得选保研），因为这样才能在研一导师放养的时候，继续搞技术。</p><blockquote><p>怎么除了第一题全是鹏城杯？算了，混个第一题进去，名字不变了吧，还叫24Nov2，不改成鹏城杯wp了</p></blockquote><h2 id="1-2024强网拟态-CFBChall"><a href="#1-2024强网拟态-CFBChall" class="headerlink" title="1.[2024强网拟态]CFBChall"></a>1.[2024强网拟态]CFBChall</h2><p>首先来先看一下题目代码（本地复现时，对题目代码有所修改）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br>key = os.urandom(<span class="hljs-number">16</span>)<br>iv  = os.urandom(<span class="hljs-number">16</span>)<br>register_open = <span class="hljs-literal">True</span><br>login_attempts = <span class="hljs-number">500</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">data, key</span>):<br>    cipher = AES.new(key, AES.MODE_CFB, iv=iv)<br>    ct_bytes = cipher.encrypt(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> ct_bytes.<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ct, key</span>):<br>    ct_bytes = <span class="hljs-built_in">bytes</span>.fromhex(ct)<br>    cipher = AES.new(key, AES.MODE_CFB, iv=iv)<br>    data = cipher.decrypt(ct_bytes[:])<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;debug:(key,iv)=&#x27;</span>,key.<span class="hljs-built_in">hex</span>(),iv.<span class="hljs-built_in">hex</span>()) <span class="hljs-comment">#这个是我本地复现加的，真实情况没有这个。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">InitialGlobals</span>():<br>    <span class="hljs-keyword">global</span> key,iv,register_open,login_attempts<br>    key = os.urandom(<span class="hljs-number">16</span>)<br>    iv  = os.urandom(<span class="hljs-number">16</span>)<br>    register_open = <span class="hljs-literal">True</span><br>    login_attempts = <span class="hljs-number">500</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Register</span>(<span class="hljs-params">username,password</span>):<br>    <span class="hljs-keyword">global</span> key,iv,register_open,login_attempts<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> register_open:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(password)&lt;<span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">set</span>(password+username)&lt;=<span class="hljs-built_in">set</span>(printable):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> username:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            token = encrypt(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;username&#125;</span>\x00<span class="hljs-subst">&#123;password&#125;</span>\x01\x02\x03&quot;</span>, key)<br>            register_open = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> token<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">username,password,token</span>): <span class="hljs-comment">#函数和原题有所差别。</span><br>    <span class="hljs-keyword">global</span> key,iv,register_open,login_attempts<br>    <span class="hljs-keyword">if</span> login_attempts &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">try</span>:<br>            decrypted = decrypt(token, key)<br>            token_username, *_, token_password = decrypted.split(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>            <span class="hljs-keyword">assert</span>(token_password[-<span class="hljs-number">3</span>:]==<span class="hljs-string">b&quot;\x01\x02\x03&quot;</span>)<br>            token_password=token_password[:-<span class="hljs-number">3</span>]<br>            <span class="hljs-keyword">if</span> username == token_username <span class="hljs-keyword">and</span> password == token_password:<br>                <span class="hljs-keyword">if</span> username == <span class="hljs-string">b&#x27;admin&#x27;</span>:<br>                    <span class="hljs-keyword">if</span> password == <span class="hljs-string">b&#x27;123456&#x27;</span>:<br>                        <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;flag&#123;This is a flag&#125;&#x27;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;failed&#x27;</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;failed&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;failed&#x27;</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;failed&#x27;</span><br>        <span class="hljs-keyword">finally</span>:<br>            login_attempts -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在原始题目中，你有一次注册的机会，输入用户名和密码，然后他会给你一个加密的token，token的格式是<code>username||\x00||password||\x01\x02\x03</code>，用AES-CFB加密。登陆时需要以<code>admin</code> 的身份和 <code>123456</code> 的密码登录就可以获得flag。题目中没有限制交互次数，但登陆尝试最多为 500 次，整个过程也可以重置参数进行重试。</p><p>在BlockCipher3中，我们回顾了CFB的模式，CFB模式将分组密码当流密码使用。在Crypto.Util.Cipher中的实现为逐字节加密：投入初始向量 $(u_0,u_1,…,u_{15})$ ，对初始向量用密钥加密后，将一个字节（目前尚不清楚是首个还是最后一个）和 一字节明文异或得到密文 $u_{16}$，也就是消息首个字节 $m_0$ 的密文为 $u_{16}$。然后下一轮，对 $(u_1,u_2,…,u_{16})$ 用相同的密钥加密， 然后将明文第二字节$m_1$和得出的加密结果的一字节异或得到 $u_{17}$，以此类推。</p><p><img src="/2024/11/15/24Nov2/1.png" alt="1"></p><p>如果使用密钥和IV相同，那么对于两个消息  $M_1&#x3D;A||B,M_2&#x3D;A||C$，那么这两个消息加密后，其前缀 $A$ 会被加密成相同内容</p><p>因为AES的分组长度为 16 字节，因此当出现1字节错误时，后面 16 字节会出现错误，16字节之后会恢复正常。之所以CFB、OFB、CTR模式可以在分组密码中使用，是因为分组密码良好的扩散性和混淆性，两个相似的明文，经过加密后，会得到样貌相差很大的密文。</p><p>了解了CFB的工作原理，下面我们就需要考虑构建payload了：</p><p>由于其AES良好的扩散性和混淆性，因此，对于两个明文：<code>00 00 00 00</code>  和 <code>00 00 01 00</code>，假设前者经过加密变成了 <code>f0 e0 d0 c0</code>，那么后者经过相同加密，前三字节一定是 <code>f0 e0 d1</code>，但第四字节就无法预知了。因此，为了能够构造admin开头的内容，我们可以根据这个特性，用户名输入<code>admio</code> （<code>o</code> 和<code>n</code> 的异或值为1）。密码的话，由于要求强制八位以上，加上前面一位<code>o</code> 会影响后续 16 位，因此放16个填充字符，然后加上<code>123456</code>，这样最后刚好可以在最后以 <code>\x01\x02\x03</code> 的padding结尾。</p><p>然后就是拼运气了，因为第6位字符开始受到影响，因此第六位对应的密文，我们可以进行爆破，然后赌这中间存在 <code>\x00</code> 进行隔断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">T=<span class="hljs-number">0</span><br>found=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> found:<br>    InitialGlobals()<br>    mytoken=Register(<span class="hljs-string">&#x27;admio&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">16</span>+<span class="hljs-string">&#x27;123456&#x27;</span>)<br>    mytoken=mytoken[:<span class="hljs-number">8</span>]+<span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(mytoken[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-number">16</span>)^<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;XX&#x27;</span>+mytoken[<span class="hljs-number">12</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        ftoken=mytoken.replace(<span class="hljs-string">&#x27;XX&#x27;</span>,<span class="hljs-string">&#x27;&#123;:02x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>        chk=Login(<span class="hljs-string">b&#x27;admin&#x27;</span>,<span class="hljs-string">b&#x27;123456&#x27;</span>,ftoken)<br>        T+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(chk[:<span class="hljs-number">4</span>]==<span class="hljs-string">&#x27;flag&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;success with <span class="hljs-subst">&#123;T&#125;</span> queries&#x27;</span>)<br>            found=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(decrypt(ftoken,key))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;debug:(key,iv)=&#x27;</span>,key.<span class="hljs-built_in">hex</span>(),iv.<span class="hljs-built_in">hex</span>()) <span class="hljs-comment">#本地复现，可以输出调试用。</span><br></code></pre></td></tr></table></figure><p>一个可能的输出结果，30000多次可以拿到flag，不过本地测试时交互时间不定，运气好2000多次出结果，运气差要10万次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">success <span class="hljs-keyword">with</span> <span class="hljs-number">35192</span> queries<br><span class="hljs-string">b&#x27;admin\x00\x0e-\xb0[.\xd3\xd4\xb9\xd5\x1f`\xd2\xe9)\x9e\x00123456\x01\x02\x03&#x27;</span><br>debug:(key,iv)= fe419d0b1dcd16b75247181d1e7fa0f5 8b49ad0c5018eb41d083058881323f84<br></code></pre></td></tr></table></figure><h2 id="2-2024鹏城杯-babyenc"><a href="#2-2024鹏城杯-babyenc" class="headerlink" title="2.[2024鹏城杯] babyenc"></a>2.[2024鹏城杯] babyenc</h2><p>题目一共分两问，分别来看</p><h3 id="2o01-Part1"><a href="#2o01-Part1" class="headerlink" title="2o01 Part1"></a>2o01 Part1</h3><p>第一问的加密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc1</span>(<span class="hljs-params">m, e, shift</span>):<br>    n = next_prime(m &lt;&lt; shift) <span class="hljs-comment">#shift=310</span><br>    tmp = getPrime(<span class="hljs-number">256</span>)<br>    cc = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)):<br>        cc.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(tmp, e[i], n)))<br>    <span class="hljs-keyword">return</span> cc<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">output:e = [43, 37, 53, 61, 59]</span><br><span class="hljs-string">c1 = [304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117, 300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224, 294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531, 255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835, 194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978]</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>在这一问中，给出了五组 $t^{e} \bmod n$ 的值，其中 $n$ 是 $2^{310}m$ 的下一个素数，而 $e$ 的值很小。但这边 $n,t$ 都不知道。</p><p>设 $A,B,C,D,E$ 分别为 $5$ 个 $c$ 值，那么有 $(t^{43},t^{37},t^{53},t^{61},t^{59})\equiv (A,B,C,D,E) \pmod n$。</p><p>因此，可以得到等式：<br>$$<br>\frac{A}{B}\equiv\frac{E}{C}\equiv\frac{D^3}{E^3}\equiv t^{6} \pmod n<br>$$<br>也就是<br>$$<br>AC-BE \equiv AE^3-BD^3\equiv E^4-CD^3\equiv 0\pmod n<br>$$<br>随便取两组数据，比如计算 $|AC-BE|$ 和 $|AE^3-BD^3|$（不取模），然后求最大公约数就可以得到 $n$ 了。当然也可以选第三组数据 $|E^4-CD^3|$。</p><p>$n$ 得到后直接右移 $310$ 位，得到flag前半部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = [<span class="hljs-number">43</span>, <span class="hljs-number">37</span>, <span class="hljs-number">53</span>, <span class="hljs-number">61</span>, <span class="hljs-number">59</span>]<br>c1 = [<span class="hljs-number">304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117</span>, <span class="hljs-number">300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224</span>, <span class="hljs-number">294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531</span>, <span class="hljs-number">255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835</span>, <span class="hljs-number">194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978</span>]<br><br>aa,bb,cc,dd=c1[<span class="hljs-number">1</span>],c1[<span class="hljs-number">0</span>],c1[<span class="hljs-number">2</span>],c1[<span class="hljs-number">4</span>]<br><span class="hljs-comment">#Ax^6=B (mod u)</span><br><span class="hljs-comment">#Cx^6=D (mod u)</span><br><span class="hljs-comment">#B/A=D/C</span><br><span class="hljs-comment">#BC=AD (mod u)</span><br>F=bb*cc-aa*dd<br>aaa,bbb,ccc,ddd=c1[<span class="hljs-number">1</span>],c1[<span class="hljs-number">0</span>],c1[<span class="hljs-number">4</span>],c1[<span class="hljs-number">3</span>]<br><span class="hljs-comment">#Ax^6=B</span><br><span class="hljs-comment">#Cx^2=D</span><br><span class="hljs-comment">#C^3x^6=D^3</span><br><span class="hljs-comment">#B/A=D/C</span><br>G=<span class="hljs-built_in">abs</span>(bbb*(ccc**<span class="hljs-number">3</span>)-aaa*(ddd**<span class="hljs-number">3</span>))<br><br>u=gcd(F,G)<br><span class="hljs-built_in">print</span>(u,isPrime(<span class="hljs-built_in">int</span>(u)))<br>u3=u&gt;&gt;<span class="hljs-number">310</span><br>long_to_bytes(u3)<br><span class="hljs-comment"># print(u,isPrime(int(u))) 输出结果</span><br><span class="hljs-comment">#312246073793634738336797238973383686069608357320504281244915809376146746877615304143136570336999218383069369602336776078145547720220248077500917 True</span><br><span class="hljs-comment">#Out[29]:</span><br><span class="hljs-comment">#b&#x27;flag&#123;3e99c26b-efdd-4c&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2o02-Part-2"><a href="#2o02-Part-2" class="headerlink" title="2o02 Part 2"></a>2o02 Part 2</h3><p>然后是第二问：第二问给了 $g&#x3D;m^p \pmod n,h&#x3D;m^q\pmod n$。这一问由于 $n&#x3D;pq$，因此如果把 $g,h$写成中国剩余定理的形式，就是：</p><p><img src="/2024/11/15/24Nov2/2.png" alt="2"></p><p>根据费马小定理 $m^p\equiv m\pmod p$，可以有</p><p><img src="/2024/11/15/24Nov2/3.png" alt="3"></p><p>此，去掉同余，我们可以写成： $g&#x3D;up+m,h&#x3D;vq+m$。</p><p>也就是 $(g-m)(h-m)\equiv gh-m(g+h)+m^2\equiv (up)(vq) \equiv uvpq\equiv 0\pmod n$</p><p>注意到 $m$ 是 $21\times8&#x3D;168$ 位，而 $n$是2048位，m相对于n特别小。</p><p>上面式子去同余，有 $(g-m)(h-m)&#x3D;gh-m(g+h)+m^2-wn&#x3D;0$。</p><p>因此可以构造矩阵，LLL格基归约搞出$m$（这个$K&#x3D;2^{1600}$是为了扩大最短向量的长度，否则最短向量就是矩阵第三行的$(0,0,0,1,-1)$）</p><p><img src="/2024/11/15/24Nov2/4.png" alt="4"></p><p><strong>事后补充：</strong> 这边因为 $m$ 只有 $168$ 位，所以随便乱搞就出来了，但其实从闵可夫斯基定理来看，你右边整体乘一行， $\det M$ 只增加了 $K$ 倍。正确做法还要考虑三个 $1$ 过小带来的影响。因为 $m$ 是 $168$ 位，那么 $m^2$ 就是 $376$ 位。因此构造的矩阵前 $3$ 列最好乘一个 $(2^{376},2^{168},1)$ 的系数，来保证两边平衡。最终结果为 $(2^{376},2^{168}m,m^2)$。</p><p>最后就可以得到 $m$了，可以看到结果与预期相符，差个符号取正就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># In [1]:</span><br>n = <span class="hljs-number">16175064088648626038689748434699435826247716579187475966092822028609536761351820951820375552440329596553448265674841223230257463367834546091974959931391707199002842774795702094681528411058318007858638798643010942408552063479863545047616823056802010158288409527763686086960916160949496083789920012040215745627854092010308869223489833074860062054019221397227691063339148923860987250696934050122115972982286012688955816234717242567815830341836031567275888691320640526306946586793028267588302696611724356566003447616419092371914903382944112125852939011729294400479171568234647164730191643282793224422368321464125847020067</span><br>c2 = [<span class="hljs-number">12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364</span>, <span class="hljs-number">13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span>]<br>g,h=c2<br>K=<span class="hljs-number">2</span>**<span class="hljs-number">1600</span><br>M=Matrix(ZZ,[[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,g*h*K],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-(g+h)*K],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>*K],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,K*n]])<br><span class="hljs-built_in">print</span>(M.LLL()[<span class="hljs-number">0</span>])<br><br><span class="hljs-comment"># Out [1]:</span><br><span class="hljs-comment">#(-1, -146436625375651639081292195233290471195543268962429, -21443685251408941546679213362069702254265669437874360093122983595763055555796655464630848682213580041, 0)</span><br><span class="hljs-comment">#对应(1,m,m^2,w,0)，差个了符号，无所谓</span><br><br><span class="hljs-comment"># In [2]:</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>long_to_bytes(<span class="hljs-number">146436625375651639081292195233290471195543268962429</span>)<span class="hljs-comment">#直接复制上面第二个分量即可。</span><br><span class="hljs-comment"># Out [2]:</span><br><span class="hljs-comment">#b&#x27;d2-bbe5-1420eaaa3b30&#125;&#x27;</span><br><span class="hljs-comment">#最终flag:flag&#123;3e99c26b-efdd-4cd2-bbe5-1420eaaa3b30&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-2024鹏城杯-tarscr"><a href="#3-2024鹏城杯-tarscr" class="headerlink" title="3.[2024鹏城杯] tarscr"></a>3.[2024鹏城杯] tarscr</h2><p>这个题目 $d_q$ 很小，$p$ 和 $q$ 的大小也不平衡。也就是 $p&lt;n^{\beta},d_q&lt;n^{\delta}$。这里 $\beta&#x3D;0.3,\delta&#x3D;0.1$。</p><p>一开始根据 <a href="https://link.springer.com/content/pdf/10.1007%2F3-540-45708-9_16.pdf">这篇文献</a>中的方法做的，因为 $\beta&lt;0.382$，但这篇文献还有一个要求就是 $3\beta-\beta^2+2\delta&lt;1$，因此不满足条件。</p><p>因此根据 <a href="https://www.iacr.org/archive/pkc2006/39580001/39580001.pdf">这篇文献</a>的方法去做，参考了<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">lazzaro的博客</a>，改一下里面的参数即可。</p><p>貌似是2022NCTF的原题？那个时候我CTF已经退役了（不过话说回来，再给我一次选择，CTF和保研之间我当然还是选择保研啦，保研深造3年，去认识认识更多的大佬，<strong>对我而言</strong>还是比直接工作好。当然，以前CTF队友本科毕业直接工作，还去了很不错的单位，毕竟他们不需要读研就可以找到一个非常好的工作，也是挺令人羡慕的）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#reference: https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html</span><br><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> deepcopy<br><span class="hljs-comment"># https://www.iacr.org/archive/pkc2006/39580001/39580001.pdf</span><br><span class="hljs-comment"># Author: ZM__________J, To1in</span><br>N = <span class="hljs-number">61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span><br>e = <span class="hljs-number">22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span><br>alpha = log(e, N)<br>beta = <span class="hljs-number">0.3</span><br>delta = <span class="hljs-number">0.1</span><br>P.&lt;x,y,z&gt;=PolynomialRing(ZZ)<br> <br>X = ceil(<span class="hljs-number">2</span> * N^(alpha + beta + delta - <span class="hljs-number">1</span>))<br>Y = ceil(<span class="hljs-number">2</span> * N^beta)<br>Z = ceil(<span class="hljs-number">2</span> * N^(<span class="hljs-number">1</span> - beta))<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x*(N-y)+N<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trans</span>(<span class="hljs-params">f</span>):<br>    my_tuples = f.exponents(as_ETuples=<span class="hljs-literal">False</span>)<br>    g = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> my_tuple <span class="hljs-keyword">in</span> my_tuples:<br>        exponent = <span class="hljs-built_in">list</span>(my_tuple)<br>        mon = x ^ exponent[<span class="hljs-number">0</span>] * y ^ exponent[<span class="hljs-number">1</span>] * z ^ exponent[<span class="hljs-number">2</span>]<br>        tmp = f.monomial_coefficient(mon)<br>        <br>        my_minus = <span class="hljs-built_in">min</span>(exponent[<span class="hljs-number">1</span>], exponent[<span class="hljs-number">2</span>])<br>        exponent[<span class="hljs-number">1</span>] -= my_minus<br>        exponent[<span class="hljs-number">2</span>] -= my_minus<br>        tmp *= N^my_minus<br>        tmp *= x ^ exponent[<span class="hljs-number">0</span>] * y ^ exponent[<span class="hljs-number">1</span>] * z ^ exponent[<span class="hljs-number">2</span>]<br>        <br>        g += tmp<br>    <span class="hljs-keyword">return</span> g<br>  <br>m = <span class="hljs-number">5</span> <span class="hljs-comment"># need to be adjusted according to different situations</span><br>tau = ((<span class="hljs-number">1</span> - beta)^<span class="hljs-number">2</span> - delta) / (<span class="hljs-number">2</span> * beta * (<span class="hljs-number">1</span> - beta))<br>sigma = (<span class="hljs-number">1</span> - beta - delta) / (<span class="hljs-number">2</span> * (<span class="hljs-number">1</span> - beta))<br> <br><span class="hljs-built_in">print</span>(sigma * m)<br><span class="hljs-built_in">print</span>(tau * m)<br> <br>s = ceil(sigma * m)<br>t = ceil(tau * m)<br>my_polynomials = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-i+<span class="hljs-number">1</span>):<br>        g_ij = trans(e^(m-i) * x^j * z^s * f(x, y)^i)<br>        my_polynomials.append(g_ij)<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t+<span class="hljs-number">1</span>):<br>        h_ij = trans(e^(m-i) * y^j * z^s * f(x, y)^i)<br>        my_polynomials.append(h_ij)<br>        <br>known_set = <span class="hljs-built_in">set</span>()<br>new_polynomials = []<br>my_monomials = []<br> <br><span class="hljs-comment"># construct partial order</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(my_polynomials) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(my_polynomials)):<br>        f = my_polynomials[i]<br>        current_monomial_set = <span class="hljs-built_in">set</span>(x^tx * y^ty * z^tz <span class="hljs-keyword">for</span> tx, ty, tz <span class="hljs-keyword">in</span> f.exponents(as_ETuples=<span class="hljs-literal">False</span>))<br>        delta_set = current_monomial_set - known_set<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(delta_set) == <span class="hljs-number">1</span>:<br>            new_monomial = <span class="hljs-built_in">list</span>(delta_set)[<span class="hljs-number">0</span>]<br>            my_monomials.append(new_monomial)<br>            known_set |= current_monomial_set<br>            new_polynomials.append(f)            <br>            my_polynomials.pop(i)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;GG&#x27;</span>)<br>        <br>my_polynomials = deepcopy(new_polynomials)<br> <br>nrows = <span class="hljs-built_in">len</span>(my_polynomials)<br>ncols = <span class="hljs-built_in">len</span>(my_monomials)<br>L = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows)]<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows):<br>    g_scale = my_polynomials[i](X * x, Y * y, Z * z)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols):<br>        L[i][j] = g_scale.monomial_coefficient(my_monomials[j])<br>        <br><span class="hljs-comment"># remove N^j</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows):<br>    Lii = L[i][i]<br>    N_Power = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (Lii % N == <span class="hljs-number">0</span>):<br>        N_Power *= N<br>        Lii //= N<br>    L[i][i] = Lii<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols):<br>        <span class="hljs-keyword">if</span> (j != i):<br>            L[i][j] = (L[i][j] * inverse_mod(N_Power, e^m))<br><br>L = Matrix(ZZ, L)<br>nrows = L.nrows()<br> <br>L = L.LLL()<br><span class="hljs-comment"># Recover poly</span><br>reduced_polynomials = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows):<br>    g_l = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols):<br>        g_l += L[i][j] // my_monomials[j](X, Y, Z) * my_monomials[j]<br>    reduced_polynomials.append(g_l)<br> <br>my_ideal_list= [y * z - N] + reduced_polynomials<br> <br><span class="hljs-comment"># Variety</span><br>my_ideal_list = [Hi.change_ring(QQ) <span class="hljs-keyword">for</span> Hi <span class="hljs-keyword">in</span> my_ideal_list]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(my_ideal_list),<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    V = Ideal(my_ideal_list[:i]).variety(ring=ZZ)<br>    <span class="hljs-built_in">print</span>(V)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">OUTPUT:</span><br><span class="hljs-string">2.14285714285714</span><br><span class="hljs-string">4.64285714285714</span><br><span class="hljs-string">52</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">51</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">50</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">49</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">48</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">47</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">46</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">45</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">44</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">43</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">42</span><br><span class="hljs-string">[]</span><br><span class="hljs-string">41</span><br><span class="hljs-string">[&#123;z: 426614979768518060635433317149972303610396098751783498586225631589479798053751568080185868568717967344782297587209012869059719479952019313461850777653567018452929932659204669967695196434044149034271037885062392902287, y: 144996003362760405215910388196517232449311004246441924325936847006315296003811348342536838359, x: 66838488369949543369599279980954380920457752396291961341704448955532596917094831390389571041281062121515985150418852560085&#125;]</span><br><span class="hljs-string">40</span><br><span class="hljs-string">[&#123;z: 426614979768518060635433317149972303610396098751783498586225631589479798053751568080185868568717967344782297587209012869059719479952019313461850777653567018452929932659204669967695196434044149034271037885062392902287, y: 144996003362760405215910388196517232449311004246441924325936847006315296003811348342536838359, x: 66838488369949543369599279980954380920457752396291961341704448955532596917094831390389571041281062121515985150418852560085&#125;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>上面式子中, $y$ 和 $z$ 分别对应 $p$ 和 $q$，$x$ 对应 $d_q$，复制到下一个框内直接解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">N=<span class="hljs-number">61857467041120006957454494977971762866359211220721592255304580940306873708357617802596067329984189345493420858543581027612648626678588277060222860337783377316655375278359169520243355170247177279595812282793212550819124960549824278287538977769728573023023364686725321548391592858202718446127851076431000427033</span><br>p=<span class="hljs-number">426614979768518060635433317149972303610396098751783498586225631589479798053751568080185868568717967344782297587209012869059719479952019313461850777653567018452929932659204669967695196434044149034271037885062392902287</span><br>q=<span class="hljs-number">144996003362760405215910388196517232449311004246441924325936847006315296003811348342536838359</span><br>e=<span class="hljs-number">22696852369762746127523066296087974245933137295782964284054040654103039210164173227291367914580709029582944005335464668969366909190396194570924426653294883884186299265660358589254391341147028477295482787041170991166896788171334992065199814524969470117229229967188623636764051681654720429531708441920158042161</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c = <span class="hljs-number">41862679760722981662840433621129671566139143933210627878095169470855743742734397276638345217059912784871301273620533442249011607182329472311453700434692358352210197988000738272869600692181834281813995048665466937302183039555350612260646428575598237960405962714063137455677605629008760761743568236135324015278</span><br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N)))<br><span class="hljs-comment">#output:b&#x27;flag&#123;tlp17_1s_4w3s0m3&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-2024鹏城杯-PolyPrime"><a href="#4-2024鹏城杯-PolyPrime" class="headerlink" title="4.[2024鹏城杯] PolyPrime"></a>4.[2024鹏城杯] PolyPrime</h2><h3 id="4o01-Problem"><a href="#4o01-Problem" class="headerlink" title="4o01 Problem"></a>4o01 Problem</h3><p>先看看题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, isPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br><br>k = getPrime(<span class="hljs-number">333</span> * <span class="hljs-number">5</span>)<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">temp_calc</span>(<span class="hljs-params">x</span>): <br>    <span class="hljs-keyword">return</span> (x * random.randint(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)) ^ random.randint(<span class="hljs-number">100</span>, <span class="hljs-number">500</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">some_calc</span>(<span class="hljs-params">size, depth</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sums_calc</span>(<span class="hljs-params">base, degree</span>): <br>        result = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree): <br>            temp = temp_calc(base ** i)<br>            result += base ** i + temp // temp_calc(base**(i + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        prime_number = getPrime(size)<br><br>        temp_number = temp_calc(prime_number)<br>        poly_primes = sums_calc(prime_number, depth)  <br>        <span class="hljs-keyword">if</span> temp_number % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>: <br>            temp_number = temp_calc(poly_primes)<br>            <span class="hljs-keyword">continue</span><br>        <br>        <span class="hljs-keyword">if</span> isPrime(poly_primes):<br>            <span class="hljs-keyword">return</span> prime_number, poly_primes<br><br><br>p, q = some_calc(<span class="hljs-number">333</span>, <span class="hljs-number">5</span>)<br><br>n = p * q * k<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n = &#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;e = &#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c = &#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>OUTPUT：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">659401821142664131364043958430747314465977448744532421905138184036743766362324320051729418680079590835903781525157600055608268591994754328563246418114269690475272262915661210669701969695314157602927462228079044905276064391615467601628466982949165371933147600418057089432876120807721483665788557812323607370950442342057254926375842684430119320789097029996211564275310819486004520088130146630452262340185192110066151930586956190499953220051855668474863659201165952231016814569364299000130323859609047687714260776467149437031397019411599103716200258382231589757031469168245396061619327867355414287059363691024984066070128364157490336808211223714816668548049472199794493895870662970541167490686648385211854469386812214775829776376273299648505880034651930322294605482489225723014758138525637864689594748771025870209444029669477294995691067669374491852721622469656239730320092112222948718027850386898461208936333788173263904607181823233002355650353116486156927403178510412091666951574340730799316032588099237</span><br>c = <span class="hljs-number">455042981325030540026829365098432813829591020497037525707600104817313008442900331256387443469027825344761381076471749826547710666806180999603254398722965179851898391700090501419875562919365894255855734276825027850795202733875071307773598881254863911398285400038957998385685292965812925607278232164067624548120378758414574370042945538632864154772437639053907149514588502689277630450575630168099810584842881257614115970132960679023265157277718654731105815060916800751033956715430930381384344469220951638102432198422350425390757155267143393385221465041749156153517556389417033187856017198907366720281408810250981776112815100319814215140919133440637395953567624057248002125277569474190364142291136361144552953540727462623677375371327473687508344483184466522697912317252462246054471196345909304668083637177166153036111122244170846815657389873986264187766636830907458940128844256504176917204131708083105093700023335939233711693409336968008112511482237441198116493965744903995545941700742865846469036763734618</span><br>e = <span class="hljs-number">0x10001</span><br></code></pre></td></tr></table></figure><p>题目给出了 $n&#x3D;pqk$，其中 $k$ 是 $333\times5$ 的素数， $p,q$ 生成方式很奇怪。</p><p>审计一下 <code>temp_calc</code> 函数，给人一种RLWE的感觉。但在 <code>some_calc</code> 中的 <code>sums_calc </code> 中，考虑到 <code>size</code> 是 $333$，那么关注这一部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree): <br>temp = temp_calc(base ** i)<br>result += base ** i + temp // temp_calc(base**(i + <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>temp的数量级是 $333\times i$，而 <code>temp_calc(base**(i+1))</code> 的数量级是 $333\times(i+1)$，是temp的 $2^{333}$ 倍。而<code>temp_calc</code>  返回 $[2x-512,5x+512]$ 的值，对于 $2^{233}$ 完全可以忽略，因此这一部分的值计算结果总为 $0$ 。本地测试了一下也确实如此。</p><p>那么，可以得到：$q&#x3D;p^4+p^3+p^2+p+1$，那么 $n&#x3D;kp(p^4+p^3+p^2+p+1)$。</p><p>对于$$q&#x3D;p+p^2+p^3$$的情形在[ImaginaryCTF 2023](<a href="https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF">https://github.com/maple3142/My-CTF-Challenges/tree/master/ImaginaryCTF</a> 2023)中有过类似的题目，因此可以直接参考那个题目的WP <a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/ImaginaryCTF%202023/Sus/solve.sage">link</a>，简单修改参数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <br>c = <br>e = <br>k = <span class="hljs-number">5</span><br><br>R = Zmod(n)[<span class="hljs-string">&quot;x&quot;</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    Q = R.quo(R.random_element(k))<br>    pp = gcd(ZZ(<span class="hljs-built_in">list</span>(Q.random_element() ^ n)[<span class="hljs-number">1</span>]), n)<br>    <span class="hljs-keyword">if</span> pp != <span class="hljs-number">1</span>:<br>        qq = <span class="hljs-built_in">sum</span>([pp**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)])<br>        rr = n // (pp * qq)<br>        <span class="hljs-keyword">assert</span> n == pp * qq * rr<br>        <span class="hljs-keyword">break</span><br>phi = (pp - <span class="hljs-number">1</span>) * (qq - <span class="hljs-number">1</span>) * (rr - <span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><span class="hljs-comment">#b&#x27;flag&#123;som3thing_1nter3sting_1n_su5&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="4o02-Proof"><a href="#4o02-Proof" class="headerlink" title="4o02 Proof"></a>4o02 Proof</h3><p>当然直接把原题搬过来肯定是不太好的，看看怎么证明的？</p><blockquote><p>Pick a random polynomial $f(x)&#x3D;x^3+ax^2+bx+c$, and pick a random element a in $R&#x3D;\mathbb Z_n[x]&#x2F;f(x)$ . If $f(x)$ is irreducible in $\mathbb F_p[x]$ then the filed $\mathbb K&#x3D;\mathbb F_p[x]&#x3D; \mathbb F_p[x]&#x2F;f(x)&#x3D;\mathbb F_{p^3}$ will be a field with order $p^3−1&#x3D;(p−1)(p^2+p+1)$.</p><p>We raise a to the power of $n&#x3D;pqr&#x3D;p(p^2+p+1)r$ then an would probably be of order $p−1$, which implies it will be in the form of $u+0x+0x^2$ in $\mathbb K$. This means we can take the degree $1$ or $2$ coefficient of an in $R$ and gcd it with $n$ to get $p$, then we can fully factor $n$ to decrypt the flag.</p><p>This is basically the same idea as Pollard’s $p-1$ or Williams’ $p+1$ factorization algorithm, but we are doing it in a field with higher degree.</p></blockquote><p>第一段给出了模 $p$ 意义下 $n$ 阶有限域的 $\mathbb F_{p^n}$ 的构造过程，这个在信安数基中讲过，不细说了。</p><p>然后简单提一下，为啥 $x^4+x^3+x^2+x+1$ 不可约，打个表看一下，可以发现，如果 $n$ 是素数，那么 $\sum_{i&#x3D;0}^{n-1}$ 不可约。</p><p><img src="/2024/11/15/24Nov2/5.png" alt="5"></p><p>其实这也很简单，因为这就是一个等比数列求和公式。<br>$$<br>\sum_{i&#x3D;0}^{n-1} x^i&#x3D;\frac{x^{n}-1}{x-1}<br>$$<br>然后就是考虑 $x^n-1$ 的问题，据说与分圆域和分圆多项式有关。</p><p>因为令 $x^n-1&#x3D;0$，在 $\mathbb C$ 中可以解得 $x&#x3D;\omega(i,n)&#x3D;\cos \frac{2k\pi}{n}+\mathrm i\sin \frac{2k\pi}{n}$，其中 $k&#x3D;1,2,…,n$，$x_n&#x3D;\omega(n,n)&#x3D;1$。如果 $n$ 是素数，假设 $i&#x3D;1,2,…,n-1$，那么 $\omega(i,n)$ 的阶一定是 $n$，因为 $\gcd(i,n)$ 一定为 $1$ 。如果 $n$ 不是素数，那么 $\omega(i,n)$ 的阶不为 $n$。比如当 $n&#x3D;4$ 时，$\omega(1,4)&#x3D;\mathrm i$，$\omega(2,4)&#x3D;-1$，$-1$ 的阶数是 $2$ 而不是 $4$。</p><p>这个 $\omega$ 也比较有趣，比如大数乘法可以使用FFT&#x2F;NTT实现，最常用模数就是 $998244353$，因为 $998244353-1&#x3D;2^{23}\times7\times17$，其原根为 $3$，在NTT中，最长可以计算到 $2^{23}$ 次单位根不损失精度（具体NTT可以自行了解，RLWE中常用的模数 $12289$ 和 $786433$ 也有这个性质）。其具有一个重要性质就是 $\omega(a,n)^b&#x3D;\omega(ab,n)$ 和 $\omega(a,n)\omega(b,n)&#x3D;\omega(a+b,n)$</p><blockquote><p>当然，如果读者觉得不理解，可以尝试在原点画一个单位圆，从 $x^+$ 轴开始划分这个圆为 $n$ 等份，每一份对应圆上点的坐标就是 $(\cos \frac{2k\pi}{n},\sin\frac{2k\pi}{n})$，然后设 $\theta_k$ 为对应角，自己从 $(1,0)$ 开始，每次旋转 $\theta_k$，看看最快回到 $(1,0)$ 需要几步。这其实就对应了旋转变换。</p></blockquote><p>读者如果有兴趣的话可以看看分圆多项式怎么求的，我大概看出来了几个性质（以后再补充）</p><blockquote><ol><li>若 $n$ 为素数，$n$ 次分圆多项式为 $f_n(x)&#x3D;\sum_{i&#x3D;1}^{n-1}x^i$，比如 $f_3(x)&#x3D;x^2+x+1$</li><li>$2n$ 次分圆多项式为 $f_n(-x)$，比如 $f_6(x)&#x3D;x^2-x+1$。</li><li>若 $n$ 为素数，则 $n^a$ 次分圆多项式为 $f_n(x^{n^{a-1}})$，比如 $f_9(x)&#x3D;f_3(x^3)&#x3D;x^6+x^3+1$，$f_{27}(x)&#x3D;f_3(x^9)&#x3D;x^{18}+x^9+1$。</li><li>$n$ 次分圆多项式次数为 $\varphi(n)$。</li></ol></blockquote><p>貌似扯远了（尴尬），反正先知道 $x^4+x^3+x^2+x+1$ 不可约。这边阶数是 $5$，那么 $\mathbb F_{p^5}$ 上，除了 $0$ 之外，都有 $a^{p^5-1}&#x3D;1$ 。然后 $p^5-1&#x3D;(p^4+p^3+p^2+p+1)(p-1)$。同时，对于一个群而言，若 $a^{k}&#x3D;1$，则满足条件的 $a$ 有 $k$ 个，$k$ 整除群的阶数。因此，$k&#x3D;p-1$ 时，满足 $a^{p-1}&#x3D;1$ 的元素很明显有 $p-1$ 个，就是 $1,2,…,p-1$。带 $x$ 的阶数一定不是 $p-1$。</p><p>因此，对 $x$ 做 $n$ 次方，那么 $x^{n}&#x3D;x^{kp(p^4+p^3+p^2+p+1)}$，可以看到 $x$ 的指数上有 $p^4+p^3+p^2+p+1$ 整除 $p^5-1$，因此 $x^n$ 的阶一定为 $p-1$，且 $x^n&#x3D;1$ 的概率是可忽略的。因此 $x^n$ 在域中的结果，带 $x$ 的项的系数一定是 $p$ 的倍数，做公约数就可以分解 $n$ 了。</p><h2 id="5-2024鹏城杯-rickroll-赛后补题"><a href="#5-2024鹏城杯-rickroll-赛后补题" class="headerlink" title="5.[2024鹏城杯]rickroll(赛后补题)"></a>5.[2024鹏城杯]rickroll(赛后补题)</h2><p>鹏城杯一共6个密码题，做了5个，有一个qwb那个apbq的第三问，还有一个题目过于trivial，就不放了。当时做完已经18:15了，看了一下这个题，就忙别的了。这里补一下题。</p><p>先看一眼题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> xor<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><br>HINT = ?<br>FLAG = <span class="hljs-string">&quot;flag&#123;xxxxxxxx&#125;&quot;</span><br>EFFECTIVE_ROW = <span class="hljs-number">6</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rickroll_loader</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rickroll&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        lines = [line.strip().encode() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file <span class="hljs-keyword">if</span> line.strip()]<br>    <span class="hljs-keyword">return</span> lines<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_ezprime</span>(<span class="hljs-params">size</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        prime = getPrime(size)<br>        <span class="hljs-keyword">if</span> isPrime(prime // <span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">return</span> prime<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">secure_encrypt</span>(<span class="hljs-params">message_parts, hint_value</span>):<br>    modulus = find_ezprime(<span class="hljs-number">260</span>)<br><br>    key_material = os.urandom(<span class="hljs-number">32</span>)<br>    multipliers = [getrandbits(<span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EFFECTIVE_ROW)]<br><br>    encrypted_parts = [<br>        <span class="hljs-built_in">int</span>((multiplier * hint_value + bytes_to_long(xor(pad(chunk, <span class="hljs-number">32</span>)<br>            [::-<span class="hljs-number">1</span>], key_material))) % (modulus - <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> multiplier, chunk <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(multipliers, message_parts)<br>    ]<br><br>    <span class="hljs-keyword">return</span> encrypted_parts, multipliers, modulus<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    rickroll = rickroll_loader()<br>    m = bytes_to_long(HINT)<br><br>    encrypted_lyrics, multipliers, modulus = secure_encrypt(<br>        rickroll[:EFFECTIVE_ROW], m)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S =&quot;</span>, encrypted_lyrics)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;V =&quot;</span>, multipliers)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, modulus)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">S = [624073892368439332713131144655355187273652775732037030273908973687487472640419, 1129513550732743550887354593625951854836036688324123410864182971141396110133306, 1117643028354341949186759218964558582164677605237787761003042032239935547551873, 151619055620013230556169740951169935393567570823439146992800622058967940011364, 596106506159944398847755500086869373163910176213091804211992440336880292610397, 685472210701608040945173323626153641749419080165879222271110177606156013942182]</span><br><span class="hljs-string">V = [100024809269721744282017864103544473542698741247649693420201028956644193231147, 85493218764912449360009112267171851264674952927507787108286827385372626006804, 75451455656190167222034904545925816909383290106210237096763781707294423744719, 1864420400658866895837249178680154965580281261003086054650703872439476331244, 111069754111223622246512532174936637994215526100226395068812327641951277359169, 88031405587803201423744918486788030404029698214504194443110805396831023823738]</span><br><span class="hljs-string">n = 1497114501625523578039715607844306226528709444454126120151416887663514076507099</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>rickroll.txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>Never gonna give you up<br>Never gonna let you down<br>Never gonna run around <span class="hljs-keyword">and</span> desert you<br>Never gonna make you cry<br>Never gonna say goodbye<br>Never gonna tell a lie <span class="hljs-keyword">and</span> hurt you<br>--A mysterious singer who does <span class="hljs-keyword">not</span> want to be named.<br><br></code></pre></td></tr></table></figure><p>题目给出了 $S,V,n$ 和明文结果。</p><p>看一眼这个加密函数：这个加密方式比较奇怪：设 $q$ 为素数， $n&#x3D;2q+1$ 也是素数，密钥 $k$ 是32字节固定内容。设 $x&#x3D;\mathrm{hintvalue}$，则每次生成一个随即数 $A$ 作为乘数，然后乘 $x$。然后再加上 $m_i \oplus k$ 的结果。其中 $m_i$ 进行了填充。也就是<br>$$<br>C_i\equiv A_ix+m_i\oplus k \pmod {n-1}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">secure_encrypt</span>(<span class="hljs-params">message_parts, hint_value</span>):<br>    modulus = find_ezprime(<span class="hljs-number">260</span>)<br><br>    key_material = os.urandom(<span class="hljs-number">32</span>)<br>    multipliers = [getrandbits(<span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EFFECTIVE_ROW)]<br><br>    encrypted_parts = [<br>        <span class="hljs-built_in">int</span>((multiplier * hint_value + bytes_to_long(xor(pad(chunk, <span class="hljs-number">32</span>)<br>            [::-<span class="hljs-number">1</span>], key_material))) % (modulus - <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> multiplier, chunk <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(multipliers, message_parts)<br>    ]<br></code></pre></td></tr></table></figure><p>当时感觉像是一个HNP问题，但这个题没有HNP那种明显的标志（，然后那天事情有点多，就暂时放弃了。。</p><p>不过赛后在striving✌的提示下，我又回看了一下这个题目。</p><p>受限，我们可以注意到：每一句话都是以 <code>Never\x20gonna\x20 </code> 开头的（长度为12），并且 <code>len(Msg[0])==len(Msg[4]),len(Msg[1])==len(Msg[3])</code>。长度相同，就意味着填充内容也相同，那么异或同一个 $k$ 之后，得到的内容也相同。</p><p><img src="/2024/11/15/24Nov2/6.png" alt="6"></p><p>那么上面的加密就可以写成这种形式。因为 $n&#x3D;2q+1$，所以 $n-1&#x3D;2q$，因此可以考虑模 $q$ 意义下的值。<br>$$<br>C_i\equiv A_ix+B_{Hi}+B_{Mi}+B_{Li} \pmod q<br>$$<br>计算 $C_{04}&#x3D;C_0-C_4,C_{13}&#x3D;C_1-C_3$，有<br>$$<br>\Delta C_{04}\equiv\Delta A_{04}x+\Delta B_{04}\pmod q \tag{F}<br>$$<br>和<br>$$<br>\Delta C_{13}&#x3D;\Delta A_{13}x+\Delta B_{13}\pmod q\tag{G}<br>$$<br>这个位数大概在 $2^{96}$ 开始的，$x$ 长度未知，因为做差后，$B$ 相同的部分被减掉了。所以 $2^{96}\Delta B_{M04}&#x3D;\Delta B_{04}$，$2^{96}\Delta B_{M13}&#x3D;\Delta B_{13}$。$\Delta B_{M04}$ 约为 $88$ 位，$\Delta B_{M13}$ 约为 $96$ 位。</p><p>这边两个方程，三个未知量 $\Delta B_{M13},\Delta B_{M04},x$。因为 $x$ 的系数已知，因此可以计算 $A_{13}\text{(F)}-A_{04}\text{(G)}$ 消去 $x$，就变成了：<br>$$<br>2^{96}\Delta A_{13}\Delta B_{M04}-2^{96}\Delta A_{04}\Delta B_{M13}+\Delta C_{04}\Delta A_{13}-\Delta A_{04}\Delta C_{13}\equiv 0\pmod q<br>$$<br>去同余，有<br>$$<br>2^{96}\Delta A_{13}\Delta B_{M04}-2^{96}\Delta A_{04}\Delta B_{M13}+\Delta C_{04}\Delta A_{13}-\Delta A_{04}\Delta C_{13}-kq&#x3D;0<br>$$<br>构造矩阵：</p><p><img src="/2024/11/15/24Nov2/7.png" alt="7"></p><p>不过这样貌似是求不出来的，因此还需要一个平衡系数：因为$\Delta B_{M04}$ 约为 $88$ 位，$\Delta B_{M13}$ 约为 $96$ 位，因此前三列的平衡系数分别为 $(2^8,1,2^{96})$，然后为了扩大行列式，最后一列也给乘个 $2^{96}$。</p><blockquote><p>至于这个平衡系数，可以看到我们构造的矩阵是一个上三角矩阵，因此其行列式值就是对角线四个数的乘积。我们想要的数字在 $2^{96}$ 规模，因此我们就需要将行列式提升到至少 $2^{384}$。初步构造中，因为 $\Delta B_{M04},\Delta B_{M13}$ 是我们想要的，我们在对应格放了个 $1$，第三列的 $1$ 目的是和已知的常数相乘。但三个 $1$ 放在对角线上实在是太小了，因此我们需要平衡一下前三列。估计其值与 $2^{96}$ 的差距。分别差了 $2^{8},1,2^{96}$，因此乘上平衡系数之后可以保持每一列数量级相等。而最后一列再乘一个很大的数字，是为了扩大矩阵中每一行向量的长度，并且最后一列计算得到结果为$0$。</p><p>这样操作后，不仅扩大了行列式，还没有破坏原有关系，进一步确保我们的目标向量为短向量</p></blockquote><p>因此，对矩阵LLL之后，可以得到最短向量为 $(2^{8}\Delta B_{M04},B_{M13},2^{96},0)$。因此我们找第三个分量为 $2^{96}$ 的向量 $\vec v$，那么其第二个分量就是 $\Delta B_{M13}$。</p><p>EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytexor</span>(<span class="hljs-params">b1,b2</span>):<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(b1)&lt;<span class="hljs-built_in">len</span>(b2)):<br>        b1,b2=b2,b1<br>    lenb1,lenb2=<span class="hljs-built_in">len</span>(b1),<span class="hljs-built_in">len</span>(b2)<br>    bs=[<span class="hljs-number">0</span>]*lenb1<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lenb1):<br>        bs[i]=b1[i]^^b2[i%lenb2]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(bs)<br>Msg=[<br><span class="hljs-string">b&#x27;Never gonna give you up&#x27;</span>,<br><span class="hljs-string">b&#x27;Never gonna let you down&#x27;</span>,<br><span class="hljs-string">b&#x27;Never gonna run around and desert you&#x27;</span>,<br><span class="hljs-string">b&#x27;Never gonna make you cry&#x27;</span>,<br><span class="hljs-string">b&#x27;Never gonna say goodbye&#x27;</span>,<br><span class="hljs-string">b&#x27;Never gonna tell a lie and hurt you&#x27;</span>]<br>S = [<span class="hljs-number">624073892368439332713131144655355187273652775732037030273908973687487472640419</span>, <span class="hljs-number">1129513550732743550887354593625951854836036688324123410864182971141396110133306</span>, <span class="hljs-number">1117643028354341949186759218964558582164677605237787761003042032239935547551873</span>, <span class="hljs-number">151619055620013230556169740951169935393567570823439146992800622058967940011364</span>, <span class="hljs-number">596106506159944398847755500086869373163910176213091804211992440336880292610397</span>, <span class="hljs-number">685472210701608040945173323626153641749419080165879222271110177606156013942182</span>]<br>V = [<span class="hljs-number">100024809269721744282017864103544473542698741247649693420201028956644193231147</span>, <span class="hljs-number">85493218764912449360009112267171851264674952927507787108286827385372626006804</span>, <span class="hljs-number">75451455656190167222034904545925816909383290106210237096763781707294423744719</span>, <span class="hljs-number">1864420400658866895837249178680154965580281261003086054650703872439476331244</span>, <span class="hljs-number">111069754111223622246512532174936637994215526100226395068812327641951277359169</span>, <span class="hljs-number">88031405587803201423744918486788030404029698214504194443110805396831023823738</span>]<br>n = <span class="hljs-number">1497114501625523578039715607844306226528709444454126120151416887663514076507099</span><br>q=n//<span class="hljs-number">2</span><br>detAx04=(V[<span class="hljs-number">0</span>]-V[<span class="hljs-number">4</span>])%q<br>detBx04=(S[<span class="hljs-number">0</span>]-S[<span class="hljs-number">4</span>])%q<br>detAx13=(V[<span class="hljs-number">1</span>]-V[<span class="hljs-number">3</span>])%q<br>detBx13=(S[<span class="hljs-number">1</span>]-S[<span class="hljs-number">3</span>])%q<br>M=[<br>    [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,(<span class="hljs-number">2</span>**<span class="hljs-number">96</span>*detAx13)%q],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,(-<span class="hljs-number">2</span>**<span class="hljs-number">96</span>*detAx04%q)],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(detBx04*detAx13-detAx04*detBx13)%q],<br>    [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,q]<br>]<br>M=Matrix(ZZ,M)<br>M=M*diagonal_matrix(ZZ,[<span class="hljs-number">2</span>**<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>**<span class="hljs-number">96</span>,<span class="hljs-number">2</span>**<span class="hljs-number">96</span>])<br>MLLL=M.LLL()<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> MLLL:<br>    <span class="hljs-keyword">if</span>(v[<span class="hljs-number">2</span>]==<span class="hljs-number">2</span>**<span class="hljs-number">96</span>):<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(v)<br>long_to_bytes((detBx13+v[<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>**<span class="hljs-number">96</span>)*inverse(detAx13,q)%q)<br><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">(-<span class="hljs-number">6513984789217167717123492864</span>, <span class="hljs-number">2791429855208147482625244161</span>, <span class="hljs-number">79228162514264337593543950336</span>, <span class="hljs-number">0</span>)<br><span class="hljs-string">b&quot;Md5 of &#x27;r1ckr01l&#x27; in the flag&quot;</span><br></code></pre></td></tr></table></figure><p>因此，我们得到了hint：<code>Md5 of &#39;r1ckr01l&#39; in the flag</code>，因此最终答案为 <code>flag&#123;a0fd873d6622f7552f8141baeb0f7ee8&#125;</code>。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCipher5</title>
    <link href="/2024/11/09/BlockCipher5/"/>
    <url>/2024/11/09/BlockCipher5/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习分组密码的笔记5"><a href="#huangx607087学习分组密码的笔记5" class="headerlink" title="huangx607087学习分组密码的笔记5"></a>huangx607087学习分组密码的笔记5</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>上一篇我们讲到了DES的差分攻击，这一次就讲一下AES的积分攻击中的比较有名的Square Attack。</p><h2 id="5-AES的Square-Attack"><a href="#5-AES的Square-Attack" class="headerlink" title="5. AES的Square Attack"></a>5. AES的Square Attack</h2><h3 id="5o01-从-DASCTF2024-10-symmetric-cipher-引入Square-Attack"><a href="#5o01-从-DASCTF2024-10-symmetric-cipher-引入Square-Attack" class="headerlink" title="5o01 从[DASCTF2024.10] symmetric_cipher 引入Square Attack"></a>5o01 从[DASCTF2024.10] symmetric_cipher 引入Square Attack</h3><p>这一次我们直接先从题目出发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python">r_con = (<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>,<span class="hljs-number">0x80</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x36</span>)<br>s_box = [<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>,<br>]<br><br>     <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor_bytes</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(i^j <span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_round_key</span>(<span class="hljs-params">s, k</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            s[i][j] ^= k[i][j]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_bytes</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            s[i][j] = s_box[s[i][j]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_rows</span>(<span class="hljs-params">s</span>):<br>    s[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = s[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>], s[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>    s[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = s[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>], s[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]<br>    s[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = s[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>], s[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<br><br><br>xtime = <span class="hljs-keyword">lambda</span> a: (((a &lt;&lt; <span class="hljs-number">1</span>) ^ <span class="hljs-number">0x1B</span>) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">if</span> (a &amp; <span class="hljs-number">0x80</span>) <span class="hljs-keyword">else</span> (a &lt;&lt; <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_single_column</span>(<span class="hljs-params">a</span>):<br>    <br>    t = a[<span class="hljs-number">0</span>] ^ a[<span class="hljs-number">1</span>] ^ a[<span class="hljs-number">2</span>] ^ a[<span class="hljs-number">3</span>]<br>    u = a[<span class="hljs-number">0</span>]<br>    a[<span class="hljs-number">0</span>] ^= t ^ xtime(a[<span class="hljs-number">0</span>] ^ a[<span class="hljs-number">1</span>])<br>    a[<span class="hljs-number">1</span>] ^= t ^ xtime(a[<span class="hljs-number">1</span>] ^ a[<span class="hljs-number">2</span>])<br>    a[<span class="hljs-number">2</span>] ^= t ^ xtime(a[<span class="hljs-number">2</span>] ^ a[<span class="hljs-number">3</span>])<br>    a[<span class="hljs-number">3</span>] ^= t ^ xtime(a[<span class="hljs-number">3</span>] ^ u)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix_columns</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        mix_single_column(s[i])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_expand_key</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        word = <span class="hljs-built_in">list</span>(s[-<span class="hljs-number">1</span>])<br>        word.append(word.pop(<span class="hljs-number">0</span>))<br>        word = [s_box[b] <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> word] <br>        word[<span class="hljs-number">0</span>] ^= r_con[i]<br><br>        s.append(xor_bytes(word, s[-<span class="hljs-number">4</span>]))<br>        s.append(xor_bytes(s[-<span class="hljs-number">1</span>], s[-<span class="hljs-number">4</span>]))<br>        s.append(xor_bytes(s[-<span class="hljs-number">1</span>], s[-<span class="hljs-number">4</span>]))<br>        s.append(xor_bytes(s[-<span class="hljs-number">1</span>], s[-<span class="hljs-number">4</span>]))<br><br>    <span class="hljs-keyword">return</span> [s[<span class="hljs-number">4</span>*i : <span class="hljs-number">4</span>*(i+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) // <span class="hljs-number">4</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes2matrix</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">list</span>(text[i:i+<span class="hljs-number">4</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(text), <span class="hljs-number">4</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plain,r,skeys</span>):<br>    plain = bytes2matrix(plain)<br>    add_round_key(plain, skeys[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, r+<span class="hljs-number">1</span>):<br>        sub_bytes(plain)<br>        <span class="hljs-keyword">if</span> i %<span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            shift_rows(plain)<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> :<br>            mix_columns(plain)<br>         <br>        add_round_key(plain, skeys[i])<br>    enc = <span class="hljs-built_in">bytes</span>(plain[<span class="hljs-number">0</span>]+plain[<span class="hljs-number">1</span>]+plain[<span class="hljs-number">2</span>]+plain[<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">return</span> enc<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> ** <span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        p = <span class="hljs-string">b&quot;\x00&quot;</span> + <span class="hljs-string">b&quot;\xCB&quot;</span> * <span class="hljs-number">15</span><br>    <span class="hljs-keyword">else</span>:<br>        p = long_to_bytes(i) + <span class="hljs-string">b&quot;\xCB&quot;</span> * <span class="hljs-number">15</span><br>    pt.append(p)<br>    c = encrypt(p, <span class="hljs-number">7</span>, skeys)<br>    ct.append(c)<br><br>pt_serializable = [<span class="hljs-built_in">list</span>(p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> pt]<br>ct_serializable = [<span class="hljs-built_in">list</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ct]<br><br>data = &#123;<span class="hljs-string">&#x27;pt&#x27;</span>: pt_serializable, <span class="hljs-string">&#x27;ct&#x27;</span>: ct_serializable&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out1.json&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(data, f)<br><br></code></pre></td></tr></table></figure><p>这个题目给出了 $256$ 组明文及其对应的密文。明文格式均为 $(i,203,203,…,203)$，其中 $i$ 从 $0$ 遍历到 $256$。</p><p>回顾一下AES的过程：每一轮分别进行了字节代换、行移位、列混合和轮密钥加 4 步，其中最后一轮没有列混合操作。之所以叫积分积分攻击，可以看下面的图（参考<a href="https://blog.csdn.net/qwerzbc66/article/details/143632147">striving师傅的博客</a>）：</p><p><img src="/2024/11/09/BlockCipher5/1.png" alt="1"></p><p>在上面的图中，对于已知的 $256$  个密文，白色的部分表示恒定值，绿色部分在 $256$ 个密文中会遍历 $0\sim255$。我们在下面用 $x$ 代表遍历$0\sim255$ 的值，$c$ 代表恒定值，下标 $00\sim33$ 表示在矩阵中的位置。也就是我们初始的结构为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x00 c01 c02 c03<br>c10 c11 c12 c13<br>c20 c21 c22 c23<br>c30 c31 c32 c33<br></code></pre></td></tr></table></figure><p>下面我们来分析图1中产生的效果：</p><p>在<strong>轮密钥加</strong>阶段：因为AES中，对于单个字节 $x_{00} \oplus k_{00}$，由于密钥相同意味着 $k_{00}$ 恒定，因此当 $x_{00}$ 遍历 $0\sim255$ 时，$x_{00}\oplus k_{00}$ 也会遍历 $0\sim255$，而对于不变的 $c_{01}$ 等其他值，异或一个相同的 $k_{01}$，结果依然是恒定的 $c_{01}\oplus k_{00}$（两个数都恒定，当然得到恒定值）。</p><p><img src="/2024/11/09/BlockCipher5/2.png" alt="2"></p><p>在<strong>字节代换</strong>阶段，由于 $S$ 盒的可逆性，因此当 $x_{00}$ 遍历 $0\sim255$ 时，$S(x_{00})$ 也会遍历 $0\sim255$ 。而对于相同的 $c_{01}$ 等其他 $15$ 个字节，由于其不变性，最终也会导致字节代换后，得到的 $S(c_{01})$ 保持不变。  </p><p><img src="/2024/11/09/BlockCipher5/3.png" alt="3"></p><p>在<strong>行移位</strong>阶段，由于我们考虑的是 $x_{00}$，而AES中第一行的值不会变动位置，因此 $x_{00}$ 经过行移位还是 $x_{00}$。当然，如果一开始选择下面一行，将 $x_{10}$ 作为遍历值，则 $(x_{10},c_{11},c_{12},c_{13})$ 会变成 $(c_{10}^{(1)},c^{(1)}<em>{11},c^{(1)}</em>{12},x^{(1)}_{13})$。</p><p><img src="/2024/11/09/BlockCipher5/4.png" alt="4"></p><p>在列混合阶段，由于涉及到矩阵乘法，因此对于第 $0$ 列的数字而言，有：</p><p><img src="/2024/11/09/BlockCipher5/6.png" alt="6"></p><p>由于四个 $d$ 都有 $x$ 的参与，因此第 $0$ 列的所有值由于列混合的存在，这 $4$ 个值在 $256$ 个密文中都会遍历 $0\sim255$。</p><p><img src="/2024/11/09/BlockCipher5/5.png" alt="5"></p><p>随后，图1中第二轮和第三轮到列混合前的步骤，经过第一轮的讲解，也就不难理解了。也就是到第三轮列混合前，对应给定的 $256$ 个明文，$16$ 个字节全部都会遍历 $0\sim255$。</p><p>但经过第三轮的列混合后，结果出现了变化，此时矩阵中每个数字并不会遍历 $0\sim255$ 的所有值了，也就是随着 $x_{ij}^{(3)}$ 的遍历， $d^{(3)}$ 并不会遍历 $0\sim255$。</p><p><img src="/2024/11/09/BlockCipher5/7.png" alt="7"></p><p>但我们将 $d^{(3)}$ （以 $d_{00}^{(3)}$ 为例）的表达式重写一下。由于四个 $x$ 都是会遍历 $0\sim255$ 的，也就是构成一个 $0\sim255$ 的排列，因此下面分别用 $p_i$表示，也就是第 $i$ 组明文中，$x_{00}^{(3)}&#x3D;p_0(i)$（剩下三个以此类推）<br>$$<br>\bigoplus_{i&#x3D;0}^{255}d_{00}^{(3)}&#x3D;\bigoplus_{i&#x3D;0}^{255}(p_{0}(i)\oplus p_1(i)\oplus p_2(i)\oplus p_3(i))&#x3D;\bigoplus_{i&#x3D;0}^{255}p_0(i)\oplus\bigoplus_{i&#x3D;0}^{255}p_1(i)\oplus\bigoplus_{i&#x3D;0}^{255}p_2(i)\oplus\bigoplus_{i&#x3D;0}^{255}p_3(i)<br>$$<br>因为 $p_0,p_1,p_2,p_3$ 都是 $0\sim255$ 的一个排列，因此<br>$$<br>\bigoplus_{i&#x3D;0}^{255}p_0(i)&#x3D;\bigoplus_{i&#x3D;0}^{255}p_1(i)&#x3D;\bigoplus_{i&#x3D;0}^{255}p_2(i)&#x3D;\bigoplus_{i&#x3D;0}^{255}p_3(i)&#x3D;\bigoplus_{i&#x3D;0}^{255}i&#x3D;0<br>$$<br>因此，图1中红色的数据代表的意思就是：不保证这个值会遍历 $0\sim255$，但将 $256$ 组红色部分异或起来，结果仍然为 $0$。</p><p>然而在第 4 轮，经过字节代换之后，上面的性质也消失了（红色数据变成了紫色数据）。但由于字节代换、行移位是可逆的；如果猜测轮密钥的单个字节，异或回去、再逆行移位、逆字节代换就可以得到第3轮结果的对应字节；根据前面得到的性质，可以验证该猜测是否正确，如果正确则是一个可能的轮密钥字节。平均情况下，会得到两个可能的密钥字节，最后也会有 $256$ 种情况。枚举一下应该就OK了。</p><p>故这个题可以根据这一原理出解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">s_inv=[<span class="hljs-number">82</span>, <span class="hljs-number">9</span>, <span class="hljs-number">106</span>, <span class="hljs-number">213</span>, <span class="hljs-number">48</span>, <span class="hljs-number">54</span>, <span class="hljs-number">165</span>, <span class="hljs-number">56</span>, <span class="hljs-number">191</span>, <span class="hljs-number">64</span>, <span class="hljs-number">163</span>, <span class="hljs-number">158</span>, <span class="hljs-number">129</span>, <span class="hljs-number">243</span>, <span class="hljs-number">215</span>, <span class="hljs-number">251</span>, <span class="hljs-number">124</span>,<br>    <span class="hljs-number">227</span>, <span class="hljs-number">57</span>, <span class="hljs-number">130</span>, <span class="hljs-number">155</span>, <span class="hljs-number">47</span>, <span class="hljs-number">255</span>, <span class="hljs-number">135</span>, <span class="hljs-number">52</span>, <span class="hljs-number">142</span>, <span class="hljs-number">67</span>, <span class="hljs-number">68</span>, <span class="hljs-number">196</span>, <span class="hljs-number">222</span>, <span class="hljs-number">233</span>, <span class="hljs-number">203</span>, <span class="hljs-number">84</span>, <span class="hljs-number">123</span>,<br>    <span class="hljs-number">148</span>, <span class="hljs-number">50</span>, <span class="hljs-number">166</span>, <span class="hljs-number">194</span>, <span class="hljs-number">35</span>, <span class="hljs-number">61</span>, <span class="hljs-number">238</span>, <span class="hljs-number">76</span>, <span class="hljs-number">149</span>, <span class="hljs-number">11</span>, <span class="hljs-number">66</span>, <span class="hljs-number">250</span>, <span class="hljs-number">195</span>, <span class="hljs-number">78</span>, <span class="hljs-number">8</span>, <span class="hljs-number">46</span>, <span class="hljs-number">161</span>, <span class="hljs-number">102</span>,<br>    <span class="hljs-number">40</span>, <span class="hljs-number">217</span>, <span class="hljs-number">36</span>, <span class="hljs-number">178</span>, <span class="hljs-number">118</span>, <span class="hljs-number">91</span>, <span class="hljs-number">162</span>, <span class="hljs-number">73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">139</span>, <span class="hljs-number">209</span>, <span class="hljs-number">37</span>, <span class="hljs-number">114</span>, <span class="hljs-number">248</span>, <span class="hljs-number">246</span>, <span class="hljs-number">100</span>, <span class="hljs-number">134</span>,<br>    <span class="hljs-number">104</span>, <span class="hljs-number">152</span>, <span class="hljs-number">22</span>, <span class="hljs-number">212</span>, <span class="hljs-number">164</span>, <span class="hljs-number">92</span>, <span class="hljs-number">204</span>, <span class="hljs-number">93</span>, <span class="hljs-number">101</span>, <span class="hljs-number">182</span>, <span class="hljs-number">146</span>, <span class="hljs-number">108</span>, <span class="hljs-number">112</span>, <span class="hljs-number">72</span>, <span class="hljs-number">80</span>, <span class="hljs-number">253</span>, <span class="hljs-number">237</span>,<br>    <span class="hljs-number">185</span>, <span class="hljs-number">218</span>, <span class="hljs-number">94</span>, <span class="hljs-number">21</span>, <span class="hljs-number">70</span>, <span class="hljs-number">87</span>, <span class="hljs-number">167</span>, <span class="hljs-number">141</span>, <span class="hljs-number">157</span>, <span class="hljs-number">132</span>, <span class="hljs-number">144</span>, <span class="hljs-number">216</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0</span>, <span class="hljs-number">140</span>, <span class="hljs-number">188</span>, <span class="hljs-number">211</span>,<br>    <span class="hljs-number">10</span>, <span class="hljs-number">247</span>, <span class="hljs-number">228</span>, <span class="hljs-number">88</span>, <span class="hljs-number">5</span>, <span class="hljs-number">184</span>, <span class="hljs-number">179</span>, <span class="hljs-number">69</span>, <span class="hljs-number">6</span>, <span class="hljs-number">208</span>, <span class="hljs-number">44</span>, <span class="hljs-number">30</span>, <span class="hljs-number">143</span>, <span class="hljs-number">202</span>, <span class="hljs-number">63</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>, <span class="hljs-number">193</span>,<br>    <span class="hljs-number">175</span>, <span class="hljs-number">189</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">19</span>, <span class="hljs-number">138</span>, <span class="hljs-number">107</span>, <span class="hljs-number">58</span>, <span class="hljs-number">145</span>, <span class="hljs-number">17</span>, <span class="hljs-number">65</span>, <span class="hljs-number">79</span>, <span class="hljs-number">103</span>, <span class="hljs-number">220</span>, <span class="hljs-number">234</span>, <span class="hljs-number">151</span>, <span class="hljs-number">242</span>, <span class="hljs-number">207</span>,<br>    <span class="hljs-number">206</span>, <span class="hljs-number">240</span>, <span class="hljs-number">180</span>, <span class="hljs-number">230</span>, <span class="hljs-number">115</span>, <span class="hljs-number">150</span>, <span class="hljs-number">172</span>, <span class="hljs-number">116</span>, <span class="hljs-number">34</span>, <span class="hljs-number">231</span>, <span class="hljs-number">173</span>, <span class="hljs-number">53</span>, <span class="hljs-number">133</span>, <span class="hljs-number">226</span>, <span class="hljs-number">249</span>, <span class="hljs-number">55</span>, <span class="hljs-number">232</span>,<br>    <span class="hljs-number">28</span>, <span class="hljs-number">117</span>, <span class="hljs-number">223</span>, <span class="hljs-number">110</span>, <span class="hljs-number">71</span>, <span class="hljs-number">241</span>, <span class="hljs-number">26</span>, <span class="hljs-number">113</span>, <span class="hljs-number">29</span>, <span class="hljs-number">41</span>, <span class="hljs-number">197</span>, <span class="hljs-number">137</span>, <span class="hljs-number">111</span>, <span class="hljs-number">183</span>, <span class="hljs-number">98</span>, <span class="hljs-number">14</span>, <span class="hljs-number">170</span>, <span class="hljs-number">24</span>,<br>    <span class="hljs-number">190</span>, <span class="hljs-number">27</span>, <span class="hljs-number">252</span>, <span class="hljs-number">86</span>, <span class="hljs-number">62</span>, <span class="hljs-number">75</span>, <span class="hljs-number">198</span>, <span class="hljs-number">210</span>, <span class="hljs-number">121</span>, <span class="hljs-number">32</span>, <span class="hljs-number">154</span>, <span class="hljs-number">219</span>, <span class="hljs-number">192</span>, <span class="hljs-number">254</span>, <span class="hljs-number">120</span>, <span class="hljs-number">205</span>, <span class="hljs-number">90</span>, <span class="hljs-number">244</span>,<br>    <span class="hljs-number">31</span>, <span class="hljs-number">221</span>, <span class="hljs-number">168</span>, <span class="hljs-number">51</span>, <span class="hljs-number">136</span>, <span class="hljs-number">7</span>, <span class="hljs-number">199</span>, <span class="hljs-number">49</span>, <span class="hljs-number">177</span>, <span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">89</span>, <span class="hljs-number">39</span>, <span class="hljs-number">128</span>, <span class="hljs-number">236</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">81</span>, <span class="hljs-number">127</span>,<br>    <span class="hljs-number">169</span>, <span class="hljs-number">25</span>, <span class="hljs-number">181</span>, <span class="hljs-number">74</span>, <span class="hljs-number">13</span>, <span class="hljs-number">45</span>, <span class="hljs-number">229</span>, <span class="hljs-number">122</span>, <span class="hljs-number">159</span>, <span class="hljs-number">147</span>, <span class="hljs-number">201</span>, <span class="hljs-number">156</span>, <span class="hljs-number">239</span>, <span class="hljs-number">160</span>, <span class="hljs-number">224</span>, <span class="hljs-number">59</span>, <span class="hljs-number">77</span>, <span class="hljs-number">174</span>,<br>    <span class="hljs-number">42</span>, <span class="hljs-number">245</span>, <span class="hljs-number">176</span>, <span class="hljs-number">200</span>, <span class="hljs-number">235</span>, <span class="hljs-number">187</span>, <span class="hljs-number">60</span>, <span class="hljs-number">131</span>, <span class="hljs-number">83</span>, <span class="hljs-number">153</span>, <span class="hljs-number">97</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>, <span class="hljs-number">4</span>, <span class="hljs-number">126</span>, <span class="hljs-number">186</span>, <span class="hljs-number">119</span>, <span class="hljs-number">214</span>, <span class="hljs-number">38</span>,<br>    <span class="hljs-number">225</span>, <span class="hljs-number">105</span>, <span class="hljs-number">20</span>, <span class="hljs-number">99</span>, <span class="hljs-number">85</span>, <span class="hljs-number">33</span>, <span class="hljs-number">12</span>, <span class="hljs-number">125</span>]<br>K=[]<br><span class="hljs-keyword">for</span> loc <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>): <span class="hljs-comment">#枚举位置</span><br>    D=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>): <span class="hljs-comment">#爆破可能的key</span><br>        res=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<span class="hljs-comment">#对密文的对应位算异或和</span><br>            res^=s_box.index(i^givenC[j][loc])<br>        <span class="hljs-keyword">if</span>(res==<span class="hljs-number">0</span>):<br>            D.append(i)<br>    K.append(D)<br><span class="hljs-comment"># 总而言之，在只做四轮的时候存在这样一个可以被证明的公式:</span><br><span class="hljs-comment"># 每一个byte的256次明文选择加密的第四轮的最后一次addroundkey之前的XOR和为0。例用这个结论可以挨个爆破每一位key。</span><br><span class="hljs-built_in">print</span>(K)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">k, ind</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ind)[::-<span class="hljs-number">1</span>]:<br>        tmp = [<br>            xor_bytes(k[-<span class="hljs-number">3</span>], k[-<span class="hljs-number">4</span>]),<br>            xor_bytes(k[-<span class="hljs-number">2</span>], k[-<span class="hljs-number">3</span>]),<br>            xor_bytes(k[-<span class="hljs-number">1</span>], k[-<span class="hljs-number">2</span>]),<br>        ]<br>        word = <span class="hljs-built_in">list</span>(tmp[-<span class="hljs-number">1</span>])<br>        word.append(word.pop(<span class="hljs-number">0</span>))<br>        word = [s_box[b] <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> word] <br>        word[<span class="hljs-number">0</span>] ^= r_con[i]<br>        tmp = [xor_bytes(k[-<span class="hljs-number">4</span>], word)] + tmp<br>        k = tmp<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(k)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">ind, key</span>):<br>    <span class="hljs-keyword">if</span> ind == <span class="hljs-number">16</span>:<br>        key = func([<span class="hljs-built_in">bytes</span>(key[i:i+<span class="hljs-number">4</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">4</span>)], <span class="hljs-number">7</span>)<br>        skeys = _expand_key(bytes2matrix(key))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>):<br>            pti = givenP[i]<br>            cti = givenC[i]<br>            <span class="hljs-keyword">if</span> encrypt(pti, <span class="hljs-number">7</span>, skeys) != <span class="hljs-built_in">bytes</span>(cti):<span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(key.<span class="hljs-built_in">hex</span>())<br>            <span class="hljs-comment">#print(&quot;DASCTF&#123;&quot;+ sha256(key).digest().hex()+&quot;&#125;&quot;)</span><br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(K[ind])):<br>        dfs(ind+<span class="hljs-number">1</span>, key + [K[ind][i]])<br>dfs(<span class="hljs-number">0</span>,[])<br><span class="hljs-comment">#output:</span><br><span class="hljs-comment">#K=[[204, 247], [112, 251], [158, 205], [50, 73, 137], [236], [17, 219, 221, 237], [34, 55], [5, 90], [205], [63, 86], [47, 52], [32, 39, 63], [90, 194, 213], [30, 113, 182], [0, 113, 130], [8, 45, 154]]</span><br><span class="hljs-comment">#key.hex()=86f3e2d49c86425ba4d772a5f81af7b9</span><br></code></pre></td></tr></table></figure><h3 id="5o02-另一个例题：0xGame2024-AES"><a href="#5o02-另一个例题：0xGame2024-AES" class="headerlink" title="5o02 另一个例题：0xGame2024 AES"></a>5o02 另一个例题：0xGame2024 AES</h3><p>这个题目其实还是AES-Square Attack，只是将 $4\times4$ 的矩阵变成了 $3\times 3$ 的矩阵，然后从 $GF(2^{8},x^8+x^4+x^3+x+1)$ 域中的运算变成了 $GF(3^{5},x^5+x^2+1)$ 上的运算。题目目标是拿到正确的Key，没有询问次数限制和交互时间限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Util.py</span><br><span class="hljs-keyword">from</span> GF <span class="hljs-keyword">import</span> GF<br><br>SBOX, INV_SBOX = <span class="hljs-built_in">dict</span>(), <span class="hljs-built_in">dict</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span> ** <span class="hljs-number">5</span>):<br>    v = GF(<span class="hljs-number">23</span>) + (GF(<span class="hljs-number">0</span>) <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> GF(i).inverse())<br>    SBOX[GF(i)] = v<br>    INV_SBOX[v] = GF(i)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockCipher</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key: <span class="hljs-built_in">bytes</span>, rnd: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key) == <span class="hljs-number">9</span><br>        sks = [GF(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> key]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rnd * <span class="hljs-number">9</span>):<br>            sks.append(sks[-<span class="hljs-number">1</span>] + SBOX[sks[-<span class="hljs-number">9</span>]])<br>        <span class="hljs-variable language_">self</span>.subkeys = [sks[i:i+<span class="hljs-number">9</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, (rnd + <span class="hljs-number">1</span>) * <span class="hljs-number">9</span>, <span class="hljs-number">9</span>)]<br>        <span class="hljs-variable language_">self</span>.rnd = rnd<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_add_key</span>(<span class="hljs-params">self, l1, l2</span>):<br>        <span class="hljs-keyword">return</span> [x + y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1, l2)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_sub_key</span>(<span class="hljs-params">self, l1, l2</span>):<br>        <span class="hljs-keyword">return</span> [x - y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1, l2)]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_sub</span>(<span class="hljs-params">self, l</span>):<br>        <span class="hljs-keyword">return</span> [SBOX[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> l]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_sub_inv</span>(<span class="hljs-params">self, l</span>):<br>        <span class="hljs-keyword">return</span> [INV_SBOX[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> l]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_shift</span>(<span class="hljs-params">self, b</span>):<br>        <span class="hljs-keyword">return</span> [<br>            b[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>], b[<span class="hljs-number">2</span>],<br>            b[<span class="hljs-number">4</span>], b[<span class="hljs-number">5</span>], b[<span class="hljs-number">3</span>],<br>            b[<span class="hljs-number">8</span>], b[<span class="hljs-number">6</span>], b[<span class="hljs-number">7</span>]<br>        ]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_shift_inv</span>(<span class="hljs-params">self, b</span>):<br>        <span class="hljs-keyword">return</span> [<br>            b[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>], b[<span class="hljs-number">2</span>],<br>            b[<span class="hljs-number">5</span>], b[<span class="hljs-number">3</span>], b[<span class="hljs-number">4</span>],<br>            b[<span class="hljs-number">7</span>], b[<span class="hljs-number">8</span>], b[<span class="hljs-number">6</span>]<br>        ]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_mix</span>(<span class="hljs-params">self, b</span>):<br>        b = b[:] <span class="hljs-comment"># Copy</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            x = GF(<span class="hljs-number">7</span>) * b[i] + GF(<span class="hljs-number">2</span>) * b[<span class="hljs-number">3</span> + i] + b[<span class="hljs-number">6</span> + i]<br>            y = GF(<span class="hljs-number">2</span>) * b[i] + b[<span class="hljs-number">3</span> + i] + GF(<span class="hljs-number">7</span>) * b[<span class="hljs-number">6</span> + i]<br>            z = b[i] + GF(<span class="hljs-number">7</span>) * b[<span class="hljs-number">3</span> + i] + GF(<span class="hljs-number">2</span>) * b[<span class="hljs-number">6</span> + i]<br>            b[i], b[<span class="hljs-number">3</span> + i], b[<span class="hljs-number">6</span> + i] = x, y, z<br>        <span class="hljs-keyword">return</span> b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_mix_inv</span>(<span class="hljs-params">self, b</span>):<br>        b = b[:] <span class="hljs-comment"># Copy</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            x = GF(<span class="hljs-number">86</span>) * b[i] + GF(<span class="hljs-number">222</span>) * b[<span class="hljs-number">3</span> + i] + GF(<span class="hljs-number">148</span>) * b[<span class="hljs-number">6</span> + i]<br>            y = GF(<span class="hljs-number">222</span>) * b[i] + GF(<span class="hljs-number">148</span>) * b[<span class="hljs-number">3</span> + i] + GF(<span class="hljs-number">86</span>) * b[<span class="hljs-number">6</span> + i]<br>            z = GF(<span class="hljs-number">148</span>) * b[i] + GF(<span class="hljs-number">86</span>) * b[<span class="hljs-number">3</span> + i] + GF(<span class="hljs-number">222</span>) * b[<span class="hljs-number">6</span> + i]<br>            b[i], b[<span class="hljs-number">3</span> + i], b[<span class="hljs-number">6</span> + i] = x, y, z<br>        <span class="hljs-keyword">return</span> b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, inp: <span class="hljs-built_in">bytes</span></span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(inp) == <span class="hljs-number">9</span><br>        b = [GF(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> inp]<br>        <br>        b = <span class="hljs-variable language_">self</span>._add_key(b, <span class="hljs-variable language_">self</span>.subkeys[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.rnd):<br>            b = <span class="hljs-variable language_">self</span>._sub(b)<br>            b = <span class="hljs-variable language_">self</span>._shift(b)<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-variable language_">self</span>.rnd - <span class="hljs-number">1</span>:<br>                b = <span class="hljs-variable language_">self</span>._mix(b)<br>            b = <span class="hljs-variable language_">self</span>._add_key(b, <span class="hljs-variable language_">self</span>.subkeys[i + <span class="hljs-number">1</span>])<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([x.to_int() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b])<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, inp: <span class="hljs-built_in">bytes</span></span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(inp) == <span class="hljs-number">9</span><br>        b = [GF(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> inp]<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.rnd)):<br>            b = <span class="hljs-variable language_">self</span>._sub_key(b, <span class="hljs-variable language_">self</span>.subkeys[i + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-variable language_">self</span>.rnd - <span class="hljs-number">1</span>:<br>                b = <span class="hljs-variable language_">self</span>._mix_inv(b)<br>            b = <span class="hljs-variable language_">self</span>._shift_inv(b)<br>            b = <span class="hljs-variable language_">self</span>._sub_inv(b)<br>        b = <span class="hljs-variable language_">self</span>._sub_key(b, <span class="hljs-variable language_">self</span>.subkeys[<span class="hljs-number">0</span>])<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([x.to_int() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> b])<br></code></pre></td></tr></table></figure><p>一开始交了几次，发现flag老出不出来。结果本地测试后发现，因为这边基数是 $3$，需要区分正负了，最后你记录的可能的轮密钥的值，其实取负后才是真正的轮密钥（基数 $2$ 不区分正负）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cipher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> GF <span class="hljs-keyword">import</span> GF<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invKey</span>(<span class="hljs-params">karr,T</span>):<br>    prevK=karr[:]<br>    <span class="hljs-keyword">while</span> T:<br>        T=T-<span class="hljs-number">1</span><br>        prevK=[GF(i) <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(i)==<span class="hljs-built_in">int</span> <span class="hljs-keyword">else</span> i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> prevK]<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            prevK= [INV_SBOX[prevK[-<span class="hljs-number">1</span>] - prevK[-<span class="hljs-number">2</span>]]] + prevK[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> prevK<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomkey</span>(<span class="hljs-params">n</span>):<br>    ktmp=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        ktmp.append(getrandbits(<span class="hljs-number">8</span>)%<span class="hljs-number">243</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(ktmp)<br>key = randomkey(<span class="hljs-number">9</span>)<br>keyarr=[i%<span class="hljs-number">243</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key]<br>cipher = BlockCipher(key, <span class="hljs-number">4</span>)<br><br>STime=datetime.now()<br>Msgg=[<span class="hljs-built_in">bytes</span>([i,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">243</span>)]<br>Ciph=[cipher.encrypt(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Msgg]<br><br>K=[]<br><span class="hljs-keyword">for</span> loc <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    D=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">243</span>):<br>        res=GF(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">243</span>):<br>            res=res+INV_SBOX[GF(i)+GF(Ciph[j][loc])]<br>        <span class="hljs-keyword">if</span>(res==GF(<span class="hljs-number">0</span>)):<br>            D.append(GF(<span class="hljs-number">0</span>)-GF(i)) <span class="hljs-comment">#这个应该是负的</span><br>    K.append(D)<br><br><br><span class="hljs-built_in">print</span>(cipher.subkeys[-<span class="hljs-number">1</span>]) <span class="hljs-comment">#for debug, blind for solving problems.</span><br><span class="hljs-built_in">print</span>(keyarr)<br><br>guessKey=<span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">step,kkk</span>):<br>    <span class="hljs-keyword">global</span> guessKey<br>    <span class="hljs-keyword">if</span>(step==<span class="hljs-number">9</span>):<br>        kinit=invKey(kkk[:],<span class="hljs-number">4</span>)<br>        <span class="hljs-comment">#print(kinit,keyarr)</span><br>        kkk=[i.to_int() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> kinit]<br>        testkey=<span class="hljs-built_in">bytes</span>(kkk)<br>        tciph=BlockCipher(testkey,<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">if</span>(tciph.encrypt(Msgg[<span class="hljs-number">0</span>])==Ciph[<span class="hljs-number">0</span>]):<br>            guessKey=testkey<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> K[step]:<br>        dfs(step+<span class="hljs-number">1</span>,kkk+[i])<br>dfs(<span class="hljs-number">0</span>,[])<br><span class="hljs-built_in">print</span>(key.<span class="hljs-built_in">hex</span>(),guessKey.<span class="hljs-built_in">hex</span>(),key==guessKey)<br>TTime=datetime.now()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Time Cost:<span class="hljs-subst">&#123;TTime-STime&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可能的运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[GF(<span class="hljs-number">132</span>), GF(<span class="hljs-number">129</span>), GF(<span class="hljs-number">104</span>), GF(<span class="hljs-number">77</span>), GF(<span class="hljs-number">103</span>), GF(<span class="hljs-number">174</span>), GF(<span class="hljs-number">168</span>), GF(<span class="hljs-number">120</span>), GF(<span class="hljs-number">231</span>)]<br>[<span class="hljs-number">161</span>, <span class="hljs-number">8</span>, <span class="hljs-number">145</span>, <span class="hljs-number">192</span>, <span class="hljs-number">109</span>, <span class="hljs-number">179</span>, <span class="hljs-number">62</span>, <span class="hljs-number">234</span>, <span class="hljs-number">29</span>]<br>a10891c06db33eea1d a10891c06db33eea1d <span class="hljs-literal">True</span><br>Time Cost:<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">02.891690</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24Nov1</title>
    <link href="/2024/11/08/24Nov1/"/>
    <url>/2024/11/08/24Nov1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-11月的切题1"><a href="#huangx607087-11月的切题1" class="headerlink" title="huangx607087 11月的切题1"></a>huangx607087 11月的切题1</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><p>上一篇是 5 月的切题，这一篇是 11 月的切题。看似隔了半年，实际隔了 $3$ 年半，也就是 $\mathrm{(1+kun) years}$。</p><h2 id="1-强网杯2024-eazyRSA"><a href="#1-强网杯2024-eazyRSA" class="headerlink" title="1.[强网杯2024] eazyRSA"></a>1.[强网杯2024] eazyRSA</h2><p>从题目的模数生成代码来看，可以知道 $n&#x3D;4g^2ab+2ga+2gb+1&#x3D;(2ga+1)(2gb+1)$，其中 $g$ 是 $500$位，$a,b$ 是 $524$ 位。</p><p>可以推式子：$n-1&#x3D;4g^2ab+2g(a+b)$，那也就有：</p><p>$$<br>\frac{n-1}{2g}&#x3D;2gab+(a+b)<br>$$<br>也就是：<br>$$<br>\frac{n-1}{2g} \equiv (a+b) \pmod {2g}<br>$$<br>和<br>$$<br>\frac{n-1}{4g^2}&#x3D;ab+\frac{a+b}{2g}<br>$$</p><p>设<br>$$<br>s&#x3D;(a+b)\bmod 2g,t&#x3D;ab+\frac{a+b}{2g}<br>$$</p><p>如果 $a+b&lt;2g$，那么构造方程  $x^2-sx+t&#x3D;0$ 就已经出了。但这里 $a+b&gt;2g$。本地测了几组，$\frac{a+b}{2g}$ 的值大概是两千万($(2^{23}+2^{22})\sim 2^{25}$)左右。</p><p>因此写个脚本爆破就可以，设 $(a+b)&#x3D;s+2kg$，$ab&#x3D;t-k$，爆破$k$即可，大概需要 40 分钟。</p><p>解出来之后，复制 $a,b$，就可以完成这个题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>n=<span class="hljs-number">282.</span>..<br>e=<span class="hljs-number">65537</span><br>g=<span class="hljs-number">169.</span>..<br>enc=<span class="hljs-number">713.</span>..<br>s=<span class="hljs-built_in">int</span>(((n-<span class="hljs-number">1</span>)//(<span class="hljs-number">2</span>*g))%(<span class="hljs-number">2</span>*g))<br>t=(n-<span class="hljs-number">1</span>)//(<span class="hljs-number">4</span>*g**<span class="hljs-number">2</span>)<br>PR.&lt;x&gt;=PolynomialRing(ZZ)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> tqdm_notebook(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">24</span>,<span class="hljs-number">2</span>**<span class="hljs-number">25</span>)):<br>    T=(n-<span class="hljs-number">1</span>)//(<span class="hljs-number">4</span>*g**<span class="hljs-number">2</span>)-k<br>    S=s+<span class="hljs-number">2</span>*k*g<br>   <span class="hljs-comment"># print(T,S)</span><br>    L=<span class="hljs-built_in">list</span>(factor(x**<span class="hljs-number">2</span>-S*x+T))<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(L)==<span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">print</span>(L)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#About 33 minutes... ...</span><br><span class="hljs-comment">#[(x - 54722203851071002380640637783364295778615257147150541196711959753700451263333616989065849396687025501437950790074260319502675063161775706578982408368898972337, 1), (x - 44622831196150967536480715584711535584181586357962911905789372910901564430321427024174796137209528941353858108707886896337555315598122100856203421182547788460, 1)]</span><br></code></pre></td></tr></table></figure><p>获取 $a,b$ 后，直接解就可以得到 flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">54722203851071002380640637783364295778615257147150541196711959753700451263333616989065849396687025501437950790074260319502675063161775706578982408368898972337</span><br>b=<span class="hljs-number">44622831196150967536480715584711535584181586357962911905789372910901564430321427024174796137209528941353858108707886896337555315598122100856203421182547788460</span><br>phi=<span class="hljs-number">4</span>*g**<span class="hljs-number">2</span>*a*b<br>d=inverse(<span class="hljs-built_in">int</span>(<span class="hljs-number">65537</span>),<span class="hljs-built_in">int</span>(phi))<br>long_to_bytes(<span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(enc),<span class="hljs-built_in">int</span>(d),<span class="hljs-built_in">int</span>(n)))<br><span class="hljs-comment">#b&#x27;flag&#123;4bda6015-2fe8-43f2-96c3-0ce1d6c71ab2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>自己的脚本跑了 $30$ 分钟，因为用了factor，但其实还有更多的方法，比如糖醋小鸡快的博客中的bsgs方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#reference: https://tangcuxiaojikuai.xyz/post/df3f7032.html#more</span><br>N=<span class="hljs-number">186.</span>..<br>e=<span class="hljs-number">65537</span><br>g=<span class="hljs-number">215.</span>..<br>enc=<span class="hljs-number">170.</span>..<br>gamma = <span class="hljs-number">500</span>/(<span class="hljs-number">1024</span>*<span class="hljs-number">2</span>)<br>cbits = ceil(nbits * (<span class="hljs-number">0.5</span> - <span class="hljs-number">2</span> * gamma))<br><br>M = (N - <span class="hljs-number">1</span>) // (<span class="hljs-number">2</span> * g)<br>u = M // (<span class="hljs-number">2</span> * g)<br>v = M - <span class="hljs-number">2</span> * g * u<br>GF = Zmod(N)<br>x = GF.random_element()<br>y = x ^ (<span class="hljs-number">2</span> * g)<br><span class="hljs-comment"># c的范围大概与N^(0.5-2*gamma)很接近</span><br>c = bsgs(y, y ^ u, (<span class="hljs-number">2</span>**(cbits-<span class="hljs-number">1</span>), <span class="hljs-number">2</span>**(cbits+<span class="hljs-number">1</span>)), operation=<span class="hljs-string">&#x27;*&#x27;</span>)<br><span class="hljs-comment">#(a, b, bounds, operation=&#x27;*&#x27;, identity=None, inverse=None, op=None)</span><br>ab = u - c<br>apb = v + <span class="hljs-number">2</span> * g * c<br>P.&lt;x&gt; = ZZ[]<br>f = x ^ <span class="hljs-number">2</span> - apb * x + ab<br>a = f.roots()<br><span class="hljs-keyword">if</span> a:<br>    a, b = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>    p = <span class="hljs-number">2</span> * g * a + <span class="hljs-number">1</span><br>    q = <span class="hljs-number">2</span> * g * b + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> p * q == N<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(enc,inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),N))))<br></code></pre></td></tr></table></figure><h2 id="2-强网杯2024-apbq"><a href="#2-强网杯2024-apbq" class="headerlink" title="2. [强网杯2024]apbq"></a>2. [强网杯2024]apbq</h2><p>题目第一关很简单，给出了$h&#x3D;p+q$ ，结合 $n&#x3D;pq$，直接解方程 $x^2-hx+n&#x3D;0$。放到 sage中因式分解，就能得到$p,q$，然后解密就行了</p><p><img src="/2024/11/08/24Nov1/1.png" alt="1"></p><p>题目第二关给出了一百组 $ap+bq$，其中$a,b$未知，规模约为 $180$位。这个题就跟今年华为杯CTF 和2023 年 <a href="https://blog.maple3142.net/2023/09/03/downunderctf-2023-writeups/#apbq-rsa-ii">DownUnderCTF</a>的那个题一样。不过那个题是解3组，这边给出了100组。</p><p>看了下那个题题解，其实原理就是解ACD问题。假设只有三组数据，那就是 $x_1&#x3D;a_1p+b_1q,x_2&#x3D;a_2p+b_2q,x_3&#x3D;a_3p+b_3q$，对这三个数模$q$，就会有<br>$$<br>x_1\equiv a_1p,x_2\equiv a_2p,x_3\equiv a_3p \pmod q<br>$$</p><p>如果能够找到一组$u_1,u_2,u_3$，使得<br>$$<br>u_1x_1+u_2x_2+u_3x_3\equiv 0\pmod q<br>$$<br>那么就可以与 $n$做 $\gcd$ 得到$q$。</p><p>根据<a href="https://www.preprints.org/manuscript/202306.0712/v1/download">参考文献</a>中的方法，构造$(t+1)\times (t+1)$的格($t$为数据组数)，我在解题时取了 10 组数据。</p><p><img src="/2024/11/08/24Nov1/2.png" alt="2"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">Harr =  <span class="hljs-comment">#复制题目中给出的数据</span><br>n,e = (<span class="hljs-number">73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819</span>, <span class="hljs-number">65537</span>)<br>c = <span class="hljs-number">30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span><br><br>vh=Matrix(ZZ,Harr[:<span class="hljs-number">10</span>]).T<br>E100=Matrix(ZZ,[[i==j <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)])<br>L1=block_matrix([vh,E100],ncols=<span class="hljs-number">2</span>)<br>L1=<span class="hljs-built_in">list</span>(L1)<br>L1.append([<span class="hljs-number">0</span>]*<span class="hljs-number">10</span>+[n])<br>L1=Matrix(ZZ,L1)<br>V=L1.LLL()<br><br></code></pre></td></tr></table></figure><p>然后对这个格进行LLL之后，可以发现这个格前 $t-2$ 个向量都非常小，且第一个分量都是 $0$，因此可以保留这 $t-2 $个向量，求这$t-2 $个向量的核空间。</p><p>之所以第一个分量为 $0$，是因为这 t-2个向量的第一个分量为 $\sum_{i&#x3D;1}^t x_iu_i$，在我们的设定中，这个值模 $q$ 就应该为 $0$。剩下的值其实就是约简后的 $x$值。但我们的目标是要求 $u$，且满足 $\sum_{i&#x3D;1}^t x_iu_i&#x3D;0$，因此对这个 $t-2 $ 个向量求核空间即可，然后根据论文中的方法，对核空间LLL。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">listV=<span class="hljs-built_in">list</span>(V)<br>listV=listV[:<span class="hljs-number">8</span>]<br>V2=Matrix(ZZ,listV)<br>B=V2.right_kernel().matrix()<br>B=B.LLL()<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> B:<br>    <span class="hljs-built_in">print</span>(b)<br>C,D=B[<span class="hljs-number">1</span>],B[<span class="hljs-number">2</span>]<br><span class="hljs-comment">#(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)</span><br><span class="hljs-comment">#(0, 189054094845986711998601686638484899186928349869787764,-280260848759201243491139877993231433651309260321040422,-191419885782217555958459422458916080605185847352273281,80130022117941963164030469836409979879630589989718363,223374223525189873441521908177956783831422862962061407,-89593942049506075242290992587826902438240116945004863,30786784715283690213436728841096788963107064929499390,-366749089468309096269501995562509974553537779662708024,-318033151667809147614797636609797089137748229551489277,31066526775222212141169199486975191411844689712886217)</span><br><span class="hljs-comment">#(0,-1346279784706528250600681657984465653742744965149886725,-558376165928956918779997224381914383468803211678279444,-699816315320719608537550250769699566822298049653746205,-1593643074383414877869701641804189953765209179320460752,-1657915058789773997163001981126904902500418293868719109,-1053323500669935374421749709512602723352760224623425605,-1012154622528129384834327358953617453656985712746546759,-794684381522339277259854046745294719668955559599542526,-476952930272344315432888118863605062412545884787988052,-1040134187110594696346363876254412992508481258190444762)</span><br><br></code></pre></td></tr></table></figure><p>核空间中包含三个 $t+1$维向量，第一个是 $(1,0,0,…,0)$，因为第一个分量是 $\sum_{i&#x3D;1}^t x_iu_i$，它当然等于 $0$。剩下两个向量记为 $\vec C$ 和 $\vec D$ ，其中  $\vec C$ 的每个分量（除第一个分量，$\vec D$下同）大约为 $175\sim178 \mathrm{bit}$，$\vec D$ 的每个分量为 $179\sim181 \mathrm{bit}$。但因为 $ap+bq$ 中， $a$是$180\mathrm{bit}$ (对应我们想求的 $u$)，所以我们想求的向量 $\vec U$ 应该是 $\vec C$和$\vec D$ 线性组合，枚举一下小系数，根据线性组合结果尝试对 $n$求最大公约数，就可以出解了。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">found=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">32</span>,<span class="hljs-number">33</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">32</span>,<span class="hljs-number">33</span>):<br>        w=i*C+j*D<br>        kq=<span class="hljs-built_in">abs</span>((w[<span class="hljs-number">1</span>])*Harr[<span class="hljs-number">1</span>]-w[<span class="hljs-number">2</span>]*Harr[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span>(GCD(n,kq)!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> GCD(n,kq)!=n):<br>            <span class="hljs-built_in">print</span>(GCD(n,kq))<br>            found=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span>(found):<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br>   <br></code></pre></td></tr></table></figure><p>测试比特数：</p><p><img src="/2024/11/08/24Nov1/3.png" alt="3"></p><p><strong>Update 11.10</strong> 然后这个题就出了一个乌龙，就是第三部分用了第二部分的加密参数，也就是只需要解出第二部分，就可以完成解题，第三部分其实完全多余了。但这里还是看一下第三部分内容吧。</p><p>第三部分给出了 $c_1&#x3D;ap+q$ 和 $c_2&#x3D;p+bq$。此处 $a,b,p,q$ 均为 $512$ 位。</p><p>当时自己在做的时候，打算把 $c_1$ 和 $c_2$ 相乘的，但总时看不出来东西，只能作罢。但实际上正确做法是 $(c_1-q)$ 和 $(c_2-p)$ 相乘，展开得到 $c_1c_2-pc_1-qc_2$。</p><p>然后构造了一个，解不出来，$K$ 从 $2^{800}$ 提升到 $2^{3840}$ 最终也没有出</p><p><img src="/2024/11/08/24Nov1/4.png" alt="4"></p><p>然后看了 <a href="https://mp.weixin.qq.com/s/NNfJZd6qOfotRi_AvWgISw">N0WayBack 那边的题解</a>，结果发现要爆破？$512$ 的界不够，什么鬼？那边爆破了 $2$ 位，向量上界为 $2^{510}$。（所以为啥 $2^{512}$ 就解不出来呢，这个界又得怎么算）。。。</p><p>也就是爆破的时候，使用这个公式爆破 $p_h$ 和 $q_h$。<br>$$<br>c_1c_2-c_1(2^2p_h+i)-c_2(2^2q_h+j)&#x3D;0<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#stage3</span><br><br>n3,e3 = (<span class="hljs-number">9478.</span>.., <span class="hljs-number">65537</span>)<br>enc3 = <br>c1 = ...<br>c2 = ...<br><br>brute = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**brute):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**brute):<br>        L = Matrix(ZZ, [<br>            [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**brute*c1],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**brute*c2],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**(<span class="hljs-number">512</span>-brute),c1*i+c2*j-c1*c2],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n3]<br>        ])<br>        L[:,-<span class="hljs-number">1</span>:] *= n3<br>        res = L.LLL()[<span class="hljs-number">0</span>]<br><br>        p = <span class="hljs-number">2</span>**brute*<span class="hljs-built_in">abs</span>(res[<span class="hljs-number">0</span>])+i<br>        <span class="hljs-keyword">if</span>(n3 % p == <span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span>(p)<br></code></pre></td></tr></table></figure><h2 id="3-强网杯2024-21-steps"><a href="#3-强网杯2024-21-steps" class="headerlink" title="3.[强网杯2024]21 steps"></a>3.[强网杯2024]21 steps</h2><p>算法构造题，如何使用 $21$ 步单步计算求出一个 $128\mathrm{bit}$ 的数 $A$ 里面有几个 $1$，有一个变量 $B$ 作为辅助。</p><p>求一个数的bitcount，在不用循环的情况下，可以使用比特聚合法。原理在<a href="https://blog.csdn.net/weixin_42369079/article/details/139062482">这个网站中</a>讲得很详细。</p><p>写成C语言代码就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> <span class="hljs-title function_">countOnes</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> x)</span><br>&#123;<br>    x = (x &amp; <span class="hljs-number">0x55555555</span>) + ((x &gt;&gt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0x55555555</span>); <span class="hljs-comment">/* 计算相邻 2 位中 1 的个数。 */</span><br>    x = (x &amp; <span class="hljs-number">0x33333333</span>) + ((x &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x33333333</span>); <span class="hljs-comment">/* 计算相邻 4 位中 1 的个数。 */</span><br>    x = (x &amp; <span class="hljs-number">0x0F0F0F0F</span>) + ((x &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F0F0F0F</span>); <span class="hljs-comment">/* 计算相邻 8 位中 1 的个数。 */</span><br>    x = (x &amp; <span class="hljs-number">0x00FF00FF</span>) + ((x &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x00FF00FF</span>); <span class="hljs-comment">/* 计算相邻 16 位中 1 的个数。 */</span><br>    x = (x &amp; <span class="hljs-number">0x0000FFFF</span>) + ((x &gt;&gt;<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0x0000FFFF</span>); <span class="hljs-comment">/* 计算相邻 32 位中 1 的个数。 */</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;       <br></code></pre></td></tr></table></figure><p>第一个式子写成简单步骤，就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">B=A&gt;&gt;<span class="hljs-number">1</span>;<br>A&amp;=<span class="hljs-number">0x55555555</span>;<br>B&amp;=<span class="hljs-number">0X55555555</span>;<br>A=A+B;<br></code></pre></td></tr></table></figure><p>但对于128bit来说，这么做远远超过了21步。根据上面的代码，这样做需要28步。考虑改善。</p><p>注意到结果一定不超过128，因此在八位聚合之后，可以使用二分法折半相加。</p><p>（下图是对$\mathtt{0x00112233445566778899aabbccddeeff}$聚合前三步的结果）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x001111224455556644555566889999AA</span><br><span class="hljs-number">0x00111122112222331122223322333344</span><br><span class="hljs-number">0x00020204020404060204040604060608</span><br></code></pre></td></tr></table></figure><p>比如 $\mathtt{0x0002020402040406}$ 可以直接和 $\mathtt{0x0204040604060608}$，也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">B=A&gt;&gt;<span class="hljs-number">64</span>;<br>A=A+B;<br><span class="hljs-comment">#0x00020204020404060206060A060A0A0E</span><br></code></pre></td></tr></table></figure><p>这样其实最高64位就不管了。同理，32位、16位、8位也可以这么玩。也就是在聚合的后4步，不断地将考虑内容减半，逐步舍弃高64、高32、高16、高8位。这样四组，会用掉8步，加上前面12步，就是20步了。</p><p>最后一步为<code>A=A&amp;255</code>，上面不要的东西清零，得到 $\mathtt{0x40}$ 为最终答案。</p><p>（下图是对 $\mathtt{0x00112233445566778899aabbccddeeff}$ 聚合前三步的结果）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x00020204020404060206060A060A0A0E</span><br><span class="hljs-number">0x000202040206060A040A0A1008101018</span><br><span class="hljs-number">0x00020206040A08100A140E1A12201828</span><br><span class="hljs-number">0x000204080A0E12181A1E22282C323840</span><br><span class="hljs-number">0x00000000000000000000000000000040</span><br></code></pre></td></tr></table></figure><p>因为题目要求常数只能用十进制表示，因此可以得到payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">payload=<span class="hljs-string">&quot;B=A&gt;&gt;1;A=A&amp;113427455640312821154458202477256070485;B=B&amp;113427455640312821154458202477256070485;A=A+B;B=A&gt;&gt;2;A=A&amp;68056473384187692692674921486353642291;B=B&amp;68056473384187692692674921486353642291;A=A+B;B=A&gt;&gt;4;A=A&amp;20016609818878733144904388672456953615;B=B&amp;20016609818878733144904388672456953615;A=A+B;B=A&gt;&gt;64;A=A+B;B=A&gt;&gt;32;A=A+B;B=A&gt;&gt;16;A=A+B;B=A&gt;&gt;8;A=A+B;A=A&amp;255;&quot;</span><br></code></pre></td></tr></table></figure><p>其中：$\mathtt{113427455640312821154458202477256070485&#x3D;0x5555 5555 5555 5555 5555 5555 5555 5555}$</p><p>贴一下测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python">M1=<span class="hljs-number">0x55555555555555555555555555555555</span><br>M2=<span class="hljs-number">0x33333333333333333333333333333333</span><br>M4=<span class="hljs-number">0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f</span><br>M8=<span class="hljs-number">0x00ff00ff00ff00ff00ff00ff00ff00ff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bc</span>(<span class="hljs-params">A</span>):<br>    B=A&gt;&gt;<span class="hljs-number">1</span><br>    A=A&amp;M1<br>    B=B&amp;M1<br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">2</span><br>    A=A&amp;M2<br>    B=B&amp;M2<br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">4</span><br>    A=A&amp;M4<br>    B=B&amp;M4<br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">64</span><br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">32</span><br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">16</span><br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    B=A&gt;&gt;<span class="hljs-number">8</span><br>    A=A+B<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    A=A&amp;<span class="hljs-number">0xFF</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;:032X&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(A))<br>    <span class="hljs-keyword">return</span> A<br><span class="hljs-built_in">print</span>(bc(<span class="hljs-number">0x00112233445566778899aabbccddeeff</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">001111224455556644555566889999AA</span><br><span class="hljs-string">00111122112222331122223322333344</span><br><span class="hljs-string">00020204020404060204040604060608</span><br><span class="hljs-string">00020204020404060206060A060A0A0E</span><br><span class="hljs-string">000202040206060A040A0A1008101018</span><br><span class="hljs-string">00020206040A08100A140E1A12201828</span><br><span class="hljs-string">000204080A0E12181A1E22282C323840</span><br><span class="hljs-string">00000000000000000000000000000040</span><br><span class="hljs-string">64</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-网鼎杯2024-Crypto01"><a href="#4-网鼎杯2024-Crypto01" class="headerlink" title="4.[网鼎杯2024] Crypto01"></a>4.[网鼎杯2024] Crypto01</h2><p>个RSA题目，给出了 $(n,e,c)$，以及  $(p,q)$ 的高 $70$ 位。密钥生成时，解密指数 $d$ 的位数为 $299$ ，对应  $\ln d&#x3D;0.29199\ln n                               $。这个上限已经达到了extend wiener attack对应的 $\ln d&#x3D;0.292\ln n$  极限。</p><p>感觉像是wiener attack 和copper结合解题，搜一下，发现了鸡快师傅的博客。看来今年密码挑战赛出过类似的题目。</p><p>点进去并参考<a href="https://tangcuxiaojikuai.xyz/post/4a67318c.html">博客内容</a>，发现第一章第3条符合条件，只不过那个需要爆破高位，这个高位直接给了出来。</p><p>在Linux 环境(Ubuntu20.04,Sagemath9.0,python3.8.10)下，下载并安装flatter[2]，就可以解出来了。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flatter</span>(<span class="hljs-params">M</span>):<br>    <span class="hljs-comment"># compile https://github.com/keeganryan/flatter and put it in $PATH</span><br>    z = <span class="hljs-string">&quot;[[&quot;</span> + <span class="hljs-string">&quot;]\n[&quot;</span>.join(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, row)) <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> M) + <span class="hljs-string">&quot;]]&quot;</span><br>    ret = check_output([<span class="hljs-string">&quot;flatter&quot;</span>], <span class="hljs-built_in">input</span>=z.encode())<br>    <span class="hljs-keyword">from</span> re <span class="hljs-keyword">import</span> findall<br>    <span class="hljs-keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, findall(<span class="hljs-string">b&quot;-?\\d+&quot;</span>, ret)))<br><br>debug = <span class="hljs-literal">False</span><br><br>strict = <span class="hljs-literal">False</span><br><br><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <span class="hljs-comment"># 如果格达到该尺寸，则停止移除</span><br><br><span class="hljs-comment"># 显示有用矢量的统计数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):<br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii,ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span> (nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><br><span class="hljs-comment"># 显示带有 0 和 X 的矩阵</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii,jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>: <br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-comment">#print (a)</span><br><br><span class="hljs-comment"># 尝试删除无用的向量</span><br><span class="hljs-comment"># 从当前 = n-1（最后一个向量）开始</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):<br>    <span class="hljs-comment"># 我们从当前 = n-1（最后一个向量）开始</span><br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br><br>    <span class="hljs-comment"># 开始从后面检查</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment">#  如果它没有用</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>             <span class="hljs-comment"># 让我们检查它是否影响其他向量</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-comment"># 如果另一个向量受到影响：</span><br>                <span class="hljs-comment"># 我们增加计数</span><br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br><br>            <span class="hljs-comment"># 等级：0</span><br>            <span class="hljs-comment"># 如果没有其他载体最终受到影响</span><br>            <span class="hljs-comment"># 我们删除它</span><br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-comment">#print (&quot;* removing unhelpful vector&quot;, ii)</span><br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br><br>           <span class="hljs-comment"># 等级：1</span><br>            <span class="hljs-comment">#如果只有一个受到影响，我们会检查</span><br>            <span class="hljs-comment"># 如果它正在影响别的向量</span><br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-comment"># 如果它影响哪怕一个向量</span><br>                    <span class="hljs-comment"># 我们放弃这个</span><br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-comment"># 如果没有其他向量受到影响，则将其删除，并且</span><br>                <span class="hljs-comment"># 这个有用的向量不够有用</span><br>                <span class="hljs-comment">#与我们无用的相比</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(bound - BB[ii, ii]):<br>                    <span class="hljs-comment">#print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span><br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-comment"># nothing happened</span><br>    <span class="hljs-keyword">return</span> BB<br><br><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">Returns:</span><br><span class="hljs-string">* 0,0   if it fails</span><br><span class="hljs-string">* -1，-1 如果 &quot;strict=true&quot;，并且行列式不受约束</span><br><span class="hljs-string">* x0,y0 the solutions of `pol`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Boneh and Durfee revisited by Herrmann and May</span><br><span class="hljs-string">    </span><br><span class="hljs-string"> 在以下情况下找到解决方案：</span><br><span class="hljs-string">* d &lt; N^delta</span><br><span class="hljs-string">* |x|&lt; e^delta</span><br><span class="hljs-string">* |y|&lt; e^0.5</span><br><span class="hljs-string">每当 delta &lt; 1 - sqrt（2）/2 ~ 0.292</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)   <span class="hljs-comment">#多项式环</span><br>    Q = PR.quotient(x*y + <span class="hljs-number">1</span> - u)        <span class="hljs-comment">#  u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX*YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-移位</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># 单项式 x 移位列表</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials(): <span class="hljs-comment">#对于多项式中的单项式。单项式（）：</span><br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:  <span class="hljs-comment"># 如果单项不在单项中</span><br>                monomials.append(monomial)<br>    monomials.sort()<br>    <br>    <span class="hljs-comment"># y-移位</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift) <span class="hljs-comment"># substitution</span><br>    <br>    <span class="hljs-comment"># 单项式 y 移位列表</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u^kk * y^jj)<br><br>    <span class="hljs-comment"># 构造格 B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)<br><br>    <span class="hljs-comment">#约化格的原型</span><br>    <span class="hljs-keyword">if</span> helpful_only:<br>        <span class="hljs-comment">#  #自动删除</span><br>        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 重置维度</span><br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 检查向量是否有帮助</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus^mm)<br>    <br>    <span class="hljs-comment"># 检查行列式是否正确界定</span><br>    det = BB.det()<br>    bound = modulus^(mm*nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br><br>    <span class="hljs-comment"># display the lattice basis</span><br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus^mm)<br><br>    <span class="hljs-comment"># LLL</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br><br>    <span class="hljs-comment">#BB = BB.BKZ(block_size=25)</span><br>    BB = flatter(BB)<br>    <br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LLL is done!&quot;</span>)<br><br>    <span class="hljs-comment"># 替换向量 i 和 j -&gt;多项式 1 和 2</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;在格中寻找线性无关向量&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br>    <br>    pol1_idx = <span class="hljs-number">0</span><br>    pol2_idx = <span class="hljs-number">1</span><br>            <br>    <span class="hljs-comment"># 对于i and j, 构造两个多项式</span><br>    <br>    PR.&lt;w,z&gt; = PolynomialRing(ZZ)<br>    pol1 = pol2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        pol1 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)<br>        pol2 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)<br><br>    <span class="hljs-comment"># 结果</span><br>    PR.&lt;q&gt; = PolynomialRing(ZZ)<br>    rr = pol1.resultant(pol2)<br><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]):<br>        found_polynomials = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <br>    rr = rr(q, q)<br><br>    <span class="hljs-comment"># solutions</span><br>    soly = rr.roots()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> solx, soly<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>(<span class="hljs-params">pM,qM</span>):<br>    t1 = time.time()<br><br>    size=<span class="hljs-number">512</span>     <span class="hljs-comment">#The size of p; size=1024 in Tables 10</span><br>    length_N = <span class="hljs-number">2</span>*size<br>    s=<span class="hljs-number">70</span>;      <span class="hljs-comment">#s is the number of MSBs exhaustion,  which can be chosen as we need.</span><br>    nw=<span class="hljs-number">3</span>     <span class="hljs-comment">#2^nw windows</span><br>    delta = <span class="hljs-number">0.292</span><br><br>    N = <span class="hljs-number">107892573713246099817538936816485851035053538530228178586297516104462355899705036416845549988000543254717342505493461294554541098637839010844819316344397595836466293908827352240852019945855020602201742694540642287347823025883131162483705106324646432257707195307227627208850506071985510840207212074649893852289</span>;<br>    e = <span class="hljs-number">106026779355993573435326995058838659695563314723896436315704944869047461810171317853485834578907922477225219563648678852066399786593146779733369104463848604460901829459576565561299893410357693816050012889075185831684944657633027210516389798278082334754603104594287285628025433146548664548308055805258965566543</span>;<br>    c = <span class="hljs-number">74801258971353592087655273561994005413765184821038662179717923534370360999501931581907306714940348903440446458261785275314423770475637996343903355116249112854972152857616186571871846360852766323423533588570164035716759526288174656142706806500076294386681134096440267098094279442917447969106043371238327287569</span>;<br>    <span class="hljs-comment"># The parameters (N, e) can be chosen as we need. </span><br>    m = <span class="hljs-number">12</span>   <span class="hljs-comment"># 格大小（越大越好/越慢）</span><br>    <span class="hljs-comment">#guess=100</span><br>    <span class="hljs-comment"># you need to be a lattice master to tweak these</span><br>    t = <span class="hljs-built_in">round</span>(((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*delta) * m))  <span class="hljs-comment"># 来自 Herrmann 和 May 的优化</span><br>    X = floor(N^delta)  <span class="hljs-comment"># </span><br>    Y = <span class="hljs-number">2</span>*floor(N^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>^s)    <span class="hljs-comment"># 如果 p、 q 大小相同，则正确</span><br>    <br>    p0=pM*<span class="hljs-number">2</span>^(size-s)+<span class="hljs-number">2</span>^(size-s-<span class="hljs-number">1</span>);<br>    q0=qM*<span class="hljs-number">2</span>^(size-s)+<span class="hljs-number">2</span>^(size-s-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#qM=int(q0/2^(size-s))</span><br>    A = N + <span class="hljs-number">1</span>-pM*<span class="hljs-number">2</span>^(size-s)-qM*<span class="hljs-number">2</span>^(size-s);<br>    P.&lt;x,y&gt; = PolynomialRing(ZZ)<br>    pol = <span class="hljs-number">1</span> + x * (A + y)  <span class="hljs-comment">#构建的方程</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-comment">##print (&quot;=== running algorithm ===&quot;)</span><br>        start_time = time.time()<br>            <br><br>    solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br><br><br>    <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#print (&quot;=== solution found ===&quot;)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;x:&quot;</span>, solx)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>        d_sol = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>        <span class="hljs-comment">#print (&quot;私钥d:&quot;, d)</span><br>        <span class="hljs-comment">#if(d_sol==d):</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;p的高比特为：&quot;</span>,pM)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;q的高比特为：&quot;</span>,qM)<br>        <span class="hljs-comment">#print(&quot;p的真实高比特：&quot;,int(p/2^(512-s)))</span><br>        <span class="hljs-comment">#print(&quot;q的真实高比特：&quot;,int(q/2^(512-s)))</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;d=&quot;</span>,d_sol)<br>        <br>    t2 = time.time()<br>    <span class="hljs-built_in">print</span>(t2-t1)<br><br>example(<span class="hljs-number">895381917907042032873</span>,<span class="hljs-number">934258518638868635029</span>)<br><br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)<br>=== solution found ===<br>p的高比特为： <span class="hljs-number">895381917907042032873</span><br>q的高比特为： <span class="hljs-number">934258518638868635029</span><br>d= <span class="hljs-number">686044856631363471654750621230244587429581968036750428251137157884014229839209884769622191</span><br><span class="hljs-number">225.63660335540771</span><br></code></pre></td></tr></table></figure><p><del>rec和鸡块师傅tql，看来自己还是太菜了</del></p><h2 id="5-网鼎杯2024-Crypto02"><a href="#5-网鼎杯2024-Crypto02" class="headerlink" title="5.[网鼎杯2024] Crypto02"></a>5.[网鼎杯2024] Crypto02</h2><p>一个简单题:(，混合了好几个密码，主要是 椭圆曲线签名中的 随机数 $k$ 复用导致私钥泄露。</p><h3 id="5o01-题目回顾"><a href="#5o01-题目回顾" class="headerlink" title="5o01 题目回顾"></a>5o01 题目回顾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-comment">#!/usr/bin/env python2</span><br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> FLAG <span class="hljs-keyword">import</span> flag<br><span class="hljs-comment">#flag = &#x27;wdflag&#123;123&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">victory_encrypt</span>(<span class="hljs-params">plaintext, key</span>):<br>    key = key.upper()<br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    plaintext = plaintext.upper()<br>    ciphertext = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(plaintext):<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            shift = <span class="hljs-built_in">ord</span>(key[i % key_length]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            encrypted_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            ciphertext += encrypted_char<br>        <span class="hljs-keyword">else</span>:<br>            ciphertext += char<br><br>    <span class="hljs-keyword">return</span> ciphertext<br><br>victory_key = <span class="hljs-string">&quot;WANGDINGCUP&quot;</span><br>victory_encrypted_flag = victory_encrypt(flag, victory_key)<br><br>p = <span class="hljs-number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span><br>a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">7</span><br>xG = <span class="hljs-number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span><br>yG = <span class="hljs-number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span><br>G = (xG, yG)<br>n = <span class="hljs-number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span><br>h = <span class="hljs-number">1</span><br>zero = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><br>dA = nextprime(random.randint(<span class="hljs-number">0</span>, n))<br><br><span class="hljs-keyword">if</span> dA &gt; n:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;warning!!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addition</span>(<span class="hljs-params">t1, t2</span>):<br>    <span class="hljs-keyword">if</span> t1 == zero:<br>        <span class="hljs-keyword">return</span> t2<br>    <span class="hljs-keyword">if</span> t2 == zero:<br>        <span class="hljs-keyword">return</span> t2<br>    (m1, n1) = t1<br>    (m2, n2) = t2<br>    <span class="hljs-keyword">if</span> m1 == m2:<br>        <span class="hljs-keyword">if</span> n1 == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n1 != n2:<br>            <span class="hljs-keyword">return</span> zero<br>        <span class="hljs-keyword">else</span>:<br>            k = (<span class="hljs-number">3</span> * m1 * m1 + a) % p * gmpy2.invert(<span class="hljs-number">2</span> * n1 , p) % p<br>    <span class="hljs-keyword">else</span>:<br>        k = (n2 - n1 + p) % p * gmpy2.invert((m2 - m1 + p) % p, p) % p<br>    m3 = (k * k % p - m1 - m2 + p * <span class="hljs-number">2</span>) % p<br>    n3 = (k * (m1 - m3) % p - n1 + p) % p<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(m3),<span class="hljs-built_in">int</span>(n3))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">multiplication</span>(<span class="hljs-params">x, k</span>):<br>    ans = zero<br>    t = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(t &lt;= k):<br>        <span class="hljs-keyword">if</span> (k &amp;t )&gt;<span class="hljs-number">0</span>:<br>            ans = addition(ans, x)<br>        x = addition(x, x)<br>        t &lt;&lt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ans<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrs</span>(<span class="hljs-params">z, k</span>):<br>    (xp, yp) = P<br>    r = xp<br>    s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n<br>    <span class="hljs-keyword">return</span> r,s<br><br>z1 = random.randint(<span class="hljs-number">0</span>, p)<br>z2 = random.randint(<span class="hljs-number">0</span>, p)<br>k = random.randint(<span class="hljs-number">0</span>, n)<br>P = multiplication(G, k)<br>hA = multiplication(G, dA)<br>r1, s1 = getrs(z1, k)<br>r2, s2 = getrs(z2, k)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(s1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(s2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;z1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(z1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;z2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(z2))<br><br>key = sha256(long_to_bytes(dA)).digest()<br>cipher = AES.new(key, AES.MODE_CBC)<br>iv = cipher.iv<br>encrypted_flag = cipher.encrypt(pad(victory_encrypted_flag.encode(), AES.block_size))<br>encrypted_flag_hex = binascii.hexlify(iv + encrypted_flag).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted flag (AES in CBC mode, hex):&quot;</span>, encrypted_flag_hex)<br><br><span class="hljs-comment"># output</span><br><span class="hljs-comment"># r1 = 79874160726532694994695169930412771917232180361879898603881940022649943683773</span><br><span class="hljs-comment"># r2 = 79874160726532694994695169930412771917232180361879898603881940022649943683773</span><br><span class="hljs-comment"># s1 = 29358608937016239753744265269188516080175172712689524937715100977220465955435</span><br><span class="hljs-comment"># s2 = 67554961634695394998835343503747996265453236901689755090159384880221643931064</span><br><span class="hljs-comment"># z1 = 111511522136129031618364434769531873844221489323948711851532783654702149742966</span><br><span class="hljs-comment"># z2 = 47212724661755436010060930908038151157054551065082199607150851950104041315615</span><br><span class="hljs-comment"># (&#x27;Encrypted flag (AES in CBC mode, hex):&#x27;, u&#x27;103fb6abfe2757b21f6f9ce6901af904cee9f46ce8adb7d42d0c52e968c6bb5ba0bd2b526db879c5e1fd2f452a2bb67eba3f45fac530f43d878408a763e900eb&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="5o02-WP"><a href="#5o02-WP" class="headerlink" title="5o02 WP"></a>5o02 WP</h3><p>题目过于简单，不细说了，直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><br><span class="hljs-comment"># In[1]:</span><br><br>p = <span class="hljs-number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span><br>a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">7</span><br>xG = <span class="hljs-number">0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</span><br>yG = <span class="hljs-number">0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</span><br>n = <span class="hljs-number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span><br>h = <span class="hljs-number">1</span><br>E=EllipticCurve(GF(p),[a,b])<br>G = E(xG, yG)<br><br><br><span class="hljs-comment"># In[2]:</span><br><br>r1 = <span class="hljs-number">111817653331957669294460466848850458804857945556928458406600106150268654577388</span><br>r2 = <span class="hljs-number">111817653331957669294460466848850458804857945556928458406600106150268654577388</span><br>s1 = <span class="hljs-number">86614391420642776223990568523561232627667766343605236785504627521619587526774</span><br>s2 = <span class="hljs-number">99777373725561160499828739472284705447694429465579067222876023876942075279416</span><br>z1 = <span class="hljs-number">96525870193778873849147733081234547336150390817999790407096946391065286856874</span><br>z2 = <span class="hljs-number">80138688082399628724400273131729065525373481983222188646486307533062536927379</span><br><br><br><span class="hljs-comment"># In[3]:</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">assert</span> r1==r2<br>r=r1<br><span class="hljs-comment">#k*s1-r*dA=z1</span><br><span class="hljs-comment">#k*s2-r*dA=z2</span><br><span class="hljs-comment">#unknown k,dA</span><br>M=matrix(GF(n),[[s1,s2],[-r,-r]])<br>v=vector(GF(n),[z1,z2])<br>veckda=v*(M**(-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(veckda)<br>k,dA=<span class="hljs-built_in">int</span>(veckda[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(veckda[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">assert</span> isPrime(dA)<br><br><br><span class="hljs-comment"># In[4]:</span><br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>key = sha256(long_to_bytes(dA)).digest()<br><br><br><span class="hljs-comment"># In[5]:</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>encFlagHex=<span class="hljs-string">&#x27;6c201c3c4e8b0a2cdd0eca11e7101d45d7b33147d27ad1b9d57e3d1e20c7b3c2e36b8da3142dfd5abe335a604ce7018878b9f157099211a7bbda56ef5285ec0b&#x27;</span><br>ivHex,ciph1=encFlagHex[:<span class="hljs-number">32</span>],encFlagHex[<span class="hljs-number">32</span>:]<br>cipher = AES.new(key, AES.MODE_CBC,iv=<span class="hljs-built_in">bytes</span>.fromhex(ivHex))<br>cipher.decrypt(<span class="hljs-built_in">bytes</span>.fromhex(ciph1))<br><br><span class="hljs-comment"># Out[5]:</span><br><span class="hljs-comment"># b&#x27;SDSRDO&#123;58UT00432L8228R9E3G927HDWS8D67G2&#125;\x08\x08\x08\x08\x08\x08\x08\x08&#x27;</span><br><br><span class="hljs-comment"># In[6]:</span><br><br>ciph2=<span class="hljs-string">&#x27;SDSRDO&#123;58UT00432L8228R9E3G927HDWS8D67G2&#125;&#x27;</span><br><br><br><span class="hljs-comment"># In[7]:</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">victory_encrypt</span>(<span class="hljs-params">plaintext, key</span>):<br>    key = key.upper()<br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    plaintext = plaintext.upper()<br>    ciphertext = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(plaintext):<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            shift = <span class="hljs-built_in">ord</span>(key[i % key_length]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            encrypted_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) + shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            ciphertext += encrypted_char<br>        <span class="hljs-keyword">else</span>:<br>            ciphertext += char<br>    <span class="hljs-keyword">return</span> ciphertext<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">victory_decrypt</span>(<span class="hljs-params">plaintext, key</span>):<br>    key = key.upper()<br>    key_length = <span class="hljs-built_in">len</span>(key)<br>    plaintext = plaintext.upper()<br>    ciphertext = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(plaintext):<br>        <span class="hljs-keyword">if</span> char.isalpha():<br>            shift = <span class="hljs-built_in">ord</span>(key[i % key_length]) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>            encrypted_char = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(char) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>            ciphertext += encrypted_char<br>        <span class="hljs-keyword">else</span>:<br>            ciphertext += char<br>    <span class="hljs-keyword">return</span> ciphertext<br>vk = <span class="hljs-string">&quot;WANGDINGCUP&quot;</span><br><span class="hljs-comment"># print(victory_decrypt(ciph2,vk))</span><br>flagg=victory_decrypt(ciph2,vk)<br><span class="hljs-keyword">assert</span> victory_encrypt(flagg,vk)==ciph2<br><span class="hljs-built_in">print</span>(flagg.lower())<br><span class="hljs-keyword">assert</span> victory_encrypt(flagg.lower(),vk)==ciph2<br><br><span class="hljs-comment"># Out[7]:</span><br><span class="hljs-comment"># wdflag&#123;58ae00432d8228c9e3a927bbcd8d67d2&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>两个比赛，网鼎杯和强网杯，只能说网鼎杯密码题质量确实挺差的，强网杯题目质量很好。。</p><p>强网杯出了 7 个题目，自己做了 3 个，最后队伍第 98 名，距离 32 名线确实还是挺远的。。。</p><p>后面等有空补一下强网杯的题目，然后后半学期还有两个pre…和考试。。。也是够忙的<code>:(</code></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCipher4</title>
    <link href="/2024/11/06/BlockCipher4/"/>
    <url>/2024/11/06/BlockCipher4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习分组密码的笔记4"><a href="#huangx607087学习分组密码的笔记4" class="headerlink" title="huangx607087学习分组密码的笔记4"></a>huangx607087学习分组密码的笔记4</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>38个月过去了，终于从 3 更新到 4 了，好耶！！</p><p>因为0xGame出了一个简单的两轮DES差分，之前密码学课程中也讲了DES差分，因此自己决定尝试自行探索一下DES的差分攻击</p><blockquote><p>Review:你当年写这个的时候，应该不会意识到3和4之间隔了多久吧</p></blockquote><h2 id="4-DES的差分攻击"><a href="#4-DES的差分攻击" class="headerlink" title="4. DES的差分攻击"></a>4. DES的差分攻击</h2><h3 id="4o01-DES的差分攻击简介"><a href="#4o01-DES的差分攻击简介" class="headerlink" title="4o01 DES的差分攻击简介"></a>4o01 DES的差分攻击简介</h3><p>DES在 8 轮迭代之后，其原本明文的统计规律已经消失，并且扩散性达到了最好。为何DES还要设计成 16 轮呢？原因就在于，8轮DES很容易受到差分攻击。</p><p>我们来回顾一下单轮DES的Festial结构：E扩展、P置换、轮密钥加、S盒四个部分，其中只有S盒为非线性部分，其余均为线性部分，可以根据已知内容去逆推。而差分攻击，就是构建两个明文 $M_1$ 和 $M_2$，加密后得到 $C_1$ 和 $C_2$，根据 $M_1\oplus M_2$ 和 $C_1\oplus C_2$ 的值，尝试反推 $K$ 的值。而差分攻击之所以能够起作用，其原因就是 $S$ 盒的不均匀性。下图显示了 $S_1$ 的差分情况，可以看出：当 $S_0$ 两个输入异或值为 $01\text{H}$ 时，有 $6&#x2F;64$ 的概率两个输出的异或值为 $3$，$2&#x2F;64$ 的概率两个输出的异或值为 $5$，$12&#x2F;64$ 的概率输出 $\mathrm{10}$。而当 $S_0$ 的两个输入异或值为 $\mathrm{34H}$ 时，两个输出异或值为 $2$ 的概率达到了 $16&#x2F;64$。 因此，差分攻击属于<strong>选择明文攻击</strong>，需要加密机才能实现。</p><blockquote><p>p.s. 本博文十六进制数均会出现 $\mathrm{0x}$ 前缀或 $\mathrm H$ 后缀，若无前后缀标明的，则均按照十进制看待。$S$ 盒编号取值为 $0\sim 7$。</p></blockquote><img src="/2024/11/06/BlockCipher4/1.png" alt="1" style="zoom: 80%;"><p>我们以 $S_0$ 盒输入差分为 $01\text H$ 为例，经过实验，可以得到下面的内容：也就是当 $S_0$ 0输出差分值为 $3$ 时，可能的输入<strong>值</strong>（不是输入差分）为 $29,61,60,28,45,44$ 这六种（仔细的人可以注意到：每一组内都存在异或值为 $1$ 的一对数，因为你的输入差分为 $1$）。 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>:&#123;<span class="hljs-number">29</span>, <span class="hljs-number">61</span>, <span class="hljs-number">60</span>, <span class="hljs-number">28</span>, <span class="hljs-number">45</span>, <span class="hljs-number">44</span>&#125;<br><span class="hljs-attribute">5</span>:&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br><span class="hljs-attribute">6</span>:&#123;<span class="hljs-number">37</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">36</span>&#125;<br><span class="hljs-attribute">7</span>:&#123;<span class="hljs-number">50</span>, <span class="hljs-number">51</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>&#125;<br><span class="hljs-attribute">9</span>:&#123;<span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">54</span>, <span class="hljs-number">55</span>, <span class="hljs-number">56</span>, <span class="hljs-number">57</span>&#125;<br><span class="hljs-attribute">10</span>:&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">38</span>, <span class="hljs-number">39</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">52</span>, <span class="hljs-number">53</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>&#125;<br><span class="hljs-attribute">11</span>:&#123;<span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <br><span class="hljs-attribute">12</span>:&#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>&#125;<br><span class="hljs-attribute">13</span>:&#123;<span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>&#125;<br><span class="hljs-attribute">14</span>:&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;<br><span class="hljs-attribute">15</span>:&#123;<span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;<br></code></pre></td></tr></table></figure><p>因此，我们可以使用下面的代码，构造： <code>int detSCnt[8][64][16]</code> 和 <code>set&lt;int&gt; detSREC[8][64][16]</code>。其中：<code>detSCnt[i][j][k]</code> 表示第 $i$ 个 $S$ 盒输入差分为 $j$ ，输出差分为 $k$ 的情况数量。 <code>detSREC[i][j][k]</code> 表示第 $i$ 个 $S$ 盒，输入差分为 $j$，输出差分为 $k$ 时所有可能的输入值构成的集合。例如： $\mathtt{detSCnt[0][1][3]&#x3D;6}$，$\mathtt{detSRec[0][1][3]}&#x3D;{29,61,60,28,45,44}$。显然，有 $\mathtt{|detSRec[i][j][k]|&#x3D;detSCnt[i][j][k]}$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">detSCnt=[[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>detSRec=[[[<span class="hljs-built_in">set</span>() <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getS</span>(<span class="hljs-params">sid,val</span>):<br>    v1,v2=<span class="hljs-number">2</span>*(<span class="hljs-keyword">not</span> <span class="hljs-keyword">not</span> (val&amp;<span class="hljs-number">32</span>))+(val&amp;<span class="hljs-number">1</span>),(val&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">15</span><br>    <span class="hljs-keyword">return</span> S[sid][v1][v2]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcS</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                in1,in2=j,k <br>                out1,out2=getS(i,in1),getS(i,in2)<br>                detin=j^k<br>                detout=out1^out2<br>                detSCnt[i][detin][detout]+=<span class="hljs-number">1</span><br>                detSRec[i][detin][detout]|=<span class="hljs-built_in">set</span>([j])<br></code></pre></td></tr></table></figure><h3 id="4o02-0xGame2024-DES的实现代码"><a href="#4o02-0xGame2024-DES的实现代码" class="headerlink" title="4o02 0xGame2024 DES的实现代码"></a>4o02 0xGame2024 DES的实现代码</h3><p>后面我们以 0xGame 2024 那个简化版DES为例，这里没有考虑初始置换盒轮密钥的生成，但其实加上这两个过程，本质也一样。因为这两个过程仍然是线性变换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Util.py</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> add<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><br>__s_box = [[[<span class="hljs-number">14</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>]], <br>           [[<span class="hljs-number">15</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">15</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>]], <br>           [[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>]], <br>           [[<span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">14</span>]], <br>           [[<span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">14</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]], <br>           [[<span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">11</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>]], <br>           [[<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>]], <br>           [[<span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>]]]<br>__ep = [<span class="hljs-number">31</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">0</span>]<br>__p = [<span class="hljs-number">15</span>, <span class="hljs-number">6</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">28</span>, <span class="hljs-number">11</span>, <span class="hljs-number">27</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">22</span>, <span class="hljs-number">25</span>, <span class="hljs-number">4</span>, <span class="hljs-number">17</span>, <span class="hljs-number">30</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">23</span>, <span class="hljs-number">13</span>, <span class="hljs-number">31</span>, <span class="hljs-number">26</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">18</span>, <span class="hljs-number">12</span>, <span class="hljs-number">29</span>, <span class="hljs-number">5</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">24</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">EP</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> [data[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> __ep]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">P</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> [data[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> __p]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">S_box</span>(<span class="hljs-params">data</span>):<br>    output = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">48</span>, <span class="hljs-number">6</span>):<br>        row = data[i] * <span class="hljs-number">2</span> + data[i + <span class="hljs-number">5</span>]<br>        col = reduce(add, [data[i + j] * (<span class="hljs-number">2</span> ** (<span class="hljs-number">4</span> - j)) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)])<br>        output += [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">format</span>(__s_box[i // <span class="hljs-number">6</span>][row][col], <span class="hljs-string">&#x27;04b&#x27;</span>)]<br>    <span class="hljs-keyword">return</span> output<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes2bin</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(m.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span> * <span class="hljs-built_in">len</span>(m))]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bin2bytes</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]), <span class="hljs-number">2</span>).to_bytes(length=<span class="hljs-built_in">len</span>(m)//<span class="hljs-number">8</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plain, key,nrd=<span class="hljs-number">2</span></span>): <span class="hljs-comment">#这边以前没有nrd参数，也给加上了，以前就是 2 轮。</span><br>    pt = bytes2bin(plain)<br>    sub_key = bytes2bin(key)<br>    L, R = pt[:<span class="hljs-number">32</span>], pt[<span class="hljs-number">32</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrd):<br>        prev_L = L<br>        L = R<br>        expanded_R = EP(R)<br>        xor_result = [a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(expanded_R, sub_key)]<br>        substituted = S_box(xor_result)<br>        permuted = P(substituted)<br>        R = [a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(permuted, prev_L)]<br>    cipher = R + L<br>    <span class="hljs-keyword">return</span> bin2bytes(cipher)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">cipher, key,nrd=<span class="hljs-number">2</span></span>):<br>    ct = bytes2bin(cipher)<br>    sub_key = bytes2bin(key)<br>    L, R = ct[:<span class="hljs-number">32</span>], ct[<span class="hljs-number">32</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrd):<br>        prev_L = L<br>        L = R<br>        expanded_R = EP(R)<br>        xor_result = [a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(expanded_R, sub_key)]<br>        substituted = S_box(xor_result)<br>        permuted = P(substituted)<br>        R = [a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(permuted, prev_L)]<br>    cipher = R + L<br>    <span class="hljs-keyword">return</span> bin2bytes(cipher)<br><span class="hljs-comment"># 以下内容0xGame原题没有，为作者自加内容</span><br>S = __s_box.copy()<br>__pinv = [<span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">30</span>, <span class="hljs-number">12</span>, <span class="hljs-number">27</span>, <span class="hljs-number">1</span>, <span class="hljs-number">17</span>, <span class="hljs-number">23</span>, <span class="hljs-number">15</span>, <span class="hljs-number">29</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>, <span class="hljs-number">19</span>, <span class="hljs-number">9</span>,<span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">28</span>, <span class="hljs-number">10</span>, <span class="hljs-number">18</span>, <span class="hljs-number">31</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">26</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pinv</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> [data[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> __pinv]<br></code></pre></td></tr></table></figure><h3 id="4o02-2轮DES"><a href="#4o02-2轮DES" class="headerlink" title="4o02 2轮DES"></a>4o02 2轮DES</h3><img src="/2024/11/06/BlockCipher4/2.png" alt="2" style="zoom:60%;"><p>对于两轮DES而言，若输入 $(L_0,R_0)$ ，可以得到输出为 $(R_0,R_1)$，然后第二轮得到输入 $(R1,R_2)$，最后交换一下得到密文为 $R_2||R_1$。</p><p>由于最后有 $R_1$ 的存在，因此其安全性和一轮 DES 没有差别。</p><p>而已知 $L_0,R_0,R_1$ 时，考虑到最后一步存在 $\oplus L_0$ 的操作，因此在一轮中，可以直接构造 $L_0&#x3D;00000000\mathrm H$。这样最后一步就可以被我们忽略掉了。</p><p>假设构造 <code>(00000000H,00000000H)</code> 和 <code>(00000000H,12345678H)</code> 两个明文。由于 $E$ 置换是确定的，因此有<br>$$<br>E(\mathtt{00000000H})&#x3D;\mathtt{000000000000H}&#x3D;\mathtt{00H,00H,00H,00H,00H,00H,00H,00H}<br>$$</p><p>$$<br>E(\mathtt{12345678H})&#x3D;\mathtt{0A41A82AC3F0H}&#x3D;\mathtt{02H,24H,06H,28H,0AH,2CH,0FH,30H}<br>$$</p><p>因此，经过 E 扩展后，上下异或，可以得到XOR前的差分为 $\mathtt{02H,24H,06H,28H,0AH,2CH,0FH,30H}$</p><p>由于异或的Key是一样的，因此经过轮密钥加后，S 盒的输入差分也为 $\mathtt{02H,24H,06H,28H,0AH,2CH,0FH,30H}$。</p><p>假设密钥为 $\mathtt{76AD5C3FFB2EH}&#x3D;\mathtt{2EH,2CH,3FH,0FH,1CH,35H,2AH,1DH}$（这个我们不知道）。但一轮加密后，我们可以得到两组数据：  $(R_0,R_1)&#x3D;\mathtt{00000000H,3213371EH}$  和 $(R_0,R_1)&#x3D;\mathtt{12345678H,86C32DB5H}$。因为我们 XOR 的 $L_0$ 为全 $0$，因此将两个 $R_1$ 进行 $P^{-1}$ 置换，可以得到 $R_0&#x3D;\mathtt{00000000H}$ 对应的 $S$ 盒输出内容为 $\mathtt{34E41D72H}$，$R_0&#x3D;\mathtt{12345678H}$ 对应的 $S$ 盒输出内容为 $\mathtt{84F321B7H}$，两个做异或，得到 $S$ 盒差分值为 $\mathtt{B0173CC5H}$。这也顺序对应了八个 $S$ 盒各自的输出差分值。 </p><p><img src="/2024/11/06/BlockCipher4/3.png" alt="3"></p><p>然后我们就可以进行查表：以 $S_0$ 为例：<code>detSRec[0][0x02][0xB]=&#123;63,61,40,42,29,31&#125;</code>，<font color="red">而 $S_0$ 的 <strong>输入内容为</strong> $\mathtt{02H}$ </font>。对这里面所有的内容异或输入内容$\mathtt{02H}$，可以得到 <code>0x02 xor detSRec[0][0x02][0xB]=&#123;61,63,42,40,31,29&#125;</code>。同理，其他的七个 $S$ 盒的相关内容也能够被推出来。比如在下图中，我们得到了 $K$ 的第 $0\sim5$ 位的六个候选值和 $6\sim11$ 位的十个候选值。多次选取，取交集，就可以得到最后可能的密钥 $K$ 了。</p><blockquote><p>特别提醒：推密钥的时候，考虑的不是输入差分，是输入内容！这里因为构造了全0的明文，输入差分就是输入内容，此处巧起来了，这里一定要考虑输入的<strong>内容</strong>，因为只有知道输入内容，才能尝试获取密钥！！！对输入差分的使用体现在了我们的数组下标里面。</p></blockquote><p><img src="/2024/11/06/BlockCipher4/4.png" alt="4"></p><p>0xGame原题是十次机会，但其实完全够用了，下面是两轮攻击的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Util <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>detSCnt=[[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>detSRec=[[[<span class="hljs-built_in">set</span>() <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getS</span>(<span class="hljs-params">sid,val</span>):<br>    v1,v2=<span class="hljs-number">2</span>*(<span class="hljs-keyword">not</span> <span class="hljs-keyword">not</span> (val&amp;<span class="hljs-number">32</span>))+(val&amp;<span class="hljs-number">1</span>),(val&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">15</span><br>    <span class="hljs-keyword">return</span> S[sid][v1][v2]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcS</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                in1,in2=j,k <br>                out1,out2=getS(i,in1),getS(i,in2)<br>                detin=j^k<br>                detout=out1^out2<br>                detSCnt[i][detin][detout]+=<span class="hljs-number">1</span><br>                detSRec[i][detin][detout]|=<span class="hljs-built_in">set</span>([j])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandpair</span>(<span class="hljs-params">x</span>):<br>    a=getrandbits(<span class="hljs-number">64</span>)<br>    b=a^x<br>    <span class="hljs-keyword">return</span> a,b<br><br>calcS()<br>myKey=urandom(<span class="hljs-number">6</span>)<br>Aarr=[<span class="hljs-number">0x00000000</span>,<span class="hljs-number">0x22222222</span>,<span class="hljs-number">0x44444444</span>,<span class="hljs-number">0x88888888</span>,<span class="hljs-number">0x11111111</span>,<span class="hljs-number">0x12481248</span>,<span class="hljs-number">0x84218421</span>,<span class="hljs-number">0xedb7edb7</span>,<span class="hljs-number">0xffffffff</span>]<br>n=<span class="hljs-built_in">len</span>(Aarr)<br>M=[Aarr[i].to_bytes(<span class="hljs-number">8</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Aarr))]<br>C=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    C.append(encrypt(M[i],myKey))<br>bC=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    cval=bytes_to_long(C[i])<br>    bC.append(((cval&amp;<span class="hljs-number">0xffffffff</span>).to_bytes(<span class="hljs-number">4</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>),(cval&gt;&gt;<span class="hljs-number">32</span>).to_bytes(<span class="hljs-number">4</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)))<br><br>Sinput=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    beforeS=M[i][<span class="hljs-number">4</span>:]<br>    beforeS=bytes_to_long(bin2bytes(EP(bytes2bin(beforeS))))<br>    arr=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        arr.append(beforeS&amp;<span class="hljs-number">63</span>)<br>        beforeS&gt;&gt;=<span class="hljs-number">6</span><br>    Sinput.append(arr[::-<span class="hljs-number">1</span>])<br>Soutput=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    afterE=C[i][<span class="hljs-number">4</span>:]<br>    afterE=bytes_to_long(bin2bytes(Pinv(bytes2bin(afterE))))<br>    arr=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        arr.append(afterE&amp;<span class="hljs-number">15</span>)<br>        afterE&gt;&gt;=<span class="hljs-number">4</span><br>    Soutput.append(arr[::-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">import</span> copy<br>dSoutput=copy.deepcopy(Soutput)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        dSoutput[i][j]^=dSoutput[<span class="hljs-number">0</span>][j]<br><span class="hljs-built_in">print</span>(Sinput)<br><span class="hljs-built_in">print</span>(dSoutput)<br>K=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    D=<span class="hljs-built_in">set</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        x=Sinput[j][i]<br>        y=dSoutput[j][i]<br>        dtmp=<span class="hljs-built_in">list</span>(detSRec[i][x][y])<br>        ctmp=[i^x <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dtmp]<br>        D&amp;=<span class="hljs-built_in">set</span>(ctmp)<br>    K.append(<span class="hljs-built_in">list</span>(D))<br><span class="hljs-built_in">print</span>(K)<br>keyguess=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    keyguess&lt;&lt;=<span class="hljs-number">6</span><br>    keyguess|=K[i][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(keyguess)[<span class="hljs-number">2</span>:],myKey.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>可能的输出结果，最后一行为猜测密钥和实际密钥，可以看出是正确的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Sinput=dSinput=[[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>], [<span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>, <span class="hljs-number">34</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">36</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">2</span>, <span class="hljs-number">36</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>], [<span class="hljs-number">48</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">48</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">61</span>, <span class="hljs-number">27</span>, <span class="hljs-number">54</span>, <span class="hljs-number">47</span>, <span class="hljs-number">61</span>, <span class="hljs-number">27</span>, <span class="hljs-number">54</span>, <span class="hljs-number">47</span>], [<span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>, <span class="hljs-number">63</span>]]<br>dSoutput=[[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">10</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">7</span>]]<br>[[<span class="hljs-number">13</span>], [<span class="hljs-number">44</span>], [<span class="hljs-number">16</span>], [<span class="hljs-number">13</span>], [<span class="hljs-number">40</span>], [<span class="hljs-number">61</span>], [<span class="hljs-number">12</span>], [<span class="hljs-number">7</span>]]<br>36c40da3d307 36c40da3d307<br></code></pre></td></tr></table></figure><h3 id="4o03-3轮DES"><a href="#4o03-3轮DES" class="headerlink" title="4o03 3轮DES"></a>4o03 3轮DES</h3><p>进入三轮 DES，我们可以知道 $R_2$ 和 $R_3$ 的值，这个时候，我们就需要开始重视 $E$ 扩展了。 $E$ 扩展是将每组 4bit 和前一组的最后一bit、后一组的最高一bit结合。也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">PQRS ABCD WXYZ --&gt; ZPQRSA SABCDW DWXYZP<br></code></pre></td></tr></table></figure><p>因此，为了每次只影响一个 $S$ 盒的输出，我们可以选择 $S$ 盒的输入差分为 $4,8,12$ （这个 $12$ 没有加任何前后缀哦），对应的十六进制位为 $2,4,6$。下面我们继续以 $S_0$ 为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">detSCnt[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>]=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>]<br>detSCnt[<span class="hljs-number">0</span>][<span class="hljs-number">8</span>]=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br>detSCnt[<span class="hljs-number">0</span>][<span class="hljs-number">12</span>]=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">14</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>可以看到，当 $S_0$ 输入差分为 $\mathtt{0CH}$ 时，输出差分为 $\mathtt{EH}$ 的概率最高，为 $14&#x2F;64$。而当 $S_0$ 输出差分值 $\mathtt{EH}$ 时，对应输出差分为 $\mathtt{E0000000H}$，经过 $P$ 盒置换，得到 $\mathtt{00808200H}$。然后这个 $\mathtt{00808200H}$ 还要和 $L_0$ 异或。</p><p>因此，可以构造 $(L_0,R_0)&#x3D;\mathtt{(00808200H,60000000H)}$，这样在第一轮结束后，第二轮输入的 $R_1$ 差分为全 $0$，这样 $R_2$ 在异或前的差分就是全 $0$，异或后，可以有 $R_2&#x3D;\mathtt{60000000H}$。</p><p>分析每一步的概率：第一轮输入差分 $(L_0,R_0)&#x3D;\mathtt{(00808200H,60000000H)}$，输出差分为 $\mathtt{60000000H,00000000H}$ 的概率为 $14&#x2F;64$，第二轮输入差分 $\mathtt{60000000H,00000000H}$，输出差分 $\mathtt{00000000H,60000000H}$ 的概率为 $1$，第三轮输入差分 $\mathtt{00000000H,60000000H}$，输出差分 $\mathtt{60000000H,XXXXXXXXH}$ 的概率为 $1$。因此，询问 $5$ 次差不多就能有一次符合条件的结果。至于输出差分不符合期望的情况，我们直接丢弃，重新询问。</p><p><img src="/2024/11/06/BlockCipher4/5.png" alt="5"></p><p>因此，最后我们只需要找到 $R_2&#x3D;\mathtt{60000000H}$ 的输出即可，对于其他 $S$ 盒也一样，这边给出一组参考数据吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">S盒的参考值如下：<br>S0  0ch eh <span class="hljs-number">14</span>/<span class="hljs-number">64</span> 00808200h 60000000h  00808200h=P(e0000000h)<br>S1  08h ah <span class="hljs-number">16</span>/<span class="hljs-number">64</span> 40080000h 04000000h  40080000h=P(0a000000h)<br>S2  04h 9h <span class="hljs-number">12</span>/<span class="hljs-number">64</span> 04000100h 00200000h  ... ... ... ... ... ..<br>S3  04h 7h <span class="hljs-number">12</span>/<span class="hljs-number">64</span> <span class="hljs-number">8040</span>1000h 00020000h<br>S4  0ch 3h <span class="hljs-number">10</span>/<span class="hljs-number">64</span> 20000080h 00006000h<br>S5  08h 6h <span class="hljs-number">16</span>/<span class="hljs-number">64</span> 00200008h 00000400h<br>S6  0ch ch <span class="hljs-number">14</span>/<span class="hljs-number">64</span> <span class="hljs-number">00</span>100001h 00000060h<br>S7  04h 7h <span class="hljs-number">12</span>/<span class="hljs-number">64</span> 00020820h 00000002h<br><br></code></pre></td></tr></table></figure><p>所以三轮的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Util <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br>detSCnt=[[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>detSRec=[[[<span class="hljs-built_in">set</span>() <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getS</span>(<span class="hljs-params">sid,val</span>):<br>    v1,v2=<span class="hljs-number">2</span>*(<span class="hljs-keyword">not</span> <span class="hljs-keyword">not</span> (val&amp;<span class="hljs-number">32</span>))+(val&amp;<span class="hljs-number">1</span>),(val&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">15</span><br>    <span class="hljs-keyword">return</span> S[sid][v1][v2]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcS</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                in1,in2=j,k <br>                out1,out2=getS(i,in1),getS(i,in2)<br>                detin=j^k<br>                detout=out1^out2<br>                detSCnt[i][detin][detout]+=<span class="hljs-number">1</span><br>                detSRec[i][detin][detout]|=<span class="hljs-built_in">set</span>([j])<br><span class="hljs-comment">#bin2bytes(P(bytes2bin(bytes.fromhex(&#x27;00070000&#x27;)))).hex()</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandpair</span>(<span class="hljs-params">x</span>):<br>    a=getrandbits(<span class="hljs-number">64</span>)<br>    b=a^x<br>    <span class="hljs-keyword">return</span> a,b<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2b</span>(<span class="hljs-params">x,l=-<span class="hljs-number">1</span></span>):<br>    bs=long_to_bytes(x)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(bs)&lt;l):<br>        bs=<span class="hljs-built_in">bytes</span>([<span class="hljs-number">0</span>]*(l-<span class="hljs-built_in">len</span>(bs)))+bs<br>    <span class="hljs-keyword">return</span> bs<br><br>calcS()<br>myKey=urandom(<span class="hljs-number">6</span>)<span class="hljs-comment">#b&#x27;F(x)=x&#x27;</span><br>xorNum=[<span class="hljs-number">0x0080820060000000</span>,<span class="hljs-number">0x4008000004000000</span>,<span class="hljs-number">0x0400010000200000</span>,<span class="hljs-number">0x8040100000020000</span>,<br>        <span class="hljs-number">0x2000008000006000</span>,<span class="hljs-number">0x0020000800000400</span>,<span class="hljs-number">0x0010000100000060</span>,<span class="hljs-number">0x0002082000000002</span>]<br>numxe=[(<span class="hljs-number">0x0c</span>,<span class="hljs-number">0xe</span>),(<span class="hljs-number">0x08</span>,<span class="hljs-number">0xa</span>),(<span class="hljs-number">0x04</span>,<span class="hljs-number">0x9</span>),(<span class="hljs-number">0x04</span>,<span class="hljs-number">0x7</span>),<br>       (<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x3</span>),(<span class="hljs-number">0x08</span>,<span class="hljs-number">0x6</span>),(<span class="hljs-number">0x0c</span>,<span class="hljs-number">0xc</span>),(<span class="hljs-number">0x04</span>,<span class="hljs-number">0x7</span>)]<br><br>tStart=datetime.now()<br>totalQuery=<span class="hljs-number">0</span><br>K=[<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">for</span> T <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    NCipher=<span class="hljs-number">7</span><br>    Aarr=[]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(Aarr)&lt;NCipher:<br>        totalQuery+=<span class="hljs-number">1</span><br>        a,b=getrandpair(xorNum[T])<br>        ba,bb=l2b(a,<span class="hljs-number">8</span>),l2b(b,<span class="hljs-number">8</span>)<br>        x,y=encrypt(ba,myKey,<span class="hljs-number">3</span>),encrypt(bb,myKey,<span class="hljs-number">3</span>)<br>        ix,iy=bytes_to_long(x),bytes_to_long(y)<br>        <span class="hljs-keyword">if</span>(((ix^iy)&amp;<span class="hljs-number">0xffffffff</span>)==(xorNum[T]&amp;<span class="hljs-number">0xffffffff</span>)):<br>            Aarr.append((ba,bb))<br>    Sinput=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NCipher):<br>        r2,r3=Aarr[i][<span class="hljs-number">1</span>][<span class="hljs-number">4</span>:],Aarr[i][<span class="hljs-number">1</span>][:<span class="hljs-number">4</span>]<br>        eb=bin2bytes(EP(bytes2bin(r2)))<br>        ebi=bytes_to_long(eb)<br>        tmparr=[]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            tmparr.append(ebi&amp;<span class="hljs-number">0x3f</span>)<br>            ebi&gt;&gt;=<span class="hljs-number">6</span><br>        Sinput.append(tmparr[::-<span class="hljs-number">1</span>])<br>    sarr=detSRec[T][numxe[T][<span class="hljs-number">0</span>]][numxe[T][<span class="hljs-number">1</span>]]<br>    D=<span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(NCipher):<br>        s0=Sinput[i][T]<br>        xarr=<span class="hljs-built_in">set</span>([s0^i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sarr])<br>        D=D&amp;xarr<br>    K[T]=D<br><br>testM=urandom(<span class="hljs-number">8</span>)<br>testC=encrypt(testM,myKey,<span class="hljs-number">3</span>)<br>totalQuery+=<span class="hljs-number">1</span><br>guessKey=<span class="hljs-literal">None</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">step,keyarr</span>):<br>    <span class="hljs-keyword">global</span> guessKey<br>    <span class="hljs-keyword">if</span>(step==<span class="hljs-number">8</span>):<br>        keyval=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            keyval&lt;&lt;=<span class="hljs-number">6</span><br>            keyval|=keyarr[i]<br>        key2=<span class="hljs-built_in">int</span>.to_bytes(keyval,<span class="hljs-number">6</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        cc=encrypt(testM,key2,<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span>(cc==testC):<br>            guessKey=key2<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> K[step]:<br>        dfs(step+<span class="hljs-number">1</span>,keyarr+[i])<br>dfs(<span class="hljs-number">0</span>,[])<br><span class="hljs-built_in">print</span>(guessKey.<span class="hljs-built_in">hex</span>(),myKey.<span class="hljs-built_in">hex</span>(),guessKey==myKey)<br><span class="hljs-keyword">if</span>(guessKey==myKey):<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Success with queryed <span class="hljs-subst">&#123;totalQuery&#125;</span> times&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Fail&#x27;</span>)<br>tEnd=datetime.now()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Time Cost:<span class="hljs-subst">&#123;tEnd-tStart&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>一个可能的运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fd31f37d571f fd31f37d571f <span class="hljs-literal">True</span><br>Success <span class="hljs-keyword">with</span> queryed <span class="hljs-number">407</span> times<br>Time Cost:<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.225095</span><br></code></pre></td></tr></table></figure><h3 id="4o04-4轮DES"><a href="#4o04-4轮DES" class="headerlink" title="4o04 4轮DES"></a>4o04 4轮DES</h3><p>对于 4 轮 DES 而言，其在 3 轮上面又多了一轮，我们之前已知，输入差分为 $\mathtt{60000000H}$ 时，输出差分为 $\mathtt{00808200H}$ 的概率为 $14&#x2F;64$，因此我们在第三轮的基础上，继续考虑 这 $14&#x2F;64$的概率：输出 $R_3&#x3D;\mathtt{00808200H}$ 。这样，大约每 $21$ 次查询，就可以获得一次满足$L_4&#x3D;R_3&#x3D;\mathtt{00808200H}$ 的情况。</p><p><img src="/2024/11/06/BlockCipher4/6.png" alt="6"></p><p>攻击代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Util <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br>detSCnt=[[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>detSRec=[[[<span class="hljs-built_in">set</span>() <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getS</span>(<span class="hljs-params">sid,val</span>):<br>    v1,v2=<span class="hljs-number">2</span>*(<span class="hljs-keyword">not</span> <span class="hljs-keyword">not</span> (val&amp;<span class="hljs-number">32</span>))+(val&amp;<span class="hljs-number">1</span>),(val&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">15</span><br>    <span class="hljs-keyword">return</span> S[sid][v1][v2]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcS</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>                in1,in2=j,k <br>                out1,out2=getS(i,in1),getS(i,in2)<br>                detin=j^k<br>                detout=out1^out2<br>                detSCnt[i][detin][detout]+=<span class="hljs-number">1</span><br>                detSRec[i][detin][detout]|=<span class="hljs-built_in">set</span>([j])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandpair</span>(<span class="hljs-params">x</span>):<br>    a=getrandbits(<span class="hljs-number">64</span>)<br>    b=a^x<br>    <span class="hljs-keyword">return</span> a,b<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2b</span>(<span class="hljs-params">x,l=-<span class="hljs-number">1</span></span>):<br>    bs=long_to_bytes(x)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(bs)&lt;l):<br>        bs=<span class="hljs-built_in">bytes</span>([<span class="hljs-number">0</span>]*(l-<span class="hljs-built_in">len</span>(bs)))+bs<br>    <span class="hljs-keyword">return</span> bs<br><br>calcS()<br>myKey=urandom(<span class="hljs-number">6</span>)<br>xorNum=[<span class="hljs-number">0x0080820060000000</span>,<span class="hljs-number">0x4008000004000000</span>,<span class="hljs-number">0x0400010000200000</span>,<span class="hljs-number">0x8040100000020000</span>,<br>        <span class="hljs-number">0x2000008000006000</span>,<span class="hljs-number">0x0020000800000400</span>,<span class="hljs-number">0x0010000100000060</span>,<span class="hljs-number">0x0002082000000002</span>]<br>T=<span class="hljs-number">0</span><br>totalQuery=<span class="hljs-number">0</span><br>NCipher=<span class="hljs-number">5</span><br>tStart=datetime.now()<br>K=[<span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-keyword">for</span> T <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    Aarr=[]<br>    Carr=[]<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">len</span>(Aarr)&lt;NCipher):<br>        totalQuery+=<span class="hljs-number">1</span><br>        a,b=getrandpair(xorNum[T])<br>        ba,bb=l2b(a,<span class="hljs-number">8</span>),l2b(b,<span class="hljs-number">8</span>)<br>        x,y=encrypt(ba,myKey,<span class="hljs-number">4</span>),encrypt(bb,myKey,<span class="hljs-number">4</span>)<br>        ix,iy=bytes_to_long(x),bytes_to_long(y)<br>        <span class="hljs-keyword">if</span>(((ix^iy)&amp;<span class="hljs-number">0xffffffff</span>)==(xorNum[T]&gt;&gt;<span class="hljs-number">32</span>)):<br>            Aarr.append((ba,bb))<br>            Carr.append((x,y))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        r3,r4=Carr[i][<span class="hljs-number">1</span>][<span class="hljs-number">4</span>:],Carr[i][<span class="hljs-number">1</span>][:<span class="hljs-number">4</span>]<br>        r30,r40=Carr[i][<span class="hljs-number">0</span>][<span class="hljs-number">4</span>:],Carr[i][<span class="hljs-number">0</span>][:<span class="hljs-number">4</span>]<br>        dr4=bytes_to_long(r4)^bytes_to_long(r40)<br>        dr4^=xorNum[T]&amp;<span class="hljs-number">0xffffffff</span><br>        bdr4=l2b(dr4,<span class="hljs-number">4</span>)<br>        din=xorNum[T]&gt;&gt;<span class="hljs-number">32</span><br>        X=EP(bytes2bin(l2b(din,<span class="hljs-number">4</span>)))<br>        dSin=[<span class="hljs-number">32</span>*X[<span class="hljs-number">6</span>*_]+<span class="hljs-number">16</span>*X[<span class="hljs-number">6</span>*_+<span class="hljs-number">1</span>]+<span class="hljs-number">8</span>*X[<span class="hljs-number">6</span>*_+<span class="hljs-number">2</span>]+<span class="hljs-number">4</span>*X[<span class="hljs-number">6</span>*_+<span class="hljs-number">3</span>]+<span class="hljs-number">2</span>*X[<span class="hljs-number">6</span>*_+<span class="hljs-number">4</span>]+X[<span class="hljs-number">6</span>*_+<span class="hljs-number">5</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>        iSout=bytes_to_long(bin2bytes(Pinv(bytes2bin(bdr4))))<br>        dSout=[]<br>        r3Sin=[]<br>        r3E=EP(bytes2bin(r3))<br>        r3Sin=[<span class="hljs-number">32</span>*r3E[<span class="hljs-number">6</span>*_]+<span class="hljs-number">16</span>*r3E[<span class="hljs-number">6</span>*_+<span class="hljs-number">1</span>]+<span class="hljs-number">8</span>*r3E[<span class="hljs-number">6</span>*_+<span class="hljs-number">2</span>]+<span class="hljs-number">4</span>*r3E[<span class="hljs-number">6</span>*_+<span class="hljs-number">3</span>]+<span class="hljs-number">2</span>*r3E[<span class="hljs-number">6</span>*_+<span class="hljs-number">4</span>]+r3E[<span class="hljs-number">6</span>*_+<span class="hljs-number">5</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            dSout.append(iSout&amp;<span class="hljs-number">15</span>)<br>            iSout&gt;&gt;=<span class="hljs-number">4</span><br>        dSout=dSout[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            tmpset=<span class="hljs-built_in">list</span>(detSRec[j][dSin[j]][dSout[j]])<br>            keyset=<span class="hljs-built_in">set</span>([ts ^ r3Sin[j]<span class="hljs-keyword">for</span> ts <span class="hljs-keyword">in</span> tmpset])<br>            K[j]&amp;=keyset<br>testM=urandom(<span class="hljs-number">8</span>)<br>testC=encrypt(testM,myKey,<span class="hljs-number">3</span>)<br>totalQuery+=<span class="hljs-number">1</span><br>guessKey=<span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">step,keyarr</span>):<br>    <span class="hljs-keyword">global</span> guessKey<br>    <span class="hljs-keyword">if</span>(step==<span class="hljs-number">8</span>):<br>        keyval=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            keyval&lt;&lt;=<span class="hljs-number">6</span><br>            keyval|=keyarr[i]<br>        key2=<span class="hljs-built_in">int</span>.to_bytes(keyval,<span class="hljs-number">6</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>        cc=encrypt(testM,key2,<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">if</span>(cc==testC):<br>            guessKey=key2<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> K[step]:<br>        dfs(step+<span class="hljs-number">1</span>,keyarr+[i])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;K=<span class="hljs-subst">&#123;K&#125;</span>&#x27;</span>)<br>dfs(<span class="hljs-number">0</span>,[])<br><span class="hljs-built_in">print</span>(guessKey.<span class="hljs-built_in">hex</span>(),myKey.<span class="hljs-built_in">hex</span>(),guessKey==myKey)<br><span class="hljs-keyword">if</span>(guessKey==myKey):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Success with queryed <span class="hljs-subst">&#123;totalQuery&#125;</span> times&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Fail&#x27;</span>)<br>tEnd=datetime.now()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Time Cost:<span class="hljs-subst">&#123;tEnd-tStart&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>一个可能的运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">K=[&#123;<span class="hljs-number">52</span>&#125;, &#123;<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">18</span>&#125;, &#123;<span class="hljs-number">33</span>&#125;, &#123;<span class="hljs-number">14</span>&#125;, &#123;<span class="hljs-number">58</span>&#125;, &#123;<span class="hljs-number">43</span>&#125;, &#123;<span class="hljs-number">10</span>&#125;]<br>d004a13baaca d004a13baaca <span class="hljs-literal">True</span><br>Success <span class="hljs-keyword">with</span> queryed <span class="hljs-number">2255</span> times<br>Time Cost:<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.565169</span><br></code></pre></td></tr></table></figure><p>5 到 8 轮的情况就很复杂了，等以后遇到题目再更新吧:(</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUSCTF2024</title>
    <link href="/2024/10/23/SUSCTF2024/"/>
    <url>/2024/10/23/SUSCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-SUSCTF-WriteUp"><a href="#huangx607087-SUSCTF-WriteUp" class="headerlink" title="huangx607087-SUSCTF WriteUp"></a>huangx607087-SUSCTF WriteUp</h1><blockquote><p>Crypto 9 题做了 7 题，两年没碰CTF，好多都不会了，手感全损。。。</p></blockquote><h2 id="1-RSA教学"><a href="#1-RSA教学" class="headerlink" title="1.RSA教学"></a>1.RSA教学</h2><p><del>一开始看到还以为是pad部分是三L，然后一个Easy题一天多0解，没想到竟然是个错题。更新的时候刚好本科几个舍友找我玩，抢血失败</del></p><p>打开容器，连接17次，获取17组 $n$ 和 $c$，然后直接CRT即可。</p><p>用sagemath可以一把梭，代码过于简单</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> gmpy2 import iroot<br><span class="hljs-keyword">from</span> Crypto.Util.number improt *<br>N=[<span class="hljs-built_in">..</span>.] #得到的17个n<br>C=[<span class="hljs-built_in">..</span>.] #得到的17个c<br><span class="hljs-attribute">m17</span>=crt(C,N)<br>msg,<span class="hljs-attribute">judg</span>=iroot(m17,17)<br>assert judg<br><span class="hljs-built_in">print</span>(long_to_bytes(msg))<br></code></pre></td></tr></table></figure><h2 id="2-pell"><a href="#2-pell" class="headerlink" title="2.pell"></a>2.pell</h2><p>签到题，解方程 $x^2-114514y^2&#x3D;1$，很简单的pell方程</p><p>直接从网上down一个代码，OK。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br>d =<span class="hljs-number">114514</span><br>m = <span class="hljs-built_in">int</span>(np.sqrt(d))<br>dq = deque()<br>dq.append(m)<br>n0 = n1 = d - m * m<br>m1 = m<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    q, m2 = <span class="hljs-built_in">divmod</span>(m1 + m, n1)<br>    dq.appendleft(q)<br>    m1 = -m2+m<br>    n1 = (d-m1*m1)//n1<br>    <span class="hljs-keyword">if</span> m1 == m <span class="hljs-keyword">and</span> n1 == n0:<br>        <span class="hljs-keyword">break</span><br><br>dq.popleft()<br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dq:<br>    x1 = y + x * i<br>    y = x<br>    x = x1<br>    y1=y<br><span class="hljs-keyword">if</span> x*x-d*y*y==-<span class="hljs-number">1</span>:<br>   b=(x**<span class="hljs-number">2</span>+d*y**<span class="hljs-number">2</span>)<br>   y1=<span class="hljs-number">2</span>*x*y<br>   x1=b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x1=&#x27;</span>,x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y1=&#x27;</span>,y1)<br></code></pre></td></tr></table></figure><h2 id="3-fermat"><a href="#3-fermat" class="headerlink" title="3.fermat"></a>3.fermat</h2><p>题目给出了 $n&#x3D;pq$ 和 $g&#x3D;p^3+q^3$，设 $P&#x3D;p^3,Q&#x3D;q^3$，有 $n^3&#x3D;PQ,g&#x3D;P+Q$。<br>构造二次方程 $x^2-gx+n$，使用求根公式可以得到 $x_1&#x3D;P,x_2&#x3D;Q$，再对 $P,Q$  开立方，得到 $p$ 和 $q$。<br>由于 $p,q$ 均为模 $4$ 余 $1$ 的素数，因此它们均可表示为两个平方和的形式，设 $p&#x3D;a^2+b^2,q&#x3D;u^2+v^2$。<br>可以得到<br>$$<br>n&#x3D;pq&#x3D;(a^2+b^2)(u^2+v^2)&#x3D;(ua+vb)^2+(va-ub)^2<br>$$<br>用递降法求出 $a,b,u,v$ 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16len, s64len</span>):<br>    LTSNMS = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16len) == <span class="hljs-number">12</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64len) == <span class="hljs-number">64</span><br>    <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> LTSNMS:<br>        <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> LTSNMS:<br>            <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> LTSNMS:<br>                <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> LTSNMS:<br>                    <span class="hljs-keyword">if</span> sha256((i1+i2+i3+i4+s16len).encode()).hexdigest() == s64len:<br>                        <span class="hljs-keyword">return</span> i1+i2+i3+i4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getA</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">assert</span>(p % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        t = bytes_to_long(urandom(<span class="hljs-number">195</span>)) % p<br>        s = <span class="hljs-built_in">pow</span>(t, (p-<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, p)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(s, <span class="hljs-number">2</span>, p) == p-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAns</span>(<span class="hljs-params">A, B, M, p</span>):<br>    <span class="hljs-comment"># print(A,B,M,p)</span><br>    <span class="hljs-keyword">if</span>(M == <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">abs</span>(A), <span class="hljs-built_in">abs</span>(B))<br>    <span class="hljs-comment"># print(A,B,M,p)</span><br>    u, v = A % M, B % M<br>    <span class="hljs-keyword">if</span>(u &gt; M//<span class="hljs-number">2</span>):<br>        u -= M<br>    <span class="hljs-keyword">if</span>(v &gt; M//<span class="hljs-number">2</span>):<br>        v -= M<br>    <span class="hljs-keyword">assert</span>((u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>) % M == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>) % M == <span class="hljs-number">0</span>)<br>    r = (u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>)//M<br>    A2 = (u*A+v*B)//M<br>    B2 = (-u*B+v*A)//M<br>    <span class="hljs-keyword">return</span> getAns(A2, B2, r, p)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p</span>):<br>    A = getA(p)<br>    B = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span>(A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>) % p == <span class="hljs-number">0</span><br>    M = (A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)//p<br>    <span class="hljs-keyword">return</span> getAns(A, B, M, p)<br><br><br>sh = remote(<span class="hljs-string">&#x27;game.ctf.seusus.com&#x27;</span>, <span class="hljs-number">57718</span>)<br>cc = sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>s64 = cc[-<span class="hljs-number">64</span>:].decode()<br>s16 = cc[<span class="hljs-number">12</span>:<span class="hljs-number">24</span>].decode()<br><span class="hljs-built_in">print</span>(cc)<br><span class="hljs-built_in">print</span>(s64)<br><span class="hljs-built_in">print</span>(s16)<br>yanzhengma = getyanzhengma(s16, s64)<br><span class="hljs-built_in">print</span>(yanzhengma)<br>sh.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>sh.sendline(yanzhengma.encode())<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>n = sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>g = sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(g)<br>n, g = <span class="hljs-built_in">int</span>(n), <span class="hljs-built_in">int</span>(g)<br>PmulQ = n**<span class="hljs-number">3</span><br>PaddQ = g<br>A, B, C = <span class="hljs-number">1</span>, -PaddQ, PmulQ<br>sqrtdet, judg = iroot(B**<span class="hljs-number">2</span>-<span class="hljs-number">4</span>*A*C, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;J:&#x27;</span>, judg)<br>P = (-B+sqrtdet) &gt;&gt; <span class="hljs-number">1</span><br>Q = (-B-sqrtdet) &gt;&gt; <span class="hljs-number">1</span><br>p, q = iroot(P, <span class="hljs-number">3</span>)[<span class="hljs-number">0</span>], iroot(Q, <span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(p, q, n % p, n % q)<br>u, v = (solve(p))<br>a, b = (solve(q))<br><br><br>Ans = <span class="hljs-built_in">abs</span>(u*a+v*b)<br>Bns = <span class="hljs-built_in">abs</span>(v*a-u*b)<br><span class="hljs-built_in">print</span>(Ans)<br><span class="hljs-built_in">print</span>(Bns)<br><span class="hljs-built_in">print</span>(Ans**<span class="hljs-number">2</span>+Bns**<span class="hljs-number">2</span> == n)<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>sh.sendline(<span class="hljs-built_in">str</span>(Ans).encode())<br><br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>sh.sendline(<span class="hljs-built_in">str</span>(Bns).encode())<br>sh.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="4-Fibonacii"><a href="#4-Fibonacii" class="headerlink" title="4.Fibonacii"></a>4.Fibonacii</h2><p>题目给出了一个已知值 $A&#x3D;\mathtt{target}$，要求给出 $p$ 和 $n$，使得 $F_{n}\equiv A \pmod p$。</p><p>注意到斐波那契数列的矩阵快速幂形式（令 $F_0&#x3D;0,F_1&#x3D;F_2&#x3D;1$）：</p><p><img src="/2024/10/23/SUSCTF2024/4-1.png" alt="4-1"></p><p>其中矩阵 $\mathbf M$ 有特征值 $t_1&#x3D;\dfrac{1+\sqrt 5}{2}$ 和 $t_2&#x3D;\dfrac{1-\sqrt 5}{2}$，其对应的特征向量分别为 $\vec v_1&#x3D;(1,\dfrac{1+\sqrt5}{2})$ 和  $\vec v_2&#x3D;(1,\dfrac{1-\sqrt5}{2})$。<br>再注意到斐波那契数列的通项公式 $F_n &#x3D; \dfrac{1}{\sqrt{5}} \left[ \left( \dfrac{1 + \sqrt{5}}{2} \right)^n - \left( \dfrac{1 - \sqrt{5}}{2} \right)^n \right]$。很明显，这个题有 $\sqrt5$、$n$ 次方两个要素。那就要从离散对数、二次剩余的地方去想。</p><p>根据信安数基的知识可以知道：</p><blockquote><ol><li>若 $5$ 是 $p$ 的二次剩余，则 $p\equiv ±1\pmod5$</li><li>若 $p-1$ 极度光滑，则离散对数极度易解。</li></ol></blockquote><p>因此，构造 $p&#x3D;754×10^{74}+1$ ，显然 $p-1$ 极度光滑，且 $p\equiv 1\pmod 5$。然后用下面的代码求出 $x \equiv \sqrt 5 \pmod p$  的值。这个代码主要是用来求模 8 余 1 的素数域开平方的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># luogu P5491</span><br><span class="hljs-comment"># P.S. 自己高中搞过OI(省2)，luogu其实带着刷过一些算法题，主要还是偏模板和数据结构一点，接触CTF后为了熟悉和验证算法也做过难一点的数论。本科没打过ACM，ACM肯定不行的。</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>.real=x<br>        <span class="hljs-variable language_">self</span>.imag=y<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>): <span class="hljs-comment">#勒让德符号</span><br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>        x&gt;&gt;=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        x,p=p,x<br>        <span class="hljs-keyword">if</span> x&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Rand</span>(<span class="hljs-params">p</span>): <span class="hljs-comment">#随机数</span><br>    <span class="hljs-keyword">return</span> bytes_to_long(urandom(<span class="hljs-number">80</span>))%p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cmul</span>(<span class="hljs-params">a,b,nr,p</span>): <span class="hljs-comment">#复数乘</span><br>    Real=a.real*b.real+a.imag*b.imag*nr<br>    Imag=a.real*b.imag+b.real*a.imag<br>    Res=Complex(Real%p,Imag%p)<br>    <span class="hljs-keyword">return</span> Res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cpow</span>(<span class="hljs-params">a,e,nr,p</span>):<br>    Res=Complex(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> e:<br>        <span class="hljs-keyword">if</span> e&amp;<span class="hljs-number">1</span>:<br>            Res=Cmul(a,Res,nr,p)<br>        a=Cmul(a,a,nr,p)<br>        e&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> Res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_M8R1</span>(<span class="hljs-params">n,p</span>): <span class="hljs-comment">#模8余1开平方</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        a=Rand(p)<br>        nr=(a*a-n)%p<br>        <span class="hljs-keyword">if</span> isqr(nr,p)==-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    Res=Complex(a,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> Cpow(Res,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,nr,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">n,p</span>): <br>    A=<span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> isqr(n,p)==-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hola!&quot;</span><br>    <span class="hljs-keyword">if</span> p&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span>: <span class="hljs-comment">#有公式的套公式</span><br>        A=<span class="hljs-built_in">pow</span>(n,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>    <span class="hljs-keyword">elif</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">5</span>:<br>        A=<span class="hljs-built_in">pow</span>(n,(p+<span class="hljs-number">3</span>)//<span class="hljs-number">8</span>,p)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(A,<span class="hljs-number">2</span>,p)!=n:<br>            A=<span class="hljs-number">2</span>*n*<span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>*n,(p-<span class="hljs-number">5</span>)//<span class="hljs-number">8</span>,p)%p<br>    <span class="hljs-keyword">elif</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">1</span>: <span class="hljs-comment">#没公式的就那么做</span><br>        A=solve_M8R1(n,p).real<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">min</span>(A,p-A))+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">max</span>(A,p-A))<br>T=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>()) <br><span class="hljs-keyword">while</span> T: <span class="hljs-comment">#OI特有的code style</span><br>    T=T-<span class="hljs-number">1</span><br>    n,p=<span class="hljs-built_in">input</span>().split()<br>    <span class="hljs-built_in">print</span>(solve(<span class="hljs-built_in">int</span>(n),<span class="hljs-built_in">int</span>(p)))<br></code></pre></td></tr></table></figure><p>然后一些带 $\sqrt 5$ 的值就解出来了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">75400000000000000000000000000000000000000000000000000000000000000000000000001</span> <br><span class="hljs-comment">#very weak prime,p-1=2^75 * 5^74 * 13 * 29</span><br>sq5=<span class="hljs-number">16392361170112101659662823978726961447340641722259199851531537362443024593275</span><br>half=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>,p)<br>t1,t2=half*(<span class="hljs-number">1</span>+sq5)%p,half*(<span class="hljs-number">1</span>-sq5)%p<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">half=37700000000000000000000000000000000000000000000000000000000000000000000000001</span><br><span class="hljs-string">t1=8196180585056050829831411989363480723670320861129599925765768681221512296638</span><br><span class="hljs-string">t2=67203819414943949170168588010636519276329679138870400074234231318778487703364</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>根据特征值的概念，可以得到：<br>$$<br>\mathbf M^n v_0&#x3D;t_1^n k_1\vec v_1+t_2^nk_2\vec v_2<br>$$<br>其中 $\vec v_0&#x3D;(1,1)$，可以写成 $\vec v_0&#x3D;k_1\vec v_1+k_2\vec v_2$ 的形式，$k_1,k_2$ 直接列二元一次方程解出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">k1=(<span class="hljs-number">1</span>-t2)*inverse(Integer(t1-t2),p)%p<br>k2=(<span class="hljs-number">1</span>-k1)%p<br><span class="hljs-built_in">print</span>(k1)<br><span class="hljs-built_in">print</span>(k2)<br>v1=vector([<span class="hljs-number">1</span>,t1])<br>v2=vector([<span class="hljs-number">1</span>,t2])<br><span class="hljs-built_in">print</span>(k1*t1**<span class="hljs-number">1</span>+k2*t2**<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">k1=1639236117011210165966282397872696144734064172225919985153153736244302459328 k2=73760763882988789834033717602127303855265935827774080014846846263755697540674</span><br><span class="hljs-string">check=1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>注意到两个特征值之间的关系： $t_1t_2&#x3D;-1$，因此设 $t_2&#x3D;\dfrac{-1}{t_1}$。由于 $A$ 是第 $x$ 项，因此有：<br>$$<br>k_1t_1^x+k_2t_2^x&#x3D;A<br>$$<br>令 $t_1^x&#x3D;t$，消元去分母可以得到<br>$$<br>k_1t^2-At-k_2&#x3D;0<br>$$<br>放到sagemath中分解这个式子，可以得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#t1*t2=1</span><br><span class="hljs-comment"># let t1=g t2=-1/g</span><br><span class="hljs-comment"># k1*g^x-k2/g^x=A</span><br><span class="hljs-comment"># let g^x=t</span><br><span class="hljs-comment"># k1*t-k2/t=A</span><br><span class="hljs-comment"># k1*t^2-A*t-k2=0</span><br>var(<span class="hljs-string">&quot;t&quot;</span>)<br>TRR.&lt;t&gt;=PolynomialRing(GF(p))<br>factor(k1*t**<span class="hljs-number">2</span>-A*t-k2)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(1639236117011210165966282397872696144734064172225919985153153736244302459328) * </span><br><span class="hljs-string">(t + 1733149324186367358509713307996813388922147363320953556627453856871464344817) * </span><br><span class="hljs-string">(t + 63058247527559997808754465715771715540382722221120268489624945332318694664669)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">可以推出（注意负号）：</span><br><span class="hljs-string">X1=-1733149324186367358509713307996813388922147363320953556627453856871464344817</span><br><span class="hljs-string">X2=-63058247527559997808754465715771715540382722221120268489624945332318694664669</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>由于 $t&#x3D;t_1^x$，直接上离散对数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">U1=-<span class="hljs-number">1733149324186367358509713307996813388922147363320953556627453856871464344817</span><br>U2=-<span class="hljs-number">63058247527559997808754465715771715540382722221120268489624945332318694664669</span><br>discrete_log(U1,Mod(t1,p))<br><span class="hljs-comment">#59164940663412913403923154565404322432501032178958345904039356200875940871519</span><br></code></pre></td></tr></table></figure><p>然后验证一下，发现正确结果比实际解出来的值多 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(M**<span class="hljs-number">59164940663412913403923154565404322432501032178958345904039356200875940871519</span>)<br><span class="hljs-built_in">print</span>(M**<span class="hljs-number">59164940663412913403923154565404322432501032178958345904039356200875940871520</span>)<br></code></pre></td></tr></table></figure><p>因此得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">index=<span class="hljs-number">59164940663412913403923154565404322432501032178958345904039356200875940871520</span><br>prime=<span class="hljs-number">75400000000000000000000000000000000000000000000000000000000000000000000000001</span><br></code></pre></td></tr></table></figure><p>其实感觉构造 $p\equiv 11 {\text{ or }} 19\pmod{20}$ 的素数可能更好，因为这样可以满足 $p \equiv 3 \pmod 4$，开平方根有公式。</p><h2 id="5-AES-Plus"><a href="#5-AES-Plus" class="headerlink" title="5.AES-Plus"></a>5.AES-Plus</h2><p>Meet in the middle 攻击，枚举两个密钥共 $16^2$ 种组合，对已知明文加密 16 次，已知密文解密 16 次。得到使用的两个密钥分别是 4 和 11，然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>flagC=long_to_bytes(<span class="hljs-number">0xba099276411c24b734948053cea63b4f</span>)<br>knownP=long_to_bytes(<span class="hljs-number">0xd66fe087038cf381d3bcfe6bcf8c6a1b</span>)<br>knownC=long_to_bytes(<span class="hljs-number">0x6a0b644af7b11a267f8b97399e8bee39</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span>, data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.encrypt(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span>, data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.decrypt(data)<br><br>DIC=&#123;&#125;<br>TABLE=<span class="hljs-string">&quot;0123456789abcdef&quot;</span><br>KEYPRF=<span class="hljs-string">&quot;SUSCTF-AESPLUS-&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):<span class="hljs-comment"># 我开了4个，分别是0~3，4~7，8~11，12~15，四个一起跑的。</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        <span class="hljs-built_in">print</span>(i,j)<br>        DIC=&#123;&#125;<br>        key1=(KEYPRF+TABLE[i]).encode()<br>        key2=(KEYPRF+TABLE[j]).encode()<br>        <br>        <br>        <span class="hljs-keyword">for</span> encid <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>)):<br>            m=knownP<br>            <span class="hljs-keyword">for</span> bitno <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>                bit=(<span class="hljs-number">1</span>&lt;&lt;bitno)&amp;encid<br>                <span class="hljs-keyword">if</span>(bit):<br>                    m=aes_encrypt(key1,m)<br>                <span class="hljs-keyword">else</span>:<br>                    m=aes_encrypt(key2,m)<br>            DIC[m]=encid<br>        <span class="hljs-keyword">for</span> decid <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">16</span>)):<br>            c=knownC<br>            <span class="hljs-keyword">for</span> bitno <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                bit=(<span class="hljs-number">1</span>&lt;&lt;bitno)&amp;decid<br>                <span class="hljs-keyword">if</span>(bit):<br>                    c=aes_decrypt(key1,c)<br>                <span class="hljs-keyword">else</span>:<br>                    c=aes_decrypt(key2,c)<br>            <span class="hljs-keyword">if</span>(DIC.get(c,-<span class="hljs-number">1</span>)!=-<span class="hljs-number">1</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;decid=&#x27;</span>,decid)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;encid=&#x27;</span>,DIC.get(c,-<span class="hljs-number">1</span>))<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;i=&#x27;</span>,i)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;j=&#x27;</span>,j)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(DIC)))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">input</span>()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第二个程序（4-7）的跑出来了结果：</span><br><span class="hljs-string">encid=7896</span><br><span class="hljs-string">decid=51186</span><br><span class="hljs-string">i=4</span><br><span class="hljs-string">j=11</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>然后解密就有flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_encrypt</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span>, data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.encrypt(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_decrypt</span>(<span class="hljs-params">key: <span class="hljs-built_in">bytes</span>, data: <span class="hljs-built_in">bytes</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.decrypt(data)<br><br>encid=<span class="hljs-number">7896</span><span class="hljs-comment">#0b0000101101111000#7896</span><br>decid=<span class="hljs-number">51186</span><br>ID=(decid&lt;&lt;<span class="hljs-number">16</span>)|encid<br>key1=<span class="hljs-string">b&quot;SUSCTF-AESPLUS-4&quot;</span><br>key2=<span class="hljs-string">b&quot;SUSCTF-AESPLUS-b&quot;</span><br><br>flagC=long_to_bytes(<span class="hljs-number">0xba099276411c24b734948053cea63b4f</span>)<br><br>knownC=long_to_bytes(<span class="hljs-number">0x6a0b644af7b11a267f8b97399e8bee39</span>)<br>c=flagC<br><span class="hljs-comment">#c=knownC</span><br><span class="hljs-keyword">for</span> bitno <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    bit=(<span class="hljs-number">1</span>&lt;&lt;bitno)&amp;ID<br>    <span class="hljs-keyword">if</span>(bit):<br>        c=aes_decrypt(key1,c)<br>    <span class="hljs-keyword">else</span>:<br>        c=aes_decrypt(key2,c)<br><span class="hljs-built_in">print</span>(c.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#6c524b66b5434c85b73da8e2e768a9ce</span><br></code></pre></td></tr></table></figure><h2 id="6-nfsr1"><a href="#6-nfsr1" class="headerlink" title="6.nfsr1"></a>6.nfsr1</h2><p>给出30组挑战，问你给出的字符串是随机生成的，还是经过NFSR处理过的。</p><p>注意到NFSR会将一个16字节的内容变成 32 字节，其主要代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>):<br>    enc = <span class="hljs-built_in">list</span>()<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg:<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.lfsr0(<span class="hljs-number">1</span>):<br>            enc += [m &amp; <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>), m | <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>)]<br>        <span class="hljs-keyword">else</span>:<br>            enc += [m | <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>), m &amp; <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(enc)<br></code></pre></td></tr></table></figure><p>很显然，bitor 操作大概率会导致数值中 1 比特增加，bitand 操作大概率回导致数值中 1 比特减少，写个函数测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">hexlv</span>):<br>    Q = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        x1 = <span class="hljs-built_in">int</span>(hexlv[<span class="hljs-number">4</span>*i:<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>        x2 = <span class="hljs-built_in">int</span>(hexlv[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>:<span class="hljs-number">4</span>*i+<span class="hljs-number">4</span>], <span class="hljs-number">16</span>)<br>        Q += <span class="hljs-built_in">abs</span>(bitcount(x1)-bitcount(x2))<br>    <span class="hljs-keyword">return</span> Q/<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>发现随机生成的字符串中， 函数值多为一点几，最高不超过2.25。而处理过的字符串函数值均超过了3。</p><p>那就直接上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16len, s64len</span>):<br>    LTSNMS = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16len) == <span class="hljs-number">12</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64len) == <span class="hljs-number">64</span><br>    <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> LTSNMS:<br>        <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> LTSNMS:<br>            <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> LTSNMS:<br>                <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> LTSNMS:<br>                    <span class="hljs-keyword">if</span> sha256((i1+i2+i3+i4+s16len).encode()).hexdigest() == s64len:<br>                        <span class="hljs-keyword">return</span> i1+i2+i3+i4<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitcount</span>(<span class="hljs-params">x</span>):<br>    c = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(x):<br>        c += (x &amp; <span class="hljs-number">1</span>)<br>        x &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">hexlv</span>):<br>    Q = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        x1 = <span class="hljs-built_in">int</span>(hexlv[<span class="hljs-number">4</span>*i:<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>        x2 = <span class="hljs-built_in">int</span>(hexlv[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>:<span class="hljs-number">4</span>*i+<span class="hljs-number">4</span>], <span class="hljs-number">16</span>)<br>        Q += <span class="hljs-built_in">abs</span>(bitcount(x1)-bitcount(x2))<br>    <span class="hljs-keyword">return</span> Q/<span class="hljs-number">16</span><br><br><br>sh = remote(<span class="hljs-string">&#x27;game.ctf.seusus.com&#x27;</span>, <span class="hljs-number">57317</span>)<br><br>cc = sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>s64 = cc[-<span class="hljs-number">64</span>:].decode()<br>s16 = cc[<span class="hljs-number">12</span>:<span class="hljs-number">24</span>].decode()<br><span class="hljs-built_in">print</span>(cc)<br><span class="hljs-built_in">print</span>(s64)<br><span class="hljs-built_in">print</span>(s16)<br>yanzhengma = getyanzhengma(s16, s64)<br><span class="hljs-built_in">print</span>(yanzhengma)<br>sh.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>sh.sendline(yanzhengma.encode())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Round &#x27;</span>, i, <span class="hljs-string">&#x27;:&#x27;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&#x27;:&#x27;</span>)<br>    datarecv = sh.recvline(keepends=<span class="hljs-literal">False</span>).strip().decode()<br>    <span class="hljs-built_in">print</span>(datarecv)<br>    judg = calc(datarecv)<br>    <span class="hljs-built_in">print</span>(judg)<br>    sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>    <span class="hljs-keyword">if</span>(judg &gt; <span class="hljs-number">2.5</span>):<br>        sh.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        sh.sendline(<span class="hljs-string">b&#x27;0&#x27;</span>)<br><br>sh.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="7-signin-in-sys"><a href="#7-signin-in-sys" class="headerlink" title="7.signin_in_sys"></a>7.signin_in_sys</h2><h3 id="7x01-solution"><a href="#7x01-solution" class="headerlink" title="7x01 solution"></a>7x01 solution</h3><p>一个卡了我一坤天的题。一开始弄了个乱搞做法，60%概率能过 256 的上限。然后自己推式子推了好久，终于把 128 的上限过掉了。。。。</p><p>这个题首先注意到算法其实是 DSA 签名算法，没有出现共用随机数的情况，但使用的H函数有点奇怪，并且<del>注意力涣散的人也</del>可以注意到 <code>H(s)=H(&#39;\x00&#39;+s)</code> 。</p><p>题目要求是求出sus_hex的一组合法签名，但一开始不知道sus_hex的值，需要通过hint，而hint就需要求出验证公钥。根据上面我注意到的内容，构造 <code>00</code> 和 <code>0000</code>，这两个的 H 值一样。</p><p>设 $A$ 是相同的 $H$ 值，根据 $r_i\equiv g^{k_i}\pmod p$ 和 $s_i\equiv\dfrac{A+xr_i}{k_i} \pmod q,i&#x3D;1,2$，可以解出<br>$$<br>g^x&#x3D; \left(\dfrac{r_1^{s_1}}{r_2^{s_2}}\right)^{(r_1-r_2)^{-1} \bmod q} \bmod p<br>$$<br>(有点复杂，但反正指数上的东西全模 $q$，不是指数上的东西全模 $p$ 就行)。</p><p>拿到 pk 后，就可以拿到sus_hex。</p><p>放一下求这一部分的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">dat=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>p,q,g,t=<span class="hljs-built_in">eval</span>(dat)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br><span class="hljs-built_in">print</span>(g)<br><span class="hljs-built_in">print</span>(t)<br><br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-string">b&#x27;0000&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;) =&#x27;</span>)<br>r1,s1=<span class="hljs-built_in">eval</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(r1,s1)<br><br><br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-string">b&#x27;00000000&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;) =&#x27;</span>)<br>r2,s2=<span class="hljs-built_in">eval</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(r2,s2)<br><br>cpk=<span class="hljs-built_in">pow</span>(r1,s1,p)*inverse(<span class="hljs-built_in">pow</span>(r2,s2,p),p)%p<br>pk=<span class="hljs-built_in">pow</span>(cpk,inverse(r1-r2,q),p)<br><span class="hljs-built_in">print</span>(pk)<br><br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-string">b&#x27;h&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>sh.sendline(<span class="hljs-built_in">str</span>(pk).encode())<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>Msghex=sh.recvline(keepends=<span class="hljs-literal">False</span>).strip()[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Msghex)==<span class="hljs-number">256</span><br><span class="hljs-built_in">print</span>(Msghex)<br><br>sh.interactive() <span class="hljs-comment">#后面直接手搓了</span><br><br></code></pre></td></tr></table></figure><p>再关注一下这个 $H$ 函数，可以发现由于 $m_i$ 很小，因此 $h \oplus m_i$ 可以写成 $h+\delta_i$，其中 $\delta_i$ 也很小。把异或换加，就可以发现，最后 $H$ 可以写成一个关于 $t$ 的多项式，其中 $\delta_i $ 很小 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br><span class="hljs-comment"># notice that ^^ in sage means xor, ^ in sage means power, ^ in python means xor.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params"> m: <span class="hljs-built_in">bytes</span></span>):<br>    h = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m :<br>        h = (h ^^ mi) * t % q<br></code></pre></td></tr></table></figure><p>下面就以 $n&#x3D;4$ 举例了，其实 $n&#x3D;128$ 同理。<br>$$<br>H(m)\equiv \delta_1t^4+\delta_2t^3+\delta_3t^2+\delta_4t\pmod q \tag {8.1}<br>$$</p><p>若目标字符串的 hash 值为 $D$，则 $(8.1)$ 可以写成<br>$$<br>D\equiv \delta_1t^4+\delta_2t^3+\delta_3t^2+\delta_4t\pmod q \tag {8.2}<br>$$<br>去同余，得<br>$$<br>\delta_1t^4+\delta_2t^3+\delta_3t^2+\delta_4t-D-k q &#x3D;0\tag {8.3}<br>$$<br>然后就可以构造LLL：</p><p><img src="/2024/10/23/SUSCTF2024/7-1.png" alt="1"></p><p>中间的矩阵是 $(n+2)$ 行 $(n+3)$ 列的，因此对中间的矩阵LLL之后，找到一个倒数第三个数是 $1$，最后一个数是 $0$ 的行向量，就可以解出来了。</p><p>这个常数 $K$ 其实是根据闵可夫斯基定理，要保证格中的向量足够大（原理很玄学，有时候必须加，不加可能求不出正确结果）。这里取的是 $K&#x3D;2^{900}$，注意到最后一列是 $0$ ，所以乘上一个 $K$ 不影响结果。</p><p>下面是LLL部分代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#SAGE</span><br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><br><span class="hljs-comment"># In[1]:</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>q=<span class="hljs-number">244309567133428459339052233620763590631</span><br>t=<span class="hljs-number">139116278922633292045835908998748980746</span><br>n=<span class="hljs-number">128</span><br>mmm=long_to_bytes(<span class="hljs-number">0x6532303734613033336462373133663863653039303532636265316338306631393031356163336534386136646664313433303636623330373637663931326633343331323133643539383064646136643131663361613831663639663139656533623033383033303332623734633063343632663635323834373631346132</span>)<br>C=[]   <span class="hljs-comment">#这个C是以前乱搞用的，这里被废弃了</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params"> m: <span class="hljs-built_in">bytes</span></span>):<br>    h = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m :<br><span class="hljs-comment">#       C.append((h&amp;(2**300-256))|0x55) </span><br>        h = (h ^^ mi) * t % q<br>    <span class="hljs-keyword">return</span> h<br>D=(H(mmm))<br><span class="hljs-built_in">print</span>(D)<br><span class="hljs-comment">#86818520128168117392109372309780328095</span><br><br><span class="hljs-comment"># In[2]:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getVec</span>(<span class="hljs-params">mod,g,targ</span>):<br>    K=<span class="hljs-number">2</span>**<span class="hljs-number">900</span><br>    M=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">3</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>):<br>        M[i][i]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        M[i][n+<span class="hljs-number">2</span>]=Integer(<span class="hljs-built_in">pow</span>(g,n-i,mod))*K<br>    M[n][n+<span class="hljs-number">2</span>]=-targ*K<br>    M[n+<span class="hljs-number">1</span>][n+<span class="hljs-number">2</span>]=mod*K<br>    M=matrix(ZZ,M)<br>    <span class="hljs-keyword">return</span> M.LLL()<br>A=getVec(q,t,D)<br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">0</span>]) <span class="hljs-comment">#a0不符合要求</span><br>vv=A[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">if</span>(A[i][-<span class="hljs-number">3</span>]==<span class="hljs-number">1</span>):<br>        vv=A[i]<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(vv)<br><span class="hljs-comment">#(-3, -1, 1, -2, 2, -2, -1, -1, 1, 0, 1, 1, -1, 4, 2, -1, -1, -1, 1, -2, 1, -2, 2, 3, -3, -3, 1, 0, 2, -2, -2, 0, -1, 1, 1, 3, 2, 1, 1, -2, -1, 0, -1, 1, -2, 0, -2, 0, -1, 0, 0, 0, -1, 1, 1, -1, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)</span><br><span class="hljs-comment">#(3, -5, 1, 2, -4, -1, 1, -2, 1, -3, 0, 0, -1, -2, 1, 3, 2, 1, 4, 2, 0, 0, 3, -2, -1, 4, 0, 1, -2, -1, 0, -1, 3, 1, 0, -1, -3, -1, -1, 1, 1, 1, 0, 0, -1, 3, 2, 0, 1, 0, 1, -1, 1, -2, -1, 2, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0)</span><br><br><span class="hljs-comment"># In[3]:</span><br>R=vv <span class="hljs-keyword">if</span> vv[<span class="hljs-number">0</span>]&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> -vv<br>s=[]<br>h=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>    ich=((h+R[i])^^h)<br>    s.append(ich)<br>    h=(h+R[i])*t%q<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(h,D)<br><span class="hljs-comment">#[3, 5, 1, 2, 28, 15, 15, 2, 1, 29, 0, 0, 1, 2, 1, 3, 2, 1, 12, 6, 0, 0, 5, 6, 1, 12, 0, 3, 2, 3, 0, 1, 13, 3, 0, 1, 5, 3, 1, 31, 3, 31, 0, 0, 1, 5, 6, 0, 7, 0, 1, 1, 1, 14, 15, 2, 1, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-comment">#86818520128168117392109372309780328095 86818520128168117392109372309780328095</span><br><br><span class="hljs-comment"># In[4]:</span><br><span class="hljs-built_in">bytes</span>(s).<span class="hljs-built_in">hex</span>()<br><span class="hljs-comment">#030501021c0f0f02011d00000102010302010c0600000506010c0003020300010d0300010503011f031f00000105060007000101010e0f02010300000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br><br><br></code></pre></td></tr></table></figure><h3 id="7x02-乱搞做法，60-概率能过-m-i-256-，但基本过不掉本题的-128"><a href="#7x02-乱搞做法，60-概率能过-m-i-256-，但基本过不掉本题的-128" class="headerlink" title="7x02 乱搞做法，60% 概率能过 $m_i&lt; 256$，但基本过不掉本题的 $128$"></a>7x02 乱搞做法，60% 概率能过 $m_i&lt; 256$，但基本过不掉本题的 $128$</h3><p>其实一开始我的想法是看sus_hex在求hash 的时候对应的 $\delta$，然后构造一组差值，LLL后首行就是解，但这么做其实并不太对，因为 原本的 $\delta$ 再加上得到的 $\vec v$ 可能会超掉。（比如 <code>h&amp;0xff=82</code>，但 $\delta+v&#x3D;-83$，也就是对应的字符值超过了 $256$。</p><p>然后我就搞了一个非常玄学的做法，根据三重循环，枚举向量，找一个符合要求的字符串，甚至还能以 60% 的概率过 $m_i&lt;256$ 的上界。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python 3</span><br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SOLVE</span>(<span class="hljs-params">q,t,mmm,mode=<span class="hljs-number">1</span></span>):<br>    n=<span class="hljs-number">128</span><br>    C=[]<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recH</span>(<span class="hljs-params"> m: <span class="hljs-built_in">bytes</span></span>):<br>        h = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m :<br>            C.append((h^mi)-h)<br>            h = (h ^ mi) * t % q<br>        <span class="hljs-keyword">return</span> h<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">H</span>(<span class="hljs-params"> m: <span class="hljs-built_in">bytes</span></span>):<br>        h = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> mi <span class="hljs-keyword">in</span> m :<br>            h = (h ^ mi) * t % q<br>        <span class="hljs-keyword">return</span> h<br>    msg=recH(mmm)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getVec</span>(<span class="hljs-params">mod,g</span>):<br>        K,n=<span class="hljs-number">2</span>^<span class="hljs-number">900</span>,<span class="hljs-number">128</span><br>        M=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>            ge=ZZ(<span class="hljs-built_in">pow</span>(g,n-i,mod))<br>            M[i][i]=<span class="hljs-number">1</span><br>            M[i][n+<span class="hljs-number">1</span>]=ZZ(ge*K)<br>        M[n][n+<span class="hljs-number">1</span>]=ZZ(K*mod)<br>        M=matrix(ZZ,M)<br>        <span class="hljs-keyword">if</span>(mode==<span class="hljs-number">1</span>):<br>            padC=C+[<span class="hljs-number">0</span>]*<span class="hljs-number">500</span><br>            listm=<span class="hljs-built_in">list</span>(M)<br>            listm.append(padC[:n+<span class="hljs-number">2</span>])<br>            M=matrix(listm)<br>        A=M.LLL()<br>        <span class="hljs-keyword">return</span> A[<span class="hljs-number">0</span>],A[<span class="hljs-number">1</span>],A[<span class="hljs-number">2</span>]<br>    A0,A1,A2=getVec(q,t)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">v</span>):<br>        C2=[(C[i]+v[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <br>        s=<span class="hljs-string">&#x27;&#x27;</span><br>        h=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            ich=((h+C2[i])^h)<br>            <span class="hljs-keyword">if</span>(ich&gt;<span class="hljs-number">127</span> <span class="hljs-keyword">or</span> ich&lt;<span class="hljs-number">0</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            ch=<span class="hljs-built_in">chr</span>(ich)<br>            s+=ch<br>            h=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">int</span>(h) +<span class="hljs-built_in">int</span>(C2[i])) * t % q<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    finded=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(-<span class="hljs-number">30</span>,<span class="hljs-number">30</span>)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">30</span>,<span class="hljs-number">30</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">30</span>,<span class="hljs-number">30</span>):<br>                <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> k==<span class="hljs-number">0</span>):<br>                    <span class="hljs-keyword">continue</span><br>                b=i*A0+j*A1+k*A2<br>                <span class="hljs-keyword">if</span>(check(b)):<br>                    finded=<span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span>(finded):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span>(finded):<br>            <span class="hljs-keyword">break</span><br>    C2=[(C[i]+b[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <br>    s=[]<br>    h=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            ch=((h+C2[i])^h)<br>            s.append(ch)<br>            h=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">int</span>(h) +<span class="hljs-built_in">int</span>(C2[i])) * t % q<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(s).<span class="hljs-built_in">hex</span>()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br></code></pre></td></tr></table></figure><h2 id="8-goodwell-赛后补题"><a href="#8-goodwell-赛后补题" class="headerlink" title="8.goodwell(赛后补题)"></a>8.goodwell(赛后补题)</h2><p>一个AES-GCM.nonce-reuse的题目，需要先注意到<code>safe_random</code> 每32轮就重复一次，因此存在nonce-reuse。</p><p>这边放一下重用部分的代码，注意是在Sage中运行的，因此 <code>^^</code> 是异或，<code>^</code> 是乘幂，GHASH给出了GCM校验的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#In [1]:</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">data, nonce</span>):<br>    cipher = AES.new(key, AES.MODE_GCM, nonce)<br>    <span class="hljs-keyword">return</span> nonce + cipher.encrypt(data) + cipher.digest()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data</span>):<br>    cipher = AES.new(key, AES.MODE_GCM, data[:<span class="hljs-number">16</span>])<br>    <span class="hljs-keyword">return</span> cipher.decrypt_and_verify(data[<span class="hljs-number">16</span>:-<span class="hljs-number">16</span>], data[-<span class="hljs-number">16</span>:])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">s1, s2</span>): <span class="hljs-comment"># used to attack aes-ctr</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(s1) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s1) == <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">ord</span>(s1) ^ <span class="hljs-built_in">ord</span>(s2)])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(x ^^ y <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s1, s2))<br>enonce=<span class="hljs-string">b&#x27;9ijn8uhb7ygv6tfc&#x27;</span><br>key=<span class="hljs-string">b&#x27;1qaz2wsx3edc4rfv&#x27;</span><br>ciph1=encrypt(<span class="hljs-string">b&quot;prefixprefixprefix66666666&quot;</span>,enonce)<br>ciph2=encrypt(<span class="hljs-string">b&quot;prefixprefixprefix88888888&quot;</span>,enonce)<br>C1=ciph1[<span class="hljs-number">16</span>:-<span class="hljs-number">16</span>]<br>T1=ciph1[-<span class="hljs-number">16</span>:]<br>C2=ciph2[<span class="hljs-number">16</span>:-<span class="hljs-number">16</span>]<br>T2=ciph2[-<span class="hljs-number">16</span>:]<br><span class="hljs-built_in">print</span>(C1)<br><span class="hljs-built_in">print</span>(T1)<br><span class="hljs-built_in">print</span>(C2)<br><span class="hljs-built_in">print</span>(T2)<br>C3=xor(<span class="hljs-string">b&#x27;123456&#x27;</span>,xor(<span class="hljs-string">b&#x27;prefix&#x27;</span>,C1[:<span class="hljs-number">6</span>]))<br><span class="hljs-built_in">print</span>(C3.<span class="hljs-built_in">hex</span>())<br><span class="hljs-built_in">print</span>(enonce.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#Out [1]:</span><br><span class="hljs-string">b&quot;\x12\xc5=J&#x27;\x9c)\xf4\x96\xd1\x1e=LX\xc81D\x95\xd9:\xf3\xf6\x01\x8e\xa5 &quot;</span><br><span class="hljs-string">b&#x27;-\xb0h\xf8\x82/&#125;\xa9\x84\nE`L&#125;]o&#x27;</span><br><span class="hljs-string">b&quot;\x12\xc5=J&#x27;\x9c)\xf4\x96\xd1\x1e=LX\xc81D\x95\xd74\xfd\xf8\x0f\x80\xab.&quot;</span><br><span class="hljs-string">b&#x27;\x10\x03l\x9d\x84^\x98\xf4\x05\xaf\x19\xae$\xb1\xc6w&#x27;</span><br>53856b187bd2<br>39696a6e387568623779677636746663<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#In [2]:</span><br>F.&lt;t&gt;=GF(<span class="hljs-number">2</span>**<span class="hljs-number">128</span>,modulus=(([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]+[<span class="hljs-number">0</span>]*<span class="hljs-number">500</span>)[:<span class="hljs-number">128</span>]+[<span class="hljs-number">1</span>]))<br>R.&lt;x&gt;=PolynomialRing(F)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_to_blocks</span>(<span class="hljs-params">ciphertext</span>):<br>    <span class="hljs-keyword">return</span> [ciphertext[i:i + <span class="hljs-number">16</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span> , <span class="hljs-built_in">len</span>(ciphertext), <span class="hljs-number">16</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b2p</span>(<span class="hljs-params">block, a</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(block) != <span class="hljs-number">16</span>:<br>        block = block + <span class="hljs-string">b&quot;\0&quot;</span> * (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(block))<br>    poly = <span class="hljs-number">0</span> <br>    bin_block = <span class="hljs-built_in">bin</span>(bytes_to_long(block))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">128</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bin_block)):<br>        poly += a**i * <span class="hljs-built_in">int</span>(bin_block[i])<br>    <span class="hljs-keyword">return</span> poly<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p2b</span>(<span class="hljs-params">poly</span>):<br>    <span class="hljs-keyword">return</span> long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(poly.integer_representation())[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">128</span>)[::-<span class="hljs-number">1</span>], <span class="hljs-number">2</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GHASH</span>(<span class="hljs-params">C,T=<span class="hljs-string">b&quot;&quot;</span></span>):<br>    Cb=convert_to_blocks(C)<br>    Cp= [b2p(Cb[i], t) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Cb))]<br>    Tp=b2p(T,t)<br>    L = struct.pack(<span class="hljs-string">&quot;&gt;QQ&quot;</span>, <span class="hljs-number">0</span> * <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(C) * <span class="hljs-number">8</span>)<br>    Lp = b2p(L, t)<br>    G = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Cb)):<br>        G=(G+Cp[i])*x<br>    G=(G+Lp)*x+Tp<br>    <span class="hljs-keyword">return</span> G<br>G1=GHASH(C1,T1)<br>G2 =GHASH(C2, T2)<br>G3 =GHASH(C3)<br><span class="hljs-built_in">print</span>(G1)<br><span class="hljs-built_in">print</span>(G2)<br><span class="hljs-built_in">print</span>(G3)<br><span class="hljs-comment">#Out [2]:</span><br>(t^<span class="hljs-number">127</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">122</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">113</span> + t^<span class="hljs-number">112</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">107</span> + t^<span class="hljs-number">105</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">100</span> + t^<span class="hljs-number">97</span> + t^<span class="hljs-number">95</span> + t^<span class="hljs-number">93</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">91</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">86</span> + t^<span class="hljs-number">85</span> + t^<span class="hljs-number">84</span> + t^<span class="hljs-number">83</span> + t^<span class="hljs-number">79</span> + t^<span class="hljs-number">75</span> + t^<span class="hljs-number">73</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">70</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">67</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">57</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">39</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">34</span> + t^<span class="hljs-number">30</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">23</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">18</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">13</span> + t^<span class="hljs-number">9</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">6</span> + t^<span class="hljs-number">3</span>)*x^<span class="hljs-number">3</span> + (t^<span class="hljs-number">74</span> + t^<span class="hljs-number">71</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">66</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">62</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">41</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">39</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">35</span> + t^<span class="hljs-number">34</span> + t^<span class="hljs-number">33</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">30</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">27</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">23</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">16</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">13</span> + t^<span class="hljs-number">11</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">5</span> + t)*x^<span class="hljs-number">2</span> + (t^<span class="hljs-number">123</span> + t^<span class="hljs-number">121</span> + t^<span class="hljs-number">120</span>)*x + t^<span class="hljs-number">127</span> + t^<span class="hljs-number">126</span> + t^<span class="hljs-number">125</span> + t^<span class="hljs-number">124</span> + t^<span class="hljs-number">122</span> + t^<span class="hljs-number">121</span> + t^<span class="hljs-number">119</span> + t^<span class="hljs-number">117</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">115</span> + t^<span class="hljs-number">113</span> + t^<span class="hljs-number">111</span> + t^<span class="hljs-number">109</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">107</span> + t^<span class="hljs-number">106</span> + t^<span class="hljs-number">105</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">100</span> + t^<span class="hljs-number">97</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">89</span> + t^<span class="hljs-number">87</span> + t^<span class="hljs-number">85</span> + t^<span class="hljs-number">81</span> + t^<span class="hljs-number">78</span> + t^<span class="hljs-number">76</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">63</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">53</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">51</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">49</span> + t^<span class="hljs-number">47</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">27</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">24</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">18</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">11</span> + t^<span class="hljs-number">10</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">7</span> + t^<span class="hljs-number">5</span> + t^<span class="hljs-number">4</span> + t^<span class="hljs-number">2</span><br>(t^<span class="hljs-number">127</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">122</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">113</span> + t^<span class="hljs-number">112</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">107</span> + t^<span class="hljs-number">105</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">100</span> + t^<span class="hljs-number">97</span> + t^<span class="hljs-number">95</span> + t^<span class="hljs-number">93</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">91</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">86</span> + t^<span class="hljs-number">85</span> + t^<span class="hljs-number">84</span> + t^<span class="hljs-number">83</span> + t^<span class="hljs-number">79</span> + t^<span class="hljs-number">75</span> + t^<span class="hljs-number">73</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">70</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">67</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">57</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">39</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">34</span> + t^<span class="hljs-number">30</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">23</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">18</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">13</span> + t^<span class="hljs-number">9</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">6</span> + t^<span class="hljs-number">3</span>)*x^<span class="hljs-number">3</span> + (t^<span class="hljs-number">78</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">76</span> + t^<span class="hljs-number">74</span> + t^<span class="hljs-number">71</span> + t^<span class="hljs-number">70</span> + t^<span class="hljs-number">68</span> + t^<span class="hljs-number">66</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">54</span> + t^<span class="hljs-number">53</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">41</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">39</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">36</span> + t^<span class="hljs-number">35</span> + t^<span class="hljs-number">34</span> + t^<span class="hljs-number">33</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">29</span> + t^<span class="hljs-number">27</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">23</span> + t^<span class="hljs-number">22</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">16</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">13</span> + t^<span class="hljs-number">11</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">5</span> + t)*x^<span class="hljs-number">2</span> + (t^<span class="hljs-number">123</span> + t^<span class="hljs-number">121</span> + t^<span class="hljs-number">120</span>)*x + t^<span class="hljs-number">127</span> + t^<span class="hljs-number">126</span> + t^<span class="hljs-number">125</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">122</span> + t^<span class="hljs-number">121</span> + t^<span class="hljs-number">118</span> + t^<span class="hljs-number">117</span> + t^<span class="hljs-number">113</span> + t^<span class="hljs-number">112</span> + t^<span class="hljs-number">111</span> + t^<span class="hljs-number">107</span> + t^<span class="hljs-number">106</span> + t^<span class="hljs-number">104</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">98</span> + t^<span class="hljs-number">94</span> + t^<span class="hljs-number">93</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">88</span> + t^<span class="hljs-number">87</span> + t^<span class="hljs-number">84</span> + t^<span class="hljs-number">83</span> + t^<span class="hljs-number">79</span> + t^<span class="hljs-number">78</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">76</span> + t^<span class="hljs-number">74</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">71</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">57</span> + t^<span class="hljs-number">56</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">51</span> + t^<span class="hljs-number">48</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">41</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">31</span> + t^<span class="hljs-number">29</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">27</span> + t^<span class="hljs-number">24</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">18</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">14</span> + t^<span class="hljs-number">3</span><br>(t^<span class="hljs-number">46</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">41</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">39</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">36</span> + t^<span class="hljs-number">35</span> + t^<span class="hljs-number">34</span> + t^<span class="hljs-number">33</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">27</span> + t^<span class="hljs-number">23</span> + t^<span class="hljs-number">22</span> + t^<span class="hljs-number">20</span> + t^<span class="hljs-number">18</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">13</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">7</span> + t^<span class="hljs-number">6</span> + t^<span class="hljs-number">3</span> + t)*x^<span class="hljs-number">2</span> + (t^<span class="hljs-number">123</span> + t^<span class="hljs-number">122</span>)*x<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#In [3]:</span><br>P=G1+G2<br><span class="hljs-built_in">print</span>(P)<br>auth_keys = [r <span class="hljs-keyword">for</span> r, _ <span class="hljs-keyword">in</span> P.roots()]<br><span class="hljs-built_in">print</span>(auth_keys)<br><span class="hljs-keyword">for</span> H, _ <span class="hljs-keyword">in</span> P.roots():<br>    EJ = G1(H)<br>    T3 = G3(H) + EJ<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;H: &quot;</span> + <span class="hljs-built_in">str</span>(H) + <span class="hljs-string">&quot;\nT3: &quot;</span> + <span class="hljs-built_in">str</span>(p2b(T3).<span class="hljs-built_in">hex</span>()))<br><span class="hljs-comment">#Out [3]:</span><br>(t^<span class="hljs-number">78</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">76</span> + t^<span class="hljs-number">70</span> + t^<span class="hljs-number">69</span> + t^<span class="hljs-number">68</span> + t^<span class="hljs-number">62</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">54</span> + t^<span class="hljs-number">53</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">45</span> + t^<span class="hljs-number">44</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">36</span> + t^<span class="hljs-number">30</span> + t^<span class="hljs-number">29</span> + t^<span class="hljs-number">28</span> + t^<span class="hljs-number">22</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">20</span>)*x^<span class="hljs-number">2</span> + t^<span class="hljs-number">124</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">119</span> + t^<span class="hljs-number">118</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">115</span> + t^<span class="hljs-number">112</span> + t^<span class="hljs-number">109</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">105</span> + t^<span class="hljs-number">104</span> + t^<span class="hljs-number">100</span> + t^<span class="hljs-number">98</span> + t^<span class="hljs-number">97</span> + t^<span class="hljs-number">94</span> + t^<span class="hljs-number">93</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">89</span> + t^<span class="hljs-number">88</span> + t^<span class="hljs-number">85</span> + t^<span class="hljs-number">84</span> + t^<span class="hljs-number">83</span> + t^<span class="hljs-number">81</span> + t^<span class="hljs-number">79</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">74</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">71</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">63</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">57</span> + t^<span class="hljs-number">55</span> + t^<span class="hljs-number">53</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">49</span> + t^<span class="hljs-number">48</span> + t^<span class="hljs-number">47</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">41</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">31</span> + t^<span class="hljs-number">29</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">14</span> + t^<span class="hljs-number">11</span> + t^<span class="hljs-number">10</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">7</span> + t^<span class="hljs-number">5</span> + t^<span class="hljs-number">4</span> + t^<span class="hljs-number">3</span> + t^<span class="hljs-number">2</span><br>[t^<span class="hljs-number">126</span> + t^<span class="hljs-number">124</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">114</span> + t^<span class="hljs-number">110</span> + t^<span class="hljs-number">109</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">106</span> + t^<span class="hljs-number">102</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">99</span> + t^<span class="hljs-number">98</span> + t^<span class="hljs-number">94</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">88</span> + t^<span class="hljs-number">87</span> + t^<span class="hljs-number">82</span> + t^<span class="hljs-number">80</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">75</span> + t^<span class="hljs-number">73</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">67</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">63</span> + t^<span class="hljs-number">62</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">49</span> + t^<span class="hljs-number">48</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">36</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">31</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">16</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">12</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">5</span> + <span class="hljs-number">1</span>]<br>H: t^<span class="hljs-number">126</span> + t^<span class="hljs-number">124</span> + t^<span class="hljs-number">123</span> + t^<span class="hljs-number">116</span> + t^<span class="hljs-number">114</span> + t^<span class="hljs-number">110</span> + t^<span class="hljs-number">109</span> + t^<span class="hljs-number">108</span> + t^<span class="hljs-number">106</span> + t^<span class="hljs-number">102</span> + t^<span class="hljs-number">101</span> + t^<span class="hljs-number">99</span> + t^<span class="hljs-number">98</span> + t^<span class="hljs-number">94</span> + t^<span class="hljs-number">92</span> + t^<span class="hljs-number">90</span> + t^<span class="hljs-number">88</span> + t^<span class="hljs-number">87</span> + t^<span class="hljs-number">82</span> + t^<span class="hljs-number">80</span> + t^<span class="hljs-number">77</span> + t^<span class="hljs-number">75</span> + t^<span class="hljs-number">73</span> + t^<span class="hljs-number">72</span> + t^<span class="hljs-number">67</span> + t^<span class="hljs-number">64</span> + t^<span class="hljs-number">63</span> + t^<span class="hljs-number">62</span> + t^<span class="hljs-number">61</span> + t^<span class="hljs-number">60</span> + t^<span class="hljs-number">59</span> + t^<span class="hljs-number">58</span> + t^<span class="hljs-number">52</span> + t^<span class="hljs-number">50</span> + t^<span class="hljs-number">49</span> + t^<span class="hljs-number">48</span> + t^<span class="hljs-number">46</span> + t^<span class="hljs-number">43</span> + t^<span class="hljs-number">42</span> + t^<span class="hljs-number">40</span> + t^<span class="hljs-number">38</span> + t^<span class="hljs-number">37</span> + t^<span class="hljs-number">36</span> + t^<span class="hljs-number">32</span> + t^<span class="hljs-number">31</span> + t^<span class="hljs-number">26</span> + t^<span class="hljs-number">25</span> + t^<span class="hljs-number">21</span> + t^<span class="hljs-number">19</span> + t^<span class="hljs-number">17</span> + t^<span class="hljs-number">16</span> + t^<span class="hljs-number">15</span> + t^<span class="hljs-number">12</span> + t^<span class="hljs-number">8</span> + t^<span class="hljs-number">5</span> + <span class="hljs-number">1</span><br>T3: 2b10dad9688ea6dab1b06fbdea3db46b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#In [4]:</span><br>A=enonce.<span class="hljs-built_in">hex</span>()+C3.<span class="hljs-built_in">hex</span>()+<span class="hljs-string">&#x27;2b10dad9688ea6dab1b06fbdea3db46b&#x27;</span><br>decrypt(<span class="hljs-built_in">bytes</span>.fromhex(A))<br><span class="hljs-comment">#Out [4]:</span><br><span class="hljs-string">b&#x27;123456&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="9-nfsr2-赛后补题，Update-10-24"><a href="#9-nfsr2-赛后补题，Update-10-24" class="headerlink" title="9.nfsr2 (赛后补题，Update 10.24)"></a>9.nfsr2 (赛后补题，Update 10.24)</h2><p>2024.10.24补题，最终能够做到概率性地成功恢复lfsr的seed。</p><p>P.S. 该题为错题，和出题人讨论了一下，任务中的andNum和orNum应该取同一个值，否则会出现多解（见我最后的图片）。</p><p>不过还是很想吐槽一下这个题，以前我也见过两三个LFSR题用 <code>getrandbits</code> 然后题目越做越复杂的。呃，为啥不用 <code>getPrime</code> 或者 <code>((1&lt;&lt;(nbits-1))+1)|getrandbits(nbits)</code> 来保证一下最高位和最低位都是 $1$ 呢。</p><p>其实这个题主要考察LFSR的状态转移表示为 $\mathrm{GF}(2)$ 上的矩阵方程，比如一个 4 阶的LFSR，其表达式为 $y&#x3D;x_4\oplus x_2\oplus x_1$，那么其转移矩阵如下：</p><p><img src="/2024/10/23/SUSCTF2024/9-1.png" alt="9-1"></p><p>因此，对于任意初始状态向量（种子） $\vec v \neq \vec 0$，执行 $k$ 次LFSR之后，其状态为 $\vec v\mathbf M^{k}$。</p><p>继续看一下题目中附件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># util.py</span><br>nbit = <span class="hljs-number">128</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitcount</span>(<span class="hljs-params">x</span>):<br>    c=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(x):<br>        c+=(x&amp;<span class="hljs-number">1</span>)<br>        x&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> c<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LFSR</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed: <span class="hljs-built_in">int</span>, mask: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-variable language_">self</span>.state = seed &amp; (<span class="hljs-number">2</span>**nbit - <span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.mask = mask &amp; (<span class="hljs-number">2</span>**nbit - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        out = bitcount(<span class="hljs-variable language_">self</span>.state &amp; <span class="hljs-variable language_">self</span>.mask) &amp; <span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.state = ((<span class="hljs-variable language_">self</span>.state &lt;&lt; <span class="hljs-number">1</span>) | out) &amp; (<span class="hljs-number">2</span>**nbit - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> out<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, bits: <span class="hljs-built_in">int</span></span>):<br>        out = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits):<br>            out = (out &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-built_in">next</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-keyword">return</span> out<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NFSR</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, lfsr0: LFSR, lfsr1: LFSR</span>):<br>        <span class="hljs-variable language_">self</span>.lfsr0 = lfsr0<br>        <span class="hljs-variable language_">self</span>.lfsr1 = lfsr1<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, msg: <span class="hljs-built_in">bytes</span></span>):<br>        enc = <span class="hljs-built_in">list</span>()<br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg:<br>            <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.lfsr0(<span class="hljs-number">1</span>):<br>                enc += [m &amp; <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>), m | <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>)]<br>            <span class="hljs-keyword">else</span>:<br>                enc += [m | <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>), m &amp; <span class="hljs-variable language_">self</span>.lfsr1(<span class="hljs-number">8</span>)]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(enc)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task.py</span><br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> nbit, LFSR, NFSR<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>():<br>    <span class="hljs-keyword">import</span> string, hashlib, random<br><br>    alphabet = string.ascii_letters + string.digits<br>    proof = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(alphabet, k=<span class="hljs-number">16</span>))<br>    digest = hashlib.sha256(proof.encode()).hexdigest()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>)==<span class="hljs-subst">&#123;digest&#125;</span>&quot;</span>)<br>    x = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Give me XXXX:&quot;</span>)<br>    h = hashlib.sha256((x + proof[<span class="hljs-number">4</span>:]).encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> h == digest<br><br><span class="hljs-keyword">assert</span> proof_of_work()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Good luck&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        seeds = [secrets.randbits(nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        masks = [secrets.randbits(nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        lfsrs = [LFSR(seed, mask) <span class="hljs-keyword">for</span> seed, mask <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(seeds, masks)]<br>        nfsr = NFSR(*lfsrs)<br><br>        msg = secrets.token_bytes(<span class="hljs-number">200</span>)<br>        enc = nfsr(msg)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Round <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>: <span class="hljs-subst">&#123;enc.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;masks = &#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>)) == msg:<br>            <span class="hljs-keyword">raise</span> Exception<br>    flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Congratulations: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not this time&quot;</span>)<br></code></pre></td></tr></table></figure><p>这一次很明显，长度为 $200$ 字节的信息加密后变成了长度为 $400$ 的内容，对于字节 $m$，执行 <code>m&amp;x</code> 和 <code>m|y</code>，并且两个lfsr的mask已知，要求求出原始信息，5 轮获得flag。因此，可以根据每一组输出两字节的 $1$ 比特数量来确定 bitand 和 bitor 的结果。</p><blockquote><p>注：<code>bitcount(m|x)==bitcount(m|y)</code> 的概率其实很低，因为我一开始没注意到这个转移矩阵，因此遇到这种情况我直接跳过了。其实可以将对应的位置标记为 <code>?</code>，到时候利用转移矩阵，在 mask 已知的情况下，知道 $n$ 个输出就可以恢复LFSR，这 $n$ 个比特的输出其实不需要连续。因此，lfsr0还是非常容易恢复的</p></blockquote><p>然后是恢复LFSR1，LFSR1累计输出了 $3200$ <strong>比特</strong>，消息一共 $1600$ 比特。然后密文的 $3200$ 比特有LFSR1输出和消息 bitand,bitor 得到。因此根据下面的知识，可以得到 $1&#x2F;4$ 的LFSR1输出和 $1&#x2F;2$ 的明文内容：</p><blockquote><ol><li>若 <code>m|x</code> 对应位为 $0$ ，则 $m$ 和 $x$ 的对应位均为 $0$。</li><li>若 <code>m&amp;x</code> 对应位 为 $1$，则 $m$ 和 $x$ 的对应位均为 $1$。</li></ol></blockquote><p>期望情况下，能够得到约 $800$ 个LFSR1 输出的值和 $800$ 个明文比特。先将未知内容全部标记为 <code>?</code>，然后根据上面两条规则逐步确定，然后取不为 <code>?</code> 的值构造矩阵即可。</p><p>这样就有可能能够恢复两个LFSR的seed了，但由于这两个LFSR可能不满秩，因此可能需要进行一些微操。</p><p>P.S：八阶LFSR基于的多项式 $x^8+x^4+x^3+x^2+1$ 中，假设里面状态是 $b_8b_7b_6b_5b_4b_3b_2b_1$，是 $8,4,3,2$ 四个数异或，那个 $1$ 才是多余的！（你可以理解为每移位一次相当于乘一个 $x$，最后的 $1$ 属于输出结果的系数）。因此，$\mathrm{lowbit(mask)\ne1}$不影响，但最mask的高位不为 $1$ 则会导致LFSR失秩。</p><p>具体本地解题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#solve.py</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Testans <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Testinput <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> ((x) &amp; (-x))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bitcount</span>(<span class="hljs-params">x</span>):<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(x):<br>        count += <span class="hljs-number">1</span><br>        x ^= ((x) &amp; (-x))<br>    <span class="hljs-keyword">return</span> count<br><br><br>T = <span class="hljs-number">125</span> <span class="hljs-comment">#T表示数据的编号，有的数据不一定能运行起来。</span><br>nfsr = NFSR(<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>m0, m1 = maskRec0[T], maskRec1[T]<br>nfsr.lfsr0 = LFSR(<span class="hljs-number">0</span>, m0)<br>nfsr.lfsr1 = LFSR(<span class="hljs-number">0</span>, m1)<br>ciph = hexEnc[T]<br>output = []<br>outstat0 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    op1, op2 = <span class="hljs-built_in">int</span>(ciph[<span class="hljs-number">4</span>*i:<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>), <span class="hljs-built_in">int</span>(ciph[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>:<span class="hljs-number">4</span>*i+<span class="hljs-number">4</span>], <span class="hljs-number">16</span>)<br>    output.append((op1, op2))<br><span class="hljs-keyword">for</span> op1, op2 <span class="hljs-keyword">in</span> output:<br>    <span class="hljs-keyword">assert</span>(bitcount(op1) != bitcount(op2))<br>    <span class="hljs-keyword">if</span>(bitcount(op1) &gt; bitcount(op2)):<br>        outstat0 += <span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        outstat0 += <span class="hljs-string">&#x27;1&#x27;</span><br>realLen0 = m0.bit_length()<br>btn0 = m0 &amp; (-m0)<br>cur0 = <span class="hljs-built_in">int</span>(outstat0[:realLen0], <span class="hljs-number">2</span>)<br>inistat0 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>    curt = cur0 &amp; <span class="hljs-number">1</span><br>    cur0 &gt;&gt;= <span class="hljs-number">1</span><br>    preb = (bitcount(cur0 &amp; m0) ^ curt) &amp; <span class="hljs-number">1</span><br>    inistat0 = <span class="hljs-built_in">str</span>(preb)+inistat0<br>    cur0 |= (preb &lt;&lt; (realLen0-<span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># print(cur0)</span><br>bciph = <span class="hljs-built_in">list</span>((<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">3200</span>+(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(ciph, <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]))[-<span class="hljs-number">3200</span>:])<br>msg = [<span class="hljs-string">&#x27;?&#x27;</span>]*<span class="hljs-number">1600</span><br>outstat1 = [<span class="hljs-string">&#x27;?&#x27;</span>]*<span class="hljs-number">3200</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    msg8ind = <span class="hljs-number">8</span>*i<br>    or8ind, and8ind = <span class="hljs-number">16</span>*i, <span class="hljs-number">16</span>*i+<span class="hljs-number">8</span><br>    <span class="hljs-keyword">if</span>(outstat0[i] == <span class="hljs-string">&#x27;1&#x27;</span>):<br>        or8ind, and8ind = <span class="hljs-number">16</span>*i+<span class="hljs-number">8</span>, <span class="hljs-number">16</span>*i<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">if</span>(bciph[or8ind+j] == <span class="hljs-string">&#x27;0&#x27;</span>):<br>            msg[msg8ind+j] = <span class="hljs-string">&#x27;0&#x27;</span><br>            outstat1[or8ind+j] = <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">if</span> (bciph[and8ind+j] == <span class="hljs-string">&#x27;1&#x27;</span>):<br>            msg[msg8ind+j] = <span class="hljs-string">&#x27;1&#x27;</span><br>            outstat1[and8ind+j] = <span class="hljs-string">&#x27;1&#x27;</span><br><br><br>realLen1 = m1.bit_length()+<span class="hljs-number">1</span>-(m1 &amp; (-m1)).bit_length()<br>M = [[i == (j+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(realLen1)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(realLen1)]<br>realm1 = m1//lowbit(m1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(realLen1):<br>    M[realLen1-<span class="hljs-number">1</span>-i][-<span class="hljs-number">1</span>] = ((realm1) &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) != <span class="hljs-number">0</span><br>M = Matrix(GF(<span class="hljs-number">2</span>), M)<br>A = []<br>vecb = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(outstat1)):<br>    <span class="hljs-keyword">if</span>(outstat1[i] != <span class="hljs-string">&#x27;?&#x27;</span>):<br>        vecb.append(<span class="hljs-built_in">int</span>(outstat1[i]))<br>        xpi = (i+(lowbit(m1).bit_length()))<br>        <span class="hljs-comment"># print(i,xpi)</span><br>        Mcur = (M**xpi).T<br>        A.append(<span class="hljs-built_in">list</span>(Mcur)[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(A) == realLen1):<br>        <span class="hljs-keyword">break</span><br><br>A = Matrix(GF(<span class="hljs-number">2</span>), A)<br>vecb = vector(GF(<span class="hljs-number">2</span>), vecb)<br>Ainv = (A.T)**(-<span class="hljs-number">1</span>)<br>inistat1v = (vecb*Ainv)<br><br>inistat1s = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inistat1v)):<br>    inistat1s += <span class="hljs-built_in">str</span>(inistat1v[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, lowbit(m1).bit_length()):<br>    inistat1s += <span class="hljs-built_in">str</span>(inistat1v*(M**i)[-<span class="hljs-number">1</span>])<br><br>inistat1 = <span class="hljs-built_in">int</span>(inistat1s, <span class="hljs-number">2</span>)<br>inistat0 = <span class="hljs-built_in">int</span>(inistat0, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(lowbit(m0), lowbit(m1))<br><span class="hljs-built_in">print</span>(inistat0, inistat1)<br><span class="hljs-built_in">print</span>(seed0Rec[T], seed1Rec[T])<br>nfsr.lfsr0.state = inistat0<br>nfsr.lfsr1.state = inistat1<br><br><span class="hljs-comment">#begin test part#</span><br><span class="hljs-comment"># sb=bytes.fromhex(hexMsg[T])</span><br><span class="hljs-comment"># print(len(sb),sb)</span><br><span class="hljs-comment"># C1=ciph</span><br><span class="hljs-comment"># C2=nfsr(sb).hex()</span><br><span class="hljs-comment"># print(C1==C2)</span><br><span class="hljs-comment">#end test part#</span><br><br>testout0 = []<br>testout1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    judg = nfsr.lfsr0(<span class="hljs-number">1</span>)<br>    out1a = nfsr.lfsr1(<span class="hljs-number">8</span>)<br>    out1b = nfsr.lfsr1(<span class="hljs-number">8</span>)<br>    testout0.append(judg)<br>    testout1.append((out1a, out1b))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getByte</span>(<span class="hljs-params">andNum, andRes, orNum, orRes</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">if</span>((x &amp; andNum) == andRes <span class="hljs-keyword">and</span> (x | orNum) == orRes):<br>            <span class="hljs-keyword">return</span> x<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getByte2</span>(<span class="hljs-params">andNum, andRes, orNum, orRes, pipeistr=<span class="hljs-literal">None</span></span>):<br>    C = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">if</span>((x &amp; andNum) == andRes <span class="hljs-keyword">and</span> (x | orNum) == orRes):<br>            C.append(x)<br>    <span class="hljs-keyword">return</span> C<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>): <span class="hljs-comment">#没做到最后了，输出5个，看看多解的情况吧。</span><br>    pipeis = <span class="hljs-string">&#x27;&#x27;</span>.join(msg[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>])<br>    <span class="hljs-built_in">print</span>(pipeis)<br>    o1, o2 = testout1[i]<br>    r1, r2 = output[i]<br>    <span class="hljs-built_in">print</span>(o1, o2, r1, r2)<br>    <span class="hljs-keyword">if</span>(testout0[i] == <span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(testout0[i], (getByte2(o2, r2, o1, r1)),<br>              <span class="hljs-built_in">int</span>(hexMsg[T][i*<span class="hljs-number">2</span>:i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(testout0[i], (getByte2(o1, r1, o2, r2)),<br>              <span class="hljs-built_in">int</span>(hexMsg[T][i*<span class="hljs-number">2</span>:i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>], <span class="hljs-number">16</span>))<br><br></code></pre></td></tr></table></figure><p>送一个数据生成器的代码，数据生成器的输出文件可以直接被上述代码import。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#datagen.py</span><br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">from</span> utils <span class="hljs-keyword">import</span> nbit, LFSR, NFSR<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generating Data...&quot;</span>)<br>hexEnc=[]<br>maskRec0=[]<br>maskRec1=[]<br>hexMsg=[]<br>seed0Rec=[]<br>seed1Rec=[]<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>)):<br>        seeds = [secrets.randbits(nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        masks = [secrets.randbits(nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        lfsrs = [LFSR(seed, mask) <span class="hljs-keyword">for</span> seed, mask <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(seeds, masks)]<br>        nfsr = NFSR(*lfsrs)<br><br>        msg = secrets.token_bytes(<span class="hljs-number">200</span>)<br>        enc = nfsr(msg)<br>        hexEnc.append(enc.<span class="hljs-built_in">hex</span>())<br>        maskRec0.append(masks[<span class="hljs-number">0</span>])<br>        maskRec1.append(masks[<span class="hljs-number">1</span>])<br>        hexMsg.append(msg.<span class="hljs-built_in">hex</span>())<br>        seed0Rec.append(seeds[<span class="hljs-number">0</span>])<br>        seed1Rec.append(seeds[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;Testinput.py&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;hexEnc=&#125;</span>\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;maskRec0=&#125;</span>\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;maskRec1=&#125;</span>\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;seed0Rec=&#125;</span>\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;seed1Rec=&#125;</span>\n&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;Testans.py&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;hexMsg=&#125;</span>\n&quot;</span>)<br><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not this time&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>最终运行结果，可以发现最后出现了多解，而正确明文的值恰好是其中一个解，因此本题概率性地恢复了seed也算是做成功了。</p><img src="/2024/10/23/SUSCTF2024/9-2.png" alt="9-2" style="zoom:80%;"><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>两年没打CTF了，以前一起打CTF的队友基本上都找到了很好的工作，不过还好，自己也最终靠着4.43的GPA保研到了SEU，也算是大学卷G.卷了3年的结果吧。</p><p>大四保研后，前前后后玩了12个城市，东南西北都跑了一趟，也算是玩得尽兴了吧。现在觉得电子游戏就是一堆数据，在南京玩和出南京旅游都没意思了，继续开卷！</p><p>在研究生阶段，能够在SUS继续和志同道合的朋友一起打CTF，讨论技术，其实也挺不错的，争取把CTF捡回来。</p><p>考虑到自己读博概率不高，因此研 1 先以做项目和打竞赛为主吧。研 2 争取能发 2 篇论文（哎，没科研经历保研是真伤，面试时老师问了我很多很难的密码学问题，我都答上来了，结果SEU优营还没进前100，最后递补上了学硕）<del>笑死，去年SEU保研穿了，今年保研又穿了，300+名的一个学妹递补上了</del>。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason4</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGame2021PartCrypto</title>
    <link href="/2021/10/25/0xGame2021PartCryptoDiv1/"/>
    <url>/2021/10/25/0xGame2021PartCryptoDiv1/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame部分Crypto题目出题手记"><a href="#0xGame部分Crypto题目出题手记" class="headerlink" title="0xGame部分Crypto题目出题手记"></a>0xGame部分Crypto题目出题手记</h1><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="1-MyFunction"><a href="#1-MyFunction" class="headerlink" title="1: MyFunction"></a>1: MyFunction</h3><p>题目加密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x*log(x) <span class="hljs-comment">#log(x) is &quot;y=ln(x)&quot; used in maths</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(f(<span class="hljs-built_in">ord</span>(i)))<br><span class="hljs-comment">#输出部分略去</span><br></code></pre></td></tr></table></figure><p>这个题目出的目的是让新生熟悉一下Python的代码，顺便通过一个简单的python代码，了解一下python的基本语法，是模仿的西电的新生赛出的。西电的新生赛出的用的函数是$y&#x3D;e^x$，也给出了很多数字。因为$y&#x3D;e^x$有很明显的反函数，所以那个题可以直接对所有的输出取对数，就可以获得明文。但这个题目不行，因为$y&#x3D;x\ln x$没有可以写出来的反函数形式<del>别问，因为我数学不行，我求不出来</del>。因此这个题目的正确做法是枚举可能的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x*log(x)<br><br>arr=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).readlines()<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> arr:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">128</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(f(i)-<span class="hljs-built_in">float</span>(y))&lt;<span class="hljs-number">0.0003</span>:<br>            s+=<span class="hljs-built_in">chr</span>(i)<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment">#0xGame&#123;YouH4veKn0wedPy7honL081s&lt;y=ln(x)&gt;InM47hs&#125;</span><br></code></pre></td></tr></table></figure><p>不过实际的解题中，真正写脚本的新生并不多，有的是通过excel打表，然后一个一个解的。把所有的$x$求出来之后，然后查ASCII码表一个一个手动对照的。</p><p>之前验题的时候，我考虑到了浮点误差，因此这边用的是<code>abs(f(i)-float(y))&lt;0.0003</code>判断的。实际上在$x&gt;40$的时候，$(x+1)\ln(x+1)-x\ln x$的差值已经超过了$2$。因此直接取整也是可以的。不过最后我发现不考虑浮点误差的问题照样也是可以做的。</p><h3 id="2-Class-8"><a href="#2-Class-8" class="headerlink" title="2.Class 8"></a>2.Class 8</h3><p>一个争议性挺大的题目。因为当时出题的时候，我并不想出古典密码题——属实没意思。但既然要求出一个古典密码，那就只能出一个。。</p><p>最后出题的时候确实是出难了，虽然To1in那个ManyCode那个题也出难了，但他最后简化了，然后我看到当时已经有2、3个人解出来了，就没有简化。八种古典密码放在一起。有的还有歧义。。。（不过虽然还是有学弟没有跟我交流，也做出来了。</p><p><img src="/2021/10/25/0xGame2021PartCryptoDiv1/Class8.png" alt="Class8"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">第1、6位是盲文<br>第2、7位是跳舞的小人<br>第3位是猪圈密码<br>第4、11、16位是手机九键键盘<br>第5、9、14位是莫尔斯电码<br>第8、12位是银河字母<br>第10、15位是培根密码<br>第13位是电脑键盘，cfgb之间围着的是V<br></code></pre></td></tr></table></figure><p>这道题一开始打算出规则的单词的，但后面就出得不规则了。主要是第13位、第15位出问题出得非常多。第15位确实有两种解法，因此第15位是 <code>O</code> 最后也算对了。</p><p>flag: <code>0xGame&#123;CLASSLNRDDLDVTNB&#125;</code> 或<code> 0xGame&#123;CLASSLNRDDLDVTOB&#125;</code></p><p><del>以后再也不出这种无聊的古典密码题了。。。。</del></p><h3 id="3-ABC-Of-RSA"><a href="#3-ABC-Of-RSA" class="headerlink" title="3.ABC Of RSA"></a>3.ABC Of RSA</h3><p>这个题主要是用于给新生入门一下RSA相关知识。。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">在RSA加密中，已知：<br><span class="hljs-attribute">p</span><span class="hljs-operator">=</span><span class="hljs-number">9677</span><br><span class="hljs-attribute">q</span><span class="hljs-operator">=</span><span class="hljs-number">9241</span><br><span class="hljs-attribute">e</span><span class="hljs-operator">=</span><span class="hljs-number">10009</span><br>求解密指数d，包上<span class="hljs-number">0</span>xGame&#123;&#125;提交。<br></code></pre></td></tr></table></figure><p>这个如果下载Python的密码学专用包，写起来会非常快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p=<span class="hljs-number">9677</span><br>q=<span class="hljs-number">9241</span><br>e=<span class="hljs-number">10009</span><br><span class="hljs-built_in">print</span>(inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)))<br><span class="hljs-comment">#39982249</span><br></code></pre></td></tr></table></figure><p>不过发现很多学弟学妹没有装包的情况下，利用$ed&#x3D;k\phi+1$，暴力枚举$k$的。这个虽然这道题是可行的。但下一个题，当数字大起来的时候，就显得不可行了。。</p><h3 id="4-BlackGiveRSA"><a href="#4-BlackGiveRSA" class="headerlink" title="4.BlackGiveRSA"></a>4.BlackGiveRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,p,q<br><span class="hljs-keyword">assert</span> q&gt;p <br>n=p*q<br>e=<span class="hljs-number">10007</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    m=bytes_to_long(flag[i*<span class="hljs-number">7</span>:i*<span class="hljs-number">7</span>+<span class="hljs-number">7</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(m,e,n))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encryption using modulus n=&quot;</span>,n)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">OutPut:</span><br><span class="hljs-string">1150947306854980854</span><br><span class="hljs-string">243703926267532432</span><br><span class="hljs-string">1069319314811079682</span><br><span class="hljs-string">688582941857504686</span><br><span class="hljs-string">670683629344243145</span><br><span class="hljs-string">1195068175327355214</span><br><span class="hljs-string">Encryption using modulus n= 1687126110378632809</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>RSA入门题，直接放到yafu&#x2F;factordb上分解出$p&#x3D;1175078221,q&#x3D;1435756429$，分别是Am4的QQ和自己的QQ号。。</p><p>然后直接按照RSA的解密方法分解就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p,q=<span class="hljs-number">1175078221</span>,<span class="hljs-number">1435756429</span><br>n,phi=p*q,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(<span class="hljs-number">10007</span>,phi)<br>cipher=[<br>    <span class="hljs-number">1150947306854980854</span>,<br>    <span class="hljs-number">243703926267532432</span>,<br>    <span class="hljs-number">1069319314811079682</span>,<br>    <span class="hljs-number">688582941857504686</span>,<br>    <span class="hljs-number">670683629344243145</span>,<br>    <span class="hljs-number">1195068175327355214</span><br>    ]<br>m=<span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cipher:<br>    m+=long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#0xGame&#123;ChuTiRenDeQQShiJiShangJiuShiQDeZhi&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="Equation"><a href="#Equation" class="headerlink" title="Equation"></a>Equation</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">解方程题，RSA加密，没有附件，远程连接一次过去就可以接收加密数据。解出来的明文结果要long_to_bytes<br>p,q∈(<span class="hljs-number">2</span>**<span class="hljs-number">1407</span>,<span class="hljs-number">2</span>**<span class="hljs-number">1408</span>) <br>nc <span class="hljs-number">47.101</span><span class="hljs-number">.38</span><span class="hljs-number">.213</span> <span class="hljs-number">60718</span><br><span class="hljs-symbol">Author:</span>huangx607087<br><span class="hljs-symbol">QQ:</span><span class="hljs-number">1435756429</span><br></code></pre></td></tr></table></figure><p>linux虚拟机中，直接在终端输入<code>nc 47.101.38.213 60718</code> ，可以获得$n,e,c,f$，其中$f&#x3D;ap+bq$。</p><p>（当然，本题为防作弊，每次连接后发出的$a,b$内容都不一样，但$f&#x3D;ap+bq$的格式是肯定的，你获取的 系数可能与此不同，但不影响解题）。</p><p>随机连接上去，获取一组数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">n =<br><span class="hljs-number">32366272889292879088882195998253721958216118427319043123590736165426820884306499725050727749537295796623781690886255268016096819542474814457437532341958464848643200659916387692563367270923362263462485626863278634698636219570995613163637857962196938268241034329466928075048970301826587646917598116612437415879221437295531628513384414258368369916946742389703355179727112580592683439416261547865491725025586248605272291584028774967553627942724579632389254496409849216841409604686980557654983994405692268823696566554514932549687234389560838939048535333918846662927374585386766723838290671937789073306966759191649325746073717288252462817952734597692830994622255635546908058581524477518532518924112976563197010192251929746445312969880127879576958492529042343256141675368594461418257288354657105617752796615735654975200326101463143024542800708390095145361</span><br>e = <span class="hljs-number">906371</span><br>c =<br><span class="hljs-number">15326438748659000169738486078886997781541935909035823368289334280968233481809714574428064879237827914760740438396085818400100752918474657858554388771724064383701395897618045276281398824434274848557653909089994244435972710632336639335300023667869547648881808002952139588112935030846125601449819192271492110196773991802015580978532663199706950910343070008368979693052990985227852719668245569238857908655227385682414319846321429428810022909530050444105837210601614933221417662986725539709495237298445020038006845869543594704774018595363714269915863872404761678621066244387220449270355482924374014811790125751689511923646410269665459941400645007655696532244986604521949477159649748754760874919743902307824198126893002486445262315126416725774433901321311453440889692050265638750239216391568288836776466397695369910655394827082589725264284100323144743368</span><br>f = <span class="hljs-number">4071</span> * p + <span class="hljs-number">7840</span> * q = <span class="hljs-number">70609572383507708646716591625555712379946460153989879089689539734922903656784859764618771054881882855097217363252911229485210947514270593649999198018427595733868497208821457315913778178532267217419587556519640009047854707649751663514017094626487619210733938544175505589938842947647526503757953723232894419183885106501307587792888770406913619606926851412157084401688469130571174114717305950501097282446764439401475500746719477183</span><br></code></pre></td></tr></table></figure><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>有Sagemath的，录入4个已知数据后，可以直接利用以下的代码求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">var(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>solve([p * q == n, <span class="hljs-number">4071</span> * p + <span class="hljs-number">7840</span> * q == f],(p, q))<br></code></pre></td></tr></table></figure><p>然后就可以解出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p == <span class="hljs-number">5083858928708691100777959116505887333680880438073587959441589817260857392095426280573595409516065652457557087257582498766032467943842309357363106558257787135298633883829312431320375735688577512605869266440855676882837431188700856046398782182742328211552394159944490832515415689088811946496781884336421281783780403089383634369539994631626195420357561861396522278697114564263369128050977173067291911354418900362132140587209993</span><br>q == <span class="hljs-number">6366477383256967751970602048757684316904540292167385523826891274088514440505660634745365324329334130604911028192256744516414894198327621461246682553540834732916805952519429388776598030426539306581772164902923029140028510877621234508817302597008112380293895652938964720761299193541705748669586055114709614928841209888319746463583093400709614547276940953368857424121494354522321223778287994763284682566699629595310657706146377</span><br></code></pre></td></tr></table></figure><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>没有Sagemath的，可以编程求解。</p><p>由于$pq&#x3D;n,4071p+7840q&#x3D;f$，因此$4071p&#x3D;f-7840q$，然后有$4071n&#x3D;4071pq&#x3D;(f-7840q)q$。</p><p>因此，我们可以构造方程$7840x^2-fx+4071n&#x3D;0$，根据二次函数对称轴的位置，发现我们需要的值位于对称轴右侧。因此我们直接二分求解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">y</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">7840</span>*x*x-f*x+<span class="hljs-number">4071</span>*n<br>L, R = <span class="hljs-number">2</span>**<span class="hljs-number">1407</span>, <span class="hljs-number">2</span>**<span class="hljs-number">1408</span><br><span class="hljs-keyword">while</span> L &lt;= R:<br>M = (L+R)//<span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> y(M) &lt; <span class="hljs-number">0</span>:<br>L = M+<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> y(M) &gt; <span class="hljs-number">0</span>:<br>R = M-<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> y(M) == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(M)<br><span class="hljs-keyword">break</span><br><span class="hljs-comment">#6366477383256967751970602048757684316904540292167385523826891274088514440505660634745365324329334130604911028192256744516414894198327621461246682553540834732916805952519429388776598030426539306581772164902923029140028510877621234508817302597008112380293895652938964720761299193541705748669586055114709614928841209888319746463583093400709614547276940953368857424121494354522321223778287994763284682566699629595310657706146377</span><br></code></pre></td></tr></table></figure><p>这个题目还可以用z3做。不过很多人的思路是根据二次方程求根公式，想要求$\sqrt{b^2-4ac}$的值。而这个值也可以通过函数的单调性，二分求解。。</p><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="CryptoSignin3"><a href="#CryptoSignin3" class="headerlink" title="CryptoSignin3"></a>CryptoSignin3</h3><p>题目是给出了RSA加密中的$e,n,c$，让你求出$5m$的加密结果（默认$c$是$m$的加密结果）。</p><p>这道题主要考察RSA的乘法同态性，由于$m^e \equiv c \pmod n$，因此我们有<br>$$<br>(5m)^e\equiv 5^em^e\equiv 5^ec \pmod n<br>$$<br>因此，我们只需要计算$5^{e}c \mod n$的值即可。然后转一下<code>str</code>类型，取最后25位即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">2422711508900009723470102727278184898228579351729629175495904760516536114771819178772843940622693480942295987032442940867670858858530606887743557817380121361626756206355705110299827107648704348792184242506797212331641569408152865458082131811787893384573565771304686373397987779236692592582009393836324438173880350455958049987506807351970912049246353746635267159741115761548052126938491673479606393396100458729618059852813438444299361468512008386975558106274324688665963516424534366163011821633197140729560513838981241752422348968312410911097523311183305812013220724215584901550592570168096761576532621840320623463208702401829189862290303098674021012353400081288819532365151476738751064469957971192132666136590103567843662591585345483671185892760751481722342403025068374371716176981888876927119331602694699049322860285991375002326127401769287658952682585275891296760732815680898653162425658904911584903825163141576325803464119867837508173795728753701563149748508464162635777787788266240105654089919642728171076155284842273517797069725130328742992830894075552022372717019366081516680737</span><br>e=<span class="hljs-number">10007</span><br>c=<span class="hljs-number">1285901843278876234855607310979623200548989981628646673003523113580651626686523566799395153922258813222744927018205882436414589516795415393990321785993777190284046937462277341231780571523062023964463963139910673601962881978696384360480028132774373962893042697866284303407898274683337284548529324550392212212259945699167254341062208031468355814520907121576009140399280898693924706067921614961798886587174234822238887374399666546113213239071736098162263227821798099750616137755055435397986788792824117529508255014392344357337010003489080209442530630893119917536518243474797351694663533728052713570044084663268350004738561234330890283895430742958255842196396542672482459665354739161276178850775803757753274712331067038077233072381051447436014423088822190073982228377699578821863871042501139434131053044240618505423456248872825597521393564957261041606004454706987978944644129728005540587982321571481413548381251589071459468890948819121023006292105804319208332473499823959882524985324120811768843639294924500467781666073366713198751960913508720530656411097981933156605831180926219778514434</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">5</span>,e,n)*c%n)[-<span class="hljs-number">25</span>:])<br></code></pre></td></tr></table></figure><p>输出结果为：<code>8489769636593649908538102</code>，因此flag为<code>0xGame&#123;8489769636593649908538102&#125;</code></p><p>RSA的同态性是一个很重要的知识点，在可以获得解密服务的服务器上，可以利用RSA的同态性，发送$2^ec,3^ec,…$等结果，获取解密服务，进而获取明文的一些性质，比如$2m$的情况、$3m$的情况等等。比如第四周的ParityOracleBase5就是用到了这个的算法</p><p>出这个题的原因，是因为去年的0xGame就是因为先出了ParityOracle，然后出了个SigninRSA，直接导致自己根本就没意识到$2^ec$的解密结果是$2m$。。。</p><p>虽然这个题解出来的人挺多，但这个题是为了给下周的ParityOracleBase5做准备用的。。</p><h3 id="Predict-1"><a href="#Predict-1" class="headerlink" title="Predict 1"></a>Predict 1</h3><p>一个求LCG参数的题目。</p><p>根据题目的方法，我们有19次机会可以获得里面的state，然后再进行预测。但实际上，一般获取8组数据，就可以获取$a,b,p$的值（此处保证了$a,p$是素数）。当然为了保险，15组数据也是足够的。</p><p>首先，我们假设我们获取的数字为$x_1,x_2,…,x_8$。那么我们可以有：<br>$$<br>x_i\equiv ax_{i-1}+b \pmod p<br>$$<br>那么化简一下，就是：<br>$$<br>x_2\equiv ax_1+b\pmod p \tag1<br>$$</p><p>$$<br>x_3\equiv  ax_2+b\pmod p\tag 2<br>$$</p><p>$$<br>x_4\equiv  ax_3+b \pmod p \tag 3<br>$$</p><p>然后，由$(2)-(1),(3)-(2)$，消去$b$，可以得到：<br>$$<br>x_3-x_2\equiv a(x_2-x_1)\pmod p \tag{S1}<br>$$</p><p>$$<br>x_4-x_3\equiv a(x_3-x_2)\pmod p \tag{S2}<br>$$</p><p>由于在$\mod p$的条件下，除号表示乘上某个数的逆元，因此，我们把$a$提出来，就是<br>$$<br>a\equiv \dfrac{x_3-x_2}{x_2-x_1}\equiv \dfrac{x_4-x_3}{x_3-x_2} \pmod p \tag{T}<br>$$<br>${(T)}$中消去$a$，去分母，得：<br>$$<br>(x_3-x_2)^2\equiv(x_4-x_3)(x_2-x_1) \pmod p \tag{R1’}<br>$$<br>去掉同余号也就是<br>$$<br>(x_3-x_2)^2-(x_4-x_3)(x_2-x_1) &#x3D;D_1p \tag{R1}<br>$$<br>然后，由此可知：<br>$$<br>(x_4-x_3)^2-(x_5-x_4)(x_3-x_2) &#x3D;D_2p \tag{R2}<br>$$<br>因此，我们可以得到多个数据$\text{(R1)(R2)(R3)(R4)(R5)}$，然后计算所有结果得最大公因数就可以得到$p$。(一般7个值求出来的准确度就比较高了)</p><p>$p$得到之后，我们根据消去$b$的式子，就可以计算出$a\equiv \dfrac{x_3-x_2}{x_2-x_1} \pmod p$了。求出$a$以后，就可以根据$x_1,x_2$很快地求出$b$。</p><p>在整个做题的过程中，可能有人查看了百度的方法，结果到最后预测错了。原因很简单：因为这边只是有$\gcd(D_1p,D_2p)$，虽然$p$是一定的，但$\gcd(D_1,D_2)$的值却不为$1$。有两种办法解决：一是多选取几组数据，求公约数更保险，二是我测了一下，$\gcd(D_1,D_2)$的值实际上并不大（很大概率小于$1000$），因此可以写个$2$到$999$的循环，将$\gcd(D_1p,D_2p)$里面多余的因数除掉即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh=remote(<span class="hljs-string">&quot;47.101.38.213&quot;</span>,<span class="hljs-number">60709</span>)<br>u,detla=[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    numb=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    numb=numb.split(<span class="hljs-string">b&quot;is&quot;</span>)[<span class="hljs-number">1</span>]<br>    u.append(<span class="hljs-built_in">int</span>(numb))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    detla.append(<span class="hljs-built_in">abs</span>((u[i+<span class="hljs-number">2</span>]-u[i+<span class="hljs-number">1</span>])*(u[i+<span class="hljs-number">2</span>]-u[i+<span class="hljs-number">1</span>])-(u[i+<span class="hljs-number">3</span>]-u[i+<span class="hljs-number">2</span>])*(u[i+<span class="hljs-number">1</span>]-u[i])))<br>p=detla[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> detla:<br>    p=GCD(p,i)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-keyword">assert</span> isPrime(p)<br>a=(u[<span class="hljs-number">3</span>]-u[<span class="hljs-number">2</span>])*inverse(u[<span class="hljs-number">2</span>]-u[<span class="hljs-number">1</span>],p)%p<br>b=(u[<span class="hljs-number">1</span>]-a*u[<span class="hljs-number">0</span>])%p<br><span class="hljs-built_in">print</span>(a,b,p)<br>x=u[-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">205</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">15</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(i)<br>    x=(a*x+b)%p<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-built_in">str</span>(x).encode())<br>sh.recvuntil(<span class="hljs-string">b&quot;0xGame&#123;&quot;</span>)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0xGame&#123;&quot;</span>+flag.decode())<br>sh.close()<br></code></pre></td></tr></table></figure><p><code>0xGame&#123;86767788-6000-7608-6777-5454a581d836&#125;</code></p><p>不过最后看了一下做出来的人的WP，有的人问过我，多获取了几组数据，多求了几次最大公约数把题目做出来了。也有人没有意识到这个问题，通过多次连接服务器，最终获取了一组$\gcd(D_1,D_2)&#x3D;1$的情况，很顺利地解出了$p$。</p><p>实际上这里可以给大家扩展一下：任意两个正整数互素的概率是$\dfrac{6}{\pi^2}$，这个数字的倒数也是一个很著名的级数和：<br>$$<br>\sum_{i&#x3D;1}^{+∞}\dfrac{1}{i^2}&#x3D;\dfrac{\pi^2}{6}<br>$$</p><h2 id="Week-4-Update-11-4"><a href="#Week-4-Update-11-4" class="headerlink" title="Week 4[Update 11.4]"></a>Week 4[Update 11.4]</h2><h3 id="ParityOracleBase5"><a href="#ParityOracleBase5" class="headerlink" title="ParityOracleBase5"></a>ParityOracleBase5</h3><p>RSA的PariyOracle攻击，是在<strong>获得了解密服务</strong>的情况下，你可以 对服务器发送任意密文，服务器会告诉你解密后明文的<strong>最后一位</strong>。</p><p>由于多数情况下都是二进制位，因此最后一位二进制位就是$0$或$1$。若明文$m$的密文是$c$，这个时候我们发送$2^e c$，解密就可以得到$2m$。很显然，由于$2m$是偶数，$n$是奇数。因此如果服务器返回$0$，说明$2m$没有超过$n$，而如果服务器返回$1$，说明$2m$超过了$n$，由于$2m$是偶数，$n$是奇数，因此这里模$n$使得$2m$减去了一个$n$.。</p><p>在获取$2m$的结果后，我们可以发送$4m$的密文 给服务器。那么我们可以根据这个表来判断$m$的取值范围：</p><table><thead><tr><th align="center">$m$范围</th><th align="center">第一次返回值</th><th align="center">第二次返回值</th></tr></thead><tbody><tr><td align="center">$4m&lt;n$</td><td align="center">$0$</td><td align="center">$0$</td></tr><tr><td align="center">$n&lt;4m&lt;2n$</td><td align="center">$0$</td><td align="center">$1$</td></tr><tr><td align="center">$2n&lt;4m&lt;3n$</td><td align="center">$1$</td><td align="center">$0$</td></tr><tr><td align="center">$3n&lt;4m&lt;4n$</td><td align="center">$1$</td><td align="center">$1$</td></tr></tbody></table><p>因此，我们发现：我们可以通过二分法逼出$m$的值，如果服务器返回$0$取前半段，返回$1$取后半段。</p><p>此时，如果我们把二进制扩展到五进制，很显然，我们就从讨论$2m$变成讨论$5m$，也就是$5^km$模$5$的值。但这里有一个问题：如果我们已知$m$位于$[L,R]$中，$b&#x3D;\dfrac {R-L} 5$，那对于返回的可能值$0,1,2,3,4$一定是按顺序对应的吗？显然不是。</p><p>如果5𝑚在$[0,\frac n 5]$的范围内，那么很显然，服务器会返回0 但如果$5𝑚$在 $[\frac n 5,\frac{2n} 5]$ 中，很显然，真正的明文是$5𝑚 − 𝑛$。因此，这里的返 回值是 $−𝑛 \mod 5$ 的值。因此，1-4对应的区间顺序，与$n \mod 5$的值有关。</p><table><thead><tr><th align="center">$n \mod 5$</th><th align="center">$[0,\frac n 5]$</th><th align="center">$[\frac n 5,\frac{2n} 5]$</th><th align="center">$[\frac {2n} 5,\frac{3n} 5]$</th><th align="center">$[\frac {3n} 5,\frac{4n} 5]$</th><th align="center">$[\frac {4n} 5,n]$</th></tr></thead><tbody><tr><td align="center">$1$</td><td align="center">$0$</td><td align="center">$4$</td><td align="center">$3$</td><td align="center">$2$</td><td align="center">$1$</td></tr><tr><td align="center">$2$</td><td align="center">$0$</td><td align="center">$3$</td><td align="center">$1$</td><td align="center">$4$</td><td align="center">$2$</td></tr><tr><td align="center">$3$</td><td align="center">$0$</td><td align="center">$2$</td><td align="center">$4$</td><td align="center">$1$</td><td align="center">$3$</td></tr><tr><td align="center">$4$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$2$</td><td align="center">$3$</td><td align="center">$4$</td></tr></tbody></table><p>因此，$n\equiv 4 \pmod 5$的情况是很容易被想到的。可以根据这个表进行讨论， 也可以就认定$n\equiv 4 \pmod 5$的情况，多连几次服务器，也可以拿到flag。 这个是高强度的交互，从题目中n的规模来看，一共要交互1750- 2100次，耗时12分钟左右。</p><p>有学弟看到了网上base2的题目，发现最后flag会出现误差。但这道题我们不需要考虑误差。因为flag在文本的中间，这边的误差不会影响到flag。并且，这个题目考虑到万一影响到了的情况，flag没有设置成md5的那种格式，而是在最后做了些手脚。因此flag即使出现3位有问题，也基本上都能猜出来是啥。</p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh = remote(<span class="hljs-string">&quot;47.101.38.213&quot;</span>, <span class="hljs-number">60713</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;&gt; &quot;</span>)<br>sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>n, e, c = [sh.recvline(keepends=<span class="hljs-literal">False</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>n, e, c = <span class="hljs-built_in">int</span>(n[<span class="hljs-number">2</span>:]), <span class="hljs-built_in">int</span>(e[<span class="hljs-number">2</span>:]), <span class="hljs-built_in">int</span>(c[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(c)<br>L, R, Clk = <span class="hljs-number">0</span>, n, <span class="hljs-number">1</span><br>judge = n % <span class="hljs-number">5</span><br>Table = [[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>], [<br>    <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]<br>j0, j1, j2, j3, j4 = Table[judge]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;judge=<span class="hljs-subst">&#123;judge&#125;</span>&quot;</span>)<br><span class="hljs-keyword">while</span> L &lt; R:<br>    <span class="hljs-comment"># for i in range(1):</span><br>    D = (R-L)//<span class="hljs-number">5</span><br>    <span class="hljs-keyword">if</span> Clk % <span class="hljs-number">35</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(Clk)<br>        <span class="hljs-built_in">print</span>(R-L)<br>    P20, P40, P60, P80 = L+D, L+<span class="hljs-number">2</span>*D, L+<span class="hljs-number">3</span>*D, L+<span class="hljs-number">4</span>*D<br>    a = c*(<span class="hljs-built_in">pow</span>(<span class="hljs-number">5</span>, e*Clk, n)) % n<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-built_in">str</span>(a).encode())<br>    Rem = sh.recvline(keepends=<span class="hljs-literal">False</span>)[-<span class="hljs-number">1</span>]-<span class="hljs-number">48</span><br>    <span class="hljs-keyword">if</span> Rem == j0:<br>        L, R = L, P20<br>    <span class="hljs-keyword">elif</span> Rem == j1:<br>        L, R = P20, P40<br>    <span class="hljs-keyword">elif</span> Rem == j2:<br>        L, R = P40, P60<br>    <span class="hljs-keyword">elif</span> Rem == j3:<br>        L, R = P60, P80<br>    <span class="hljs-keyword">elif</span> Rem == j4:<br>        L, R = P80, R<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">b&quot;Error&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    Clk += <span class="hljs-number">1</span><br>L = long_to_bytes(L)<br>L = L.split(<span class="hljs-string">b&quot;          &quot;</span>)<br><span class="hljs-built_in">print</span>(L[<span class="hljs-number">1</span>])<br>sh.close()<br></code></pre></td></tr></table></figure><p>flag:<code>0xGame&#123;31b52022-6076-8067-8848-taijinshouji&#125;</code> </p><p>这个题一共有7位新生做出来，tql。</p><h3 id="Predict-2"><a href="#Predict-2" class="headerlink" title="Predict 2"></a>Predict 2</h3><p>既然上周出了个Predict 1，那就会出个Predict 2。</p><p>LFSR，又称线性反馈移位寄存器。它是通过 $𝑦 ≡ \sum_{i&#x3D;1}^ 𝑛 𝑎_𝑖𝑥_𝑖 \pmod p$ 的形式，获得输出$𝑦$。输出后，将$𝑥_0$去掉，把$y$接在$x$数组的最后，组成新的$x$数组，长度与原来$x$数组一致。整个过程中，$a$数组始终不变。</p><p>题目初始有97次获得state的机会，LFSR的长度为45。当你预测到后面600 个state后，就可以获得flag。 根据迭代式，我们可以得到这个规律：<br>$$<br>x_{45}\equiv \sum_{i&#x3D;0}^{44} a_ix_i \pmod p<br>$$</p><p>$$<br>x_{46}\equiv \sum_{i&#x3D;0}^{44} a_ix_{i+1} \pmod p<br>$$</p><p>很显然，如果我们把$a$看作未知数，那么就是要解含有$45$个未知数的方程。需要构造$45$个等式。</p><p>而在线性代数中，解线性方程组实际上都可以化为矩阵的运算，因此，我们可以构造下面的矩阵：</p><p><img src="/2021/10/25/0xGame2021PartCryptoDiv1/Predict2.png" alt="Predict2"></p><p>这个矩阵有形如$\vec aM&#x3D;\vec b$的格式。根据题目来看，很显然方程有唯一解。 所以运用线性代数知识，有$\vec a &#x3D; \vec bM^{−𝟏}$ 。不过这里的逆矩阵是在模$p$意义 下的逆矩阵。</p><p>求逆矩阵可以用Sagemath，也可以根据线性代数 课上讲过的利用增广矩阵法求解逆矩阵，将 $(𝑀| 𝐸)$ 化为$( 𝐸 |𝑀^{-1})$ ，除法变成乘上对应数字的逆元。具体的做法见题目给出的附件2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh = remote(<span class="hljs-string">&quot;47.101.38.213&quot;</span>, <span class="hljs-number">60710</span>)<br>states = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">90</span>):<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1500000000&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;is&quot;</span>)<br>    states.append(<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>)))<br>M = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>):<br>    M.append(states[i:i+<span class="hljs-number">45</span>])<br>v = states[<span class="hljs-number">45</span>:<span class="hljs-number">90</span>]<br>M = matrix(Zmod(<span class="hljs-number">1435756429</span>), M)<br>v = vector(Zmod(<span class="hljs-number">1435756429</span>), v)<br>mask = v*(M**(-<span class="hljs-number">1</span>))<br>v, mask = <span class="hljs-built_in">list</span>(v), <span class="hljs-built_in">list</span>(mask)<br><span class="hljs-built_in">print</span>(mask)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">601</span>):<br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>):<br>        s += v[j]*mask[j]<br>    s %= <span class="hljs-number">1435756429</span><br>    <span class="hljs-built_in">print</span>(i, s)<br>    v = v[<span class="hljs-number">1</span>:]+[s]<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    sh.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>    sh.sendline(<span class="hljs-built_in">str</span>(s).encode())<br>sh.interactive()<br><br></code></pre></td></tr></table></figure><p>附件2：求模意义下的逆矩阵代码，用的是增广矩阵法求逆矩阵，时间复杂度$O(n^3)$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">InvMatrixWithModulus</span>(<span class="hljs-params">_matrix, p</span>):<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> isPrime(p)) <span class="hljs-keyword">or</span> (<span class="hljs-built_in">len</span>(_matrix) != <span class="hljs-built_in">len</span>(_matrix[<span class="hljs-number">0</span>])):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;matrix must be a square and p must be a prime&quot;</span>)<br>    l = <span class="hljs-built_in">len</span>(_matrix)<br>    matrix = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>            matrix[i].append(_matrix[i][j])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        matrix[i] = matrix[i]+[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)]<br>        matrix[i][l+i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        inv = inverse(matrix[i][i], p)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">2</span>*l):<br>            matrix[i][j] = matrix[i][j]*inv % p<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, l):<br>            timz = matrix[j][i]<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*l):<br>                matrix[j][k] = (matrix[j][k]-timz*matrix[i][k]) % p<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        <span class="hljs-keyword">assert</span> matrix[i][i] == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            timz = matrix[j][i]<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">2</span>*l):<br>                matrix[j][k] = (matrix[j][k]-timz*matrix[i][k]) % p<br>    J = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> matrix:<br>        J.append(i[l:])<br>    <span class="hljs-keyword">return</span> J<br></code></pre></td></tr></table></figure><p><code>flag:0xGame&#123;87087788-7777-baa5-340d-512844320391&#125;</code>。</p><p>这个题目使用了动态flag（上个题目也是），一共有3个学弟做出来了，这个题也算是决定AK的题目吧。在这边放一下他们解出来的flag，作为纪念。</p><table><thead><tr><th>Schen</th><th><code>0xGame&#123;87087788-7777-5b55-3ef6-512844325201&#125;</code></th></tr></thead><tbody><tr><td>Louis Youssef</td><td><code>0xGame&#123;87087788-7777-1035-3e02-512844326801&#125;</code></td></tr><tr><td>叶星</td><td><code>0xGame&#123;87087788-7777-1fb5-3aad-512844329565&#125;</code></td></tr></tbody></table><h2 id="Week-5-出题后记"><a href="#Week-5-出题后记" class="headerlink" title="Week 5(出题后记)"></a>Week 5(出题后记)</h2><p>这次0xGame自己出了11个题目，总体来说还是从易到难的。个人认为与去年相比，第4周可能要比去年难一点，其他3周还是比去年偏简单的。</p><p>一共有3人AK了密码学的全部题目，也希望他们能在后面CTF的学习中，无论是否会走密码学方向，能够收获更多的知识吧。</p><p>10月12-14日自己迎来了第一个线下赛，在郑州。虽然没有密码学题目，是去白给的，但还是收获了很多，涨了见识，<del>恰了380烂钱。。。</del> 不过自己10月份还是非常忙的一个月，每周都出现了一堆事情，希望自己11月的事情稍微少一点，然后复习复习我的离散、概率论、信安数基和大物，希望自己期末考试这4门课都能考到60分。</p><p>还好自己去年6级过了，要是不过的话，今年的事情绝对会忙到我破防。10月第一周迎新，第二周线下，第三周为SAST和SACC招新批卷，第四周安全组授课，11月第一周写任选课论文和大物期中考，还有星盟分享又做了个ppt。。。。</p><p><del>希望自己2年后能够考南邮的研究生吧，以后再社会上混口饭吃不错了。</del></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCipher3</title>
    <link href="/2021/09/04/BlockCipher3/"/>
    <url>/2021/09/04/BlockCipher3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习分组密码的笔记3"><a href="#huangx607087学习分组密码的笔记3" class="headerlink" title="huangx607087学习分组密码的笔记3"></a>huangx607087学习分组密码的笔记3</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>本篇博客接着前一篇的内容，在讲过DES AES后，对其加密模式进行分析。</p><h2 id="3-DES-AES的加密模式"><a href="#3-DES-AES的加密模式" class="headerlink" title="3.DES,AES的加密模式"></a>3.DES,AES的加密模式</h2><p>在DES 和AES的各种加密模式中， 有五种操作模式最为常用，下面将逐一介绍下面的各种加密模式。</p><h3 id="0o01-电子密码本模式-ECB"><a href="#0o01-电子密码本模式-ECB" class="headerlink" title="0o01 电子密码本模式 ECB"></a>0o01 电子密码本模式 ECB</h3><p>ECB模式是最简单的一种模式，实际上就是直接加密和直接解密，不需要其他的任何成分，仅需要明文$x$和密钥$k$，就可以获得密文$y$，当然，用$y$和$k$也可以通过解密得到$x$。</p><p><img src="/2021/09/04/BlockCipher3/1.png" alt="1"></p><p>在ECB模式中，每个分组的长度都是固定的，比如$16$个字节或者$8$个字节。如果最后不满$16$个字节，那就需要对最后一组明文进行填充后加密。一种常见的填充模式就是后面差几个，就往后面填几个对应字符。例如：在$8$字节的分组下，对字符串<code>doge</code>进行加密，由于差$4$个才能满足一组八个的要求，那就在后面填充四个<code>\x04</code>再加密，也就是最后明文变成了<code>doge\x04\x04\x04\x04</code>。当然，如果刚好是八个字节了，那就填充一整串。例如：<code>nuptsacc</code>在填充后，从一组变成了两组，内容是：<code>nuptsacc\x08\x08\x08\x08\x08\x08\x08\x08</code></p><p>ECB模式的优点就是如果在加密时，某个分组的内容出现了错误，后面的内容不会因为这个错误而受到影响，并且加密速度快、效率高、易操作。</p><p>但ECB模式的缺点也很明显，就是该模式由于操作过于简单，具有高度确定性。如果在key一定的情况下，那么一旦$x$确定了，$y$也就确定了。因此如果攻击者知道了文件开头部分，或者是是文件的高频内容，就有可能破解出可能的密钥。</p><p>由于内容的高度确定性，因此ECB在对于图片加密的情况下，有可能会泄露信息，如下图:</p><p><img src="/2021/09/04/BlockCipher3/2.png" alt="2"></p><h3 id="0o02-密码分组链接模式-CBC"><a href="#0o02-密码分组链接模式-CBC" class="headerlink" title="0o02 密码分组链接模式(CBC)"></a>0o02 密码分组链接模式(CBC)</h3><p>CBC模式跟ECB模式不同：首先，对于某一组的加密不仅依赖于这一组的内容，还依赖于前面所有的明文分组。并且会使用初始向量IV对加密进行随机化。设$\mathrm {IV}&#x3D;y_0$，那么我们有<br>$$<br>y_i&#x3D;e(x_i+y_{i-1})<br>$$<br>此处的加号仍然表示异或，你会发现每一组的加密内容是把这一组的明文和上一组的密文异或之后，再启用加密算法进行加密。加密算法可以用这张图表示</p><p><img src="/2021/09/04/BlockCipher3/3.png" alt="3"></p><p>因此，这个加密有个性质：就是由于$y_i&#x3D;E_k(x_i,y_{i-1})$，我们可以得到$x_i&#x3D;D_k(y_i,y_{i-1})$，由于异或的可交换性，我们也可以得到<br>$$<br>y_{i-1}&#x3D;D_k(y_i,x_{i})<br>$$<br>也就是凭借一组明文$x$和一组密文$y$，当然还有密钥$k$，我们可以求出$iv$的值。</p><p>首先我们可以给服务器发送一个fakeiv $f$，计算：<br>$$<br>x’&#x3D;D_k(y,f)<br>$$<br>那么我们可以得到：（加号表示异或）<br>$$<br>y’&#x3D;x’+f<br>$$<br>然后我们可以得到真正的IV，也就是$y_0$的值为<br>$$<br>y_0&#x3D;y’+x<br>$$</p><p>整合起来，那就在已知明文$x$、密文$y$、密钥$k$的情况下，初始向量$y_0$很快就能直接求出（加号表示异或）<br>$$<br>y_0&#x3D;D_k(y,f)+f+x<br>$$</p><h3 id="0o03-输出反馈模式-OFB"><a href="#0o03-输出反馈模式-OFB" class="headerlink" title="0o03 输出反馈模式(OFB)"></a>0o03 输出反馈模式(OFB)</h3><p>OFB模式是对初始化向量$iv$进行加密，然后每次对加密后的$iv$直接异或明文$x$，从而获得密文$y$的一种模式。</p><p><img src="/2021/09/04/BlockCipher3/4.png" alt="4"></p><p>因此，我们解密时，也直接使用IV进行解密即可，不过注意对于IV来收，仍然是加密操作，而不是解密操作。换句话说就是对于IV而言，不存在解密操作。</p><p><img src="/2021/09/04/BlockCipher3/5.png" alt="5"></p><h3 id="0o04-密码反馈模式-CFB"><a href="#0o04-密码反馈模式-CFB" class="headerlink" title="0o04 密码反馈模式(CFB)"></a>0o04 密码反馈模式(CFB)</h3><p>CFB，即密文反馈模式，仍然是对IV进行加密，然后与明文$x$进行异或得到密文$y$。然后$E(IV)$会继承后半部分内容作为新的前半部分，而新的后半部分则由密文的后半部分组成。如果是$16$位，替换$8$位。那么就是新的IV的前$8$位是旧的IV的后$8$位，然后新的IV的后$8$位是密文的后$8$位（当然也可以是前$8$位）</p><p><img src="/2021/09/04/BlockCipher3/6.png" alt="6"></p><p>解密时，也直接就是分组解密，对IV加密后与密文异或得到明文。与OFB模式一样，不存在对IV解密的情形。</p><h3 id="0o05-计数器模式-CTR"><a href="#0o05-计数器模式-CTR" class="headerlink" title="0o05 计数器模式(CTR)"></a>0o05 计数器模式(CTR)</h3><p>CTR模式这里有一个计数器。比如在$64$位的分组加密中，IV只提供$48$位，剩下的$16$位分配给计数器。例如：如果我们设$\text{IV &#x3D; 86 43 23 6A 46 57H}$，那么一开始的$\text{IV&#x3D;86 43 23 6A 46 57 00 00H}$，第二轮加密时用$\text{IV&#x3D;86 43 23 6A 46 57 00 01H}$。每一次加密时，计数器会保持递增，但IV会一直不变。因此，十六位的计数器可以加密六万多组数据。</p><p>当然，IV|CTR的值实际上不必保密，而CTR也并不一定是<code>+1</code>形，可以是最大长度LFSR，也可以是离散对数的规律，比如$  3^{T} \equiv \mathrm{CTR} \pmod {2^{64}}$。</p><p><img src="/2021/09/04/BlockCipher3/7.png" alt="7"></p><p>这种模式还有个好处，我们可以通过128位的内容来加密$256$位的分组密码。我们只需要每次让计数器$+2$，一组加密前$128$位，一组加密后$128$位。两组加密同时进行，可以节省较多的时间成本。</p><h3 id="0o06-GF域计数器模式-GCM"><a href="#0o06-GF域计数器模式-GCM" class="headerlink" title="0o06 GF域计数器模式(GCM)"></a>0o06 GF域计数器模式(GCM)</h3><p>GCM模式，使用伽罗瓦域乘法，这里是$GF(2^{128})$。在计算每个明文时都会得到一个中间认证参数$g$，$g_{i}$为当前密文$y_i$异或后，与一个常数$h$相乘。这里使用不可约多项式$x^{128}+x^7+x^2+x+1$。因为这里面只有一个乘法，因此GCM的计算开销不会很大。</p><p><img src="/2021/09/04/BlockCipher3/8.png" alt="8"></p><p><img src="/2021/09/04/BlockCipher3/9.png" alt="9"></p><p>数据包$[y,T,ADD]$的接收者也是使用计数器模式解密密文。为了检査数据的可靠性，接收者也使用收到的密文$ADD$与 $T’$ —起计算认证标签 r,而且接收者的计算步骤 与发送者完全相同。如果 $T$与$T’$ 匹配，接收者则可确定密文(和 在传输过程中没有被 篡改，并且的确是发送者生成了该消息。</p><p>了解这些加密模式 的原理图，对我们以后在做到分组密码的题目时，可以从原理出发，更加深入地对其算法进行研究。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCipher2</title>
    <link href="/2021/09/01/BlockCipher2/"/>
    <url>/2021/09/01/BlockCipher2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习分组密码的笔记2"><a href="#huangx607087学习分组密码的笔记2" class="headerlink" title="huangx607087学习分组密码的笔记2"></a>huangx607087学习分组密码的笔记2</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>9月1日，自己的第二个90天计划开始，自己上学期的第一个90天计划很成功，自己从来没想过自己六级能考587。。。所以自己第二个90天计划主要是为了提升自己的CTF水平，争取能够打入线下，然后再恰点烂钱。。。。。（对于我这个fw还是很难的。今年三门数学一门物理，希望自己这四门课都能考到60<del>H</del>吧。。。</p><p>这篇博客主要是讲一下AES的算法，上承接一下DES相关内容，下启一下后面两篇笔记：<strong>笔记3: 加密模式 、笔记4: S盒差分攻击</strong></p><p><strong>注：若数字无后缀，默认认为是十进制。十六进制后缀会加$\text H$，例如$\text{60H}&#x3D;96$</strong></p><h2 id="2-AES"><a href="#2-AES" class="headerlink" title="2.AES"></a>2.AES</h2><h3 id="0o01-对DES的补充内容"><a href="#0o01-对DES的补充内容" class="headerlink" title="0o01 对DES的补充内容"></a>0o01 对DES的补充内容</h3><p>在正式进入AES之前，我们先对上一篇笔记中的DES进行一些补充。</p><p>由于DES的安全性在目前来看已经不是很高了，1999年1月，有一个蛮力破解DES挑战赛，有人解和Deep Track Internet 上的分布攻击，耗时22小时就破解了DES的密钥。而在2006年的4月，德国有两所大学基于低廉的FPGA，仅仅耗费了不到70000人民币的价格，构建了密钥搜索机器，平均搜索时间仅仅7天。</p><p>因此，出现了一些DES的替换算法，其中最典型的就是3DES，有的3DES使用三个不同的密钥，对明文连续加密三次。当然也有使用两个密钥的3DES，使用函数如下<br>$$<br>c&#x3D;E_1(D_2(E_1(m)))<br>$$<br>也就是先用密钥$k_1$对明文进行加密，然后用密钥$k_2$对加密后内容进行解密，最后再用密钥$k_1$对内容进行加密，输出最终的密文。</p><p>当然，这种加密方法也仅仅是在DES上加了个变体，解密函数也是三次<br>$$<br>m&#x3D;D_1(E_2(D_1(c)))<br>$$<br>但这边有个问题就是3DES耗时增加至原来的$3$倍，比较影响效率</p><p>DES加密算法有几个弱密钥，这些密钥有个特点，就是在分组后，会使得$C$和$D$无论怎么左移，均为全$0$或者全$1$的128位序列。</p><p>DES的弱密钥在不考虑第八位校验位的情况下，一共有八个弱密钥：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x0101010101010101</span><br><span class="hljs-number">0xFEFEFEFEFEFEFEFE</span><br><span class="hljs-number">0xE0E0E0E0F1F1F1F1</span><br><span class="hljs-number">0x1F1F1F1F0E0E0E0E</span><br><span class="hljs-number">0x0000000000000000</span><br><span class="hljs-number">0xFFFFFFFFFFFFFFFF</span><br><span class="hljs-number">0xE1E1E1E1F0F0F0F0</span><br><span class="hljs-number">0x1E1E1E1E0F0F0F0F</span><br></code></pre></td></tr></table></figure><p>如果用这$8$个弱密钥加密明文$m$，会出现一个很好玩的现象：<br>$$<br>m&#x3D;E(c)&#x3D;E(E(m))<br>$$<br>也就是说，对明文两次加密，就可以得到原来的明文。</p><h3 id="0o02-AES简介"><a href="#0o02-AES简介" class="headerlink" title="0o02 AES简介:"></a>0o02 AES简介:</h3><p>AES与DES一样，也是一种对称分组密码。其分组大小比DES要大，有$128,192,256$位三种长度的密钥，但AES中每个分组一般均为$128$位，其主要操作简图如下：</p><p><img src="/2021/09/01/BlockCipher2/1.png" alt="1"></p><p>而加密轮数一般也有固定规则——在$128$位密钥下加密$10$次，$192$位密钥下加密$12$次，$256$位密钥下加密$14$次。而加密轮数较少的一个主要原因就是AES与DES不一样，每次直接对所有的$128$位进行了处理。</p><p>AES的总体加密框图如下：</p><p><img src="/2021/09/01/BlockCipher2/2.png" alt="2"></p><p>AES中，对于每一轮加密有三层，第一层是字节代换层，在这里使用$S$盒，对每个字节元素(8bit)根据$S$盒的变换规则进行非线性变换。</p><p>第二层是扩散层，由ShiftRows和MixColumn。其中ShiftRows是对行的位移变化，在位级别进行数据置换。而MixColumn是对列的混淆变换，合并长度为四个字节(32bit)的数据。</p><p>第三层是密钥加法层，这里主要是通过$128$位的轮密钥，与状态进行异或操作的过程。</p><p>在AES中，我们还会涉及到在$GF(256)$中的操作，这里用的是不可约多项式$x^8+x^4+x^3+x+1$。$GF(256)$下对于该多项式有如下的逆元表（为方便期间与避免争议，特别规定$0$的逆元为$0$）。</p><p><img src="/2021/09/01/BlockCipher2/3.png" alt="3"></p><p>举个例子：上表中$\mathrm{00H}$表示$0$，$\mathrm{C2H}$表示二进制的$\text{1100 0010B}$，对应多项式就是$x^7+x^6+x$，它的逆元为$\mathrm{25H}$，其表示多项式为$x^5+x^3+x^2+1$，这两个式子相乘，并对$x^8+x^4+x^3+x+1$取模，结果恰好是$1$。</p><h3 id="0o03-AES加密过程"><a href="#0o03-AES加密过程" class="headerlink" title="0o03 AES加密过程"></a>0o03 AES加密过程</h3><h4 id="Step-1-AES内部结构"><a href="#Step-1-AES内部结构" class="headerlink" title="Step 1 AES内部结构"></a>Step 1 AES内部结构</h4><p><img src="/2021/09/01/BlockCipher2/4.png" alt="4"></p><h4 id="Step-2字节代换层"><a href="#Step-2字节代换层" class="headerlink" title="Step 2字节代换层"></a>Step 2字节代换层</h4><p>由于$128$位对应十六个字节，因此字节代换中，有特定的$S$盒。其数值如下（十进制）：</p><p><img src="/2021/09/01/BlockCipher2/5.png" alt="5"></p><p>这个$S$盒有个特点就是：不存在$x\in [0,255]$使得$S(x)&#x3D;x$。</p><p>因此，即使我们输入的内容是$(0,0,0,…,0)$，到一次$S$盒最后也会输出十进制$(99,99,99,…,99)$，然后再经过$S$盒变成十进制$(251,251,251,…,251)$。因此，AES与DES不同，<strong>它不存在弱密钥</strong>。</p><h4 id="Step-3-扩散层和密钥加法层"><a href="#Step-3-扩散层和密钥加法层" class="headerlink" title="Step 3 扩散层和密钥加法层"></a>Step 3 扩散层和密钥加法层</h4><p>在扩散层中，对十六个$B$，进行了如下的操作：</p><p>首先是位置替换，下标值按照$(0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11)$的规则重新排列成新的顺序。</p><p>然后是列置换，$B_0,B_5,B_{10},B_{15}$通过下面的操作，获得了$C_0$到$C_4$</p><p><img src="/2021/09/01/BlockCipher2/6.png" alt="6"></p><p>这边说一下，这里的$01,02,03$代表着$(1,x,x+1)$，整个式子的计算是基于$GF(256)$的多项式运算，也就是说如果$B_0&#x3D;99$，那么就是转化成$x^6+x^5+x+1$，然后最后还是对$x^8+x^4+x^3+x+1$取模即可。计算出来的多项式再转化成数字即可得到$C_0$到$C_3$的值。</p><p>当然，我们还可以通过$B_4,B_9,B_{14},B_3$，用组合成列向量，然后用相同的矩阵得到$C_4$到$C_7$的值，以此类推。</p><p>最后对得到的十六个$C$值（每个数八位，因此一共是$128$位）组合在一起，对密钥异或即可。完成一轮的加密。</p><h3 id="0o04-密钥编排"><a href="#0o04-密钥编排" class="headerlink" title="0o04 密钥编排"></a>0o04 密钥编排</h3><p>下面我们以$128$位密钥编排为例，$192,256$位密钥编排只需要把一行四组换成六组、八组即可，总轮数换成十二轮和十四轮即可。</p><p><img src="/2021/09/01/BlockCipher2/7.png" alt="7"></p><p>这边$RC[i]$也提一下，实际上就是$x$的$i$次方，这里分别需要用到$0,x^1,x^2,…,x^9$，模多项式为$x^8+x^4+x^3+x+1$。因此$x^8\equiv x^4+x^3+x+1$，$x^9\equiv x^5+x^4+x^2+x$。这边这个$g$函数的目的也是增加密钥编排的非线性内容。 </p><h3 id="0o05-解密过程"><a href="#0o05-解密过程" class="headerlink" title="0o05 解密过程"></a>0o05 解密过程</h3><p>作为对称密码，解密过程与与加密过程差不多是一致的。</p><p><img src="/2021/09/01/BlockCipher2/8.png" alt="8"></p><p>所以，我们只需要将我们加密中所做的内容逆回去即可。</p><p>下面是解密过程</p><p><img src="/2021/09/01/BlockCipher2/9.png" alt="9"></p><p>因此密钥加法还是轮密钥与密文异或，逆向MixColumn与逆向ShiftRow也是一个可逆过程，直接乘上逆矩阵，做逆变换即可。</p><p><img src="/2021/09/01/BlockCipher2/10.png" alt="10"></p><p>逆矩阵的内容如下，这边的$0EH,0BH,0DH,09H$仍然是$GF(256)$中的多项式，可以逆回$B$。</p><p>然后根据变换$(0,13,10,7,4,1,14,11,8,5,2,15,12,9,6,3)$的变换规则，得到所有逆向shiftrow后的$B$值，最后根据逆向后的所有$B$值获取$A$值。</p><p>那么我们也可以获得$S^{-1}$</p><p><img src="/2021/09/01/BlockCipher2/11.png" alt="11"></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XiangYunCupWP</title>
    <link href="/2021/08/30/XiangYunCupWP/"/>
    <url>/2021/08/30/XiangYunCupWP/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-祥云杯密码题wp"><a href="#huangx607087-祥云杯密码题wp" class="headerlink" title="huangx607087 祥云杯密码题wp"></a>huangx607087 祥云杯密码题wp</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>前几天打了一下祥云杯的密码题，4道题目，在别人指指点点下，写了三道题，这几天完善一下自己的wp</p><h2 id="1-Guess"><a href="#1-Guess" class="headerlink" title="1.Guess"></a>1.Guess</h2><p>拿到题目后，先审计一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task.py</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> (<br>    bytes_to_long,<br>    getPrime,<br>    long_to_bytes,<br>    getRandomNBitInteger,<br>)<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">import</span> socketserver<br>KEYSIZE = <span class="hljs-number">512</span><br>WELCOME = <span class="hljs-string">&quot;welcome to my funny challenge !!! Can you guess right 32 times in a row? &quot;</span><br>String = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, a<br>    <span class="hljs-keyword">else</span>:<br>        x, y, q = exgcd(b, a % b)<br>        x, y = y, (x - (a // b) * y)<br>        <span class="hljs-keyword">return</span> x, y, q<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">invert</span>(<span class="hljs-params">a,p</span>):<br>    x, y, q = exgcd(a,p)<br>    <span class="hljs-keyword">if</span> q != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No solution.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (x + p) % p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lcm</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> a*b // gcd(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>():<br>    STR = <span class="hljs-string">&quot;&quot;</span>.join([String[random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(String) - <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)])<br>    HASH = hashlib.sha256(STR.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> STR[:<span class="hljs-number">4</span>], STR[<span class="hljs-number">4</span>:], HASH<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    <span class="hljs-comment"># part 1</span><br>    p, q = getPrime(KEYSIZE), getPrime(KEYSIZE)<br>    n = p * q<br>    g = n + <span class="hljs-number">1</span><br>    LAMBDA = lcm(p - <span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># part 2</span><br>    _key = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br>    key = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> _key.split(<span class="hljs-string">&quot;\n&quot;</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot; &quot;</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(j) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>                key.append(<span class="hljs-built_in">int</span>(j))<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(key) == <span class="hljs-number">80</span><br>    <span class="hljs-keyword">assert</span> key[<span class="hljs-number">0</span>] == <span class="hljs-number">119</span> <span class="hljs-keyword">and</span> key[<span class="hljs-number">1</span>] ==  <span class="hljs-number">241</span> <span class="hljs-keyword">and</span> key[<span class="hljs-number">2</span>] ==  <span class="hljs-number">718</span> <span class="hljs-keyword">and</span> key[<span class="hljs-number">3</span>] == <span class="hljs-number">647</span><br>    <span class="hljs-keyword">return</span> n, g, LAMBDA, key<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">n, g, m</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        r = random.randint(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> gcd(r, n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    c = (<span class="hljs-built_in">pow</span>(g, m, n ** <span class="hljs-number">2</span>) * <span class="hljs-built_in">pow</span>(r, n, n ** <span class="hljs-number">2</span>)) % (n ** <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> c<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">n, g, LAMBDA, c</span>):<br>    L1 = (<span class="hljs-built_in">pow</span>(c, LAMBDA, n ** <span class="hljs-number">2</span>) - <span class="hljs-number">1</span>) // n<br>    L2 = (<span class="hljs-built_in">pow</span>(g, LAMBDA, n ** <span class="hljs-number">2</span>) - <span class="hljs-number">1</span>) // n<br>    m = (invert(L2, n) * L1) % n<br>    <span class="hljs-keyword">return</span> m<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">server</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recv</span>(<span class="hljs-params">self</span>):<br>        data = <span class="hljs-variable language_">self</span>.request.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">return</span> data.strip()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(msg, <span class="hljs-built_in">bytes</span>):<br>            msg += <span class="hljs-string">b&quot;\n&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            msg += <span class="hljs-string">&quot;\n&quot;</span><br>            msg = msg.encode()<br>        <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Service start.&quot;</span>)<br>        START, END, HASH = proof_of_work()<br>        <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;SHA-256(?+&#123;&#125;) == &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(END, HASH))<br>        RCV = <span class="hljs-variable language_">self</span>._recv().decode()<br>        <span class="hljs-keyword">if</span> RCV != START:<br>            <span class="hljs-keyword">return</span><br>        flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>        <span class="hljs-variable language_">self</span>._send(WELCOME)<br>        <span class="hljs-comment"># step 1. KeyGen</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;round &quot;</span> + <span class="hljs-built_in">str</span>(_+<span class="hljs-number">1</span>))<br>            n, g, LAM, KEY = keygen()<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Step 1 - KeyGen. This is my public key.&quot;</span>)<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;n = &quot;</span> + <span class="hljs-built_in">str</span>(n))<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;g = &quot;</span> + <span class="hljs-built_in">str</span>(g))<br>            <span class="hljs-comment"># step 2. Phase 1</span><br>            <span class="hljs-variable language_">self</span>._send(<br>                <span class="hljs-string">&quot;Step 2 - Phase 1. Now, you can give me one ciphertexts,I will return the corresponding plaintext.&quot;</span><br>            )<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Please give me one decimal ciphertext.&quot;</span>)<br>            cipher = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br>            plaintext = <span class="hljs-built_in">str</span>(dec(n, g, LAM, cipher))<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;This is the corresponding plaintext.&quot;</span>)<br>            <span class="hljs-variable language_">self</span>._send(plaintext)<br><br>            <span class="hljs-comment"># step 3. challenge</span><br>            <span class="hljs-variable language_">self</span>._send(<br>                <span class="hljs-string">&quot;Step 3 - Challenge. Now, you must give me two decimal plaintexts(m0,m1), I will encry them and return a ciphertext randomly&quot;</span><br>            )<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Give me m0.&quot;</span>)<br>            plaintext1 = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Give me m1.&quot;</span>)<br>            plaintext2 = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br><br>            <span class="hljs-keyword">if</span> (<br>                plaintext1 &lt;= <span class="hljs-number">2</span><br>                <span class="hljs-keyword">or</span> plaintext2 &lt;= <span class="hljs-number">2</span><br>                <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(plaintext1)) != <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(plaintext2))<br>            ):<br>                <span class="hljs-keyword">return</span><br>            R = <span class="hljs-number">2</span> * random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">39</span>)<br>            I = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>            cipher1 = enc(n, g, plaintext1 * plaintext2 * KEY[R])<br>            cipher2 = enc(n, g, plaintext1 * plaintext2 * KEY[R + <span class="hljs-number">1</span>])<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;This is a ciphertext.&quot;</span>)<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-built_in">str</span>([cipher1, cipher2][I]))<br>            <span class="hljs-comment"># step 4. Phase 2</span><br>            <span class="hljs-variable language_">self</span>._send(<br>                <span class="hljs-string">&quot;Step 4 - Phase 2. Now, you can give me some ciphertexts,I will return the corresponding plaintext.But you can not give me the ciphertext that I give you in step 3.&quot;</span><br>            )<br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Please give me one decimal ciphertext &quot;</span>)<br>            cipher = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br>            plaintext = <span class="hljs-built_in">str</span>(dec(n, g, LAM, cipher))<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(plaintext) == plaintext1 * plaintext2 * KEY[R] <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(plaintext) == plaintext1 * plaintext2 * KEY[R+<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;This is the corresponding plaintext.&quot;</span>)<br>            <span class="hljs-variable language_">self</span>._send(plaintext)<br>            <span class="hljs-comment"># step.5 Guess</span><br>            <span class="hljs-variable language_">self</span>._send(<br>                <span class="hljs-string">&quot;Step 5 - Guess. You must tell me which ciphertext was I give you in step 3, 0 or 1(m0 -&gt; c0 , m1 -&gt; c1)?&quot;</span><br>            )<br>            Guess = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br>            <span class="hljs-keyword">if</span> Guess == I:<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Good! You are right&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;Sorry!&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-variable language_">self</span>._send(flag)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-number">10001</span><br>    server = ForkedServer((HOST, PORT), server)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>然后题目还给出了一个key的加密方法，并给出了hint文件用于求key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getRandomNBitInteger<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    A = []<br>    key = random_matrix(ZZ, <span class="hljs-number">20</span>, <span class="hljs-number">4</span>, x = <span class="hljs-number">100</span>, y =<span class="hljs-number">1000</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> key[i,j] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> A:   <br>                A.append(key[i,j])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(A) == <span class="hljs-number">80</span>:<br>        <span class="hljs-keyword">break</span><br>hint = Matrix(key * vector([getRandomNBitInteger(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>))<br>Matrix(M* vector([randint(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>))<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-built_in">str</span>(key))<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hint&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-built_in">str</span>(hint))<br></code></pre></td></tr></table></figure><p><code>    key = random_matrix(ZZ, 20, 4, x = 100, y =1000)</code>这个代码表示在整数定义域内生成一个$20$行$4$列，定义域为整数的矩阵，其中矩阵中最小数字不小于$100$，最大数字不超过$1000$。然后又注意到hint又是一个<code>key*vector</code>的矩阵，其中<code>vector</code>中的所有数字都是$1024$个比特。</p><p>因此，通过这个key的加密方法我们可以看出：由于这里是右乘向量，因此这边所有的向量都是列向量。所以我们可以理解成一个$20$行$4$列的矩阵，乘上一个$4$行$12$列的矩阵，得到一个$20$行$12$列的矩阵。而最后的hint是$12$行$20$列。因此我们读入数据后，需要转置一下。</p><p>看到矩阵、又看到了非常小的数字（几百）和非常大的数字（$O(2^{1024})$级别的数字），因此很显然这里需要上一下LLL——问题是怎么上这个LLL还是个问题。</p><p>我们这就来简单地说一下这个是怎么做的。</p><p>由于小数与大数的线性组合，我们可以得到<br>$$<br>\sum_{i&#x3D;1}^{20} a_ix_i&#x3D;S_H<br>$$<br>因此，$(a_1,a_2,a_3,a_4,…,a_{20},0)$也是一个小向量，并且在数据规模相差巨大的情况下——可以认为这个是最短向量。</p><p>所以我们可以对读入后的$M$矩阵先进行随意打乱，然后随即调整LLL时的参数就可以得到题目中给出的四组解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">L</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1001</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hint.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>D=f.readlines()<br>Numbers=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> D:<br>    dataln=i[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>].split(<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dataln:<br>        Numbers.append(<span class="hljs-built_in">int</span>(j))<br>M=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(Numbers),<span class="hljs-number">20</span>):<br>    M.append(Numbers[i:i+<span class="hljs-number">20</span>])<br>Lns=[]<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(Lns)&lt;<span class="hljs-number">4</span>:<br>    shuffle(M)<br>    Mlll=matrix(<span class="hljs-number">12</span>,<span class="hljs-number">20</span>,M).LLL(delta=<span class="hljs-built_in">float</span>(randint(<span class="hljs-number">25000</span>, <span class="hljs-number">99999</span>)/<span class="hljs-number">100000</span>))<br>    <span class="hljs-keyword">for</span> dataln <span class="hljs-keyword">in</span> Mlll:<br>        <span class="hljs-keyword">if</span> dataln[<span class="hljs-number">0</span>]&lt;<span class="hljs-number">0</span>:<br>            dataln=-dataln<br>        <span class="hljs-keyword">if</span> dataln <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> Lns <span class="hljs-keyword">and</span> check(dataln):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(Lns),dataln)<br>            Lns.append(dataln)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Output:</span><br><span class="hljs-string">0 (241, 232, 548, 400, 186, 333, 646, 727, 286, 877, 810, 121, 237, 745, 201, 542, 244, 396, 158, 641)</span><br><span class="hljs-string">1 (119, 521, 142, 637, 614, 746, 299, 416, 638, 288, 995, 498, 639, 585, 114, 885, 558, 783, 899, 751)</span><br><span class="hljs-string">2 (718, 550, 349, 939, 148, 355, 942, 685, 313, 577, 184, 130, 307, 983, 611, 903, 271, 530, 566, 427)</span><br><span class="hljs-string">3 (647, 918, 613, 936, 461, 281, 977, 888, 128, 653, 309, 780, 526, 216, 944, 123, 430, 860, 113, 129)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>解出所有的key之后，我们就可以根据题目assert的内容，重新调整key中所有数字的内容，这是最终调整出来的真正的key数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">key=[<span class="hljs-number">119</span>, <span class="hljs-number">241</span>, <span class="hljs-number">718</span>, <span class="hljs-number">647</span>, <span class="hljs-number">521</span>, <span class="hljs-number">232</span>, <span class="hljs-number">550</span>, <span class="hljs-number">918</span>, <span class="hljs-number">142</span>, <span class="hljs-number">548</span>, <span class="hljs-number">349</span>, <span class="hljs-number">613</span>, <span class="hljs-number">637</span>, <span class="hljs-number">400</span>, <span class="hljs-number">939</span>, <span class="hljs-number">936</span>, <span class="hljs-number">614</span>, <span class="hljs-number">186</span>, <span class="hljs-number">148</span>, <span class="hljs-number">461</span>, <span class="hljs-number">746</span>, <span class="hljs-number">333</span>, <span class="hljs-number">355</span>, <span class="hljs-number">281</span>, <span class="hljs-number">299</span>, <span class="hljs-number">646</span>, <span class="hljs-number">942</span>, <span class="hljs-number">977</span>, <span class="hljs-number">416</span>, <span class="hljs-number">727</span>, <span class="hljs-number">685</span>, <span class="hljs-number">888</span>, <span class="hljs-number">638</span>, <span class="hljs-number">286</span>, <span class="hljs-number">313</span>, <span class="hljs-number">128</span>, <span class="hljs-number">288</span>, <span class="hljs-number">877</span>, <span class="hljs-number">577</span>, <span class="hljs-number">653</span>, <span class="hljs-number">995</span>, <span class="hljs-number">810</span>, <span class="hljs-number">184</span>, <span class="hljs-number">309</span>, <span class="hljs-number">498</span>, <span class="hljs-number">121</span>, <span class="hljs-number">130</span>, <span class="hljs-number">780</span>, <span class="hljs-number">639</span>, <span class="hljs-number">237</span>, <span class="hljs-number">307</span>, <span class="hljs-number">526</span>, <span class="hljs-number">585</span>, <span class="hljs-number">745</span>, <span class="hljs-number">983</span>, <span class="hljs-number">216</span>, <span class="hljs-number">114</span>, <span class="hljs-number">201</span>, <span class="hljs-number">611</span>, <span class="hljs-number">944</span>, <span class="hljs-number">885</span>, <span class="hljs-number">542</span>, <span class="hljs-number">903</span>, <span class="hljs-number">123</span>, <span class="hljs-number">558</span>, <span class="hljs-number">244</span>, <span class="hljs-number">271</span>, <span class="hljs-number">430</span>, <span class="hljs-number">783</span>, <span class="hljs-number">396</span>, <span class="hljs-number">530</span>, <span class="hljs-number">860</span>, <span class="hljs-number">899</span>, <span class="hljs-number">158</span>, <span class="hljs-number">566</span>, <span class="hljs-number">113</span>, <span class="hljs-number">751</span>, <span class="hljs-number">641</span>, <span class="hljs-number">427</span>, <span class="hljs-number">129</span>]<br></code></pre></td></tr></table></figure><p>解出这个key之后，我们就得到了里面所有的内容，然后看到题目中的代码是Paillier同态加密算法，这个算法有个特点就是它具有同态性。因为它的加密表达式为：<br>$$<br>c\equiv g^{m}r^{n} \pmod {n^{2}}<br>$$<br>其中$g,r$均为与$n$互质的随机数 ，是加密前已经确定好的内容了。因此我们如果已知$c_1$是$m_1$的加密结果，$c_2$是$m_2$的加密结果，那么$m_1+m_2$的加密的结果就是$c_1c_2$。</p><p>所以利用这一性质，我们只需要每次发送一个$m_{99}$，将$c$接收后发送个$c^2$过去，然后除以$2m_{99}^2$，判断一下最后解密出的值在key数组中下标的奇偶性就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> KEY3 <span class="hljs-keyword">import</span> key<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyzm</span>(<span class="hljs-params">s12,s64</span>):<br>s12,s64=s12.decode(),s64.decode()<br>Table=<span class="hljs-string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Table:<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> Table:<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> Table:<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> Table:<br>s4=i+j+k+l<br>s16=s4+s12<br><span class="hljs-keyword">if</span>(sha256(s16.encode()).hexdigest()==s64):<br><span class="hljs-keyword">return</span> s4<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recpas</span>(<span class="hljs-params">sh,T=<span class="hljs-number">1</span></span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>s=sh.recvline()<br><span class="hljs-keyword">return</span> s<br><span class="hljs-comment">#----------MAIN BELOW----------#</span><br>sh=remote(<span class="hljs-string">&quot;47.104.85.225&quot;</span>,<span class="hljs-number">57811</span>)<br>s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(s1)<br>sh.sendline(getyzm(s1[<span class="hljs-number">10</span>:<span class="hljs-number">22</span>],s1[<span class="hljs-number">27</span>:<span class="hljs-number">91</span>]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>m99=randint(<span class="hljs-number">3</span>,<span class="hljs-number">9001</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Round <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>/32 Begins with using m99=<span class="hljs-subst">&#123;m99&#125;</span>&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;n = &quot;</span>)<br>n=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>sh.recvuntil(<span class="hljs-string">b&quot;g = &quot;</span>)<br>g=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>recpas(sh,<span class="hljs-number">2</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;m99&#125;</span>\n&quot;</span>)<br>c99=<span class="hljs-built_in">int</span>(recpas(sh,<span class="hljs-number">2</span>))<br><span class="hljs-comment">#print(m99,c99)</span><br>recpas(sh,<span class="hljs-number">2</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;m99&#125;</span>\n&quot;</span>)<br>recpas(sh)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;m99&#125;</span>\n&quot;</span>)<br>c=<span class="hljs-built_in">int</span>(recpas(sh,<span class="hljs-number">2</span>))<br><span class="hljs-comment">#print(c)</span><br>recpas(sh,<span class="hljs-number">2</span>)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">pow</span>(c,<span class="hljs-number">2</span>,n**<span class="hljs-number">2</span>)&#125;</span>\n&quot;</span>)<br>m=<span class="hljs-built_in">int</span>(recpas(sh,<span class="hljs-number">2</span>))<br><span class="hljs-comment">#print(f&quot;&#123;m&#125;&quot;)</span><br>recpas(sh)<br>sh.send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key.index(m//(<span class="hljs-number">2</span>*m99**<span class="hljs-number">2</span>))%<span class="hljs-number">2</span>&#125;</span>\n&quot;</span>)<br><span class="hljs-built_in">print</span>(recpas(sh))<br>sh.interactive()<br><span class="hljs-comment">#flag&#123;e87fdfb6-8007-4e1c-861f-5bde3c8badb3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-myRSA"><a href="#2-myRSA" class="headerlink" title="2.myRSA"></a>2.myRSA</h2><p>题目代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># myRSA</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long <span class="hljs-keyword">as</span> b2l<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> socketserver<br>KEYSIZE = <span class="hljs-number">512</span><br>alpha = <span class="hljs-number">2.0314159265358979</span><br>WELCOME = <span class="hljs-string">&#x27;Welcome to use my better RSA!!!!!!So, what do you want now?&#x27;</span><br>menu = <span class="hljs-string">&#x27;1. encry \n2. getflag\n3. exit&#x27;</span><br>String = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>():<br>    STR = <span class="hljs-string">&#x27;&#x27;</span>.join([String[random.randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(String)-<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>) ])<br>    HASH = hashlib.sha256(STR.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> STR[:<span class="hljs-number">4</span>],STR[<span class="hljs-number">4</span>:],HASH<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_gen</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p,q = getPrime(KEYSIZE),getPrime(KEYSIZE)<br>        e = <span class="hljs-number">0x10001</span><br>        <span class="hljs-keyword">if</span> gcd(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)):<br>            <span class="hljs-keyword">break</span><br>    key = [getPrime(<span class="hljs-built_in">int</span>(KEYSIZE*alpha)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>)]<br>    <span class="hljs-keyword">return</span> (p,q,e),key<br><span class="hljs-comment"># encrypto</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encry</span>(<span class="hljs-params">message,key,p,q,e</span>):<br>    k1,k2 = key[random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>)],key[random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>)]<br>    x = p**<span class="hljs-number">2</span> * (p + <span class="hljs-number">3</span>*q - <span class="hljs-number">1</span> ) + q**<span class="hljs-number">2</span> * (q + <span class="hljs-number">3</span>*p - <span class="hljs-number">1</span>) <br>    y = <span class="hljs-number">2</span>*p*q + p + q<br>    z = k1 + k2 <br>    c = <span class="hljs-built_in">pow</span>(b2l(message),e,p*q)<br>    <span class="hljs-keyword">return</span> x * c + y * c + z<br><span class="hljs-comment"># get flag</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>(<span class="hljs-params">flag,key,p,q,e</span>):<br>    <span class="hljs-keyword">return</span> encry(flag,key,p,q,e)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">server</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recv</span>(<span class="hljs-params">self</span>):<br>        data = <span class="hljs-variable language_">self</span>.request.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">return</span> data.strip()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(msg , <span class="hljs-built_in">bytes</span>):<br>            msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            msg += <span class="hljs-string">&#x27;\n&#x27;</span><br>            msg = msg.encode()<br>        <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        START,END,HASH = proof_of_work()<br>        <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;SHA-256(?+&#123;&#125;) == &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(END,HASH))<br>        RCV = <span class="hljs-variable language_">self</span>._recv().decode()<br>        <span class="hljs-keyword">if</span> RCV != START:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&quot;I&#x27;m a CryptoRookie,so my Crypto system take time, please wait a minute XD!&quot;</span>)<br>        (p,q,e),key = key_gen()<br>        flag  = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>        <span class="hljs-variable language_">self</span>._send(WELCOME)<br>        <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;This is my public key:\nn = &#123;&#125;\ne = &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(p*q),<span class="hljs-built_in">str</span>(e)))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            <span class="hljs-variable language_">self</span>._send(menu)<br>            COI = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>._recv().decode())<br>            <span class="hljs-keyword">if</span> COI == <span class="hljs-number">1</span> :<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;Give me your message&#x27;</span>)<br>                message = <span class="hljs-variable language_">self</span>._recv()<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;Your encry message:&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-built_in">str</span>(encry(message,key,p,q,e)))<br>            <span class="hljs-keyword">elif</span> COI == <span class="hljs-number">2</span>:<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;This is your favourite:\n&#x27;</span>)<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-built_in">str</span>(encry(flag,key,p,q,e)))<br>            <span class="hljs-keyword">elif</span> COI == <span class="hljs-number">3</span>:<br>                <span class="hljs-variable language_">self</span>._send(<span class="hljs-string">&#x27;Bye~&#x27;</span>)<br>                <span class="hljs-keyword">break</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10001</span><br>    server = ForkedServer((HOST, PORT), server)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>先确定一下这些数字的大小：$p,q$都是$512$位，<code>key</code>数组中的所有数字都是$1040$位。$x&#x3D;p^2 (p + 3q - 1 ) + q^2  (q + 3p - 1)$，数量级大概是$1500$多位，$y&#x3D;2pq + p + q$，数量级大约是$1030$位。</p><p>所以$x+y&#x3D;(p+q)^3-(p+q)^2+(p+q)-4pq$。而$(p+q-1)^3&#x3D;(p+q)^3-3(p+q)^2+3(p+q)-1$，两者的值非常接近。</p><p>所以可以认为$\sqrt[3]{x+y}&#x3D;p+q-1$。然后对<code>flag</code>的值除以$(x+y)$即可。而$\dfrac{\ln z}{\ln 2}&#x3D;129$，因此$z$的值可以直接忽略。</p><h2 id="3-RandomRSA"><a href="#3-RandomRSA" class="headerlink" title="3.RandomRSA"></a>3.RandomRSA</h2><p>题目就是通过设置random的seed的方法，通过不断生成随机数，每一轮计算一个特定的随机数与<code>str(dp)</code>进行异或的值。</p><p>基本没什么难的内容，直接逆回去就行了，然后直接套已知dp的脚本，不过要用python2.7。</p><p><strong>chall.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br>flag=<span class="hljs-string">r&#x27;flag&#123;&#125;&#x27;</span><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>e=<span class="hljs-number">0x10001</span><br>n=p*q<br>ct=<span class="hljs-built_in">pow</span>(flag,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>+ n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ct=&quot;</span>+ ct)<br>dp=<span class="hljs-string">r&#x27;&#x27;</span><br>seeds = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(dp)):<br>    seeds.append(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10000</span>))<br>res = [] <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(dp)):<br>    random.seed(seeds[i])<br>    rands = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):<br>        rands.append(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))<br><br>    res.append(<span class="hljs-built_in">ord</span>(dp[i]) ^ rands[i%<span class="hljs-number">4</span>])<br>    <span class="hljs-keyword">del</span> rands[i%<span class="hljs-number">4</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(rands))<br><span class="hljs-built_in">print</span>(res) <br><span class="hljs-built_in">print</span>(seeds)<br><span class="hljs-comment"># n=81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span><br><span class="hljs-comment"># ct=61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span><br><span class="hljs-comment"># [58, 53, 122] [145, 124, 244] [5, 19, 192] [255, 23, 64] [57, 113, 194] [246, 205, 162] [112, 87, 95] [215, 147, 105] [16, 131, 38] [234, 36, 46] [68, 61, 146] [148, 61, 9] [139, 77, 32] [96, 56, 160] [121, 76, 17] [114, 246, 92] [178, 206, 60] [168, 147, 26] [168, 41, 68] [24, 93, 84] [175, 43, 88] [147, 97, 153] [42, 94, 45] [150, 103, 127] [68, 163, 62] [165, 37, 89] [219, 248, 59] [241, 182, 8] [140, 211, 146] [88, 226, 2] [48, 150, 56] [87, 109, 255] [227, 216, 65] [23, 190, 10] [5, 25, 64] [6, 12, 124] [53, 113, 124] [255, 192, 158] [61, 239, 5] [62, 108, 86] [123, 44, 64] [195, 192, 30] [30, 82, 95] [56, 178, 165] [68, 77, 239] [106, 247, 226] [17, 46, 114] [91, 71, 156] [157, 43, 182] [146, 6, 42] [148, 143, 161] [108, 33, 139] [139, 169, 157] [71, 140, 25] [28, 153, 26] [241, 221, 235] [28, 131, 141] [159, 111, 184] [47, 206, 11] [220, 152, 157] [41, 213, 97] [4, 220, 10] [77, 13, 248] [94, 140, 110] [25, 250, 226] [218, 102, 109] [189, 238, 66] [91, 18, 131] [23, 239, 190] [159, 33, 72] [183, 78, 208] [209, 213, 101] [111, 50, 220] [166, 104, 233] [170, 144, 10] [187, 87, 175] [195, 59, 104] [165, 179, 179] [99, 247, 153] [195, 61, 100] [223, 159, 165] [230, 93, 184] [87, 28, 35] [35, 122, 38] [158, 188, 163] [229, 192, 222] [12, 12, 192] [207, 95, 224] [127, 113, 137] [22, 114, 143] [13, 45, 144] [70, 140, 211] [57, 101, 42] [132, 62, 129] [40, 128, 124] [1, 132, 161] [164, 33, 133] [252, 201, 32] [8, 18, 247] [1, 88, 55] [201, 135, 186] [101, 254, 125] [236, 196, 39] [148, 24, 103] [101, 29, 253] [97, 156, 64] [90, 103, 91] [50, 48, 80] [206, 22, 93] [11, 114, 174] [61, 132, 247] [215, 32, 232] [95, 128, 90] [57, 35, 228] [163, 143, 107] [178, 250, 28] [64, 107, 225] [106, 115, 207] [85, 134, 21] [118, 201, 76] [234, 34, 22] [241, 236, 122] [111, 185, 127] [1, 26, 164] [254, 57, 117] [243, 27, 32] [161, 88, 80] [50, 165, 93] [87, 182, 216] [184, 159, 63] [167, 166, 123] [37, 78, 33] [186, 81, 58] [48, 3, 239] [70, 186, 13] [56, 108, 178] [54, 55, 235] [105, 180, 105] [16, 194, 98] [136, 11, 41] [18, 203, 79] [185, 114, 170] [148, 181, 223] [118, 57, 160] [23, 250, 181] [235, 219, 228] [44, 151, 38] [185, 224, 134] [42, 162, 122] [3, 9, 158] [129, 245, 2] [66, 241, 92] [80, 124, 36]</span><br><span class="hljs-comment"># [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]</span><br><span class="hljs-comment"># [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579]</span><br></code></pre></td></tr></table></figure><p><strong>6.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> *<span class="hljs-keyword">import</span> random<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res)):<br>random.seed(seeds[i])<br>arr=[]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>arr.append(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))<br>s+=<span class="hljs-built_in">chr</span>(res[i]^arr[i%<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(s)<span class="hljs-comment">#dp</span><br><span class="hljs-comment">#5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057</span><br></code></pre></td></tr></table></figure><p><strong>1.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span><br>c = <span class="hljs-number">61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span><br>dp=<span class="hljs-number">5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e):<br>    <span class="hljs-keyword">if</span>(e*dp%x==<span class="hljs-number">1</span>):<br>        p=(e*dp-<span class="hljs-number">1</span>)//x+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span>(n%p!=<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">continue</span><br>        q=n//p<br>        phin=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        d=invert(e, phin)<br>        m=powmod(c, d, n)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">continue</span><br>            <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;m:&quot;</span>,m)<br>        <span class="hljs-comment">#print(hex(m)[2:])</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:&quot;</span>,<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Result:</span><br><span class="hljs-string">m: 56006392793406549012915975207582000335336081517127286295437299100128144059518792192004013138662286717</span><br><span class="hljs-string">flag: b&#x27;flag&#123;74281db3-c6f0-e59a-4da6-39b8c71250fe&#125;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>这三道题还是有点难度的，祥云杯密码学是4道题目，还有一题不<del>是很</del>会做，等待着后期复现吧。。。</p><p>想不到大二就这么开始了，8月30日第一天上课，也在补我之前摸的鱼，有点累。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlockCipher1</title>
    <link href="/2021/08/30/BlockCipher1/"/>
    <url>/2021/08/30/BlockCipher1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习分组密码的笔记-1"><a href="#huangx607087学习分组密码的笔记-1" class="headerlink" title="huangx607087学习分组密码的笔记 1"></a>huangx607087学习分组密码的笔记 1</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>最近这种题型在CTF中出现得越来越多，看来还是有必要关注一下的，在这里写几篇笔记。</p><h2 id="1-DES"><a href="#1-DES" class="headerlink" title="1. DES"></a>1. DES</h2><h3 id="1o01-什么是DES"><a href="#1o01-什么是DES" class="headerlink" title="1o01 什么是DES"></a>1o01 什么是DES</h3><p>DES是一种使用$56$位密钥对$64$位长分组进行加密的密码，这也是一种对称密码，也就是其加密和解密使用相同的密钥，因此DES也是一种迭代算法。DES对铭文中每个分组的加密过程都包含16轮，且每一轮的操作完全相同，每一轮的密钥都不同，但每一轮的密钥都是由上一轮的密钥中推导出来的。</p><p>DES加密中，主要思想还是混淆与扩散：混淆是将密钥与密文之间的关系尽可能模糊——因此多数情况下的混淆就是元素替换。而扩散是为了隐藏明文的统计属性，从而将一个明文符号扩散道多个密文符号进行加密，其中最简单的一个方法就是某几位上进行置换。</p><p>下面是DES的流程图，可以看出一次DES 加密共使用了$16$次迭代，下面对图中的各部分进行分析。<strong>该图也被称为Feistel网络</strong></p><p><img src="/2021/08/30/BlockCipher1/1.png" alt="1"></p><h3 id="1o02-DES内部加密分析"><a href="#1o02-DES内部加密分析" class="headerlink" title="1o02 DES内部加密分析"></a>1o02 DES内部加密分析</h3><h4 id="Step-1-IP置换"><a href="#Step-1-IP置换" class="headerlink" title="Step 1 IP置换"></a>Step 1 IP置换</h4><p>首先是对明文的一个初始置换$\mathrm{IP}(x)$进行置换，其IP置换表如下，也就是将明文$64$位的第一位变成第$58$位，第二位变成第$50$位的一个涉及比特位置换的算法。</p><p><img src="/2021/08/30/BlockCipher1/2.png" alt="2"></p><p>与之对应地，由于是一对一的置换，故$\mathrm{IP}(x)$存在逆运算$\mathrm{IP}^{-1}(x)$，置换表如下图</p><p><img src="/2021/08/30/BlockCipher1/3.png" alt="3"></p><p>不过在这边值得注意的一点就是：与计数不同，第一位是最左边的一位，也就是计数中代表着$2^{63}$的那一位。</p><h4 id="Step-2-f-函数"><a href="#Step-2-f-函数" class="headerlink" title="Step 2 $f$函数"></a>Step 2 $f$函数</h4><p>$f$函数内部结构比较复杂，如图</p><p><img src="/2021/08/30/BlockCipher1/4.png" alt="4"></p><p>首先将右半部分$R$通过扩展$E$函数扩展到$48$位，然后与轮密钥异或后，分成$8$组，每组$6$比特，然后经过$s$盒置换后可以得到一个$32$比特位的值，经过$p$置换后获得加密后的密文。</p><p>扩展规则如下，可以看出有一半的比特位重复了$2$次——因为这样才能将$32$位内容扩展成$48$位</p><p><img src="/2021/08/30/BlockCipher1/5.png" alt="5"></p><p>分组后，每一组都是$6$比特，$6$比特转化成$4$比特的方法也很简单：第一位和第六位组合成行数，第二位到第五位组合成列数，如$\mathrm{101100B}$拆解后就是$\mathrm{10B}$和$\mathrm{0110B}$，对应$s$盒中的第二行第六列</p><p>八个$s$盒内的内容如图所示</p><p><img src="/2021/08/30/BlockCipher1/6.png" alt="6"></p><p><img src="/2021/08/30/BlockCipher1/7.png" alt="7"></p><p>$s$盒也是DES中唯一的非线性元素，因为$s(a)+s(b)$与$s(a+b)$不同。（此处的加号表示异或）</p><h3 id="1o03-DES密钥编排"><a href="#1o03-DES密钥编排" class="headerlink" title="1o03 DES密钥编排"></a>1o03 DES密钥编排</h3><p>DES的密钥编排，是先从原始的$56$位密钥中得到$16$个轮密钥$k_1,k_2,…k_{16}$，每个密钥$k_i$都是$48$位。不过在这里一个值得注意的特点就是：DES一开始的输入密钥是$64$位，八位一组，每一组的第八位是这一组的一个校验位（但这一位的意义何在不得而知）。因此实际上严格地说，DES实际上是$56$位，而不是$64$位。因为在密钥置换的时候，$64$位缩短为$56$位时，直接忽略了每一组的第八位。下表是DES初始密钥置换的表格。</p><p><img src="/2021/08/30/BlockCipher1/8.png" alt="8"></p><p>得到$56$位的密钥后，我们将密钥分为$C_0$和$D_0$两个部分，然后每一轮将每个长度为$28$位的密钥部分分别循环左移一至两位。（具体是在第$1,2,9,16$轮是循环左移一位，其他的轮都是循环左移两位。）而这样下来，我们就会发现在最后加密完成过后——$C_0&#x3D;C_{16},D_0&#x3D;D_{16}$。下图很清楚地表示了这一过程：</p><p><img src="/2021/08/30/BlockCipher1/9.png" alt="9"></p><p>在这里，PC-2置换是将$56$位的轮密钥转化成$48$位的轮密钥，转换规则如下</p><p><img src="/2021/08/30/BlockCipher1/10.png" alt="10"></p><h3 id="1o04-DES解密过程"><a href="#1o04-DES解密过程" class="headerlink" title="1o04 DES解密过程"></a>1o04 DES解密过程</h3><p>在解密过程中，由于我们在之前注意到$C_0&#x3D;C_{16},D_0&#x3D;D_{16}$的特点，因此我们可以在PC-1后直接得到$k_{16}$。</p><p><strong>图片S1之前文字渲染有乱码问题，故使用图片修正</strong></p><p><img src="/2021/08/30/BlockCipher1/S1.png" alt="S1"></p><p>而在解密过程中，第一轮密钥不移位，第二、九、十六轮密钥移位一位，其他轮密钥移位两位。用公式可以表示为<br>$$<br>k_{15}&#x3D;\mathrm{PC_2}(C_ {15},D_ {15})&#x3D;\mathrm{PC_2}(\mathrm{ror}(C_ {0}),\mathrm{ror}(D_ {0}))&#x3D;\mathrm{PC_2}(\mathrm{ror}(C_ {16}),\mathrm{ror}(D_ {16}))<br>$$<br>上面公式中，$\mathrm {ror,lor}$分别表示循环右移和循环左移，移动位数规则刚才已经提到过了。</p><p>整个解密过程差不多是这张图：</p><p><img src="/2021/08/30/BlockCipher1/11.png" alt="11"></p><p>而在我们上面提到的Feistel网络中：我们需要用到IP置换的逆置换来解决问题。即<br>$$<br>(L_{D0},R_{D0})&#x3D;\mathrm{IP}(\mathrm{IP}^{-1}(R_{16},L_{16}))&#x3D;(R_{16},L_{16})<br>$$<br>其中下标有$D$的表示解密过程中的变量。注意到上面的Feistel网络中，有$L_{16}&#x3D;R_{15}$。因此我们可以推出：<br>$$<br>(L_{D0},R_{D0})&#x3D;(R_{16},L_{16})&#x3D;(R_{16},R_{15})<br>$$<br>对应地，根据加密的Feistel网络，我们解密的Feistel网络密钥，很容易可以得到<br>$$<br>L_{D1}&#x3D;R_{D0}&#x3D;L_{16}&#x3D;R_{15}<br>$$<br>不过$R_{D1}$就不是那么好算了，这里还是要用到上面提到过的刚才的$f$函数。（<strong>以下出现得加号表示异或</strong>），该计算方法可以根据异或的特性得到。<br>$$<br>R_{D1}&#x3D;L_{D0}+f(R_{D0},k_{16})&#x3D;R_{16}+f(L_{16},k_{16})<br>$$<br>带入$R_{16}&#x3D;L_{15}+f(R_{15},k_{16})$，因此有<br>$$<br>R_{D1}&#x3D;L_{15}+f(R_{15},k_{16})+f(L_{16},k_{16})<br>$$<br>又因为$R_{15}&#x3D;L_{16}$，因此$f(R_{15},k_{16})+f(L_{16},k_{16})&#x3D;0$。所以我们最终得到<br>$$<br>R_{D1}&#x3D;L_{15}<br>$$<br>因此，即使$f$函数看似复杂，但最后得出来的结果却可以消去$f$函数。因此我们可以直接迭代，最终得到<br>$$<br>(L_{Di},R_{Di})&#x3D;(R_{16-i},L_{16-i})<br>$$<br>因此这是一个非常容易的过程。</p><p>最终，我们只需要对解密后的结果计算$\mathrm{IP}^{-1}(x)$函数的处理即可获得明文。注意到一开始已经提到，由于$\mathrm{IP}(x)$是对$64$个比特位一对一的置换，因此直接对照$\mathrm{IP}^{-1}(x)$的表格置换回去即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CryptoCTF Wp 3</title>
    <link href="/2021/08/09/CryptoCTFWriteUp3/"/>
    <url>/2021/08/09/CryptoCTFWriteUp3/</url>
    
    <content type="html"><![CDATA[<h1 id="CryptoCTF-WriteUp-3-By-huangx607087"><a href="#CryptoCTF-WriteUp-3-By-huangx607087" class="headerlink" title="CryptoCTF WriteUp 3 By huangx607087"></a>CryptoCTF WriteUp 3 By huangx607087</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>这两天又试着做了两题，越来越难，也不知道为什么突然想出去玩了，整天就想着摸鱼，还有玩自己的bot。自己也觉得目前这种高压下确实也学不下去了。。CryptoCTF，10天时间，共27题（不包括两个签到题），做了12题，才发现自己AES还没怎么学，过几天得学了。</p><h2 id="1-Ferman"><a href="#1-Ferman" class="headerlink" title="1.Ferman"></a>1.Ferman</h2><p>题目没有给什么附件，也没给什么别的东西，连上去也就是获得了这些内容：事后发现每次连上去的内容都不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>e = <span class="hljs-number">65537</span><br>isPrime(p) = <span class="hljs-literal">True</span><br>isPrime(q) = <span class="hljs-literal">True</span><br>n = p * q<br>(p - <span class="hljs-number">68</span>)**<span class="hljs-number">2</span> + (q - <span class="hljs-number">21</span>)**<span class="hljs-number">2</span> = <span class="hljs-number">3269551398869642512241103339368232143434651590868728507355028871910904078338475713578589303262711916750081690332228411866186437460090515664367924851061597536376468220126174928460974557959918017310829528466648372027415953708229130137453296795856556992151797166136297164760842319106620707383001374254866888310103550740311206689346583293426983738736830982428061012656462973476605155219794719926468254375880711360433969868621585139970748294149897216559703209916963866764044804843930101</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>encrypt(flag) = <span class="hljs-number">1129211205327521826941184390751899392925131920702773335891856613366505909410806899952280135028258342388876508412491223980744621251519356334925886554708700046795586651759818594942792724304963126886525647156824946261462652999258718878583493830408651605063608560126743568477583982018994138693209851132638425082838330606425689175153335674463330275554714300992424492537349839226295570411855545265032582057186364143746536638616951994802510125990494183100416729103612848938139639080478806</span><br><br></code></pre></td></tr></table></figure><p>很显然，这里有一个平方和的形式$(p-68)^{2}+(q-21)^{2}$，想到之前在数论概论上看到过关于将某个素数拆成$2$个数的平方和的算法，因此猜测这里可能会用得到。</p><p>但是很显然，等号右边的这个数字<del>我感觉看起来</del>不是素数——因此我分解了一下它：这个数的表达式为<br>$$<br>p^7q^7&#x3D;881^7×501130658240331371910024384924248009800259836627015214670629231821^7<br>$$<br>看来是一个数的$7$次方，并且这两个素数都满足模$4$余$1$的条件，因此可以分解成两个平方和。</p><p>其中：$p&#x3D;25^2+16^2$，$q&#x3D;707783305101597694376018027941686^2+13170089589294489230801449847315^2$。</p><p>然后自己就根据数上的方法，设$g&#x3D;p^3q^3$，然后用公式$(u^2+v^2)(a^2+b^2)&#x3D;(ua+vb)^2+(va-ub)^2$，然后将两个平方项同时乘上$g$，然后检验的时候发现了问题——构造出来的平方和确实等于等号右边的数值（设为$x$），但两个数无论是加上$68$还是加上$21$，都不是素数。</p><p>然后我调换了一下$a,b,u,v$的位置，用同样的方法试了一下，貌似还是不对——或许，一些合数拆解成平方和的时候，也许有不同的方法。从原理上来讲，将一个素数拆解平方和的原理是基于的复数计算：$p&#x3D;(a+b\mathrm i)(a-b\mathrm i)&#x3D;a^2+b^2$。因此，对于上面两个数来说，可以写成如此的形式：$x&#x3D;p^7q^7&#x3D;(a+b\mathrm i)^7(a-b\mathrm i)^7(c+d\mathrm i)^7(c-d\mathrm i)^7$。因此，最终的$x$可以由这4个复数可以自由组合。构成一堆共轭复数，其乘积为$x$。</p><p>因此我们直接枚举其指数即可，但考虑到每一次的$(a,b),(u,v)$的取值不敢定，因此这$4$种情况也要考虑一下，所以到最后一共大概是$16384$种情况，直接枚举指数即可。</p><p>不过据说sagemath可以解$x^2+y^2&#x3D;k$的情况，但解不出$x^2+y^2&#x3D;k^7$的情况，我这里未实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,x,y=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>.real=x<br>        <span class="hljs-variable language_">self</span>.imag=y<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Pr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.real,<span class="hljs-variable language_">self</span>.imag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cmul</span>(<span class="hljs-params">a,b</span>):<br>    Real=a.real*b.real-a.imag*b.imag<br>    Imag=a.real*b.imag+b.real*a.imag<br>    <span class="hljs-keyword">return</span> Complex(Real,Imag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cpow</span>(<span class="hljs-params">a,e</span>):<br>    Res=Complex(<span class="hljs-number">1</span>)<br>    e=<span class="hljs-built_in">bin</span>(e)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>        Res=Cmul(Res,Res)<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-string">&#x27;1&#x27;</span>:<br>            Res=Cmul(Res,a)<br>    <span class="hljs-keyword">return</span> Res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Extract</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">if</span> a.imag*a.real==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(a.imag),<span class="hljs-built_in">abs</span>(a.real))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">p,q</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> q==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (p&amp;<span class="hljs-number">1</span>)==(q&amp;<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> p&amp;<span class="hljs-number">1</span>&gt;q&amp;<span class="hljs-number">1</span>:<br>        p,q=q,p<br>    <span class="hljs-comment">#print(p+21,q+68)</span><br>    <span class="hljs-keyword">if</span> isPrime(p+<span class="hljs-number">21</span>) <span class="hljs-keyword">and</span> isPrime(q+<span class="hljs-number">68</span>):<br>        <span class="hljs-keyword">return</span> p+<span class="hljs-number">21</span>,q+<span class="hljs-number">68</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">combine</span>(<span class="hljs-params">a,b,u,v</span>):<br>    z1,z2,z3,z4=Complex(a,b),Complex(a,-b),Complex(u,v),Complex(u,-v)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                   r,s=Complex(<span class="hljs-number">1</span>),Complex(<span class="hljs-number">1</span>)<br>                   r=Cmul(Cmul(Cmul(Cpow(z1,i),Cpow(z2,j)),Cpow(z3,k)),Cpow(z4,l))<br>                   s=Cmul(Cmul(Cmul(Cpow(z1,<span class="hljs-number">7</span>-i),Cpow(z2,<span class="hljs-number">7</span>-j)),Cpow(z3,<span class="hljs-number">7</span>-k)),Cpow(z4,<span class="hljs-number">7</span>-l))<br>                   <span class="hljs-keyword">assert</span> Extract(Cmul(r,s))==<span class="hljs-number">3269551398869642512241103339368232143434651590868728507355028871910904078338475713578589303262711916750081690332228411866186437460090515664367924851061597536376468220126174928460974557959918017310829528466648372027415953708229130137453296795856556992151797166136297164760842319106620707383001374254866888310103550740311206689346583293426983738736830982428061012656462973476605155219794719926468254375880711360433969868621585139970748294149897216559703209916963866764044804843930101</span><br>                   <span class="hljs-comment">#p,q=Extract(r),Extract(s)</span><br>                   p,q=r.real,r.imag<br>                   <span class="hljs-keyword">if</span> check(p,q):<br>                       <span class="hljs-built_in">print</span>(check(p,q))<br>a,b=<span class="hljs-number">25</span>, <span class="hljs-number">16</span><br>u,v=<span class="hljs-number">13170089589294489230801449847315</span>,<span class="hljs-number">707783305101597694376018027941686</span><br>combine(a,b,u,v)<br>combine(a,b,v,u)<br>combine(b,a,u,v)<br>combine(b,a,v,u)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p=1367291984765267853480661817191973536196367067942219441094381051490756487227187103253395714048175579203366540871321878072980687796968653546138925128020808999936761834389329636911488062911510719917508501565645614971839792438943508734857447351</span><br><span class="hljs-string">q=1183243012768846673615661480426536150503870303790817990055385067161241136558606680343879248138238749140297647629816389281594627601494973568019878375082598163753648048811668067008108623661611923189136565406992832328516940073816055184727720669</span><br><span class="hljs-string">&#x27;CCTF&#123;Congrats_Y0u_5OLv3d_x**2+y**2=z**7&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>当然，<code>combine</code>函数也可以这样优化一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">combine</span>(<span class="hljs-params">a,b,u,v</span>):<br>    z1,z2,z3,z4=Complex(a,b),Complex(a,-b),Complex(u,v),Complex(u,-v)<br>    <span class="hljs-built_in">print</span>(Extract(Cmul(z1,z2)),Extract(Cmul(z3,z4)))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            r,s=Complex(<span class="hljs-number">1</span>),Complex(<span class="hljs-number">1</span>)<br>            r=Cmul(Cmul(Cmul(Cpow(z1,i),Cpow(z2,<span class="hljs-number">7</span>-i)),Cpow(z3,k)),Cpow(z4,<span class="hljs-number">7</span>-k))<br>            s=Cmul(Cmul(Cmul(Cpow(z1,<span class="hljs-number">7</span>-i),Cpow(z2,i)),Cpow(z3,<span class="hljs-number">7</span>-k)),Cpow(z4,k))<br>            <span class="hljs-keyword">assert</span> r.imag == -s.imag<br>            <span class="hljs-keyword">assert</span> r.real == s.real<br>            <span class="hljs-keyword">if</span> check(<span class="hljs-built_in">abs</span>(r.real),<span class="hljs-built_in">abs</span>(r.imag)):<br>                <span class="hljs-built_in">print</span>(check(<span class="hljs-built_in">abs</span>(r.real),<span class="hljs-built_in">abs</span>(r.imag)))<br></code></pre></td></tr></table></figure><p>当然，这里再重现一下上次的将一共模$4$余$1$的素数分解成两个平方和的情形，即$p&#x3D;a^2+b^2$解$(a,b)$的情况，这个脚本之前在<strong>NumberTheory 3</strong>中出现过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getA</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">assert</span>(p%<span class="hljs-number">4</span>==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        t=bytes_to_long(urandom(<span class="hljs-number">195</span>))%p<br>        s=<span class="hljs-built_in">pow</span>(t,(p-<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(s,<span class="hljs-number">2</span>,p)==p-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAns</span>(<span class="hljs-params">A,B,M,p</span>):<br>    <span class="hljs-comment">#print(A,B,M,p)</span><br>    <span class="hljs-keyword">if</span>(M==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">abs</span>(A),<span class="hljs-built_in">abs</span>(B))<br>    <span class="hljs-comment">#print(A,B,M,p)</span><br>    u,v=A%M,B%M<br>    <span class="hljs-keyword">if</span>(u&gt;M//<span class="hljs-number">2</span>):<br>        u-=M<br>    <span class="hljs-keyword">if</span>(v&gt;M//<span class="hljs-number">2</span>):<br>        v-=M<br>    <span class="hljs-keyword">assert</span>((u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>)%M==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)%M==<span class="hljs-number">0</span> )<br>    r=(u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>)//M<br>    A2=(u*A+v*B)//M<br>    B2=(-u*B+v*A)//M<br>    <span class="hljs-keyword">return</span> getAns(A2,B2,r,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p</span>):<br>    A=getA(p)<br>    B=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span>(A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)%p==<span class="hljs-number">0</span><br>    M=(A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)//p<br>    <span class="hljs-keyword">return</span> getAns(A,B,M,p)<br><span class="hljs-built_in">print</span>(solve(<span class="hljs-number">881</span>))<br><span class="hljs-comment">#(25, 16)</span><br></code></pre></td></tr></table></figure><p>扩展：形如<br>$$<br>m&#x3D;M^2\prod_{i&#x3D;1}^n p_i<br>$$<br>的整数$m$可以写成两个平方和的形式，其中$p_i$是各不相同且模$4$余$1$的素数，$M$是整数</p><h2 id="2-maid"><a href="#2-maid" class="headerlink" title="2.maid"></a>2.maid</h2><p>先看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">global</span> nbit<br>nbit = <span class="hljs-number">1024</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">nbit</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p, q = [getStrongPrime(nbit) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;01&#x27;</span>]<br><span class="hljs-keyword">if</span> p % <span class="hljs-number">4</span> == q % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>:<br><span class="hljs-keyword">return</span> (p**<span class="hljs-number">2</span>)*q, p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, pubkey</span>):<br><span class="hljs-keyword">if</span> GCD(m, pubkey) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m &gt;= <span class="hljs-number">2</span>**(<span class="hljs-number">2</span>*nbit - <span class="hljs-number">2</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">2</span>, pubkey)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag_encrypt</span>(<span class="hljs-params">flag, p, q</span>):<br>m = bytes_to_long(flag)<br><span class="hljs-keyword">assert</span> m &lt; p * q<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, p * q)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">die</span>(<span class="hljs-params">*args</span>):<br>pr(*args)<br>quit()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(<span class="hljs-params">*args</span>):<br>s = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, args))<br>sys.stdout.write(s + <span class="hljs-string">&quot;\n&quot;</span>)<br>sys.stdout.flush()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sc</span>():<br><span class="hljs-keyword">return</span> sys.stdin.readline().strip()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>border = <span class="hljs-string">&quot;+&quot;</span><br>pr(border*<span class="hljs-number">72</span>)<br>pr(border, <span class="hljs-string">&quot;  hi all, welcome to Rooney Oracle, you can encrypt and decrypt any &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot;  message in this oracle, but the flag is still encrypted, Rooney   &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot;  asked me to find the encrypted flag, I&#x27;m trying now, please help! &quot;</span>, border)<br>pr(border*<span class="hljs-number">72</span>)<br>pubkey, privkey = keygen(nbit)<br>p, q = privkey, pubkey // (privkey ** <span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>pr(<span class="hljs-string">&quot;| Options: \n|\t[E]ncrypt message \n|\t[D]ecrypt ciphertext \n|\t[S]how encrypted flag \n|\t[Q]uit&quot;</span>)<br>ans = sc().lower()<br><span class="hljs-keyword">if</span> ans == <span class="hljs-string">&#x27;e&#x27;</span>:<br>pr(<span class="hljs-string">&quot;| Send the message to encrypt: &quot;</span>)<br>msg = sc()<br><span class="hljs-keyword">try</span>:<br>msg = <span class="hljs-built_in">int</span>(msg)<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&quot;| your message is not integer!!&quot;</span>)<br>pr(<span class="hljs-string">f&quot;| encrypt(msg, pubkey) = <span class="hljs-subst">&#123;encrypt(msg, pubkey)&#125;</span> &quot;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;d&#x27;</span>:<br>pr(<span class="hljs-string">&quot;| Send the ciphertext to decrypt: &quot;</span>)<br>enc = sc()<br><span class="hljs-keyword">try</span>:<br>enc = <span class="hljs-built_in">int</span>(enc)<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&quot;| your message is not integer!!&quot;</span>)<br>pr(<span class="hljs-string">f&quot;| decrypt(enc, privkey) = <span class="hljs-subst">&#123;decrypt(enc, privkey)&#125;</span> &quot;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;s&#x27;</span>:<br>pr(<span class="hljs-string">f&#x27;| enc = <span class="hljs-subst">&#123;flag_encrypt(flag, p, q)&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;q&#x27;</span>:<br>die(<span class="hljs-string">&quot;Quitting ...&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;Bye ...&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>可以看出：$p\equiv q\equiv 3 \pmod 4$，因此若$x^2\equiv a \pmod p$，那么可以直接得到$x\equiv a^{(p+1)&#x2F;4} \pmod p$。</p><p>题目给出了公钥是$n&#x3D;p^2q$，私钥是$p$，而这里我们可以自定义明文$m$，题目返回$c\equiv m^2 \pmod n$，并且如果我们发送$c$，服务器也可以给我们返回解密的结果$m$。——不过解密函数这里并没有告诉我们。</p><p>我们发现这里的指数是$2$，一开始我手动发送了个$10$进行加密，服务器返回了$100$，说明也仅仅是平方而已，如果不取模，我们可以直接通过二分的方法爆破$n&#x3D;p^2q$——因为总存在一个临界点$r$使得$r^2&lt;n,(r+1)^2&gt;n$，而这里$(r+1)^2$（真实值）减去服务器返回的取模后的值，就是我们所要求的$n$了。</p><p>不过据说也可以对服务器发送$m_0,k_1m_0,k_2m_0$，然后求公约数也可以，但这里$m$似乎很大的样子，因此我没有尝试过——但这确实只需要$3$次交互就能求出$n$，后期会尝试一下——因为整个二分爆破过程很长，用了$10$分钟。</p><p>然后我们就只需要一次解密即可——对服务器发送我们自己的密文$c’$，获得其解密结果$m’$，计算$\gcd(n,m’^2-c’)$。就有可能获得$p^2$的值，然后就能解密了。但这是个概率算法，据说成功与否与$c’$是否是$q$的二次剩余有关。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getsqrt</span>(<span class="hljs-params">x</span>):<br>L,R=<span class="hljs-number">0</span>,x<br><span class="hljs-keyword">while</span> L&lt;=R:<br>M=(L+R)//<span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> M**<span class="hljs-number">2</span> &gt;x:<br>R=M-<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> M**<span class="hljs-number">2</span>&lt;x:<br>L=M+<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> M<br>T1=<span class="hljs-built_in">str</span>(datetime.now())<br><span class="hljs-built_in">print</span>(T1)<br>sh=remote(<span class="hljs-string">&quot;04.cr.yp.toc.tf&quot;</span>,<span class="hljs-number">38010</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;]uit&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;s\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;c = &quot;</span>)<br>c=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-comment">#print(c)</span><br>L=<span class="hljs-number">1000000000000</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>sh.recvuntil(<span class="hljs-string">b&quot;]uit&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;e\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;rypt:&quot;</span>)<br>sh.send((<span class="hljs-built_in">str</span>(L)+<span class="hljs-string">&quot;\n&quot;</span>).encode())<br>sh.recvuntil(<span class="hljs-string">b&quot;key) =&quot;</span>)<br>rec=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;rec=&quot;</span>,rec)<br><span class="hljs-keyword">if</span> rec%<span class="hljs-number">100000000000000</span>!=<span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(L)<br><span class="hljs-keyword">break</span><br>L=L*<span class="hljs-number">1000</span><br>L,R=L//<span class="hljs-number">1000</span>,L<br><span class="hljs-keyword">while</span> L&lt;=R:<br><span class="hljs-built_in">print</span>(L,R)<br>M=(L+R)//<span class="hljs-number">2</span><br>sh.recvuntil(<span class="hljs-string">b&quot;]uit&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;e\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;rypt:&quot;</span>)<br>sh.send((<span class="hljs-built_in">str</span>(M)+<span class="hljs-string">&quot;\n&quot;</span>).encode())<br>sh.recvuntil(<span class="hljs-string">b&quot;key) =&quot;</span>)<br>rec=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-keyword">if</span> rec==M**<span class="hljs-number">2</span>:<br>L=M+<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>R=M-<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">8</span>,<span class="hljs-number">8</span>):<br><span class="hljs-built_in">print</span>(i)<br>x=M+i<br>sh.recvuntil(<span class="hljs-string">b&quot;]uit&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;e\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;rypt:&quot;</span>)<br>sh.send((<span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&quot;\n&quot;</span>).encode())<br>sh.recvuntil(<span class="hljs-string">b&quot;key) =&quot;</span>)<br>rec1=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br><span class="hljs-keyword">if</span> rec1!=x*x:<br>n=x*x-rec1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,x*x-rec1)<br><span class="hljs-keyword">break</span><br>Count,Judge=<span class="hljs-number">0</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> Judge==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> Judge==n:<br>Count+=<span class="hljs-number">1</span><br>testc=bytes_to_long(urandom(<span class="hljs-number">99</span>))<br>sh.recvuntil(<span class="hljs-string">b&quot;]uit&quot;</span>)<br>sh.send(<span class="hljs-string">b&quot;d\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">b&quot;rypt:&quot;</span>)<br>sh.send((<span class="hljs-built_in">str</span>(testc)+<span class="hljs-string">&quot;\n&quot;</span>).encode())<br>sh.recvuntil(<span class="hljs-string">b&quot;key) =&quot;</span>)<br>testm=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>Judge=GCD(n,testm*testm-testc)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Judge Found After&#x27;</span>+<span class="hljs-built_in">str</span>(Count)+<span class="hljs-string">&#x27;Times:&#x27;</span>,Judge)<br>p=getsqrt(Judge)<br>q=n//(p*p)<br><span class="hljs-keyword">assert</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),p*q)))<br>T2=<span class="hljs-built_in">str</span>(datetime.now())<br><span class="hljs-built_in">print</span>(T1)<br><span class="hljs-built_in">print</span>(T2)<br>sh.close()<br><span class="hljs-comment">#CCTF&#123;___Ra8!N_H_Cryp70_5YsT3M___&#125;</span><br><span class="hljs-comment">#Start Time: 2021-08-09 13:04:49.819341</span><br><span class="hljs-comment">#End Time  : 2021-08-09 13:16:40.294261</span><br><br></code></pre></td></tr></table></figure><p>整个交互过程跑一次$12$分钟，调了我$3$个多小时。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>CryptoCTF的这两道题目确实挺难的——主要是有的原理可能自己以前确实没有懂，加上自己太菜所导致的。</p><p>感觉后面的一些题目还是非常难的，至少到现在可能还是超出了自己的范围了，明天得开始学AES了。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CryptoCTF Wp 2</title>
    <link href="/2021/08/07/CryptoCTFWriteUp2/"/>
    <url>/2021/08/07/CryptoCTFWriteUp2/</url>
    
    <content type="html"><![CDATA[<h1 id="CryptoCTF-WriteUp-2-By-huangx607087"><a href="#CryptoCTF-WriteUp-2-By-huangx607087" class="headerlink" title="CryptoCTF WriteUp 2 By huangx607087"></a>CryptoCTF WriteUp 2 By huangx607087</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>再探CryptoCTF，这里面有些题目难度确实还是比较大的，这几天的解题进度也基本上是一天一题的进度吧，不过确实非常扩展思维的。<del>然而我这么菜的肯定比不上群里那些大佬们</del>。今天的RARCTF还有很多东西没看呢，事情的确多得有亿点点忙不过来了。</p><p>好在最近外面疫情严重，自己基本上也就一天待在家里，打CTF，配置Blockbot，摸鱼摸鱼在摸鱼，<del>Hadoop的项目还没测试呢</del>，院科协也有两天没打卡，<del>好在还是补上了</del>。</p><p>希望新学期能正常开学，我不想上网课，我只是期末想考61而已。</p><h2 id="1-Tuti"><a href="#1-Tuti" class="headerlink" title="1.Tuti"></a>1.Tuti</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br>l = <span class="hljs-built_in">len</span>(flag)<br>m_1, m_2 = flag[: l // <span class="hljs-number">2</span>], flag[l // <span class="hljs-number">2</span>:]<br>x, y = bytes_to_long(m_1), bytes_to_long(m_2)<br>k = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">000bfdc32162934ad6a054b4b3db8578674e27a165113f8ed018cbe91124fbd63144ab6923d107eee2bc0712fcbdb50d96fdf04dd1ba1b69cb1efe71af7ca08ddc7cc2d3dfb9080ae56861d952e8d5ec0ba0d3dfdf2d12764</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">assert</span>((x**<span class="hljs-number">2</span> + <span class="hljs-number">1</span>)*(y**<span class="hljs-number">2</span> + <span class="hljs-number">1</span>) - <span class="hljs-number">2</span>*(x - y)*(x*y - <span class="hljs-number">1</span>) == <span class="hljs-number">4</span>*(<span class="hljs-built_in">int</span>(k, <span class="hljs-number">16</span>) + x*y))<br></code></pre></td></tr></table></figure><p>很显然，这道题告诉你了两段密文之间的关系：$(x^2+1)(y^2+1)-2(x-y)(xy-1)&#x3D;4(k+xy)$。</p><p>第一反应肯定是要把$xy$之类的未知量移到等号一边，然后等号两边展开，自己就什么也看不出来了。</p><p>然后我想到了sagemath，这个东西可以分解因数，说不定可以分解因式呢——貌似确实可行，$4xy$移到左边后对左边式子的分解因式结果是$(x+1)^2(y+1)^2$，这确实是一个非常好的结果，很多大佬都是手搓的——然而自己就不行了，因为自己解一元二次方程如果二次项不为$1$自己就分解不出这个式子了（比如$2x^2+7x+3&#x3D;0$，笔者遇到直接上求根公式——<code>define huangx607087 fw</code>）。</p><p>然后对右边直接开平方就是$(x+1)(y+1)$的值了，至于分解右边的那个数字（实测是$14$个因数），根据$x,y$的位数差不多，在加上flag一定是可读字符，直接枚举各种可能性就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">len</span>(a)-<span class="hljs-built_in">len</span>(b))&gt;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> printable:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(i)) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> printable:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>k = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">000bfdc32162934ad6a054b4b3db8578674e27a165113f8ed018cbe9112</span><br><span class="hljs-string">4fbd63144ab6923d107eee2bc0712fcbdb50d96fdf04dd1ba1b69cb1efe</span><br><span class="hljs-string">71af7ca08ddc7cc2d3dfb9080ae56861d952e8d5ec0ba0d3dfdf2d12764</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>k=<span class="hljs-built_in">int</span>(k,<span class="hljs-number">16</span>)<br>mul=iroot(<span class="hljs-number">4</span>*k,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">assert</span> mul[<span class="hljs-number">1</span>]<br>mul=mul[<span class="hljs-number">0</span>]<br>S=[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">11</span>,<span class="hljs-number">19</span>,<span class="hljs-number">47</span>,<span class="hljs-number">71</span>,<span class="hljs-number">3449</span>,<span class="hljs-number">11953</span>,<span class="hljs-number">5485619</span>,<span class="hljs-number">2035395403834744453</span>,<span class="hljs-number">17258104558019725087</span>,<span class="hljs-number">1357459302115148222329561139218955500171643099</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">14</span>):<br>    M1,M2=<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>        <span class="hljs-keyword">if</span> i&amp;(<span class="hljs-number">1</span>&lt;&lt;j):<br>            M1*=S[j]<br>        <span class="hljs-keyword">else</span>:<br>            M2*=S[j]<br>    a,b=long_to_bytes(M1-<span class="hljs-number">1</span>),long_to_bytes(M2+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span>(check(a,b)):<br>        <span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment">#CCTF&#123;S1mPL3_4Nd_N!cE_Diophantine_EqUa7I0nS!&#125;</span><br></code></pre></td></tr></table></figure><p>最后解出来为什么又是丢番图方程，看来CryptoCTF出题人对丢番图情有独钟啊，这让我想起来当年那个科协里的那个对话</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">A:</span>让我们讨论一下丢番图<br><span class="hljs-symbol">B:</span>番图是什么，为什么要丢掉<br></code></pre></td></tr></table></figure><h2 id="2-RSAphantine"><a href="#2-RSAphantine" class="headerlink" title="2.RSAphantine"></a>2.RSAphantine</h2><p><del>看名字，很明显，又是跟丢番图有关的</del></p><p>题目就给出了一个方程组，和一个RSA加密的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">2</span>*z**<span class="hljs-number">5</span> - x**<span class="hljs-number">3</span> + y*z = <span class="hljs-number">47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613520747411963822349374260144229698759495359592287331083229572369186844312169397998958687629858407857496154424105344376591742814310010312178029414792153520127354594349356721</span><br>x**<span class="hljs-number">4</span> + y**<span class="hljs-number">5</span> + x*y*z = <span class="hljs-number">89701863794494741579279495149280970802005356650985500935516314994149482802770873012891936617235883383779949043375656934782512958529863426837860653654512392603575042842591799236152988759047643602681210429449595866940656449163014827637584123867198437888098961323599436457342203222948370386342070941174587735051</span><br>y**<span class="hljs-number">6</span> + <span class="hljs-number">2</span>*z**<span class="hljs-number">5</span> + z*y = <span class="hljs-number">47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613609786612391835856376321085593999733543104760294208916442207908167085574197779179315081994735796390000652436258333943257231020011932605906567086908226693333446521506911058</span><br>p = nextPrime(x**<span class="hljs-number">2</span> + z**<span class="hljs-number">2</span> + y**<span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">76</span>)<br>q = nextPrime(z**<span class="hljs-number">2</span> + y**<span class="hljs-number">3</span> - y*x*z ^ <span class="hljs-number">67</span>)<br>n, e = p * q, <span class="hljs-number">31337</span><br>m = bytes_to_long(FLAG)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>c = <span class="hljs-number">486675922771716096231737399040548486325658137529857293201278143425470143429646265649376948017991651364539656238516890519597468182912015548139675971112490154510727743335620826075143903361868438931223801236515950567326769413127995861265368340866053590373839051019268657129382281794222269715218496547178894867320406378387056032984394810093686367691759705672</span><br><br></code></pre></td></tr></table></figure><p>第一次乍一看，似乎并没有什么思路，因为三个都是高次方程的组合，三个未知数，确实是求不出来了的。想要消元降次也几乎不可能——因为自己实测过了（</p><p>不过这个时候可以把重点聚焦到第一个和第三个式子上，因为第一个式子和第三个式子都有公共的部分就是$2z^5$，并且这两个式子算出来的结果有很长的高位时相同的，这确实是一个令人怀疑的地方——因此，我们可以猜测：对这两个数字除以$2$后直接开五次方，那么就可以得出$z$的准确值。</p><p>事实上确实如此，借助python中的iroot直接开根——可以发现这两个数字除以$2$后开五次方根的结果是一样的，而这个数字我们可以认为是解出来的$z$值——事实上解出来确实如此。</p><p>解出来之后，$x,y$两个数字就可以很容易地求出来了——我这边用的是$y^6+zy&#x3D;a_3-2z^5$这个式子通过二分得出结果的，当然也可以用其他的办法求$y$，求出$y$后就可以直接求$x$了，不过最后$x$是负的令我没想到，但assert对了那就说明没问题了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot,next_prime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a1=<span class="hljs-number">47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613520747411963822349374260144229698759495359592287331083229572369186844312169397998958687629858407857496154424105344376591742814310010312178029414792153520127354594349356721</span><br>a2=<span class="hljs-number">89701863794494741579279495149280970802005356650985500935516314994149482802770873012891936617235883383779949043375656934782512958529863426837860653654512392603575042842591799236152988759047643602681210429449595866940656449163014827637584123867198437888098961323599436457342203222948370386342070941174587735051</span><br>a3=<span class="hljs-number">47769864706750161581152919266942014884728504309791272300873440765010405681123224050402253883248571746202060439521835359010439155922618613609786612391835856376321085593999733543104760294208916442207908167085574197779179315081994735796390000652436258333943257231020011932605906567086908226693333446521506911058</span><br>Tz1,Tz3=iroot(a1//<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)[<span class="hljs-number">0</span>],iroot(a3//<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">assert</span> Tz1==Tz3<br>z=Tz1<br>x,y=<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span><br>L,R=<span class="hljs-number">0</span>,<span class="hljs-number">10</span>**<span class="hljs-number">1000</span><br><span class="hljs-keyword">while</span> L&lt;=R:<br>    M=(L+R)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span>(M**<span class="hljs-number">6</span>+M*z&lt;a3-<span class="hljs-number">2</span>*z**<span class="hljs-number">5</span>):<br>        L=M+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(M**<span class="hljs-number">6</span>+M*z&gt;a3-<span class="hljs-number">2</span>*z**<span class="hljs-number">5</span>):<br>        R=M-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(M**<span class="hljs-number">6</span>+M*z==a3-<span class="hljs-number">2</span>*z**<span class="hljs-number">5</span>):<br>        y=M<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">assert</span> y**<span class="hljs-number">6</span>+<span class="hljs-number">2</span>*z**<span class="hljs-number">5</span>+z*y==a3<br>x=iroot(a1-<span class="hljs-number">2</span>*z**<span class="hljs-number">5</span>-y*z,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">assert</span> x[<span class="hljs-number">1</span>]<br>x=-x[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">assert</span> x**<span class="hljs-number">4</span> + y**<span class="hljs-number">5</span> + x*y*z ==a2<br>p = next_prime(x**<span class="hljs-number">2</span> + z**<span class="hljs-number">2</span> + y**<span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">76</span>)<br>q = next_prime(z**<span class="hljs-number">2</span> + y**<span class="hljs-number">3</span> - y*x*z ^ <span class="hljs-number">67</span>)<br>c=<span class="hljs-number">486675922771716096231737399040548486325658137529857293201278143425470143429646265649376948017991651364539656238516890519597468182912015548139675971112490154510727743335620826075143903361868438931223801236515950567326769413127995861265368340866053590373839051019268657129382281794222269715218496547178894867320406378387056032984394810093686367691759705672</span><br>d=inverse(<span class="hljs-number">31337</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,p*q)))<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag=CCTF&#123;y0Ur_jO8_C4l13D_Diophantine_An4LySI5!&#125;</span><br><span class="hljs-string">x=-97319611529501810510904538298668204056042623868316550440771307534558768612892</span><br><span class="hljs-string">y=311960913464334198969500852124413736815</span><br><span class="hljs-string">z=29896806674955692028025365368202021035722548934827533460297089</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-Onlude"><a href="#3-Onlude" class="headerlink" title="3.Onlude"></a>3.Onlude</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">global</span> p, alphabet<br>p = <span class="hljs-number">71</span><br>alphabet = <span class="hljs-string">&#x27;=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$!?_&#123;&#125;&lt;&gt;&#x27;</span><br>flag = flag.lstrip(<span class="hljs-string">&#x27;CCTF&#123;&#x27;</span>).rstrip(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">24</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross</span>(<span class="hljs-params">m</span>):<br><span class="hljs-keyword">return</span> alphabet.index(m)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare</span>(<span class="hljs-params">msg</span>):<br>A = zero_matrix(GF(p), <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(msg)):<br>i, j = <span class="hljs-number">5</span>*k // <span class="hljs-number">11</span>, <span class="hljs-number">5</span>*k % <span class="hljs-number">11</span><br>A[i, j] = cross(msg[k])<br><span class="hljs-keyword">return</span> A<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>R = random_matrix(GF(p), <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>S = random_matrix(GF(p), <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)<br><span class="hljs-keyword">if</span> S.rank() == <span class="hljs-number">11</span>:<br>_, L, U = S.LU()<br><span class="hljs-keyword">return</span> R, L, U<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">A, key</span>):<br>R, L, U = key<br>S = L * U<br>X = A + R<br>Y = S * X<br>E = L.inverse() * Y<br><span class="hljs-keyword">return</span> E<br>A = prepare(flag)<br>key = keygen()<br>R, L, U = key<br>S = L * U<br>E = encrypt(A, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;E = \n<span class="hljs-subst">&#123;E&#125;</span>&#x27;</span>)<span class="hljs-comment">#E</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;L * U * L = \n<span class="hljs-subst">&#123;L * U * L&#125;</span>&#x27;</span>)<span class="hljs-comment">#M1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;L^(-1) * S^2 * L = \n<span class="hljs-subst">&#123;L.inverse() * S**<span class="hljs-number">2</span> * L&#125;</span>&#x27;</span>)<span class="hljs-comment">#M2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;R^(-1) * S^8 = \n<span class="hljs-subst">&#123;R.inverse() * S**<span class="hljs-number">8</span>&#125;</span>&#x27;</span>)<span class="hljs-comment">#M10</span><br></code></pre></td></tr></table></figure><p>一道矩阵题，加密方法不难，涉及矩阵运算。</p><p>题目给出了密文$E$，还有三个辅助量$M_1&#x3D;LUL,M_2&#x3D;L^{-1}S^2L,M_{10}&#x3D;R^{-1}S^8$。 其中$R$是一个随机矩阵，$L,U$是$S$的$LU$分解，即$S&#x3D;LU$。加密方法为$E&#x3D;L^{-1}S(A+R)$，$A$就是明文</p><p>这边简单地提一下什么是矩阵的$LU$分解，就是对于任意一个矩阵$M$，可以将其沿主对角线拆分成一个上三角矩阵$U$和一个下三角矩阵$L$，使得$LU&#x3D;S$，其中$\det L&#x3D;1,\det U&#x3D;\det S$，因此这种分解方法是唯一的。</p><p>由于$M_1&#x3D;LUL&#x3D;SL,M_2&#x3D;L^{-1}S^2L$，根据矩阵的逆运算，因此$M_2^{-1}&#x3D;L^{-1}S^{-2}L$，因此我们可以有：<br>$$<br>M_3&#x3D;M_1M_2^{-1}&#x3D;SLL^{-1}S^{-2}L&#x3D;S^{-1}L&#x3D;U^{-1}L^{-1}L&#x3D;U^{-1}<br>$$<br>很显然，如果我们想要凑$S$出来，那就要消去$L$，由于我们发现$M_3&#x3D;S^{-1}L,M_1&#x3D;SL$，因此我们计算$M_1M_3^{-1}$，有<br>$$<br>M_1M_3^{-1}&#x3D;SLL^{-1}S&#x3D;S^2<br>$$<br>有了$S^2$，那么我们可以计算出$S^8$，进而计算出$S^{-8}$。故<br>$$<br>R&#x3D;(M_{10}(S^{-8}))^{-1}&#x3D;S^8M_{10}^{-1}<br>$$<br>由于$M_3&#x3D;U^{-1}$，因此对$M_3$直接求逆就得到了$U$。到目前为止，$R,U$都得到了，而$E&#x3D;L^{-1}S(A+R)&#x3D;U(A+R)&#x3D;UA+UR$，因此$A$很容易就可以得到了。然后根据他的规则，将矩阵里对应的数字转化成字典中的内容，这道题就解出来了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>E=[[<span class="hljs-number">25</span>,<span class="hljs-number">55</span>,<span class="hljs-number">61</span>,<span class="hljs-number">28</span>,<span class="hljs-number">11</span>,<span class="hljs-number">46</span>,<span class="hljs-number">19</span>,<span class="hljs-number">50</span>,<span class="hljs-number">37</span>,<span class="hljs-number">5</span>,<span class="hljs-number">21</span>],[<span class="hljs-number">20</span>,<span class="hljs-number">57</span>,<span class="hljs-number">39</span>,<span class="hljs-number">9</span>,<span class="hljs-number">25</span>,<span class="hljs-number">37</span>,<span class="hljs-number">63</span>,<span class="hljs-number">31</span>,<span class="hljs-number">70</span>,<span class="hljs-number">15</span>,<span class="hljs-number">47</span>],[<span class="hljs-number">56</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">67</span>,<span class="hljs-number">38</span>,<span class="hljs-number">14</span>,<span class="hljs-number">42</span>,<span class="hljs-number">46</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">42</span>,<span class="hljs-number">54</span>,<span class="hljs-number">38</span>,<span class="hljs-number">22</span>,<span class="hljs-number">19</span>,<span class="hljs-number">55</span>,<span class="hljs-number">7</span>,<span class="hljs-number">18</span>,<span class="hljs-number">45</span>,<span class="hljs-number">53</span>,<span class="hljs-number">39</span>],[<span class="hljs-number">55</span>,<span class="hljs-number">26</span>,<span class="hljs-number">42</span>,<span class="hljs-number">15</span>,<span class="hljs-number">48</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">4</span>,<span class="hljs-number">17</span>,<span class="hljs-number">60</span>,<span class="hljs-number">64</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">38</span>,<span class="hljs-number">50</span>,<span class="hljs-number">10</span>,<span class="hljs-number">19</span>,<span class="hljs-number">57</span>,<span class="hljs-number">26</span>,<span class="hljs-number">48</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">38</span>,<span class="hljs-number">54</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">54</span>,<span class="hljs-number">42</span>,<span class="hljs-number">15</span>,<span class="hljs-number">56</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">26</span>,<span class="hljs-number">66</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">6</span>,<span class="hljs-number">70</span>,<span class="hljs-number">44</span>,<span class="hljs-number">8</span>,<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">65</span>],[<span class="hljs-number">56</span>,<span class="hljs-number">67</span>,<span class="hljs-number">49</span>,<span class="hljs-number">61</span>,<span class="hljs-number">18</span>,<span class="hljs-number">34</span>,<span class="hljs-number">53</span>,<span class="hljs-number">21</span>,<span class="hljs-number">7</span>,<span class="hljs-number">48</span>,<span class="hljs-number">32</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">70</span>,<span class="hljs-number">10</span>,<span class="hljs-number">34</span>,<span class="hljs-number">1</span>,<span class="hljs-number">57</span>,<span class="hljs-number">70</span>,<span class="hljs-number">27</span>,<span class="hljs-number">12</span>,<span class="hljs-number">33</span>,<span class="hljs-number">46</span>],[<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">30</span>,<span class="hljs-number">55</span>,<span class="hljs-number">63</span>,<span class="hljs-number">49</span>,<span class="hljs-number">11</span>,<span class="hljs-number">36</span>,<span class="hljs-number">7</span>]]<br>M1=[[<span class="hljs-number">50</span>,<span class="hljs-number">8</span>,<span class="hljs-number">21</span>,<span class="hljs-number">16</span>,<span class="hljs-number">13</span>,<span class="hljs-number">33</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">35</span>,<span class="hljs-number">20</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">36</span>,<span class="hljs-number">55</span>,<span class="hljs-number">36</span>,<span class="hljs-number">34</span>,<span class="hljs-number">27</span>,<span class="hljs-number">28</span>,<span class="hljs-number">23</span>,<span class="hljs-number">21</span>,<span class="hljs-number">62</span>,<span class="hljs-number">17</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">56</span>,<span class="hljs-number">26</span>,<span class="hljs-number">49</span>,<span class="hljs-number">39</span>,<span class="hljs-number">43</span>,<span class="hljs-number">30</span>,<span class="hljs-number">35</span>,<span class="hljs-number">46</span>,<span class="hljs-number">0</span>,<span class="hljs-number">58</span>,<span class="hljs-number">43</span>],[<span class="hljs-number">11</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">35</span>,<span class="hljs-number">29</span>,<span class="hljs-number">0</span>,<span class="hljs-number">22</span>,<span class="hljs-number">38</span>,<span class="hljs-number">53</span>,<span class="hljs-number">51</span>,<span class="hljs-number">58</span>],[<span class="hljs-number">34</span>,<span class="hljs-number">14</span>,<span class="hljs-number">69</span>,<span class="hljs-number">68</span>,<span class="hljs-number">5</span>,<span class="hljs-number">32</span>,<span class="hljs-number">27</span>,<span class="hljs-number">4</span>,<span class="hljs-number">27</span>,<span class="hljs-number">62</span>,<span class="hljs-number">15</span>],[<span class="hljs-number">46</span>,<span class="hljs-number">49</span>,<span class="hljs-number">36</span>,<span class="hljs-number">42</span>,<span class="hljs-number">26</span>,<span class="hljs-number">12</span>,<span class="hljs-number">28</span>,<span class="hljs-number">60</span>,<span class="hljs-number">54</span>,<span class="hljs-number">66</span>,<span class="hljs-number">23</span>],[<span class="hljs-number">69</span>,<span class="hljs-number">55</span>,<span class="hljs-number">30</span>,<span class="hljs-number">65</span>,<span class="hljs-number">56</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">36</span>,<span class="hljs-number">26</span>,<span class="hljs-number">46</span>,<span class="hljs-number">48</span>],[<span class="hljs-number">25</span>,<span class="hljs-number">48</span>,<span class="hljs-number">16</span>,<span class="hljs-number">20</span>,<span class="hljs-number">34</span>,<span class="hljs-number">57</span>,<span class="hljs-number">64</span>,<span class="hljs-number">62</span>,<span class="hljs-number">61</span>,<span class="hljs-number">25</span>,<span class="hljs-number">62</span>],[<span class="hljs-number">68</span>,<span class="hljs-number">39</span>,<span class="hljs-number">11</span>,<span class="hljs-number">40</span>,<span class="hljs-number">25</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">40</span>,<span class="hljs-number">24</span>,<span class="hljs-number">43</span>,<span class="hljs-number">65</span>],[<span class="hljs-number">54</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">59</span>,<span class="hljs-number">52</span>,<span class="hljs-number">60</span>,<span class="hljs-number">37</span>,<span class="hljs-number">14</span>,<span class="hljs-number">32</span>,<span class="hljs-number">44</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">45</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>,<span class="hljs-number">26</span>,<span class="hljs-number">45</span>,<span class="hljs-number">45</span>,<span class="hljs-number">50</span>,<span class="hljs-number">17</span>,<span class="hljs-number">41</span>,<span class="hljs-number">59</span>,<span class="hljs-number">50</span>]]<br>M2=[[<span class="hljs-number">34</span>,<span class="hljs-number">12</span>,<span class="hljs-number">70</span>,<span class="hljs-number">21</span>,<span class="hljs-number">36</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">43</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">54</span>,<span class="hljs-number">59</span>,<span class="hljs-number">12</span>,<span class="hljs-number">64</span>,<span class="hljs-number">35</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">49</span>,<span class="hljs-number">11</span>,<span class="hljs-number">49</span>],[<span class="hljs-number">69</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">19</span>,<span class="hljs-number">16</span>,<span class="hljs-number">27</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">26</span>,<span class="hljs-number">10</span>,<span class="hljs-number">45</span>],[<span class="hljs-number">70</span>,<span class="hljs-number">17</span>,<span class="hljs-number">41</span>,<span class="hljs-number">13</span>,<span class="hljs-number">35</span>,<span class="hljs-number">58</span>,<span class="hljs-number">19</span>,<span class="hljs-number">29</span>,<span class="hljs-number">70</span>,<span class="hljs-number">5</span>,<span class="hljs-number">30</span>],[<span class="hljs-number">68</span>,<span class="hljs-number">69</span>,<span class="hljs-number">67</span>,<span class="hljs-number">37</span>,<span class="hljs-number">63</span>,<span class="hljs-number">69</span>,<span class="hljs-number">15</span>,<span class="hljs-number">64</span>,<span class="hljs-number">66</span>,<span class="hljs-number">28</span>,<span class="hljs-number">26</span>],[<span class="hljs-number">18</span>,<span class="hljs-number">29</span>,<span class="hljs-number">64</span>,<span class="hljs-number">38</span>,<span class="hljs-number">63</span>,<span class="hljs-number">67</span>,<span class="hljs-number">15</span>,<span class="hljs-number">27</span>,<span class="hljs-number">64</span>,<span class="hljs-number">6</span>,<span class="hljs-number">26</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">40</span>,<span class="hljs-number">41</span>,<span class="hljs-number">48</span>,<span class="hljs-number">30</span>,<span class="hljs-number">46</span>,<span class="hljs-number">52</span>,<span class="hljs-number">39</span>,<span class="hljs-number">48</span>,<span class="hljs-number">58</span>],[<span class="hljs-number">22</span>,<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,<span class="hljs-number">35</span>,<span class="hljs-number">55</span>,<span class="hljs-number">30</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">49</span>,<span class="hljs-number">55</span>],[<span class="hljs-number">50</span>,<span class="hljs-number">55</span>,<span class="hljs-number">55</span>,<span class="hljs-number">61</span>,<span class="hljs-number">45</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">32</span>,<span class="hljs-number">10</span>,<span class="hljs-number">59</span>,<span class="hljs-number">69</span>],[<span class="hljs-number">27</span>,<span class="hljs-number">21</span>,<span class="hljs-number">68</span>,<span class="hljs-number">56</span>,<span class="hljs-number">67</span>,<span class="hljs-number">49</span>,<span class="hljs-number">64</span>,<span class="hljs-number">53</span>,<span class="hljs-number">42</span>,<span class="hljs-number">46</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">42</span>,<span class="hljs-number">66</span>,<span class="hljs-number">16</span>,<span class="hljs-number">29</span>,<span class="hljs-number">42</span>,<span class="hljs-number">42</span>,<span class="hljs-number">23</span>,<span class="hljs-number">49</span>,<span class="hljs-number">43</span>,<span class="hljs-number">3</span>,<span class="hljs-number">23</span>]]<br>M10=[[<span class="hljs-number">51</span>,<span class="hljs-number">9</span>,<span class="hljs-number">22</span>,<span class="hljs-number">61</span>,<span class="hljs-number">63</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">23</span>],[<span class="hljs-number">33</span>,<span class="hljs-number">53</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">62</span>,<span class="hljs-number">21</span>,<span class="hljs-number">66</span>,<span class="hljs-number">7</span>,<span class="hljs-number">66</span>,<span class="hljs-number">68</span>,<span class="hljs-number">7</span>],[<span class="hljs-number">59</span>,<span class="hljs-number">19</span>,<span class="hljs-number">32</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">34</span>,<span class="hljs-number">16</span>,<span class="hljs-number">43</span>,<span class="hljs-number">49</span>,<span class="hljs-number">25</span>,<span class="hljs-number">7</span>],[<span class="hljs-number">44</span>,<span class="hljs-number">37</span>,<span class="hljs-number">4</span>,<span class="hljs-number">29</span>,<span class="hljs-number">70</span>,<span class="hljs-number">50</span>,<span class="hljs-number">46</span>,<span class="hljs-number">39</span>,<span class="hljs-number">55</span>,<span class="hljs-number">4</span>,<span class="hljs-number">65</span>],[<span class="hljs-number">29</span>,<span class="hljs-number">63</span>,<span class="hljs-number">29</span>,<span class="hljs-number">43</span>,<span class="hljs-number">47</span>,<span class="hljs-number">28</span>,<span class="hljs-number">40</span>,<span class="hljs-number">33</span>,<span class="hljs-number">0</span>,<span class="hljs-number">62</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">45</span>,<span class="hljs-number">62</span>,<span class="hljs-number">36</span>,<span class="hljs-number">68</span>,<span class="hljs-number">10</span>,<span class="hljs-number">66</span>,<span class="hljs-number">26</span>,<span class="hljs-number">48</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">61</span>],[<span class="hljs-number">43</span>,<span class="hljs-number">30</span>,<span class="hljs-number">25</span>,<span class="hljs-number">18</span>,<span class="hljs-number">23</span>,<span class="hljs-number">38</span>,<span class="hljs-number">61</span>,<span class="hljs-number">0</span>,<span class="hljs-number">52</span>,<span class="hljs-number">46</span>,<span class="hljs-number">35</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">40</span>,<span class="hljs-number">6</span>,<span class="hljs-number">45</span>,<span class="hljs-number">20</span>,<span class="hljs-number">55</span>,<span class="hljs-number">35</span>,<span class="hljs-number">67</span>,<span class="hljs-number">25</span>,<span class="hljs-number">14</span>,<span class="hljs-number">63</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">30</span>,<span class="hljs-number">61</span>,<span class="hljs-number">66</span>,<span class="hljs-number">25</span>,<span class="hljs-number">33</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>],[<span class="hljs-number">29</span>,<span class="hljs-number">15</span>,<span class="hljs-number">53</span>,<span class="hljs-number">22</span>,<span class="hljs-number">55</span>,<span class="hljs-number">64</span>,<span class="hljs-number">69</span>,<span class="hljs-number">56</span>,<span class="hljs-number">44</span>,<span class="hljs-number">40</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">28</span>,<span class="hljs-number">40</span>,<span class="hljs-number">69</span>,<span class="hljs-number">60</span>,<span class="hljs-number">28</span>,<span class="hljs-number">41</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">29</span>,<span class="hljs-number">4</span>,<span class="hljs-number">29</span>]]<br>E,M1,M2,M10=matrix(GF(<span class="hljs-number">71</span>),E),matrix(GF(<span class="hljs-number">71</span>),M1),matrix(GF(<span class="hljs-number">71</span>),M2),matrix(GF(<span class="hljs-number">71</span>),M10)<br>M3=M1*(M2^-<span class="hljs-number">1</span>)<br>S2=M1*(M3^-<span class="hljs-number">1</span>)<br>R=(M10*S2^-<span class="hljs-number">4</span>)^-<span class="hljs-number">1</span><br>U=M3^-<span class="hljs-number">1</span><br>UA=E-U*R<br>A=M3*UA<br>Dic=<span class="hljs-string">&#x27;=0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$!?_&#123;&#125;&lt;&gt;&#x27;</span><br>F,K=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(F)&lt;<span class="hljs-number">24</span>:<br>    F+=Dic[A[K//<span class="hljs-number">11</span>][K%<span class="hljs-number">11</span>]]<br>    K+=<span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CCTF&#123;&#x27;</span>+F+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment">#CCTF&#123;LU__D3c0mpO517Ion__4L90?&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-Triplet"><a href="#4-Triplet" class="headerlink" title="4.Triplet"></a>4.Triplet</h2><p>一个远程交互的题目，看起来似乎有点难度，也有点脑洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">die</span>(<span class="hljs-params">*args</span>):<br>pr(*args)<br>quit()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(<span class="hljs-params">*args</span>):<br>s = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, args))<br>sys.stdout.write(s + <span class="hljs-string">&quot;\n&quot;</span>)<br>sys.stdout.flush()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sc</span>():<br><span class="hljs-keyword">return</span> sys.stdin.readline().strip()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>border = <span class="hljs-string">&quot;+&quot;</span><br>pr(border*<span class="hljs-number">72</span>)<br>pr(border, <span class="hljs-string">&quot; hi talented cryptographers, the mission is to find the three RSA   &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot; modulus with the same public and private exponent! Try your chance!&quot;</span>, border)<br>pr(border*<span class="hljs-number">72</span>)<br>nbit = <span class="hljs-number">160</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>pr(<span class="hljs-string">&quot;| Options: \n|\t[S]end the three nbit prime pairs \n|\t[Q]uit&quot;</span>)<br>ans = sc().lower()<br>order = [<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;third&#x27;</span>]<br><span class="hljs-keyword">if</span> ans == <span class="hljs-string">&#x27;s&#x27;</span>:<br>P, N = [], []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>pr(<span class="hljs-string">&quot;| Send the &quot;</span> + order[i] + <span class="hljs-string">&quot; RSA primes such that nbit &gt;= &quot;</span> + <span class="hljs-built_in">str</span>(nbit) + <span class="hljs-string">&quot;: p_&quot;</span> + <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;, q_&quot;</span> + <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot; &quot;</span>)<br>params = sc()<br><span class="hljs-keyword">try</span>:<br>p, q = params.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>p, q = <span class="hljs-built_in">int</span>(p), <span class="hljs-built_in">int</span>(q)<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&quot;| your primes are not valid!!&quot;</span>)<br><span class="hljs-keyword">if</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:]) &gt;= nbit <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(q)[<span class="hljs-number">2</span>:]) &gt;= nbit:<br>P.append((p, q))<br>n = p * q<br>N.append(n)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;| your input is not desired prime, Bye!&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(N)) == <span class="hljs-number">3</span>:<br>pr(<span class="hljs-string">&quot;| Send the public and private exponent: e, d &quot;</span>)<br>params = sc()<br><span class="hljs-keyword">try</span>:<br>e, d = params.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>e, d = <span class="hljs-built_in">int</span>(e), <span class="hljs-built_in">int</span>(d)<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&quot;| your parameters are not valid!! Bye!!!&quot;</span>)<br>phi_1 = (P[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)*(P[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>)<br>phi_2 = (P[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)*(P[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>)<br>phi_3 = (P[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>)*(P[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; e &lt; <span class="hljs-built_in">min</span>([phi_1, phi_2, phi_3]) <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> &lt; d &lt; <span class="hljs-built_in">min</span>([phi_1, phi_2, phi_3]):<br>b = (e * d % phi_1 == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (e * d % phi_2 == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (e * d % phi_3 == <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> b:<br>die(<span class="hljs-string">&quot;| You got the flag:&quot;</span>, FLAG)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;| invalid exponents, bye!!!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;| the exponents are too small or too large!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;| kidding me?!!, bye!&quot;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;q&#x27;</span>:<br>die(<span class="hljs-string">&quot;Quitting ...&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;Bye ...&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>简单看过代码后，就是你要构造三个不同的RSA模数$n_1,n_2,n_3$，大小必须超过$320$位（也就是两个$160$位的素数相乘）。使得这三个模数拥有一组相同的$(e,d)$，使得$(e,d)$均小于三个$\phi$值。简而言之就是要让$ed$的值很小且不能为$1$。</p><p>由于$ed\equiv 1 \pmod \phi$。根据扩展中国剩余定理，由于三个$\phi$不同，但$ed$相同，因此这里$ed$除了$1$，只能让$\mathrm{lcm}(\phi_1,\phi_2,\phi_3)$的值足够小。换句话就是让$\gcd(\phi_1,\phi_2,\phi_3)$足够大。</p><p>因此，我们可以构造三个素数$p,q,r&#x3D;k_ig+1$，其中$i$取值为$1$到$3$，$k_i$远小于$g$，而这个$g$，就是我们所想要的$\gcd(\phi_1,\phi_2,\phi_3)$。我们可以构造$g&#x3D;2^{158},2^{159},2^{160}$，当然这边为了方便起见，我在这里的$g$选择了$10$的次幂，因为这样看起来顺眼（x</p><p>于是可以构造： $p&#x3D;1537000000000000000000000000000000000000000000001$，$q&#x3D;1545000000000000000000000000000000000000000000001$，$r&#x3D;1591000000000000000000000000000000000000000000001$</p><p>，这样子三个$\phi$的公约数就很大了。然后我们分别对服务器发送$p,q$，$p,r$，$q,r$，完成第一步。</p><p>然后我们计算$L&#x3D;\mathrm{lcm}(\phi_1,\phi_2,\phi_3)$，得：<br>$$<br>L&#x3D;3778092015000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001<br>$$<br>分解这个$L$，有<br>$$<br>31×32251×3778919598392047858481007340607593062880770888824652598919163296761990876001844403924459456621<br>$$<br>因此我们有$e&#x3D;31×32251&#x3D;999781$，$d&#x3D;3778919598392047858481007340607593062880770888824652598919163296761990876001844403924459456621$。直接发送过去就可以得到最后的结果</p><p><img src="/2021/08/07/CryptoCTFWriteUp2/1.jpg" alt="1"></p><h2 id="5-Tiny-ECC"><a href="#5-Tiny-ECC" class="headerlink" title="5.Tiny ECC"></a>5.Tiny ECC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mini_ecdsa <span class="hljs-keyword">import</span> *<span class="hljs-comment">#这个包里集成了一些ECC的算法，与题目无关，此处略去</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tonelli_shanks</span>(<span class="hljs-params">n, p</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(n, <span class="hljs-built_in">int</span>((p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>), p) == <span class="hljs-number">1</span>:<br>s = <span class="hljs-number">1</span><br>q = <span class="hljs-built_in">int</span>((p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> q % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>q = q // <span class="hljs-number">2</span><br>s += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> s == <span class="hljs-number">1</span>:<br>r1 = <span class="hljs-built_in">pow</span>(n, <span class="hljs-built_in">int</span>((p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>), p)<br>r2 = p - r1<br><span class="hljs-keyword">return</span> r1, r2<br><span class="hljs-keyword">else</span>:<br>z = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(z, <span class="hljs-built_in">int</span>((p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>), p) == p - <span class="hljs-number">1</span>:<br>c = <span class="hljs-built_in">pow</span>(z, q, p)<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>z += <span class="hljs-number">1</span><br>r = <span class="hljs-built_in">pow</span>(n, <span class="hljs-built_in">int</span>((q+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>), p)<br>t = <span class="hljs-built_in">pow</span>(n, q, p)<br>m = s<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> t == <span class="hljs-number">1</span>:<br>r1 = r<br>r2 = p - r1<br><span class="hljs-keyword">return</span> r1, r2<br><span class="hljs-keyword">else</span>:<br>i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(t, <span class="hljs-number">2</span>**i, p) == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>i += <span class="hljs-number">1</span><br>b = <span class="hljs-built_in">pow</span>(c, <span class="hljs-number">2</span>**(m-i-<span class="hljs-number">1</span>), p)<br>r = r * b % p<br>t = t * b ** <span class="hljs-number">2</span> % p<br>c = b ** <span class="hljs-number">2</span> % p<br>m = i<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_point</span>(<span class="hljs-params">p, a, b</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>gx = getRandomRange(<span class="hljs-number">1</span>, p-<span class="hljs-number">1</span>)<br>n = (gx**<span class="hljs-number">3</span> + a*gx + b) % p<br>gy = tonelli_shanks(n, p)<br><span class="hljs-keyword">if</span> gy == <span class="hljs-literal">False</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> (gx, gy[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">die</span>(<span class="hljs-params">*args</span>):<br>pr(*args)<br>quit()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(<span class="hljs-params">*args</span>):<br>s = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, args))<br>sys.stdout.write(s + <span class="hljs-string">&quot;\n&quot;</span>)<br>sys.stdout.flush()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sc</span>():<br><span class="hljs-keyword">return</span> sys.stdin.readline().strip()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>border = <span class="hljs-string">&quot;+&quot;</span><br>pr(border*<span class="hljs-number">72</span>)<br>pr(border, <span class="hljs-string">&quot;  Dual ECC means two elliptic curve with same coefficients over the &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot;  different fields or ring! You should calculate the discrete log   &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot;  in dual ECCs. So be smart in choosing the first parameters! Enjoy!&quot;</span>, border)<br>pr(border*<span class="hljs-number">72</span>)<br>bool_coef, bool_prime, nbit = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-number">128</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>pr(<span class="hljs-string">f&quot;| Options: \n|\t[C]hoose the <span class="hljs-subst">&#123;nbit&#125;</span>-bit prime p \n|\t[A]ssign the coefficients \n|\t[S]olve DLP \n|\t[Q]uit&quot;</span>)<br>ans = sc().lower()<br><span class="hljs-keyword">if</span> ans == <span class="hljs-string">&#x27;a&#x27;</span>:<br>pr(<span class="hljs-string">&#x27;| send the coefficients a and b separated by comma: &#x27;</span>)<br>COEFS = sc()<br><span class="hljs-keyword">try</span>:<br>a, b = [<span class="hljs-built_in">int</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> COEFS.split(<span class="hljs-string">&#x27;,&#x27;</span>)]<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&#x27;| your coefficients are not valid, Bye!!&#x27;</span>)<br><span class="hljs-keyword">if</span> a*b == <span class="hljs-number">0</span>:<br>die(<span class="hljs-string">&#x27;| Kidding me?!! a*b should not be zero!!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>bool_coef = <span class="hljs-literal">True</span><br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;c&#x27;</span>:<br>pr(<span class="hljs-string">&#x27;| send your prime: &#x27;</span>)<br>p = sc()<br><span class="hljs-keyword">try</span>:<br>p = <span class="hljs-built_in">int</span>(p)<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&#x27;| your input is not valid :(&#x27;</span>)<br><span class="hljs-keyword">if</span> isPrime(p) <span class="hljs-keyword">and</span> p.bit_length() == nbit <span class="hljs-keyword">and</span> isPrime(<span class="hljs-number">2</span>*p + <span class="hljs-number">1</span>):<br>q = <span class="hljs-number">2</span>*p + <span class="hljs-number">1</span><br>bool_prime = <span class="hljs-literal">True</span><br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">f&#x27;| your integer p is not <span class="hljs-subst">&#123;nbit&#125;</span>-bit prime or 2p + 1 is not prime, bye!!&#x27;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;s&#x27;</span>:<br><span class="hljs-keyword">if</span> bool_coef == <span class="hljs-literal">False</span>:<br>pr(<span class="hljs-string">&#x27;| please assign the coefficients.&#x27;</span>)<br><span class="hljs-keyword">if</span> bool_prime == <span class="hljs-literal">False</span>:<br>pr(<span class="hljs-string">&#x27;| please choose your prime first.&#x27;</span>)<br><span class="hljs-keyword">if</span> bool_prime <span class="hljs-keyword">and</span> bool_coef:<br>Ep = CurveOverFp(<span class="hljs-number">0</span>, a, b, p)<br>Eq = CurveOverFp(<span class="hljs-number">0</span>, a, b, q)<br>xp, yp = random_point(p, a, b)<br>P = Point(xp, yp)<br>xq, yq = random_point(q, a, b)<br>Q = Point(xq, yq)<br>k = getRandomRange(<span class="hljs-number">1</span>, p &gt;&gt; <span class="hljs-number">1</span>)<br>kP = Ep.mult(P, k)<br>l = getRandomRange(<span class="hljs-number">1</span>, q &gt;&gt; <span class="hljs-number">1</span>)<br>lQ = Eq.mult(Q, l)<br>pr(<span class="hljs-string">&#x27;| We know that: &#x27;</span>)<br>pr(<span class="hljs-string">f&#x27;| P = <span class="hljs-subst">&#123;P&#125;</span>&#x27;</span>)<br>pr(<span class="hljs-string">f&#x27;| k*P = <span class="hljs-subst">&#123;kP&#125;</span>&#x27;</span>)<br>pr(<span class="hljs-string">f&#x27;| Q = <span class="hljs-subst">&#123;Q&#125;</span>&#x27;</span>)<br>pr(<span class="hljs-string">f&#x27;| l*Q = <span class="hljs-subst">&#123;lQ&#125;</span>&#x27;</span>)<br>pr(<span class="hljs-string">&#x27;| send the k and l separated by comma: &#x27;</span>)<br>PRIVS = sc()<br><span class="hljs-keyword">try</span>:<br>priv, qriv = [<span class="hljs-built_in">int</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> PRIVS.split(<span class="hljs-string">&#x27;,&#x27;</span>)]<br><span class="hljs-keyword">except</span>:<br>die(<span class="hljs-string">&#x27;| your input is not valid, Bye!!&#x27;</span>)<br><span class="hljs-keyword">if</span> priv == k <span class="hljs-keyword">and</span> qriv == l:<br>die(<span class="hljs-string">f&#x27;| Congrats, you got the flag: <span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&#x27;| sorry, your keys are not correct! Bye!!!&#x27;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;q&#x27;</span>:<br>die(<span class="hljs-string">&quot;Quitting ...&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;Bye ...&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>又是一个交互题，题目是发送一个素数$p$，且$q&#x3D;2p+1$也是素数，并自定椭圆曲线系数$a,b$，最后在$GF(p),GF(q)$上分别解一次椭圆曲线上的离散对数即可获得flag。</p><p>很显然，这边就是要构造一个特殊的曲线，这样才能很容易地解出ECDLP。很显然，最简单的椭圆曲线就是$y^2&#x3D;x^3$，也就是此时$(0,0)$点在椭圆曲线上。</p><p>这里我选择了$p&#x3D;207700000000000000000000000000000000001$，$q&#x3D;2p+1&#x3D;415400000000000000000000000000000000003$，符合题目条件。</p><p>但题目规定：$a,b$均不能为$0$，但是题目只说了$ab≠0$——很显然，这是一个漏洞，因为它这边没有取模。因此我们只需要计算$n&#x3D;pq$，然后将$a,b$的值都定为$n$即可，此处有<br>$$<br>n&#x3D;86278580000000000000000000000000000001038500000000000000000000000000000000003<br>$$<br>然后我们利用有限域上的极其特殊的椭圆曲线$y^2&#x3D;x^3$的求解dlp的公式，就可以求出最终的结果了。</p><p>这个公式很简单，设$P(x,y),Q&#x3D;kP$，定$f(P)&#x3D;\dfrac x y$，那么：<br>$$<br>k&#x3D;\dfrac {f(Q)}{f(P)}<br>$$<br>所以最后的解题过程就很简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p,P,kP</span>):<br>    fP = P[<span class="hljs-number">0</span>]*inverse(P[<span class="hljs-number">1</span>],p)%p<br>    fkP = kP[<span class="hljs-number">0</span>]*inverse(kP[<span class="hljs-number">1</span>],p)%p<br>    <span class="hljs-keyword">return</span> fkP*inverse(fP,p)%p<br>p,q=<span class="hljs-number">207700000000000000000000000000000000001</span>,<span class="hljs-number">415400000000000000000000000000000000003</span><br>n=<span class="hljs-number">86278580000000000000000000000000000001038500000000000000000000000000000000003</span><br><span class="hljs-keyword">assert</span> n==p*q<br>P = (<span class="hljs-number">203229899779000076314358233714424355341</span>,<span class="hljs-number">60440074750241244164201445769817870587</span>)<br>kP = (<span class="hljs-number">52410058339877917624863834128227223795</span>,<span class="hljs-number">49211699144775676781683504862929553688</span>)<br>Q = (<span class="hljs-number">172334393951679208280736138845997145361</span>,<span class="hljs-number">20443831011651348736860400696145266671</span>)<br>lQ = (<span class="hljs-number">145705507629923190180573378828332340194</span>,<span class="hljs-number">79769406366840777802969722053757749656</span>)<br><span class="hljs-built_in">print</span>(solve(p,P,kP),solve(q,Q,lQ))<br><span class="hljs-comment">#27870828690899416876383090452513900161 495768251079805627828936776109738300</span><br></code></pre></td></tr></table></figure><p> 最终解题结果：</p><p><img src="/2021/08/07/CryptoCTFWriteUp2/2.jpg" alt="2"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>这5道题的思维量明显要比前5题的思维量难度大的，尤其是第4题和第5题，是一种全新的题型，直接就是让你构造特殊的素数和特殊的曲线，并在特殊的条件下求解一些难题——这种出题思维还是很不平常的，长见识了。而第1，2题对数感的要求要非常的好，比如近似数，还有那个分解因式<del>（自己的短板，解二次项不为1的方程直接上公式了）</del></p><p>哦对，顺便提一下我在4，5两题里面构造的这种特殊素数：前面$4$位是随机的，中间一堆$0$，最后一个$1$，这种素数还有一个特点，就是$p-1$极度光滑——因为你除掉所有的$10$因数就还剩几千了，说不定以后会在什么题里遇到。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CryptoCTF Wp 1</title>
    <link href="/2021/08/03/CryptoCTFWriteUp1/"/>
    <url>/2021/08/03/CryptoCTFWriteUp1/</url>
    
    <content type="html"><![CDATA[<h1 id="CryptoCTF-WriteUp-1-By-huangx607087"><a href="#CryptoCTF-WriteUp-1-By-huangx607087" class="headerlink" title="CryptoCTF WriteUp 1 By huangx607087"></a>CryptoCTF WriteUp 1 By huangx607087</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>8月的第一篇文章，之前瞄了一眼，发现7月并没有形成一个更博客的高峰期—— 因为自己摸鱼太多了<del>实际上是因为自己太废了</del>，这几天有个CryptoCTF，做了几题，剩下的内容还在研究中，准备再写一篇Wp，也是5道题。</p><p>进入八月事情莫名其妙地开始多了起来，一是八月份还有很多CTF要打，二是我还要准备一篇2000字实习报告，三是之前在院科协搞了个什么项目，到时候要启动集群做项目</p><p> 一开始感觉有些题目似乎确实还是比较难的，不过最终感觉可能还是因为自己太菜了所以导致没做出来。</p><p>哦对还有一个AES没学，这玩意最近似乎出现频率越来越高。。。</p><h2 id="1-Farm"><a href="#1-Farm" class="headerlink" title="1.  Farm"></a>1.  Farm</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env sage </span><br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> string, base64, math<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br>ALPHABET = string.printable[:<span class="hljs-number">62</span>] + <span class="hljs-string">&#x27;\\=&#x27;</span><br>F = <span class="hljs-built_in">list</span>(GF(<span class="hljs-number">64</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">l</span>):<br>key = [F[randint(<span class="hljs-number">1</span>, <span class="hljs-number">63</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)] <br>key = math.prod(key) <span class="hljs-comment"># Optimization the key length :D</span><br><span class="hljs-keyword">return</span> key<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maptofarm</span>(<span class="hljs-params">c</span>):<br><span class="hljs-keyword">assert</span> c <span class="hljs-keyword">in</span> ALPHABET<br><span class="hljs-keyword">return</span> F[ALPHABET.index(c)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, key</span>):<br>m64 = base64.b64encode(msg)<br>enc, pkey = <span class="hljs-string">&#x27;&#x27;</span>, key**<span class="hljs-number">5</span> + key**<span class="hljs-number">3</span> + key**<span class="hljs-number">2</span> + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> m64:<br>enc += ALPHABET[F.index(pkey * maptofarm(<span class="hljs-built_in">chr</span>(m)))]<br><span class="hljs-keyword">return</span> enc<br><span class="hljs-comment"># KEEP IT SECRET </span><br>key = keygen(<span class="hljs-number">14</span>) <span class="hljs-comment"># I think 64**14 &gt; 2**64 is not brute-forcible :P</span><br>enc = encrypt(flag, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc = <span class="hljs-subst">&#123;enc&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#805c9GMYuD5RefTmabUNfS9N9YrkwbAbdZE0df91uCEytcoy9FDSbZ8Ay8jj</span><br></code></pre></td></tr></table></figure><p>一开始拿到这个题目，似乎没什么头绪——感觉好像是一个有限域多项式的玩意，不过细一看——原来是先对明文$m$进行了base64操作，然后对base64后的内容进行了一个相当于多项式的位移——并且这个位移是一定的。再加上我们知道了已知明文的开头式<code>CCTF</code>，因此就可以根据最前面几位的内容判断一下位移量即可——这里的位移量是$44$。</p><p>不过这边还有一些细节需要注意：上面代码中：<code>F=list(GF(64))</code>是$GF_{64}$上的一个多项式环，里面记录了$x$的多少次方的内容，sagemath中貌似用的是不可约多项式$x^{6}+x^4+x^3+x+1$。<strong>（注：这实际上是本源多项式）</strong>，因为测试中发现$x^5·x&#x3D;x^4+x^3+x+1$。而更好玩的是：题目中出现的多项式$x^5+x^3+x^2+1$恰好是$x^{62}$的值——也可以认为是$x^{-1}$的值。但这里有个问题就是<code>F[0]=0,F[63]=1</code>。所以有些地方需要简单操作一下：一是由于字符<code>0</code>在题目给出的字典中下标是$0$，因此遇到<code>0</code>要保持不变。二是当下标超过$64$，对$64$进行取模后，下标值要继续加上$1$，这样是为了跳过<code>ALPHABET[0]</code>中的那个<code>&#39;0&#39;</code></p><p>解题代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br>cipher=<span class="hljs-string">&#x27;805c9GMYuD5RefTmabUNfS9N9YrkwbAbdZE0df91uCEytcoy9FDSbZ8Ay8jj&#x27;</span><br>alphabet=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\=&#x27;</span><br>message=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    C=alphabet.index(i)<br>    <span class="hljs-keyword">if</span>(C==<span class="hljs-number">0</span>):<br>        message+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">elif</span>(C+<span class="hljs-number">44</span>&gt;=<span class="hljs-number">64</span>):<br>        message+=alphabet[(C+<span class="hljs-number">44</span>)%<span class="hljs-number">64</span>+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        message+=alphabet[C+<span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(b64decode(message))<br><span class="hljs-comment">#CCTF&#123;EnCrYp7I0n_4nD_5u8STitUtIn9_iN_Fi3Ld!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-hyper-normal"><a href="#2-hyper-normal" class="headerlink" title="2.hyper_normal"></a>2.hyper_normal</h2><p>写在前面的内容：作为一个Crypto打了快一年的人应该有基本的数学素养——比如在解题过程中看到多重数组就要想到矩阵，看到二元组之间的运算就要想到椭圆曲线，而不是<del>像huangx607087一样什么也不懂</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br>p = <span class="hljs-number">8443</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transpose</span>(<span class="hljs-params">x</span>):<br>result = [[x[j][i] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x))] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x[<span class="hljs-number">0</span>]))]<br><span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vsum</span>(<span class="hljs-params">u, v</span>):<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(u) == <span class="hljs-built_in">len</span>(v)<br>l, w = <span class="hljs-built_in">len</span>(u), []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>w += [(u[i] + v[i]) % p]<br><span class="hljs-keyword">return</span> w<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sprod</span>(<span class="hljs-params">a, u</span>):<br>w = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(u)):<br>w += [a*u[i] % p]<br><span class="hljs-keyword">return</span> w<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg</span>):<br>l = <span class="hljs-built_in">len</span>(msg)<br>hyper = [<span class="hljs-built_in">ord</span>(m)*(i+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> (m, i) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">list</span>(msg), <span class="hljs-built_in">range</span>(l))]<br>V, W = [], []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>v = [<span class="hljs-number">0</span>]*i + [hyper[i]] + [<span class="hljs-number">0</span>]*(l - i - <span class="hljs-number">1</span>)<br>V.append(v)<br>random.shuffle(V)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>R, v = [random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">126</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l)], [<span class="hljs-number">0</span>]*l<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>v = vsum(v, sprod(R[j], V[j]))<br>W.append(v)<br>random.shuffle(transpose(W))<br><span class="hljs-keyword">return</span> W<br>enc = encrypt(FLAG)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W=&#x27;</span>,enc)<br><span class="hljs-comment">#输出文件保存在given.py内</span><br></code></pre></td></tr></table></figure><p>打开<code>given.py</code>看了一下，<code>W</code>是一个$55×55$的矩阵——初步读完代码后，可以判断flag有$55$位。本地测试了一下<code>transpose,vsum,sprod</code>三个函数：其中<code>transpose</code>函数是将一个矩阵转置，<code>vsum</code>是两个行向量相加，<code>sprod</code>是对一个行向量进行数乘操作。当然这一切都是在$GF(8443)$上进行的。</p><p>继续阅读代码，可以发现$V$实际上可以认为是矩阵$\mathrm{diag}(m_1,m_2,…,m_{55})$与矩阵$\mathrm{diag}(1,2,…,55)$的乘积，其中$m_i$表示flag第$i$位的ASCII码值。计算过后，将$V$每一行都打乱了。而关于加密中出现的$R$，我们可以认为$R$是一个随机矩阵，最后的加密结果$W$为$RV$的值。</p><p>这道题的一个突破口就是$R$是一个随机矩阵，根据以前的做题经验——遇到了随机数，就要想办法消除随机数带来的影响。由于那天下午刚好为了星盟晚上的分享，对椭圆曲线上的几种最简单的加密算法进行了研究，搞了一下椭圆曲线上的多项式，注意到了有限域内两个高次多项式是可以通过欧几里得辗转相除法，将其化简成一个一次多项式的。——然后就感觉这会不会也是有限域内求所谓的”公约式”。</p><p>然后发现这个方法似乎并不那么可行——因为经过很简单的分析就知道这个方法一定是无法成功的（。然后我注意到这个数据规模似乎并不大——也就是可以一位一位的爆破。</p><p>试爆了三个：<code>CCT</code>，但试爆第$4$个的时候，发生了多解的情况——但内部竟然存在<code>F</code>，并且<code>F</code>对应的乘数恰好是$4$。我又试爆了几个，确实，这个貌似都是按顺序来的。然后就可以写出下面的解题代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> W<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br>p=<span class="hljs-number">8443</span><br>arr=[]<br>S=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> _t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">55</span>):<br>    <span class="hljs-built_in">print</span>(_t)<br>    <span class="hljs-built_in">print</span>(S)<br>    arr=[]<br>    <span class="hljs-keyword">for</span> __r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">55</span>):<br>        arr.append(W[__r][_t])<br>    <span class="hljs-comment">#print(arr)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> printable:<br>        <span class="hljs-comment">#for j in range(1,56):</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> [_t+<span class="hljs-number">1</span>]<br>            T,fail=[],<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>                checker=(<span class="hljs-built_in">ord</span>(i)*j*k)%<span class="hljs-number">8443</span><br>                T.append(checker)<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> arr:<br>                <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> T:<br>                    fail=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span>(fail==<span class="hljs-number">0</span>):<br>                S+=i     <br><span class="hljs-built_in">print</span>(S)<br><span class="hljs-comment">#CCTF&#123;H0w_f1Nd_th3_4lL_3I9EnV4Lu35_iN_FiN173_Fi3lD5!???&#125;</span><br></code></pre></td></tr></table></figure><p>为什么他最后还是可以解出来正确的顺序呢——通过简单的理论分析一下就知道：由于$R$是随机数组，而为了保证与$R$无关，我们就可以随意变换$R$。而对于$n$阶的一个矩阵$E&#x3D;\mathrm {diag}(1,1,1,…,1,1)$，将$E$行打乱，得到矩阵$M$，那么$M^{-1}$一定是$E$的另一种行打乱方法。因此，我们可以从理论上推出：$RV&#x3D;RV’M$，其中$V’$是打乱之前的矩阵。但由于$R$是随机矩阵，因此我们可以把$R$视为$M^{-1}R’$。由于$MNM^{-1}$是一定可以交换的，因此我们就把无序的矩阵$RV$化成有序的矩阵$R’V’$，这样仍然可以得到原来的结果了。</p><p>当然据说可以不进行对字符的爆破，13行代码就能解决问题——这个还有待考证。但刚才的理论分析确实把<code>for j in range(1,56):</code>的一重循环去掉了。至于再去一重循环，可能真的不是特别好想到。</p><h2 id="3-Rima"><a href="#3-Rima" class="headerlink" title="3.Rima"></a>3.Rima</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nextPrime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n += (n % <span class="hljs-number">2</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> isPrime(n):<br>            <span class="hljs-keyword">return</span> n<br>f = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(FLAG.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]]<br>f.insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)-<span class="hljs-number">1</span>): f[i] += f[i+<span class="hljs-number">1</span>]<br>a = nextPrime(<span class="hljs-built_in">len</span>(f))<br>b = nextPrime(a)<br>g, h = [[_ <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> f] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [a, b]]<br>c = nextPrime(<span class="hljs-built_in">len</span>(f) &gt;&gt; <span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> [g, h]:<br>    <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c): _.insert(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(_) -  c): _[i] += _[i+c]<br>g, h = [<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> __]), <span class="hljs-number">5</span>) <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> [g, h]]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> [g, h]:<br>    <span class="hljs-keyword">if</span> _ == g:<br>        fname = <span class="hljs-string">&#x27;g&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        fname = <span class="hljs-string">&#x27;h&#x27;</span><br>    of = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;fname&#125;</span>.enc&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>    of.write(long_to_bytes(_))<br>    of.close()<br><span class="hljs-comment">#输出文件g.enc 19115字节</span><br><span class="hljs-comment">#输出文件f.enc 19561字节</span><br></code></pre></td></tr></table></figure><p>拿到题目的第一感觉就是要把里面的参数$a,b,c$全给求出来——虽然一开始并没有看懂代码，但有两个基本事实是可以确定的：一是flag一定是<code>CCTF&#123;xxxxxxxx&#125;</code>的格式，二是flag越长，那么输出的<code>g.enc</code>和<code>h.enc</code>文件也越长。因此这里我们可以再开一个相同的加密脚本，设flag为<code>CCTF&#123;000...000&#125;</code>，通过不断加长里面$0$字符加密后输出的文件长度对比，最后确定flag的总长度为$32$，$(a,b,c)&#x3D;(257,263,67)$。</p><p>确定了里面的内容之后，这个时候就直接一步一步地求逆就行了，就是一位一位的减而已，难度不是很大，并且整个过程就用了<code>g.enc</code>一个文件。</p><p>当然，个人认为题目给了你两个文件，可能是存在通过不爆破<code>flag</code>的长度，而是真正通过文件<code>g,h</code>来计算flag的长度，进而计算粗话三个参数的值的。待考证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>Cg=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;g.enc&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>Cg=bytes_to_long(Cg)<br>Garr=[]<br><span class="hljs-keyword">while</span> Cg:<br>    Garr.append(Cg%<span class="hljs-number">5</span>)<br>    Cg//=<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">67</span>,<span class="hljs-built_in">len</span>(Garr)):<br>    Garr[i]=Garr[i]-Garr[i-<span class="hljs-number">67</span>]<br>Garr=Garr[::-<span class="hljs-number">1</span>][<span class="hljs-number">67</span>:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>*<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">assert</span> Garr[i]==Garr[i+<span class="hljs-number">256</span>]<br>Garr=Garr[:<span class="hljs-number">256</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">254</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    Garr[i]-=Garr[i+<span class="hljs-number">1</span>]    <br><span class="hljs-keyword">assert</span> Garr.count(<span class="hljs-number">2</span>)==<span class="hljs-number">0</span><br>m=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Garr:<br>    m&lt;&lt;=<span class="hljs-number">1</span><br>    m|=i<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#CCTF&#123;_how_finD_7h1s_1z_s3cr3T?!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-hamul"><a href="#4-hamul" class="headerlink" title="4.hamul"></a>4.hamul</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br>nbit = <span class="hljs-number">64</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p, q = getPrime(nbit), getPrime(nbit)<br>P = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(p) + <span class="hljs-built_in">str</span>(q))<br>Q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(q) + <span class="hljs-built_in">str</span>(p))<br>PP = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(P) + <span class="hljs-built_in">str</span>(Q))<br>QQ = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(Q) + <span class="hljs-built_in">str</span>(P))<br><span class="hljs-keyword">if</span> isPrime(PP) <span class="hljs-keyword">and</span> isPrime(QQ):<br><span class="hljs-built_in">print</span>(PP,QQ)<br><span class="hljs-keyword">break</span><br>n = PP * QQ<br>m = bytes_to_long(flag.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">if</span> m &lt; n:<br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br></code></pre></td></tr></table></figure><p>这里又是一个很有意思的RSA的题目——在生成$p,q$的时候，先生成两个$64$比特的较小素数，然后基于这两个小素数直接连接式组合，得到了大素数，最后乘起来得到了最后的$n$。</p><p>由于这种直接组合他是受到了十进制位数的影响的，但$2^{63}&#x3D;9223372036854775808$，$2^{64}&#x3D;18446744073709551616$，也就是说，生成的素数有是$20$位十进制数的可能，也有可能是$19$位十进制数的可能。这样根据排列组合就有三种情况：两个$20$位十进制数的素数、一个$19$位，一个$20$位十进制数的素数，也有可能是两个$19$位十进制数的素数。由于直接连接，因此乘数会不一样，因此必须先定性。</p><p>首先设$p,q$均为$10^{19}$，发现组合后数值比$n$大，然后设$p,q$均为$10^{19}-1$，发现组合后数值比$n$小了。因此最终定性——$p,q$的十进制位数，一个是$20$，一个是$19$。不妨设$\dfrac{\ln p}{\ln 10}&#x3D;20,\dfrac{\ln q}{\ln 10}&#x3D;19$。记<code>int(str(p)+str(q))</code>为$[pq]$，那么我们可以得到下面$4$个式子：<br>$$<br>[pq]&#x3D;10^{19}p+q<br>$$</p><p>$$<br>[qp]&#x3D;10^{20}q+p<br>$$</p><p>$$<br>[pqqp]&#x3D;10^{58}p+10^{39}q+10^{20}q+p<br>$$</p><p>$$<br>[qppq]&#x3D;10^{59}q+10^{39}p+10^{19}p+q<br>$$</p><p>与此同时，我们还可以得到：$\dfrac{\ln pq}{\ln10}&#x3D;\dfrac{\ln q^2}{\ln10}&#x3D;38$，$\dfrac{\ln p^2}{\ln10}&#x3D;39$。也就是，所有的已知量可以直接用下面这个图来表示</p><p><img src="/2021/08/03/CryptoCTFWriteUp1/1.png" alt="1"></p><p>因此，$n&#x3D;[pqqp]×[qppq]&#x3D;((10^{58}+1)p+(10^{39}+10^{20})q)×((10^{39}+10^{19})p+(10^{59}+1)q)$。</p><p>化简一下，可以得到： $p^2$的系数是$(10^{58}+1)(10^{39}+10^{19})&#x3D;10^{97}+10^{77}+10^{39}+10^{19}$<br>$q^2$的系数是$(10^{39}+10^{20})(10^{59}+1)&#x3D;10^{98}+10^{79}+10^{39}+10^{20}$<br>$pq$的系数是$(10^{58}+1)(10^{59}+1)+(10^{39}+10^{20})(10^{39}+10^{19})$，该结果化简为$10^{117}+10^{78}+2×10^{59}+2×10^{58}+10^{39}+1$</p><p>那么我们就可以得到下面这个图了</p><p><img src="/2021/08/03/CryptoCTFWriteUp1/2.png" alt="2"></p><p>很显然，我们可以看出在$10^{137}$往上和$10^{18}$往下都是只有$pq$的高位和低位的，但这样一组合后，$pq$的值的中间一位是不知道的。因此考虑到$n$的$10^{136}$的一位可能有一位进位，因此我们截取$n-10^{136}$整除$10^{136}$的值和$n \mod 10^{19}$的值，就可以得出$pq$了，然后分解即可得到$p,q$。最后按照题目的构造方法求解就行了。(也可以盲猜$p^2$的最低位，因为$p^2$的最低位只有可能是$1$或者$9$），然后利用$n$的$10^{19}$那一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br>n=<span class="hljs-number">9802.</span>.<span class="hljs-number">.4043</span><br>n-=<span class="hljs-number">10</span>**<span class="hljs-number">136</span><br>H,L=n//<span class="hljs-number">10</span>**<span class="hljs-number">136</span>,n%<span class="hljs-number">10</span>**<span class="hljs-number">19</span><br>factor(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(H)+<span class="hljs-built_in">str</span>(L)))<br><span class="hljs-comment">#9324884768249686093 * 10512422984265378151</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> n,c<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getpq</span>(<span class="hljs-params">p,q</span>):<br>    P = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(p) + <span class="hljs-built_in">str</span>(q))<br>    Q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(q) + <span class="hljs-built_in">str</span>(p))<br>    PP = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(P) + <span class="hljs-built_in">str</span>(Q))<br>    QQ = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(Q) + <span class="hljs-built_in">str</span>(P))<br>    <span class="hljs-keyword">return</span> PP,QQ<br>p,q=<span class="hljs-number">9324884768249686093</span> , <span class="hljs-number">10512422984265378151</span><br>p,q=getpq(p,q)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(<span class="hljs-number">65537</span>,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-comment">#CCTF&#123;wH3Re_0Ur_Br41N_Iz_5uP3R_4CtIVe_bY_RSA!!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-KEYBASE"><a href="#5-KEYBASE" class="headerlink" title="5.KEYBASE"></a>5.KEYBASE</h2><p>一个远程交互题，先看看是什么内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os, sys, random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>iv, key = [os.urandom(<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;01&#x27;</span>]<br><span class="hljs-keyword">return</span> iv, key<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, iv, key</span>):<br>aes = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-keyword">return</span> aes.encrypt(msg)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">enc, iv, key</span>):<br>aes = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-keyword">return</span> aes.decrypt(enc)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">die</span>(<span class="hljs-params">*args</span>):<br>pr(*args)<br>quit()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>(<span class="hljs-params">*args</span>):<br>s = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, args))<br>sys.stdout.write(s + <span class="hljs-string">&quot;\n&quot;</span>)<br>sys.stdout.flush()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sc</span>():<br><span class="hljs-keyword">return</span> sys.stdin.readline().strip()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>border = <span class="hljs-string">&quot;+&quot;</span><br>pr(border*<span class="hljs-number">72</span>)<br>pr(border, <span class="hljs-string">&quot; hi all, welcome to the simple KEYBASE cryptography task, try to    &quot;</span>, border)<br>pr(border, <span class="hljs-string">&quot; decrypt the encrypted message and get the flag as a nice prize!    &quot;</span>, border)<br>pr(border*<span class="hljs-number">72</span>)<br>iv, key = keygen()<br>flag_enc = encrypt(flag, iv, key).<span class="hljs-built_in">hex</span>()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>pr(<span class="hljs-string">&quot;| Options: \n|\t[G]et the encrypted flag \n|\t[T]est the encryption \n|\t[Q]uit&quot;</span>)<br>ans = sc().lower()<br><span class="hljs-keyword">if</span> ans == <span class="hljs-string">&#x27;g&#x27;</span>:<br>pr(<span class="hljs-string">&quot;| encrypt(flag) =&quot;</span>, flag_enc)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;t&#x27;</span>:<br>pr(<span class="hljs-string">&quot;| Please send your 32 bytes message to encrypt: &quot;</span>)<br>msg_inp = sc()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg_inp) == <span class="hljs-number">32</span>:<br>enc = encrypt(msg_inp, iv, key).<span class="hljs-built_in">hex</span>()<br>r = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>s = <span class="hljs-number">4</span> - r<br>mask_key = key[:-<span class="hljs-number">2</span>].<span class="hljs-built_in">hex</span>() + <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">4</span><br>mask_enc = enc[:r] + <span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">28</span> + enc[<span class="hljs-number">32</span>-s:]<br>pr(<span class="hljs-string">&quot;| enc =&quot;</span>, mask_enc)<br>pr(<span class="hljs-string">&quot;| key =&quot;</span>, mask_key)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;| SEND 32 BYTES MESSAGE :X&quot;</span>)<br><span class="hljs-keyword">elif</span> ans == <span class="hljs-string">&#x27;q&#x27;</span>:<br>die(<span class="hljs-string">&quot;Quitting ...&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>die(<span class="hljs-string">&quot;Bye ...&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>算法实际上看起来还是很简单的，就是一个AESCBC的主动攻击，先连上去看看，以下是连上去后的结果</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs coq">huangx607087@huangx607087-virtual-machine:~/桌面/CTF/Apr-Jul <span class="hljs-number">21</span>$ python <span class="hljs-number">7.</span>py<br>[+] Opening connection to <span class="hljs-number">01.</span>cr.yp.toc.tf on port <span class="hljs-number">17010</span>: Done<br>[*] Switching to interactive mode<br>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>+  hi all, welcome to the <span class="hljs-built_in">simple</span> KEYBASE cryptography task, <span class="hljs-built_in">try</span> to     +<br>+  decrypt the encrypted message and get the flag <span class="hljs-built_in">as</span> a nice prize!     +<br>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>| <span class="hljs-type">Options</span>: <br>|    <span class="hljs-type">[G</span>]et the encrypted flag <br>|    <span class="hljs-type">[T</span>]est the encryption <br>|    <span class="hljs-type">[Q</span>]uit<br>$ g<br>| <span class="hljs-type">encrypt</span>(flag) = b27e9095ded98a14bdb678e3a30fbbfc79b9cefc9a71b2c963804ce692e0b61e<br>| <span class="hljs-type">Options</span>: <br>|    <span class="hljs-type">[G</span>]et the encrypted flag <br>|    <span class="hljs-type">[T</span>]est the encryption <br>|    <span class="hljs-type">[Q</span>]uit<br>$ t<br>| <span class="hljs-type">Please</span> send your <span class="hljs-number">32</span> bytes message to encrypt: <br>$ <span class="hljs-number">00000000000000000000000000000000</span><br>| <span class="hljs-type">enc</span> = <span class="hljs-number">9</span>a****************************<span class="hljs-number">3</span>d531aec9dfc944f408d4df08e8f25aeaa<br>| <span class="hljs-type">key</span> = <span class="hljs-number">52</span>ab970fd21f2526aa7421630068****<br>| <span class="hljs-type">Options</span>: <br>|    <span class="hljs-type">[G</span>]et the encrypted flag <br>|    <span class="hljs-type">[T</span>]est the encryption <br>|    <span class="hljs-type">[Q</span>]uit<br>[*] Got EOF while reading <span class="hljs-built_in">in</span> interactive<br></code></pre></td></tr></table></figure><p>我们得到了flag的密文，同时也得到了自己发过去的一组明文的加密结果——但我们发现到最后我们只知道选择明文的后半段的加密结果，前半段的加密结果我们是不知道的。</p><p>先来看一下AESCBC的加密结构：</p><p><img src="/2021/08/03/CryptoCTFWriteUp1/3.png" alt="3"></p><p>很显然，由于密钥只被省略了4位，因此我们可以爆破这个密钥，然后将flag密文的前半段内容作为iv，后半段内容作为AES解密密文，然后进行解密，如果出现了可读的内容，那就算解密成功——因此我们很快地得到了flag的后半段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br>cipher=<span class="hljs-number">0xb27e9095ded98a14bdb678e3a30fbbfc79b9cefc9a71b2c963804ce692e0b61e</span><br>key=<span class="hljs-number">0x52ab970fd21f2526aa74216300680000</span><br>cipher=long_to_bytes(cipher)<br>c1,c2=cipher[:<span class="hljs-number">16</span>],cipher[<span class="hljs-number">16</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[:<span class="hljs-number">15</span>]:<br>        <span class="hljs-comment">#print(chr(i))</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> printable:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    K=long_to_bytes(key+i)<br>    aes=AES.new(K, AES.MODE_CBC, c1)<br>    m2=aes.decrypt(c2)<br>    <span class="hljs-keyword">if</span>(check(m2)):<br>        <span class="hljs-built_in">print</span>(m2,K)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">m2=b&#x27;_7He_5eCrET_1V?&#125;&#x27;</span><br><span class="hljs-string">K=b&#x27;R\xab\x97\x0f\xd2\x1f%&amp;\xaat!c\x00h\x86\xeb&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>但是求flag的前半段，就需要用到求一开始的iv了。这就需要用到我们对服务器发送的结果进行解了。</p><p>注意到第二段明文在加密前与第一段密文进行了异或，而根据异或的性质，如果我们iv是第一段密文，解密出来就是第二段明文——所以iv如果使第二段明文，解密出来就是第一段密文。而我们发送的32个字符<code>0</code>是已知的内容，第二段密文也是已知内容。因此我们就可以得到第一段的完整密文。</p><p>根据完整密文、key、完整明文，我们就可以求出iv了，这个内容我们会在后面一篇专门研究AES的博客里讲解相关内容，这次就先上个代码（PART 3），可以先自己了解一下是怎么一回事。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br>cipher=<span class="hljs-number">0xb27e9095ded98a14bdb678e3a30fbbfc79b9cefc9a71b2c963804ce692e0b61e</span><br>key=<span class="hljs-number">0x52ab970fd21f2526aa74216300680000</span><br>cipher=long_to_bytes(cipher)<br>c1,c2=cipher[:<span class="hljs-number">16</span>],cipher[<span class="hljs-number">16</span>:]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s[:<span class="hljs-number">15</span>]:<br>        <span class="hljs-comment">#print(chr(i))</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> printable:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    K=long_to_bytes(key+i)<br>    aes=AES.new(K, AES.MODE_CBC, c1)<br>    m2=aes.decrypt(c2)<br>    <span class="hljs-keyword">if</span>(check(m2)):<br>        <span class="hljs-built_in">print</span>(m2,K.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#------PART 2 BELOW----------#</span><br>m2=<span class="hljs-string">b&#x27;_7He_5eCrET_1V?&#125;&#x27;</span><br>m10,m11=<span class="hljs-string">b&#x27;0&#x27;</span>*<span class="hljs-number">16</span>,<span class="hljs-string">b&#x27;0&#x27;</span>*<span class="hljs-number">16</span><br>c11=long_to_bytes(<span class="hljs-number">0x531aec9dfc944f408d4df08e8f25aeaa</span>)<br>K=<span class="hljs-string">b&#x27;R\xab\x97\x0f\xd2\x1f%&amp;\xaat!c\x00h\x86\xeb&#x27;</span><br>aes=AES.new(K, AES.MODE_CBC,m11)<br>c10=aes.decrypt(c11)<br><span class="hljs-built_in">print</span>(c10.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#------PART 3 BELOW----------#</span><br>fakeiv=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">16</span><br>fakeivaes=AES.new(K,AES.MODE_CBC,fakeiv)<br>fakem=fakeivaes.decrypt(c10)<br>encmsg=long_to_bytes(bytes_to_long(fakem)^bytes_to_long(fakeiv))<br>iv=long_to_bytes(bytes_to_long(encmsg)^bytes_to_long(m10))<br><span class="hljs-built_in">print</span>(iv.<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#------PART 4 BELOW----------#</span><br>aesfinal=AES.new(K,AES.MODE_CBC,iv)<br>m1=aesfinal.decrypt(c1)<br><span class="hljs-built_in">print</span>(m1+m2)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b&#x27;_7He_5eCrET_1V?&#125;&#x27; 52ab970fd21f2526aa742163006886eb</span><br><span class="hljs-string">9a941fc86867bc19161554cc6f08a73d</span><br><span class="hljs-string">1c27639adabb0672f976a6d979d0d981</span><br><span class="hljs-string">b&#x27;CCTF&#123;h0W_R3cOVER_7He_5eCrET_1V?&#125;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>这几道题还是稍微有一点难度的——尤其是第4题和第5题。</p><p>7月摸了几次🐟，开发了机器人blockbot，进入8月突然感觉事情真的好多啊，不能再摸鱼了。。。。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lattice Notes 7</title>
    <link href="/2021/07/25/LatticeNotes7/"/>
    <url>/2021/07/25/LatticeNotes7/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087对构造格及多项式的笔记-7"><a href="#huangx607087对构造格及多项式的笔记-7" class="headerlink" title="huangx607087对构造格及多项式的笔记 7"></a>huangx607087对构造格及多项式的笔记 7</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>之前遇到过很多以及近期遇到过的几个CTF题目中，都出现了需要构造格或者多项式求小根的题目，在这里分享一下以备用。</p><p>注：由于博客技术限制，一些复杂指数的表达式呈现容易出现错误。故本博客中部分指数表示方法改用对数$\ln$表示。</p><p>一般情况下，如果题目中给出了未知量组$x_s$与已知量$a_t$的关系，以及总模数为$n$。如果出现大约$4\ln x&lt;\ln n$，且可以构造出矩阵$A$和行向量$\vec X$。其中$A$中只含有已知数，$\vec X$中包含了所有的未知数，且可以确定既定的关系$\vec XA&#x3D;\vec Y$，那么这道题就可以考虑构造格来解决。</p><p>简而言之，就是题目中出现了非常小未知数与非常大</p><p>而将问题退化一个层次，我们可以通过Coppersmith定理来获取有限域内多项式的小根。</p><p>Coppersmith定理：在定义域为$Z_n$的$e$阶多项式$f(x)$中，如果有一个根$x$满足$e\ln x&lt;\ln n$ ，就可以运用一个$O(\ln n)$的算法求出这些根。</p><p><strong>Update 2021.8.2 增加了一些关于ECC的解题方法</strong></p><h2 id="1-几种简单的构造多项式的情况"><a href="#1-几种简单的构造多项式的情况" class="headerlink" title="1.几种简单的构造多项式的情况"></a>1.几种简单的构造多项式的情况</h2><h3 id="1o01-已知明文高位"><a href="#1o01-已知明文高位" class="headerlink" title="1o01 已知明文高位"></a>1o01 已知明文高位</h3><p>假设在RSA传播过程中造成$m$的高位泄露，如果$e$是$3$，假设已知部分是$m_0$，未知部分是$x$，满足$m&#x3D;m_0+x$且$3\ln x &lt; \ln n$，那么我们这个时候就可以使用Coppersmith进行攻击，此时我们只需要构造多项式<br>$$<br>f(x)&#x3D;(m_0+x)^{3}<br>$$<br>令$f(x)&#x3D;0$，由于$3\ln x&lt;\ln n$，我们可以在Sagemath中直接来<code>f.small_roots()</code>来解决这一问题。这也是目前最简单的一个问题了。同理，如果我把$e$上升至$5$，那么我们就需要知道八成的比特位数，满足$5\ln x &lt; \ln n$即可。</p><p>同理，如果RSA中明文$m$满足$e\ln m &lt;\ln n$。（$e&#x3D;3$时即$3\ln m &lt; \ln n$），那么此时我们知道了$c_1\equiv m^3 \pmod n$和$c_2\equiv (m+1)^{3} \pmod n$，那么我们可以在定义域$Z_n$中定义多项式$f(x)&#x3D;x^3-c_1$和$g(x)&#x3D;(x+1)^3 -c_2$，求这两个算式的公约数公约式即可。（一般是一个形如$x-a$的一次式） 这样就可以求出最终的结果了。当然，如果已知的是$(Ax+B)^3$和$(Cx+D)^3$的结果，我们也可以通过求最小公倍数的方法求出小根$x$。</p><h3 id="1o02-低指数填充广播攻击的情况"><a href="#1o02-低指数填充广播攻击的情况" class="headerlink" title="1o02 低指数填充广播攻击的情况"></a>1o02 低指数填充广播攻击的情况</h3><p>由于已知低指数广播攻击可以使用中国剩余定理直接解决，我们设想一个这样的情形：</p><p>假设在某种情况下，为了把同一个信息发送给多人，如果我们对明文$m$进行一个较为复杂的填充$r(\mathrm{id})$，该填充式可为多项式，也可为指数式如$2^{\mathrm{id}}$，似乎这样就不会产生问题。</p><p>不过这个时候，我们还是可以通过构造多项式的方法，通过多项式求根计算来获得。</p><p>设想$m_i&#x3D;x^r+i2^k$，加密指数$e$一定（比如为$3$），$i$已知。此时也可以通过构造多项式来进行低指数广播攻击</p><p>下面看一下这道题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">s,i</span>):<br>    <span class="hljs-keyword">return</span> i * <span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,s.bit_length()) + s**<span class="hljs-number">2</span>  <span class="hljs-comment">#s.bit_length()=431</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_N</span>():<br>    <span class="hljs-keyword">return</span> getPrime(<span class="hljs-number">512</span>) * getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">54</span><br>invite = bytes_to_long(flag)<br>e_list = [random.choice([<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]<br>N_list = [gen_N() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./invitations&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>        invis = <span class="hljs-built_in">pow</span>(pad(invite,i+<span class="hljs-number">1</span>),e_list[i],N_list[i])<br>        f.write(<span class="hljs-string">&#x27;Invitation%d: %d \n&#x27;</span>%(i+<span class="hljs-number">1</span>,invis))<br>    f.write(<span class="hljs-string">&#x27;Wait a minute! \n&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>):<br>        f.write(<span class="hljs-string">&#x27;[e%d,N%d]: [%d,%d]\n&#x27;</span>%(i+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>,e_list[i],N_list[i]))<br></code></pre></td></tr></table></figure><p>题目的填充$m_i&#x3D;x^{2}+3^{341}i$，也是低指数广播攻击，一共给了$14$组数据。其中$e&#x3D;3$四组，$e&#x3D;5,7$各五组。</p><p>由于要保证$e$一定，此处选择$e&#x3D;3$的$4$组数据情况。</p><p>模仿之前的中国剩余定理的步骤，我们还可以设$N&#x3D;\prod_{i&#x3D;1}^4 n_i$。然后设$N_i$，使$N_i$满足$N_i \equiv 0 \pmod {\dfrac{N}{n_i}}$且$N_i \equiv 1 \pmod n_i$。也就是$N_i$除以$n_i$的余数是$1$，除以$N$的其他因数的余数是$0$。</p><p>由于这里$\dfrac{\ln N}{\ln 2}&#x3D;4096,\dfrac{\ln x}{\ln 2}&#x3D;342$，多项式次数为$6$，满足$6\ln x&lt;\ln n$，因此可以求出对应的根。</p><p>然后我们可以在$Z_N$中构造$f(x)&#x3D;\sum_{i&#x3D;1}^{4}N_i((x^2+a_i3^{341})^3-c_i)$的一个六次多项式，直接求小根即为最终答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath 9.2</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br>c=[<br>    <span class="hljs-number">1292</span>****<span class="hljs-number">3823</span> ,<br>    <span class="hljs-number">814</span>****<span class="hljs-number">8214</span> ,<br>    <span class="hljs-number">2543</span>****<span class="hljs-number">4080</span> ,<br>    <span class="hljs-number">943</span>****<span class="hljs-number">1346</span> <br>]<br>n=[<br>    <span class="hljs-number">1466</span>****<span class="hljs-number">8391</span>,<br>    <span class="hljs-number">650</span>****<span class="hljs-number">6029</span>,<br>    <span class="hljs-number">1261</span>****<span class="hljs-number">1901</span>,<br>    <span class="hljs-number">756</span>****0471<br>]<br>MulNs=n[<span class="hljs-number">0</span>]*n[<span class="hljs-number">1</span>]*n[<span class="hljs-number">2</span>]*n[<span class="hljs-number">3</span>]<br>padd=[<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    padd[i]=padd[i]*<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,<span class="hljs-number">431</span>)<br>Anscrts=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    Rem=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>    Rem[i]=<span class="hljs-number">1</span><br>    Anscrts[i]=crt(Rem,n)<br>R.&lt;x&gt;=PolynomialRing(Zmod(MulNs))<br>Gxs,Gx=[<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>],<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    Gxs[i]=Anscrts[i]*(<span class="hljs-built_in">pow</span>(x*x+padd[i],<span class="hljs-number">3</span>)-c[i])<br>    Gx+=Gxs[i]<br>Gx=Gx.monic()<br>Flag=Gx.small_roots(epsilon=<span class="hljs-number">0.035</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(Flag)!=<span class="hljs-number">0</span>):<br>    Flag.sort()<br><span class="hljs-built_in">print</span>(long_to_bytes(Flag[<span class="hljs-number">0</span>]))<br><span class="hljs-comment">#b&#x27;GWHT&#123;e959e3f8e7242954b43e1b91de9886e1&#125;Welc0metomyp4rty&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-简单的格构造情况"><a href="#2-简单的格构造情况" class="headerlink" title="2.简单的格构造情况"></a>2.简单的格构造情况</h2><h3 id="2o01-直接构造法"><a href="#2o01-直接构造法" class="headerlink" title="2o01 直接构造法"></a>2o01 直接构造法</h3><p>当然，有些时候，我们可能会组建多个未知数与已知数之间的关系，而在这其中，有极小量的出现</p><p>我们来看一下这道题：（自己出的一个Lattice入门题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">256</span>)<br>q=getPrime(<span class="hljs-number">2048</span>)<br>e=<span class="hljs-number">10007</span><br>n=p*q<br>f=getPrime(<span class="hljs-number">200</span>)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>r=getPrime(<span class="hljs-number">7500</span>)<br>h=(p-<span class="hljs-number">60708760708733</span>)*inverse(f,r)%r<br>ooo=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;given.py&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>ooo.write(<span class="hljs-string">&quot;e=&quot;</span>+<span class="hljs-built_in">str</span>(e)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ooo.write(<span class="hljs-string">&quot;n=&quot;</span>+<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ooo.write(<span class="hljs-string">&quot;r=&quot;</span>+<span class="hljs-built_in">str</span>(r)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ooo.write(<span class="hljs-string">&quot;h=&quot;</span>+<span class="hljs-built_in">str</span>(h)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ooo.write(<span class="hljs-string">&quot;c=&quot;</span>+<span class="hljs-built_in">str</span>(c)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>ooo.close()<br></code></pre></td></tr></table></figure><p>很显然，本题有明显的漏洞，就是$\dfrac{\ln p}{\ln 2}&#x3D;256,\dfrac{\ln q}{\ln 2}&#x3D;2048,\dfrac{\ln r}{\ln 2}&#x3D;7500,\dfrac{\ln f}{\ln 2}&#x3D;200$。已知量是$(e,n,r,h,c)$。如此巨大的差异，那就要考虑一下基本的格的关系了：</p><p>根据<br>$$<br>h\equiv (p-60708760708733)f^{-1} \pmod r<br>$$<br>我们可以得到<br>$$<br>fh\equiv p-60708760708733 \pmod r<br>$$<br>也就是<br>$$<br>fh-kr&#x3D;p-60708760708733<br>$$<br>盘点一下：我们已经有了三个未知量$f,k,p$，两个已知量。为了求出有意义的未知量$f,p$，那么我们还可以增加一共式子$1f+0k\equiv f$。这样我们就构造出来$\vec xA &#x3D;\vec y$的情形了。其中$A$里面均为已知量，$\vec x,\vec y$里面包含了所有的未知量。然后就可以求出$p$，分解$n$，得出最终的值了。</p><p>我们可以看到：$h,r$的比特位都是$7500$，$f$的比特位是$200$，$p$的比特位是$256$。向量$(f,-k),(1,h),(0,r)$的长度都是超过$7000$位的。而最后的向量$(f,p-60708760708733)$的向量长度仅为$300$位不到。该数值远小于$\sqrt{2 \det A}$。而每个格$L$中一定是含有一个长度小于$\sqrt n \sqrt[n]{\det L}$的向量的。$n$是格$L$的维数</p><p><img src="/2021/07/25/LatticeNotes7/1.png" alt="1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br>r=<span class="hljs-number">3488391316101515024972590.</span>.....<br>h=<span class="hljs-number">3143155356724417989594202.</span>.....<br>M=matrix([[<span class="hljs-number">1</span>,h],[<span class="hljs-number">0</span>,r]])<br>p=M.LLL()[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>p+=<span class="hljs-number">60708760708733</span><br><span class="hljs-built_in">print</span>(p,is_prime(p))<br><span class="hljs-comment">#75287619124953899281094544588134588339526984734091359573347610235691729399693 True</span><br></code></pre></td></tr></table></figure><h3 id="2o02-角最大值-对角-1-k-对值构造法"><a href="#2o02-角最大值-对角-1-k-对值构造法" class="headerlink" title="2o02 角最大值+对角$(1,-k)$对值构造法"></a>2o02 角最大值+对角$(1,-k)$对值构造法</h3><p>有些时候，若我们知道的未知数$x_i$和已知数$a_i$的关系均为线性关系，甚至可能具有一定的同态性，并且可能出现的最大数字都不超过某个特定的值（比如$2^{128}$）之类的值。那么我们可以用此方法构造。</p><p>此类问题中最典型的一个就是我之前在<strong>LatticeNotes5</strong>中提及的一个LCG问题：假设你知道了一个$128$位的LCG的参数及其输出，但每一个LCG最后的$40$位被隐去了。让你求这个数列的完整值。</p><p>假设我们知道的所有的输出数列可表示为$u_n&#x3D;a_n+x_n$。其中$a_n$是已知的高$88$位，$x_n$是未知的低$40$位。$u_{n}$和$u_{n+1}$之间的关系是$u_{n+1} \equiv Au_n+B \pmod M$。</p><p>也就是：<br>$$<br>a_{n+1}+x_{n+1} &#x3D;Aa_{n}+B+x_n+k_nM<br>$$<br>建立已知数和未知数之间的关系，得：</p><p><strong>Update 7.30 原先公式$x_n$前少了个系数$A$，已补上</strong><br>$$<br>x_{n+1}&#x3D;Aa_n+B-a_{n+1}+Ax_n+k_nM<br>$$<br>由于均为线性操作，因此我们可以设$f_2(x)&#x3D;f(f(x)),f_3(x)&#x3D;f(f(f(x)))$，若$f(x)&#x3D;Ax+B$，则$f_2(x),f_3(x)$仍然具有线性规律。且规律为$A_{n+1}&#x3D;AA_{n},B_{n+1}&#x3D;AB_{n}+Aa_n+B-a_{n+1}$，不断迭代即可。</p><p>若我们已知了$6$组数据，就可以构造这样得一个格</p><p><strong>Update 8.2： 这里原来右下角的$2^{40}$是错误的，正解是$2^{128}$</strong></p><p><img src="/2021/07/25/LatticeNotes7/2.png" alt="2"></p><p>很显然，依然是$\vec xL&#x3D;\vec y$的形式，$\vec x,\vec y$覆盖了所有的未知量$x$和$k$，$L$中所有的内容都是已知量。</p><p>而此处这个$2^{40}$就起到了一个限位的作用，该操作使得最后所有的$x$都不超过$2^{40}$，也作为了一个标志性的事物，告诉我们以$2^{40}$结尾的那一行才是答案。</p><p>我们可以再来看一下，我们构造的格是$7$维的，$M,A,B$均为$128$位，$k$也为$128$位。$\vec x$和矩阵$L$中的每一个行向量的长度均为$130$位以上。而右边的$\vec y$由于每个数字均为$40$位，因此长度约为$42$位。此处$\dfrac {\ln}{\ln 2}\det A$的值约为$680$，而短向量的长度$\dfrac {\ln}{\ln 2}|\vec y|$的值仅仅为$42$，$ \dfrac \ln {\ln 2}\sqrt 7 \sqrt[7]{\det A}&gt;97$。因此我们所构造的短向量是符合要求的，LLL立刻出解。</p><p>还有一个典型的题目如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple<br>PublicKey = namedtuple(<span class="hljs-string">&#x27;PublicKey&#x27;</span>, [<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<br>SecretKey = namedtuple(<span class="hljs-string">&#x27;SecretKey&#x27;</span>, [<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    p = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">512</span>, lbound=<span class="hljs-number">2</span>^<span class="hljs-number">511</span>)<br>    q = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">512</span>, lbound=<span class="hljs-number">2</span>^<span class="hljs-number">511</span>)<br>    n = p * q<br>    a11, a12, a21 = [random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">100</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    a22 = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">while</span> a11 * a22 == a12 * a21:<br>        a22 = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">100</span>)<br>    A = Matrix(ZZ, [[a11, a12], [a21, a22]])<br>    a1 = crt([a11, a21], [p, q])<br>    a2 = crt([a12, a22], [p, q])<br>    b = a1 * inverse_mod(a2, n) % n<br>    PK = PublicKey(n, b)<br>    SK = SecretKey(p, q, A)<br>    <span class="hljs-keyword">return</span> (PK, SK)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, pk</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; m &lt; <span class="hljs-number">2</span>^<span class="hljs-number">400</span><br>    r = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>^<span class="hljs-number">400</span>-<span class="hljs-number">1</span>)<br>    c = (pk.b*m + r) % pk.n<br>    <span class="hljs-keyword">return</span> c<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c, sk</span>):<br>    a2 = crt([sk.A[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], sk.A[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]], [sk.p, sk.q])<br>    s1 = a2 * c % sk.p<br>    s2 = a2 * c % sk.q<br>    m, r = sk.A.solve_right(vector([s1, s2]))<br>    <span class="hljs-keyword">return</span> m<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">pk, sk, num=<span class="hljs-number">3</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        m = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>^<span class="hljs-number">400</span>-<span class="hljs-number">1</span>)<br>        c = encrypt(m, pk)<br>        mm = decrypt(c, sk)<br>        <span class="hljs-keyword">assert</span> m == mm<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>    <span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> m, FLAG<br>    <span class="hljs-keyword">assert</span> FLAG == <span class="hljs-string">&#x27;d3ctf&#123;%s&#125;&#x27;</span> % sha256(<span class="hljs-built_in">int</span>(m).to_bytes(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;big&#x27;</span>)).hexdigest()<br>    PK, SK = gen_key()<br>    test(PK, SK)<br>    c = encrypt(m, PK)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;PK = <span class="hljs-subst">&#123;PK&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">PK = PublicKey(n=*, b=*)</span><br><span class="hljs-string">c = *</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>通过审计代码，我们可以得出一个最简单的线性内容：$r&#x3D;bm-c-kn$，其中$r$是一个$400$位的随机数，而我们要求的数字就是$m$。</p><p>但我们只能得到两个式子(另一个是$1m&#x3D;m$)，这个时候就可以根据$m,r$均不超过$400$位的条件，放一个$2^{400}$进行占位。然后LLL即可。</p><p><img src="/2021/07/25/LatticeNotes7/3.png" alt="3"></p><p><strong>LatticeNotes5</strong>还有一个解决哈希冲突的题目，也是此类问题的典型。</p><p>这种方法就是在定上限的情况下，若我们构造的行向量$\vec x$中涉及到常数$1$，此时就可以通过$\vec x$中的那个$1$与矩阵$L$中的上限值相乘得到上限值放入结果向量$\vec y$中。</p><p>还可以点击[这里](<a href="https://blog.soreatu.com/posts/intended-solution-to-nhp-in-gxzyctf-2020/">Intended Solution to NHP in GxzyCTF 2020 | Soreat_u’s Blog (soreatu.com)</a>)对此方法身价了解。</p><h3 id="2o03-构造大数，化大为小"><a href="#2o03-构造大数，化大为小" class="headerlink" title="2o03 构造大数，化大为小"></a>2o03 构造大数，化大为小</h3><p>根据Coppersmith定理：若多项式$f(x)$模数为$n$，次数为$e$，如果存在$x$满足$f(x)&#x3D;0$且$e\ln x&lt;\ln n$，那么符合条件的这个$x$值是可以被快速解出的。</p><p>比如看一下这道题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> m1,m2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Enc</span>(<span class="hljs-params">Mx,My</span>):<br>    p=getPrime(<span class="hljs-number">400</span>)<br>    a=bytes_to_long(urandom(<span class="hljs-number">80</span>))%p<br>    b=(My**<span class="hljs-number">2</span>-Mx**<span class="hljs-number">3</span>-a*Mx)%p<br>    E=EllipticCurve(GF(p),[a,b])<br>    M=E(Mx,My)<br>    C=<span class="hljs-number">3</span>*M<br>    <span class="hljs-keyword">return</span> C[<span class="hljs-number">0</span>],C[<span class="hljs-number">1</span>],a,b,p<br>m1,m2=*,* <span class="hljs-comment">#To Solve</span><br>Cipher=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">87</span>):<br>    Cipher.append(Enc(m1,m2))<br><span class="hljs-built_in">print</span>(Cipher)<br></code></pre></td></tr></table></figure><p>很明显，这是椭圆曲线上的低指数广播攻击，明文点$M(x,y)$，通过构造不同的椭圆曲线$E$，对这个$M$点进行了加密，但加密指数统一为$3$，也就是最后给出了在不同曲线上的$3P$值。</p><p>根据椭圆曲线上的点$x_{3P}(&#x3D;c)$与$x{_P}(&#x3D;x)$的关系可以得到：<br>$$<br>c&#x3D;\dfrac{x^9 - 12ax^7 - 96bx^6 + 30a^2x^5 - 24abx^4 + (36a^3 + 48b^2)x^3 + 48a^2bx^2 + (a^4 + 32ab^2 + 8(a^3 + 8b^2)a)x + 8(a^3 + 8b^2)b}{9x^8 + 36ax^6 + 72bx^5 + 30a^2x^4 + 144abx^3 + (-12a^3 + 144b^2)x^2 - 24a^2bx + a^4}<br>$$<br>因此，对于题目中给出的$87$个不同曲线上的$3P$，我们都可以通过构造上面的多项式来解决这个问题，如果设上面公式中等号右边的分子部分是$S$，分母部分是$D$，那么我们可以构造$9$次多项式<br>$$<br>f_n(x)\equiv S-Dc \pmod {p_n}<br>$$<br>其中$n$从$1$取到$87$，这样就有了$87$个不同的多项式了，但这些多项式的作用域都不相同。</p><p>这个时候跟RSA中的广播攻击一样，也可以使用中国剩余定理了。但这一次的中国剩余定理的运用略有不同：首先我们计算$N&#x3D;\prod_{i&#x3D;1}^{87}p_i$，即所有$p$的乘积。由于$\dfrac{\ln p}{\ln 2}&#x3D;400$，因此这里差不多是$\ln n&#x3D;87\ln p$，$n$的比特位数迅速上涨到了$34000$以上——这比任何数都大。</p><p>然后对于所有$f_n(x)$中，从常数项到$9$次项，每一项均使用一次中国剩余定理，也就是所有常数项构成的数组对所有$p$构成的数组进行计算。并最后汇总$Z_N$上的一个非常大的九次多项式$F(x)$，该式不仅处于一个很大的环$Z_N$上，常数项到$x^8$项每一项的系数都非常大（$x^9$的系数恒定为$1$）。而我们想求的$x_P$，仍然满足$F(x_P)\equiv 0 \pmod N$。并且这里一定满足$9\ln x_P&lt;\ln N$，可以直接用Coppersmith定理求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br>Cipher=[]<br>Cxarr,Cyarr,Aarr,Barr,Parr=[[[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">87</span>)]<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">87</span>):<br>    Cxarr[i],Cyarr[i],Aarr[i],Barr[i],Parr[i]=Cipher[i]<br>N=prod(Parr)<br>F=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">87</span>):<br>    a,b,p=Aarr[i],Barr[i],Parr[i]<br>    R.&lt;x&gt;=PolynomialRing(Zmod(p))<br>    Fz=x^<span class="hljs-number">9</span> - <span class="hljs-number">12</span>*a*x^<span class="hljs-number">7</span> - <span class="hljs-number">96</span>*b*x^<span class="hljs-number">6</span> + <span class="hljs-number">30</span>*a^<span class="hljs-number">2</span>*x^<span class="hljs-number">5</span> - <span class="hljs-number">24</span>*a*b*x^<span class="hljs-number">4</span> + (<span class="hljs-number">36</span>*a^<span class="hljs-number">3</span> + <span class="hljs-number">48</span>*b^<span class="hljs-number">2</span>)*x^<span class="hljs-number">3</span> + <span class="hljs-number">48</span>*a^<span class="hljs-number">2</span>*b*x^<span class="hljs-number">2</span> + (a^<span class="hljs-number">4</span> + <span class="hljs-number">32</span>*a*b^<span class="hljs-number">2</span> + <span class="hljs-number">8</span>*(a^<span class="hljs-number">3</span> + <span class="hljs-number">8</span>*b^<span class="hljs-number">2</span>)*a)*x + <span class="hljs-number">8</span>*(a^<span class="hljs-number">3</span> + <span class="hljs-number">8</span>*b^<span class="hljs-number">2</span>)*b<br>    Fm=<span class="hljs-number">9</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">36</span>*a*x^<span class="hljs-number">6</span> + <span class="hljs-number">72</span>*b*x^<span class="hljs-number">5</span> + <span class="hljs-number">30</span>*a^<span class="hljs-number">2</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">144</span>*a*b*x^<span class="hljs-number">3</span> + (-<span class="hljs-number">12</span>*a^<span class="hljs-number">3</span> + <span class="hljs-number">144</span>*b^<span class="hljs-number">2</span>)*x^<span class="hljs-number">2</span> - <span class="hljs-number">24</span>*a^<span class="hljs-number">2</span>*b*x + a^<span class="hljs-number">4</span><br>    Fx=(Fz-Cxarr[i]*Fm)<br>    F.append(Fx)<br>R.&lt;x&gt;=PolynomialRing(Zmod(N))<br>G=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    Arrcrt=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">87</span>):<br>        Arrcrt.append(Integer(F[j][i]))<br>    G+=crt(Arrcrt,Parr)*x**i<br>m1=G.small_roots(epsilon=<span class="hljs-number">1</span>/<span class="hljs-number">13</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(m1)<br>E=EllipticCurve(GF(Parr[<span class="hljs-number">0</span>]),[Aarr[<span class="hljs-number">0</span>],Barr[<span class="hljs-number">0</span>]])<br>O=E(<span class="hljs-number">483680648326747026189680</span>, <span class="hljs-number">119181855961981</span>)<br>(m1^<span class="hljs-number">3</span>+Aarr[<span class="hljs-number">0</span>]*m1+Barr[<span class="hljs-number">0</span>])%Parr[<span class="hljs-number">0</span>],<span class="hljs-number">119181855961981</span>**<span class="hljs-number">2</span>%Parr[<span class="hljs-number">0</span>]<br>m2=<span class="hljs-built_in">min</span>(Parr[<span class="hljs-number">0</span>]-<span class="hljs-built_in">pow</span>(<span class="hljs-number">14204314790542386034917444361</span>,(Parr[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,Parr[<span class="hljs-number">0</span>]),<span class="hljs-built_in">pow</span>(<span class="hljs-number">14204314790542386034917444361</span>,(Parr[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,Parr[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(m2)<br><span class="hljs-built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">483680648326747026189680</span><br><span class="hljs-string">119181855961981</span><br><span class="hljs-string">flag&#123;Example003&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>至于$y_{P}$怎么求，我们可以选一组带模$4$余$3$的$p$的数据，根据有限域内开平方公式，直接计算$(x^{3}+ax+b)^{(p+1)&#x2F;4} \mod p$的值即可。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blockbot beginning</title>
    <link href="/2021/07/17/Blockbot-beginning/"/>
    <url>/2021/07/17/Blockbot-beginning/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087基于GoCq的QQ-Bot-开发日记"><a href="#huangx607087基于GoCq的QQ-Bot-开发日记" class="headerlink" title="huangx607087基于GoCq的QQ-Bot 开发日记"></a>huangx607087基于GoCq的QQ-Bot 开发日记</h1><h2 id="0x00-About"><a href="#0x00-About" class="headerlink" title="0x00.About"></a>0x00.About</h2><p>先来说说自己为什么这么想要个机器人。</p><p>2014年初，自己家里安装了wifi，然后自己当年的一部小手机联想A278t就可以联网了。于是我就可以下载了一个手机QQ开始玩（注：自己QQ虽然是2010年申请的，但自己在2010-2013年年底基本没用过QQ）。然后当年自己喜欢玩开罗游戏，单机的，一个游戏不到10M，然后加了几个讨论群。其中有个讨论群里一个自动聊天机器人，带签到功能和各种娱乐功能的。自己就感觉很好玩。然后当时就下了个coolQ，顺带着搞了点插件，放在一个群里面。到现在打开家里Windows 7的旧电脑，当年的磁盘内部文件都还在呢！</p><img src="/2021/07/17/Blockbot-beginning/0-1.png" alt="0-1" style="zoom:80%;"><p><del>然后高考结束发现coolQ这个玩意SPFA了</del>，感叹自己以前生活回不去之余，也就没啥搞的了（。不过开学发现Lakphy和PiCpo两位开发大佬玩树莓派搞了个基于Mirai的机器人驮载在Ubuntu系统的树莓派上，自己也很羡慕，7月4日Lakphy帮我搞的时候搞崩了。中间也搞了几次很烦躁，因为都失败了。昨天有幸在官方群里有大佬手把手教我搞，在群里大佬们的帮助下，我搞成功了。。特此写下这篇文章给以后还想开发机器人的人进行参考学习，或者给已经开发好自己bot的人开辟另一条道路。</p><p>由于自己主机已经装有Python3.7.4和很多为了打CTF的包，加上很多复杂的环境变量，为了不与自己的Windows 10实体机上的内容冲突，机器人驮载在了虚拟机上。<del>（因为Win10的激活脚本我没搞到加上配置要求太高，Win7很多系统上的内容太旧了，并且用得不习惯，Linux我也不怎么熟悉）</del>。于是选择与Windows 10共同点较多的 Windows 8系统作为自己Bot的Server。</p><p><strong>本教程基本上是自己做过一遍后然后手把手教的，一切从0环境开始配起！机器人服务Server使用Windows7&#x2F;8&#x2F;10系统。<del>11的可以效仿，按道理是可以的，不过我没试过</del></strong></p><p>nonebot手册网址 <a href="https://v2.nonebot.dev/guide/">点这里</a></p><h2 id="0x01-环境的准备与配置"><a href="#0x01-环境的准备与配置" class="headerlink" title="0x01.环境的准备与配置"></a>0x01.环境的准备与配置</h2><h3 id="1o01-开发环境一览"><a href="#1o01-开发环境一览" class="headerlink" title="1o01 开发环境一览"></a>1o01 开发环境一览</h3><p><strong>Windows 7&#x2F;8&#x2F;10 系统，本博客使用的是Windows 8虚拟机系统。当然你也可以使用你Windows 7&#x2F;8&#x2F;10实体机，Linux大佬可以使用树莓派的Linux系统。</strong></p><p><del>个人建议如果使用虚拟机，找不到Windows 10还是选择Windows 7比较好，Windows 8安装比较麻烦</del></p><p><font color="red"><strong>Python 3.9+和VsCode</strong></font>，本样例中使用的是Python 3.9.6，一定要保证Python版本高于3.9</p><p>如果你已经满足了开发环境，请跳过整个<strong>0x01</strong>环境配置阶段 。</p><p>下图是空空的一个Windows 8 的截图，然后我们就可以一步一步配置环境了。<del>可以看出，Windows 8界面跟Windows 7还是挺像的</del></p><p>注：如果想使用Windows虚拟机作为机器人的Server的话，可以在<a href="https://www.moerats.com/kms/">这里</a>寻找激活脚本。</p><p>由于Windows 8自带浏览器是IE 11，用的比较low，我下了个Edge浏览器</p><p><img src="/2021/07/17/Blockbot-beginning/1-1.png" alt="1-1"></p><h3 id="1o02-Python的下载与配置-包括pip"><a href="#1o02-Python的下载与配置-包括pip" class="headerlink" title="1o02 Python的下载与配置(包括pip)"></a>1o02 Python的下载与配置(包括pip)</h3><p>登录<a href="https://www.python.org/downloads/">Python下载官网</a>,选择 Python 3.9.6 ，下载页面建议选择Windows Installer(64-bit)</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-1.png" alt="1-2-1"></p><p>开始安装的时候，建议把下面两个勾都打上，然后点Install Now等待安装成功</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-2.png" alt="1-2-2"></p><p>在桌面上创建一个<code>1.py</code>文件右击用IDLE进行编辑，如果能按<code>F5</code>运行成功就算安装成功了。</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-3.png" alt="1-2-3"></p><p>当然，Python到现在还没有结束，我们需要配置一下Python pip。</p><p>直接在C盘根目录下搜python39，然后打开就行了</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-4.png" alt="1-2-4"></p><p>打开Python39这个文件夹，再打开Scripts，可以看到pip在这个文件夹中。</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-5.png" alt="1-2-5"></p><p>右击pip，可以看到pip的位置，将这个位置完全复制下来。</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-6.png" alt="1-2-6"></p><p>右击“这台电脑”，（Win7是我的电脑&#x2F;Win10是此电脑），然后依次点击”高级系统设置“、”环境变量“。然后在环境变量中找到Path，点编辑。</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-7.png" alt="1-2-7"></p><p>将鼠标光标移到最后<font color="red"><strong>前面的是系统变量，千万不要删。不过Windows 10的系统变量是表格的形式，很方便</strong></font>。</p><p>在后面加一个分号，然后把刚才复制pip的位置加到后面就行了。</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-8.png" alt="1-2-8"></p><p>然后我们打开cmd，输入pip，如果能出现pip菜单说明pip配置成功。配置成功截图如下</p><p><img src="/2021/07/17/Blockbot-beginning/1-2-9.png" alt="1-2-9"></p><h3 id="1o03-VSCode的下载与配置"><a href="#1o03-VSCode的下载与配置" class="headerlink" title="1o03 VSCode的下载与配置"></a>1o03 VSCode的下载与配置</h3><p>使用VSCode，是为了在后面能够更好的编辑<code>Python</code>文件和各种配置文件</p><p><img src="/2021/07/17/Blockbot-beginning/1-3-1.png" alt="1-3-1"></p><p>直接点机右上角Download，然后选择Windows 64版本（Linux选择Linux版本）进行下载安装即可。这里安装时可以直接无脑地Next。</p><p>到此为止，我们的必要环境配置完成。下面我们就来真正地来准备我们的机器人吧。</p><h2 id="0x02-机器人的配置"><a href="#0x02-机器人的配置" class="headerlink" title="0x02 机器人的配置"></a>0x02 机器人的配置</h2><h3 id="2o01-初始内容"><a href="#2o01-初始内容" class="headerlink" title="2o01 初始内容"></a>2o01 初始内容</h3><p>配置机器人首先我们会选择我们机器人的文件夹。（此处我直接选择了D盘根目录下面<del>因为我用的是虚拟机</del>）。</p><p><img src="/2021/07/17/Blockbot-beginning/2-1-1.png" alt="2-1-1"></p><p>打开我们需要的文件夹，为方便期间，最好保证文件夹一开始为空</p><p><img src="/2021/07/17/Blockbot-beginning/2-1-2.png" alt="2-1-2"></p><h3 id="2o02-通过脚手架安装nonebot"><a href="#2o02-通过脚手架安装nonebot" class="headerlink" title="2o02 通过脚手架安装nonebot"></a>2o02 通过脚手架安装nonebot</h3><p>打开cmd，在cmd中输入 <code>pip install nb-cli </code>。非管理员用户需要在后面加上<code>--user</code>，Windows后面所有命令均如此。</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-1.png" alt="2-2-1"></p><p>然后他就会给你安装一大堆必要的东西。。。</p><p>安装成功的标准是你在python中输入<code>import nonebot</code> 不报错并且你在cmd中输入<code>nb</code> 会出现如下界面</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-2.png" alt="2-2-2"></p><p>同理，我们还要安装适配器，输入命令：<code>pip install nonebot-adapter-cqhttp</code>，按回车安装。装完这个后同时装一下<code>pip install nonebot-adapter-gocq</code>。</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-3.png" alt="2-2-3"></p><p>这两个东西安装好之后，我们可以将内容切换到我们的文件夹中了</p><p>Windows CMD中有几个命令注意一下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">d: （表示直接将cmd所在磁盘切换到D盘）<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">abc</span> （表示打开所在位置的<span class="hljs-keyword">abc</span>文件夹）<br>dir （查看该目录下所有文件，不是<span class="hljs-keyword">ls</span>）<br></code></pre></td></tr></table></figure><p>然后我们就可以切换到我们要配置机器人的地方了。我这边选择的就是D盘根目录。并在此输入<code>nb create</code>后按回车</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-4.png" alt="2-2-4"></p><p>然后输入我们的项目名称，这里叫example,然后按回车</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-5.png" alt="2-2-5"></p><p>第二步问你文件夹名字是什么，选1和2都行，不过建议选1，因此如果左边灰色的a在1旁边，直接按回车即可</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-6.png" alt="2-2-6"></p><p>第三步，在里面输入一个y再按回车。</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-7.png" alt="2-2-7"></p><p>第四步：当灰色的a在cqhttp左边时，先按空格，然后按回车</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-8.png" alt="2-2-8"></p><p>然后我们的目录下就多了个文件夹，打开看看有这些东西。</p><p><img src="/2021/07/17/Blockbot-beginning/2-2-9.png" alt="2-2-9"></p><h3 id="2o03-配置Gocq"><a href="#2o03-配置Gocq" class="headerlink" title="2o03 配置Gocq"></a>2o03 配置Gocq</h3><p>访问截图中的网址下载，下载go-cqhttp_windows_amd64.exe,19.9M的那个</p><p><img src="/2021/07/17/Blockbot-beginning/2-3-1.png" alt="2-3-1"></p><p>然后exe下载好后，在example外面建立一个gocq，将下载下来的exe放进去</p><p><img src="/2021/07/17/Blockbot-beginning/2-3-2.png" alt="2-3-2"></p><p>然后把该exe在cmd中运行。如果它让你输数字的话，只输入一个<code>3</code>就行了！</p><p><img src="/2021/07/17/Blockbot-beginning/2-3-3.png" alt="2-3-3"></p><p>然后下面就要注意了，打开文件夹，里面有个<code>config.yml</code>文件，用VSCode打开。然后在最前面的指定位置输入你的机器人的QQ账号，密码保持空着</p><p><img src="/2021/07/17/Blockbot-beginning/2-3-4.png" alt="2-3-4"></p><p>然后在最后的ws-reverse一栏里的内容改成这个样子，保存即可。</p><p><img src="/2021/07/17/Blockbot-beginning/2-3-5.png" alt="2-3-5"></p><p>然后所有该配置的内容我们就都配置好了。</p><h3 id="2o04-启动bot"><a href="#2o04-启动bot" class="headerlink" title="2o04 启动bot"></a>2o04 启动bot</h3><p>重启gocq，第一次运行需要扫码登录</p><p><img src="/2021/07/17/Blockbot-beginning/2-4-1.png" alt="2-4-1"></p><p>登录成功场景。此时如果挂着肯定会报错，因为还有个东西没开</p><p><img src="/2021/07/17/Blockbot-beginning/2-4-2.png" alt="2-4-2"></p><p>再开一个cmd，进入example文件夹，然后给命令<code>nb run</code></p><p><img src="/2021/07/17/Blockbot-beginning/2-4-3.png" alt="2-4-3"></p><p>如果出现accepted的字样，并且我们开的第一个cmd不再出现新的”无法连接”的报错，说明此时已经好了。</p><p><img src="/2021/07/17/Blockbot-beginning/2-4-4.png" alt="2-4-4"></p><p>私聊或者在群里@机器人 发送<code>/echo hello world</code>，那我们就有第一次对话了。</p><p><img src="/2021/07/17/Blockbot-beginning/2-4-5.jpg" alt="2-4-5"></p><h2 id="0x03-机器人插件开发"><a href="#0x03-机器人插件开发" class="headerlink" title="0x03 机器人插件开发"></a>0x03 机器人插件开发</h2><p>插件模板代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_command<br><span class="hljs-keyword">from</span> nonebot.rule <span class="hljs-keyword">import</span> to_me<br><span class="hljs-keyword">from</span> nonebot.typing <span class="hljs-keyword">import</span> T_State<br><span class="hljs-keyword">from</span> nonebot.adapters <span class="hljs-keyword">import</span> Bot, Event<br><br>weather = on_command(<span class="hljs-string">&quot;天气&quot;</span>, rule=to_me(), priority=<span class="hljs-number">5</span>)<br><br><br><span class="hljs-meta">@weather.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_first_receive</span>(<span class="hljs-params">bot: Bot, event: Event, state: T_State</span>):<br>    args = <span class="hljs-built_in">str</span>(event.get_message()).strip()  <span class="hljs-comment"># 首次发送命令时跟随的参数，例：/天气 上海，则args为上海</span><br>    <span class="hljs-keyword">if</span> args:<br>        state[<span class="hljs-string">&quot;city&quot;</span>] = args  <span class="hljs-comment"># 如果用户发送了参数则直接赋值</span><br><br><br><span class="hljs-meta">@weather.got(<span class="hljs-params"><span class="hljs-string">&quot;city&quot;</span>, prompt=<span class="hljs-string">&quot;你想查询哪个城市的天气呢？&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_city</span>(<span class="hljs-params">bot: Bot, event: Event, state: T_State</span>):<br>    city = state[<span class="hljs-string">&quot;city&quot;</span>]<br>    <span class="hljs-keyword">if</span> city <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>]:<br>        <span class="hljs-keyword">await</span> weather.reject(<span class="hljs-string">&quot;你想查询的城市暂不支持，请重新输入！&quot;</span>)<br>    city_weather = <span class="hljs-keyword">await</span> get_weather(city)<br>    <span class="hljs-keyword">await</span> weather.finish(city_weather)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_weather</span>(<span class="hljs-params">city: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;city&#125;</span>的天气是...&quot;</span><br></code></pre></td></tr></table></figure><p>打开我们的example机器人目录，然后发现里面还有个example，再打开这个文件夹还有个plugins，将这个代码保存成py文件，拖入就可以用了。</p><p>可以看到加载了weather的插件</p><p><img src="/2021/07/17/Blockbot-beginning/3-1-1.png" alt="3-1-1"></p><p>这个时候我们的bot就可以按照里面的算法来做事了。当然，以这个插件为模板，我们可以开发更多的插件。</p><p><font color="red"><strong>一定要注意的是，只有string类型的东西才能被发送出去，如果不是string类型（比如想发送数字）要先转成string类型！然后才能发出去！</strong></font></p><p><img src="/2021/07/17/Blockbot-beginning/3-1-2.jpg" alt="3-1-2"></p>]]></content>
    
    
    <categories>
      
      <category>SelfSkills</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An Interesting Problem-RSAOS</title>
    <link href="/2021/07/15/An-Interesting-Problem-RSAOS/"/>
    <url>/2021/07/15/An-Interesting-Problem-RSAOS/</url>
    
    <content type="html"><![CDATA[<h1 id="An-Interesting-Problem-RSAOS"><a href="#An-Interesting-Problem-RSAOS" class="headerlink" title="An Interesting Problem - RSAOS"></a>An Interesting Problem - RSAOS</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>最近自己在BUU上面刷题的时候发现了一个很好玩的题目——RSAOS，虽然做题过程中还是瞄了几眼wp（因为自己太菜了），但还是决定跟大家分享一下——因为确实非常的好玩</p><p>7月14日，BUUCTF上了5000分，以后还要继续努力。</p><h2 id="Part-1-Beginning"><a href="#Part-1-Beginning" class="headerlink" title="Part 1 Beginning"></a>Part 1 Beginning</h2><img src="/2021/07/15/An-Interesting-Problem-RSAOS/1.png" alt="1" style="zoom:80%;"><p>题目什么附件都没有给，就是一个普普通通的远程题目，直接打开虚拟机远程连接上去（</p><p>然后远程连接上去之后，似乎什么东西都没有（，并没有让你输出什么<code>sha256</code>验证的，也没有输出什么RSA必要的$c,e,n$的必要解密条件。随便输入一个<code>e</code>，<code>n</code>，<code>ls</code>之类的东西都显示”Commond Not Found”。。。。。。</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/2.png" alt="2" style="zoom:80%;"><p>这就是一个很奇怪的玩意了——不仅没有源码，还没给什么其他的东西（</p><p><del>于是本fw毫不要脸地去瞄了一眼这道题的wp</del>，原来第一步要先输入help获取菜单——行吧，怪我自己没有开发经验，谁叫自己是一个连机器人都配不好的fw呢?下亿次我拿到一个未知的系统一定要先输一下<code>help</code>或者<code>menu</code>等功能性命令，<del>（拿小本本记下来</del></p><p>输入了help之后，似乎很多事情就好起来了（，得到了一连串的命令——</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/3.png" alt="3" style="zoom:80%;"><h2 id="Part-2-Attempt-1"><a href="#Part-2-Attempt-1" class="headerlink" title="Part 2 Attempt 1"></a>Part 2 Attempt 1</h2><p><del>乱搞阶段</del></p><p>很显然，要输入<code>get-flag</code>或者<code>get-privatekey</code>，我们才能获得最终答案。因此先输一下get-flag来看看需要什么条件（</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/4.png" alt="4" style="zoom:80%;"><p>然后它给我冒出来了一个什么foldhash的东西（看来这玩意还是有点东西的。可能权限命令需要某个密码才能完成吧——要记住这是Crypto题目不是Pwn&#x2F;Re题目，估计其他的内容不会很难</p><p>输入<code>get-publickey</code>，服务器返回了这样一个东西：<del>貌似重连几遍内容一直不变</del></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Public</span> <span class="hljs-keyword">key</span> parameters:<br><span class="hljs-symbol">N:</span> <span class="hljs-number">0</span>xd888075370effdb016d85de8c894ee7ac2764527210d8ce1d8bd14a06c67de148b4680781366002f9649e3885e18ab950120c660970ab9a499ea74ea7aa38fe732940b5204300ef7b96a608efec1a74007a4b1d592cf9eb23890d8fa416202857d0e0f9ebad79324d03d09db0502ff4bae0b2dfc0b150ddea806a5ff24e2d32f<br><span class="hljs-symbol">E:</span> <span class="hljs-number">0</span>x10001<br></code></pre></td></tr></table></figure><p><code>duck</code>不必管那么多，或许其他的东西应该试试看（，比如没试过的命令都尝试日一遍看看（，尤其是这个debug，我看你很不对劲[严肃]</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/5.png" alt="5" style="zoom:80%;"><p>果然debug这边确实有什么玄机在里面！或许我们应当enable一下这个debug才对</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/6.png" alt="6" style="zoom:80%;"><p>果然在<code>debug enable</code>之后，似乎每次输出命令都会给你一个什么<code>DBG-CRC32() SIG()</code>的模式。不过这个究竟是什么东西啊（</p><p>百度了一下，原来<code>CRC32()</code>是一个$32$个比特位的哈希值，而<code>SIG</code>是签名结果。</p><p>不过这个时候自己的发展又陷入僵局。。。。<del>（于是再一次瞄了眼别人的wp）</del></p><p>结果发现这是个脑洞题——原来help后面还可以跟上命令名称来告诉你这个命令究竟是干什么用的</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/7.png" alt="7" style="zoom:80%;"><p>在<code>help security</code>这边，我们发现了比较有价值的信息：</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/8.png" alt="8" style="zoom:80%;"><p>简单翻译一下并概括，差不多是这两条内容：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.非特权命令的签名内容是对你输入内容的CRC32进行签名，而特权命令的签名内容是其FoldHash进行签名的内容<br><span class="hljs-attribute">2</span>.FoldHash是通过输入内容sha1获得的<span class="hljs-number">160</span>个比特位的前<span class="hljs-number">80</span>个和后<span class="hljs-number">80</span>比特位异或后得到的结果<br><span class="hljs-attribute">3</span>.每次给出的签名和CRC32的值是一整行的内容，如果命令中有空格，那么最后实际执行的内容仅仅是第一个命令(argument)<br></code></pre></td></tr></table></figure><p>经过查询，CRC32是一种hash方法，其hash后取值范围是$0$到$2^{32}-1$，该方法哈希冲突率比较高。</p><h2 id="Part-3-Analyzation"><a href="#Part-3-Analyzation" class="headerlink" title="Part 3 Analyzation"></a>Part 3 Analyzation</h2><p>于是乱搞到这里差不多可以结束了（，得正式地做题了（</p><p>首先先来回顾一下一下RSA的数字签名</p><p>签名方式：<br>$$<br>\mathrm{SIG}(x)\equiv x^d \pmod n<br>$$<br>验证方式：<br>$$<br>\mathrm{Verify}(x)\equiv \mathrm{SIG}^e(x)\pmod n<br>$$<br>很显然，用于验证的内容时私钥。因此我们需要尝试伪造一个签名才可以完成。</p><p>根据题目提示，不难分析出其<code>foldhash</code>的原理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foldhash</span>(<span class="hljs-params">s</span>):<br>    s=sha1(s.encode()).digest()<br>    a,b=bytes_to_long(s[:<span class="hljs-number">10</span>]),bytes_to_long(s[<span class="hljs-number">10</span>:])<br>    <span class="hljs-keyword">return</span> a^^b<br><span class="hljs-comment"># Different from Python: in Sagemath, ^^ means xor and ^ means power</span><br></code></pre></td></tr></table></figure><p>关注到foldhash实际上是一个数字，CRC32也是一个数字，只不过foldhash的比特位是$80$，而CRC32的结果是$32$位。如果使用特权命令，那么你需要搞出你输入的<strong>那一行内容</strong>的数字签名。</p><p><strong>注意到上面分析的第三条</strong>，暗示着我们可以在特权命令后面加一下东西，我们就可以获取到必要的特权命令foldhash的签名了，也就是特权命令的$\mathrm{foldhash}(x)\equiv x^d \pmod n$的值。</p><p>不过我们这边有个问题来了：$x$是$80$位的内容，但CRC32最后是$32$位内容，因此我们需要构造一个字符串，其格式为<code>&quot;get-flag &quot;+padding</code>，使得该字符串的foldhash值满足$\mathrm{FFFFFFFFH}$光滑，最后根据<strong>RSA的同态性</strong>将所有SIG值相乘后就是我们需要的内容了</p><p>果然，<del>瞄了一眼WP</del>，WP也是这么写的，不过他直接用的<code>get-flag 0</code>，该命令的foldhash的值为$637185588446528046742504$。其分解质因数结果为：<br>$$<br>637185588446528046742504&#x3D;2^3×250091×244079963×1304805461<br>$$<br>不过直接抄wp肯定是没意思的，但问题是这个<code>get-flag 0</code>真的这么好构造出来吗？于是我在Sagemath中测试了以下代码，随机在字符串<code>get flag </code>后面填充$8$位十六进制数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foldhash</span>(<span class="hljs-params">s</span>):<br>    s=sha1(s.encode()).digest()<br>    a,b=bytes_to_long(s[:<span class="hljs-number">10</span>]),bytes_to_long(s[<span class="hljs-number">10</span>:])<br>    <span class="hljs-keyword">return</span> a^^b<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params">s,n</span>):<br>    TABLE=<span class="hljs-string">&quot;abcdef0123456789&quot;</span><br>    t=<span class="hljs-string">&quot; &quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        t+=choice(TABLE)<br>    <span class="hljs-keyword">return</span> s+t<br>NUMBERS=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    NUMBERS+=<span class="hljs-number">1</span><br>    s=padding(<span class="hljs-string">&quot;get-flag&quot;</span>,<span class="hljs-number">8</span>)<br>    q=foldhash(s)<br>    li=<span class="hljs-built_in">list</span>(factor(q))<br>    <span class="hljs-keyword">if</span>(li[-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&lt;=<span class="hljs-number">0xffffffff</span>):<br>        <span class="hljs-built_in">print</span>(s)<br>        <span class="hljs-built_in">print</span>(q)<br>        <span class="hljs-built_in">print</span>(li)<br>        <span class="hljs-built_in">print</span>(NUMBERS)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>下图是一次运行结果。</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/9.png" alt="9" style="zoom:80%;"><p>于是我构造了一个不同并且更简单的字符串：<code>get-flag 8c5fdf74</code>，其foldhash值为$123923881117703856573281$，质因数分解结果为$2719×574657×931169×85174303$，随机生成了$5$次后得到了这个结果。</p><p>然后我又重复运行了这个代码数次，发现最多的一次为$21$次尝试获得符合条件的字符串，最少一次可以一发命中符合条件的字符串，平均大概$6$到$7$次左右的尝试即可产生符合条件的字符串——说明符合条件的字符串并不难找。</p><p>于是找字符串这个问题就这样解决了。下面就是寻找$4$个符合条件的字符串$s_1,s_2,s_3,s_4$，让其CRC32值分别为$2719,574657,931169,85174303$——看来这似乎是一个有难度的事情。</p><p>实际上枚举$6$位内容的可见字符串在原则上是可行的。不过github上还是能找到一个包（[戳这里](<a href="https://github.com/theonlypwner/crc32">theonlypwner&#x2F;crc32: CRC32 tools: reverse, undo&#x2F;rewind, and calculate hashes (github.com)</a>)），直接下载即可。</p><h2 id="Part-4-Attempt-2"><a href="#Part-4-Attempt-2" class="headerlink" title="Part 4 Attempt 2"></a>Part 4 Attempt 2</h2><p><del>真正的尝试阶段</del></p><p>阅读过这个包的内容后，开始了尝试。</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/10.png" alt="10" style="zoom:80%;"><p>然后我连续发送了三个过去，结果发现不对（，那边的验证结果是<code>0xe0db37ee</code>。这两个内容之间是不是有什么联系在里面啊（</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/11.png" alt="11" style="zoom:80%;"><p>那我找个<code>0xe0db37ee</code>的值发过去试试看呢？</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/12.png" alt="12" style="zoom:80%;"><p>果然，最后的结果是正确的，此时记录下签名结果</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/13.png" alt="13" style="zoom:80%;"><p>于是重复上面的步骤，我们就可以获得另外三个的内容了（</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/14.png" alt="14" style="zoom:80%;"><p>将得到的$4$个SIG乘起来模$n$，获得最终的结果。发送过去得到flag。</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/15.png" alt="15" style="zoom:80%;"><h2 id="5-More-Exploration"><a href="#5-More-Exploration" class="headerlink" title="5.More Exploration"></a>5.More Exploration</h2><p>搞出来flag之后，本fw很形象再去看看另外两个命令是干什么的，于是决定如法炮制伪造字符串</p><p>我们可以使用的字符串如下：</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/16.png" alt="16" style="zoom:80%;"><p>根据上面的内容可以获得其私钥：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">N</span>: <span class="hljs-number">0</span>xd888075370effdb016d85de8c894ee7ac2764527210d8ce1d8bd14a06c67de148b4680781366002f9649e3885e18ab950120c660970ab9a499ea74ea7aa38fe732940b5204300ef7b96a608efec1a74007a4b1d592cf9eb23890d8fa416202857d0e0f9ebad79324d03d09db0502ff4bae0b2dfc0b150ddea806a5ff24e2d32f<br><span class="hljs-attribute">E</span>: <span class="hljs-number">0</span>x10001<br><span class="hljs-attribute">P</span>: <span class="hljs-number">0</span>xf0d4aa4868305cdbabba679014f940c0233ca0b10c9db62e3d829dd289103b21143da614b361c6043711956ff2ffd3bf7dcea0418a1e0bbf74784512f99733cd<br><span class="hljs-attribute">Q</span>: <span class="hljs-number">0</span>xe62b8ad7f10d9921a3be7b0c74a81107b5fa704900f94028c6a6e401a00729f6ed961dabbc65878ba5b7f34ca406c7b27577fe5153909d036ecf7e028b555eeb<br><span class="hljs-attribute">D</span>: <span class="hljs-number">0</span>x77de15f0233d37fb1b2a7c1239b7f8ad0ca9dc6e64e5d36fd34418ff160409f4e58509e96f13b056a7a40fc9960da22ec2891a48ae54c9a04d747574b89f83313d1902224cb7e90bf74a30a6e0201e3081c33ea14786adec8f7e05c898f9f55c7e332f7cc7a12263eac1ae60e2122e548207fe3c035e03eaf36798c62c3f6e41<br></code></pre></td></tr></table></figure><p>而security命令的输出与help-security的输出一模一样。。。</p><h2 id="6-Review"><a href="#6-Review" class="headerlink" title="6.Review"></a>6.Review</h2><p>一道很好玩的题目还是值得把玩以下的，感觉收获很大。</p><p>最后附一下网上给的CRC32加密原理，以后研究。</p><img src="/2021/07/15/An-Interesting-Problem-RSAOS/17.png" alt="17" style="zoom:100%;"><img src="/2021/07/15/An-Interesting-Problem-RSAOS/18.png" alt="18" style="zoom:100%;">]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKCTF2021 WriteUp</title>
    <link href="/2021/07/12/GKCTF2021-WriteUp/"/>
    <url>/2021/07/12/GKCTF2021-WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="GKCTF-WriteUp-By-huangx607087"><a href="#GKCTF-WriteUp-By-huangx607087" class="headerlink" title="GKCTF WriteUp By huangx607087"></a>GKCTF WriteUp By huangx607087</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>6月22日的GKCTF，由于忙于期末考试直接摸了，20天后回来复现来了。好在自己期末每门课都过了，死而无憾。</p><p>自己6月初申请留任了校科协和院科协，看来以后不能再摸鱼了。并且如果CTF和平时文化课双开的话，应该难度并不小，<del>不过希望自己可以做到</del>。</p><h2 id="1-GKCTF-2021-Random"><a href="#1-GKCTF-2021-Random" class="headerlink" title="1.[GKCTF 2021]Random"></a>1.[GKCTF 2021]Random</h2><p>通过观察题目代码可以知道，又是一道典型的MT19937预测随机数的题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_mask</span>():<br>    file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;random.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">104</span>):<br>        file.write(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>))+<span class="hljs-string">&quot;\n&quot;</span>)<br>        file.write(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">64</span>))+<span class="hljs-string">&quot;\n&quot;</span>)<br>        file.write(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">96</span>))+<span class="hljs-string">&quot;\n&quot;</span>)<br>    file.close()<br>get_mask()<br>flag = md5(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>)).encode()).hexdigest()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>题目一次给出了$104$组数字，每组数字由$32$位、$64$位、$96$位的二进制数各一个。每一组等价于$6$组$32$位二进制数，总共$624$组$32$位二进制数，因此可以进行预测。</p><p>不过这里要注意一下预测的顺序，设一次给出的分别是$^{32}A,^{64}B,^{96}C$，那么我们预测顺序应该是：$^{32}A_{[31,0]}$,$^{64}B_{[31,0]}$,$^{64}B_{[63,32]}$,$^{96}C_{[31,0]}$,$^{96}C_{[63,32]}$,$^{96}C_{[95,64]}$，其中$^{64}B_{[31,0]}$表示$B$一共有$64$位，取其代表着$2^{31}$到$2^{0}$的比特位。</p><p>我们可以导入上一个博客我们探究出来的包。将其命名为<code>MT19937tools</code>放入我们的解题文件夹中，通过<code>import</code>到我们的解题脚本中来即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> MT19937tools <span class="hljs-keyword">import</span> *<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;random.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>S=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">104</span>):<br>    a32=<span class="hljs-built_in">int</span>(f.readline())<br>    a64=<span class="hljs-built_in">int</span>(f.readline())<br>    a96=<span class="hljs-built_in">int</span>(f.readline())<br>    S.append(a32)<br>    S.append(a64&amp;<span class="hljs-number">0xffffffff</span>)<br>    S.append(a64&gt;&gt;<span class="hljs-number">32</span>)<br>    S.append(a96&amp;<span class="hljs-number">0xffffffff</span>)<br>    S.append((a96&gt;&gt;<span class="hljs-number">32</span>)&amp;<span class="hljs-number">0xffffffff</span>)<br>    S.append(a96&gt;&gt;<span class="hljs-number">64</span>)<br>f.close()<br>D=MT19937(<span class="hljs-number">0</span>)<br>flag= md5(<span class="hljs-built_in">str</span>(D.predict(S)).encode()).hexdigest()<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#14c71fec812b754b2061a35a4f6d8421</span><br></code></pre></td></tr></table></figure><h2 id="2-GKCTF-2021-RRRRsa"><a href="#2-GKCTF-2021-RRRRsa" class="headerlink" title="2.[GKCTF 2021]RRRRsa"></a>2.[GKCTF 2021]RRRRsa</h2><h3 id="Step-1-初步审题"><a href="#Step-1-初步审题" class="headerlink" title="Step 1 初步审题"></a>Step 1 初步审题</h3><p>按照惯例先看一下题目代码，然后将题目后面给出来的所有数据放入<code>given.py</code>文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br>flag = <span class="hljs-string">b&#x27;xxxxxxxxxxxxx&#x27;</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>m = bytes_to_long(flag)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c))<br>p1 = getPrime(<span class="hljs-number">512</span>)<br>q1 = getPrime(<span class="hljs-number">512</span>)<br>n1 = p1*q1<br>e1 = <span class="hljs-number">65537</span><br><span class="hljs-keyword">assert</span> gcd(e1,(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)) == <span class="hljs-number">1</span><br>c1 = <span class="hljs-built_in">pow</span>(p,e1,n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c1))<br>hint1 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2020</span> * p1 + q1, <span class="hljs-number">202020</span>, n1)<br>hint2 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2021</span> * p1 + <span class="hljs-number">212121</span>, q1, n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint1=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hint1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint2=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hint2))<br>p2 = getPrime(<span class="hljs-number">512</span>)<br>q2 = getPrime(<span class="hljs-number">512</span>)<br>n2 = p2*q2<br>e2 = <span class="hljs-number">65537</span><br><span class="hljs-keyword">assert</span> gcd(e1,(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)) == <span class="hljs-number">1</span><br>c2 = <span class="hljs-built_in">pow</span>(q,e2,n2)<br>hint3 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2020</span> * p2 + <span class="hljs-number">2021</span> * q2, <span class="hljs-number">202020</span>, n2)<br>hint4 = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2021</span> * p2 + <span class="hljs-number">2020</span> * q2, <span class="hljs-number">212121</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n2=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(n2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c2=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint3=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hint3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint4=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hint4))<br></code></pre></td></tr></table></figure><p>可以看出整个过程中先加密了$\mathrm {flag}$，然后对加密$\mathrm{flag}$的$p,q$进行了二次加密。对于第一组式子我们可以得到：<br>$$<br>h_1\equiv (2020p_1+q_1)^{202020} \pmod{n_1}<br>$$</p><p>$$<br>h_2\equiv (2021p_1+212121)^{q_1} \pmod {n_1}<br>$$</p><p>同时我们可以根据代码提炼出第二组式子：<br>$$<br>h_3\equiv (2020p_2+2021q_2)^{202020} \pmod{n_2}<br>$$</p><p>$$<br>h_4\equiv (2021p_2+2020q_2)^{212121} \pmod {n_2}<br>$$</p><p>鉴于第二组式子略微简单一点，我们先化简第二组式子</p><h3 id="Step-2-第二组式子的化简"><a href="#Step-2-第二组式子的化简" class="headerlink" title="Step 2 第二组式子的化简"></a>Step 2 第二组式子的化简</h3><p>对于第二组式子：<br>$$<br>h_3\equiv (2020p_2+2021q_2)^{202020} \pmod{n_2}<br>$$</p><p>$$<br>h_4\equiv (2021p_2+2020q_2)^{212121} \pmod {n_2}<br>$$</p><p>根据二项式定理，加上$n_2&#x3D;p_2q_2$，对这两个式子展开，由于中间项全没有了，我们可以得到：<br>$$<br>h_3\equiv 2020^{202020}p_2^{202020} + 2021^{202020} q_2^{202020}\pmod{n_2}<br>$$</p><p>$$<br>h_4\equiv 2021^{212121}p_2^{212121}+2020^{212121}q_2^{212121}\pmod{n_2}<br>$$</p><p>设$t&#x3D;202020×212121$,那么我们也可以得到：<br>$$<br>h_3^{212121}\equiv 2020^tp_2^t+2021^tq_2^t\pmod{n_2}<br>$$</p><p>$$<br>h_4^{202020}\equiv 2021^tp_2^t +2020^tq_2^t\pmod{n_2}<br>$$</p><p>然后我们可以继续得到<br>$$<br>2021^th_3^{212121} \equiv 2020^t2021^tp_2^t+2021^{2t}q_2^t\pmod{n_2}<br>$$</p><p>$$<br>2020^{t}h_4^{202020}\equiv 2020^t2021^tp_2^t+2020^{2t}q_2^t \pmod{n_2}<br>$$</p><p>两式相减，得<br>$$<br>2021^th_3^{212121}-2020^{t}h_4^{202020} \equiv 2021^{2t}q_2^t-2020^{2t}q_2^t&#x3D;(2021^{2t}-2020^{2t})q_2^t \pmod {n_2}<br>$$<br>可以看出这个数字肯定是$q_2$的倍数，将其记为$kq_2$,由于$n_2&#x3D;p_2q_2$，且$p_2,q_2$均为素数，因此可以得到$\gcd(n,kq_2)&#x3D;q_2$，进而分解$n_2$，解密后得到$q$。</p><h3 id="Step-3-第一组式子的化简"><a href="#Step-3-第一组式子的化简" class="headerlink" title="Step 3 第一组式子的化简"></a>Step 3 第一组式子的化简</h3><p>我们再回过来看一下第一组式子：<br>$$<br>h_1\equiv (2020p_1+q_1)^{202020} \pmod{n_1}<br>$$</p><p>$$<br>h_2\equiv (2021p_1+212121)^{q_1} \pmod {n_1}<br>$$</p><p>根据二项式定理，很容易将第一个式子化简<br>$$<br>h_1\equiv 2020^{202020}p_1^{202020}+q_1^{202020}\pmod {n_1}<br>$$<br>但对于第二个式子，展开化简很显然是不太可能的事情</p><p>由于$n_1&#x3D;p_1q_1$，想到离散对数中的一些内容，很显然，在这里$\mathrm{ord}(p_1) &#x3D; q_1$，因为$p_1^x \mod n_1$的值只有$q_1$种结果。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">注：这个结论很好证明，随便搞几个特殊数据试试就出来了<br></code></pre></td></tr></table></figure><p>因此，展开式中第一项即为$2021^{q_1}p_1$，但这边还是出现了一个问题，那就是$q_1$总是在指数上，很难去掉。</p><p>由于$p$是素数，那么根据费马小定理$a^{p}\equiv a \pmod p$和二项式展开定理，可以得到：<br>$$<br>h_2\equiv \sum_{i&#x3D;0}^{q} \mathrm C_q^{i}2021^ip^i212121^{q-i} \pmod {n_1}<br>$$<br>简单化简一下：<br>$$<br>h_2\equiv 2021^{q_1}p_1+\sum_{i&#x3D;0}^{q-1}  212121^{-i}\mathrm C_q^{i}2021^ip^i212121^{q} \pmod {n_1}<br>$$<br>干脆别管常数了（<br>$$<br>h_2\equiv 2021^{q_1}p_1+\sum_{i&#x3D;0}^{q-1}  K_ip^i212121^{q} \pmod {n_1}<br>$$<br>再模一下$q_1$：<br>$$<br>H&#x3D;h_2 \mod q_1 \equiv 2021p_1+212121+Kq_1 \mod q_1 \pmod {n_1}<br>$$<br>如果我们减去$212121$，那么$H&#x3D;2021p_1+Kq_1$，将$H$升高到$202020$次方，然后再用Step2中一样的方法消元，就可以得到$kq_1$，然后与$n_1$求GCD就出结果了。</p><h3 id="Step-4-解题代码"><a href="#Step-4-解题代码" class="headerlink" title="Step 4 解题代码"></a>Step 4 解题代码</h3><p>根据上面的分析，不难写出解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> *<br>l=<span class="hljs-number">202020</span>*<span class="hljs-number">212121</span><br>H3,H4=<span class="hljs-built_in">pow</span>(hint3,<span class="hljs-number">212121</span>,n2),<span class="hljs-built_in">pow</span>(hint4,<span class="hljs-number">202020</span>,n2)<br>HH3,HH4=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2021</span>,l,n2)*H3%n2,<span class="hljs-built_in">pow</span>(<span class="hljs-number">2020</span>,l,n2)*H4%n2<br>kq2=HH4-HH3<br>q2=GCD(kq2,n2)<br>p2=n2//q2<br><span class="hljs-keyword">assert</span> isPrime(p2) <span class="hljs-keyword">and</span> isPrime(q2)<br>Q=<span class="hljs-built_in">pow</span>(c2,inverse(e2,(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)),n2)<br><span class="hljs-keyword">assert</span> isPrime(Q)<br>t=<span class="hljs-built_in">pow</span>(hint2-<span class="hljs-number">212121</span>,<span class="hljs-number">202020</span>,n1)<br>HH1=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2021</span>,<span class="hljs-number">202020</span>,n1)*hint1%n1<br>HH2=<span class="hljs-built_in">pow</span>(<span class="hljs-number">2020</span>,<span class="hljs-number">202020</span>,n1)*t%n1<br>kq1=<span class="hljs-built_in">abs</span>(HH1-HH2)<br>q1=GCD(kq1,n1)<br>p1=n1//q1<br><span class="hljs-keyword">assert</span> isPrime(p1) <span class="hljs-keyword">and</span> isPrime(q1)<br>P=<span class="hljs-built_in">pow</span>(c1,inverse(e1,(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)),n1)<br><span class="hljs-keyword">assert</span> isPrime(P)<br>flag=long_to_bytes(<span class="hljs-built_in">pow</span>(c,inverse(e,(P-<span class="hljs-number">1</span>)*(Q-<span class="hljs-number">1</span>)),P*Q))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#GKCTF&#123;f64310b5-d5e6-45cb-ae69-c86600cdf8d8&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-GKCTF-2021-XOR"><a href="#3-GKCTF-2021-XOR" class="headerlink" title="3.[GKCTF 2021]XOR"></a>3.[GKCTF 2021]XOR</h2><p>看一下题目的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>a = getPrime(<span class="hljs-number">512</span>)<br>b = getPrime(<span class="hljs-number">512</span>)<br>c = getPrime(<span class="hljs-number">512</span>)<br>d = getPrime(<span class="hljs-number">512</span>)<br>d1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(d)[<span class="hljs-number">2</span>:][::-<span class="hljs-number">1</span>] , <span class="hljs-number">2</span>)<br>n1 = a*b<br>x1 = a^b<br>n2 = c*d<br>x2 = c^d1<br>flag = md5(<span class="hljs-built_in">str</span>(a+b+c+d).encode()).hexdigest()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 =&quot;</span>,n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x1 =&quot;</span>,x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>,n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x2 =&quot;</span>,x2)<br></code></pre></td></tr></table></figure><p>题目给出了$a$和$b$的乘积、$a$和$b$异或后的值、$c$和$d$的乘积和$c$和$d’$异或的值。</p><p>对于第一个问情况，我们只需要不断枚举它的每一位就可以了。不过注意一下这样一个同余的性质：不论在几进制下，如果已知$A,B$两个数的最后$n$位，那么它们的乘积的最后$n$位我们也会知道了。</p><p>例如：</p><p>$9×7&#x3D;63$，$53370$<font color="red">$9$</font>$×18826$<font color="red">$7$</font>$&#x3D;10047979230$<font color="red">$3$</font>。 </p><p>$5193×8326&#x3D;43236918$,$8173$<font color="red">$5193$</font>$×6327$<font color="red">$8326$</font>$&#x3D;517206618832$<font color="red">$6918$</font>。</p><p>十六进制这种情况也同样存在：</p><p>$\mathrm{7ABH×96FH&#x3D;485625H}$，$8733$<font color="red">$\mathrm{7AB}$</font>$\mathrm {H×62CE}$<font color="red">$\mathrm{96F}$</font>$\mathrm{H&#x3D;342ED01B03C}$<font color="red">$\mathrm{625}$</font>$\mathrm H$</p><p>因此，我们只需要对于第一种情况直接枚举即可。</p><p>而第二种情况再之前的XDCTF中，脚本见5月17日发布的<strong>21May1</strong>中的第三题，不过这里对于三个剪枝条件我再阐述一下：</p><p>一：不同余的时候剪枝，这个我刚刚讲过，实现代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(CurP*CurQ)%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>))!=n%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>)):<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>二：最小值情况下总数过大，超过了$n$（定上界）</p><p>由于我们是高位低位两头双面夹击，不断补充比特位的，因此在枚举一开始的时候，中间所有的比特位都是$0$。也就是此时枚举时$P,Q$的值都是小于真值的。因此如果此时乘积超过$n$，就说明某个数的高位定大了，需要返回重新定值。实现代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> CurP*CurQ&gt;n:<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>三：最大值情况下总数过小，无法到达$n$。（定下界）</p><p>有一个很好的办法是把中间所有的未确认的比特位全填充成$1$，这种方法也是可行的，但或许会比较麻烦（</p><p>根据第二条中的理论，这个时候我们可以给枚举的数字定个下界。由于我们第$\mathrm {Round}$的轮定下的高位是代表着$2^{511-\mathrm{Round}}$的值，这个时候我们可以给这一位强行$+1$，也就是原本的$0$变$1$，原本的$1$变$2$（进到下一位），如果此时两数的乘积还不到$n$，就说明我们的两个数字确定得小了，需要枚举更大的比特位了。实现代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span>(CurP+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))*((CurQ+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round)))&lt;n: <br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>最后上一下完整的解题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> *<br>bina=<span class="hljs-built_in">bin</span>(x2)[<span class="hljs-number">2</span>:]<br>bina=<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">512</span>-<span class="hljs-built_in">len</span>(bina))+bina<br>binb=<span class="hljs-built_in">bin</span>(x1)[<span class="hljs-number">2</span>:]<br>binb=<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">512</span>-<span class="hljs-built_in">len</span>(binb))+binb<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs2</span>(<span class="hljs-params">P,Q,n,Round</span>):<br>    <span class="hljs-keyword">if</span> Round==<span class="hljs-number">256</span>:<br>        <span class="hljs-keyword">if</span> P*Q==n:<br>            <span class="hljs-keyword">global</span> c,d<br>            c,d=P,Q<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            CurP=P+i*(<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))+(<span class="hljs-built_in">int</span>(bina[Round])^j)*(<span class="hljs-number">2</span>**Round)<br>            CurQ=Q+j*(<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))+(<span class="hljs-built_in">int</span>(bina[<span class="hljs-number">511</span>-Round])^i)*(<span class="hljs-number">2</span>**Round)<br>            <span class="hljs-keyword">if</span> CurP*CurQ&gt;n:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span>(CurP+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))*((CurQ+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round)))&lt;n: <br>                <span class="hljs-keyword">continue</span>     <br>            <span class="hljs-keyword">if</span>(CurP*CurQ)%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>))!=n%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>)):<br>                <span class="hljs-keyword">continue</span><br>            dfs2(CurP,CurQ,n,Round+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs1</span>(<span class="hljs-params">P,Q,n,Round</span>):<br>    <span class="hljs-keyword">if</span> Round&gt;<span class="hljs-number">512</span>:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> Round==<span class="hljs-number">512</span>:<br>        <span class="hljs-keyword">if</span> P*Q==n:<br>          <span class="hljs-keyword">global</span> a,b<br>          a,b=P,Q<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        CurP=(i&lt;&lt;Round)+P<br>        CurQ=((i^<span class="hljs-built_in">int</span>(binb[<span class="hljs-number">511</span>-Round]))&lt;&lt;Round)+Q<br>        <span class="hljs-keyword">if</span>(CurP*CurQ%(<span class="hljs-number">2</span>**(Round))!=n%(<span class="hljs-number">2</span>**(Round))):<br>            <span class="hljs-keyword">continue</span><br>        dfs1(CurP,CurQ,n,Round+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-comment">#----MAIN BELOW----#</span><br>a,b,c,d=<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span><br>dfs2(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n2,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span> isPrime(c) <span class="hljs-keyword">and</span> isPrime(d)<br>dfs1(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n1,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span> isPrime(a) <span class="hljs-keyword">and</span> isPrime(b)<br>flag = <span class="hljs-string">&quot;GKCTF&#123;&quot;</span>+md5(<span class="hljs-built_in">str</span>(a+b+c+d).encode()).hexdigest()+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#GKCTF&#123;f28ed218415356b4336e2f778f2981bb&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>暑假放假回家第一篇复现的wp，总体感觉好久没做过CTF水平下降了很多的样子（</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Explore MT19937</title>
    <link href="/2021/07/10/Explore-MT19937/"/>
    <url>/2021/07/10/Explore-MT19937/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087对PRNG-MT19937的深一步学习"><a href="#huangx607087对PRNG-MT19937的深一步学习" class="headerlink" title="huangx607087对PRNG-MT19937的深一步学习"></a>huangx607087对PRNG-MT19937的深一步学习</h1><h2 id="0x01-对MT19937更深的理解"><a href="#0x01-对MT19937更深的理解" class="headerlink" title="0x01 对MT19937更深的理解"></a>0x01 对MT19937更深的理解</h2><p>MT19937，即梅森旋转算法，是一种高质量的伪随机数生成器，在2020年10月26日的<strong>PRNG MT Notes</strong>文章中，我们已经对这个算法的概念性的内容进行了初步讲述，现在对于MT19937的一些其他性质进行了解。</p><p>CTF中很多会让你预测随机数的情形，都是基于MT19937的。对于MT19937的预测，根据理论可知，我们只需要知道连续的$624$个$32$位二进制数，就可以获取该算法的后面的所有状态或者前面的所有状态。</p><p>而在实际应用中，并不是所有的伪随机数都是32位的，有的时候也会出现8位、16位、64位、96位等32的倍数或约数。当然也有可能出现9位、33位，34位、70位等不规则的情形。因此，上面提到的“连续$624$个$32$位二进制数”可以被替换成“连续$19968$个比特位”。（这里有个很神奇的地方，就是$623×32$的值恰好是$19936$）。</p><p>下面上一下MT19937的基本代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        <span class="hljs-variable language_">self</span>.mt[<span class="hljs-number">0</span>] = seed<br>        <span class="hljs-variable language_">self</span>.mti = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i] = _int32(<span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] ^ <span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getstate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mti == <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.twist()<br>        y = <span class="hljs-variable language_">self</span>.mt[<span class="hljs-variable language_">self</span>.mti]<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.mti = (<span class="hljs-variable language_">self</span>.mti + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> _int32(y)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>            y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>            <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(D.getstate())        <br></code></pre></td></tr></table></figure><p>可以看出，在MT19937中，由于getstate函数并不是直接把内部数组的内容输出，而是经过一个可逆并且一一对应的处理后输出的。这就使得输出的数字随机性较高。</p><p>而如果我们想要生成的随机数的比特位数是$32$的倍数的话，那么这个随机数也是可以预测出来的。这个时候我们只需要将每$32$个比特位看作一个整体，然后按照最低$32$位先生成的原则，就可以预测出整个随机数序列了。也就是说，如果我们想要预测$64$位的随机数序列，那么我们只需要将每个$64$位的随机数拆成两个$32$位的数字，然后把代表着$2^{31}$到$2^{0}$的比特位放前面，$2^{63}$到$2^{32}$的比特位放后面，这样就可以恢复所有的$32$位序列进行预测了。同理可以预测$96,128$等$32$的倍数的随机数的序列。</p><h2 id="0x02-CTF中MT19937常见题型"><a href="#0x02-CTF中MT19937常见题型" class="headerlink" title="0x02 CTF中MT19937常见题型"></a>0x02 CTF中MT19937常见题型</h2><h3 id="2o01-题型一：逆向随机数产生器内部的state中的内容"><a href="#2o01-题型一：逆向随机数产生器内部的state中的内容" class="headerlink" title="2o01 题型一：逆向随机数产生器内部的state中的内容"></a>2o01 题型一：逆向随机数产生器内部的state中的内容</h3><p>根据上面的代码分析内容可知，最后输出的内容并不是随机数产生时原本的state。根据去年10月26日的那篇文章的分析。我们利用下面的代码中的<code>recover()</code>函数和<code>extract_number()</code>函数，就可以实现内部state和实际输出之间数值的互相转换。（具体原理见去年10.26文章的分析）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &gt;&gt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">y</span>):<br>    y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>    y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">y</span>):<br>    y = inverse_right(y,<span class="hljs-number">18</span>)<br>    y = inverse_left(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    y = inverse_left(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    y = inverse_right(y,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br></code></pre></td></tr></table></figure><h3 id="2o02-题型二：预测后续的随机数"><a href="#2o02-题型二：预测后续的随机数" class="headerlink" title="2o02 题型二：预测后续的随机数"></a>2o02 题型二：预测后续的随机数</h3><p>我们可以直接用以下代码来进行预测随机数。也就是直接对已知的$624$个随机数处理成随机数产生器内部状态，然后进行一次推测就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">setstate</span>(<span class="hljs-params">self,s</span>):<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(s)!=<span class="hljs-number">624</span>):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The length of prediction must be 624!&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        <span class="hljs-variable language_">self</span>.mt[i]=<span class="hljs-variable language_">self</span>.recover(s[i])<br>    <span class="hljs-variable language_">self</span>.mti=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self,s</span>):<br>    <span class="hljs-variable language_">self</span>.setstate(s)<br>    <span class="hljs-variable language_">self</span>.twist()<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.getstate(<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="2o03-题型三：求之前的随机数，即逆向twist-函数"><a href="#2o03-题型三：求之前的随机数，即逆向twist-函数" class="headerlink" title="2o03 题型三：求之前的随机数，即逆向twist()函数"></a>2o03 题型三：求之前的随机数，即逆向<code>twist()</code>函数</h3><p>我们先来观察一下这个<code>twist()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>        y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>        <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br></code></pre></td></tr></table></figure><p>很显然，对于内部的每一状态，该函数先继承了原状态的最高位，加上下一状态的最低$31$位，然后又是一次异或的过程，最后有根据临时值$y$的奇偶性又会对内部状态进行一次异或。由于异或过程都是可逆的，如果我们举一个特殊值进行简单的分析，可以得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span> <span class="hljs-number">11100110110101000100101111000001</span> // state[i]<br><span class="hljs-number">2.</span> <span class="hljs-number">10101110111101011001001001011111</span> // state[i + <span class="hljs-number">1</span>]<br><span class="hljs-number">3.</span> <span class="hljs-number">11101010010001001010000001001001</span> // state[i + <span class="hljs-number">397</span>]<br>// y = state[i] &amp; <span class="hljs-number">0x80000000</span> | state[i + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0x7fffffff</span><br><span class="hljs-number">4.</span> <span class="hljs-number">10101110111101011001001001011111</span> // y<br><span class="hljs-number">5.</span> <span class="hljs-number">0</span>1010111011110101100100100101111 // <span class="hljs-built_in">next</span> = y &gt;&gt;&gt; <span class="hljs-number">1</span><br><span class="hljs-number">6.</span> <span class="hljs-number">11001110011100100111100111110000</span> // <span class="hljs-built_in">next</span> ^= <span class="hljs-number">0x9908b0df</span><br><span class="hljs-number">0x9908b0df</span> =&gt; <span class="hljs-number">10011001000010001011000011011111</span><br><span class="hljs-number">7.</span> <span class="hljs-number">00</span>100100001101101101100110111001 // <span class="hljs-built_in">next</span> ^= state[i + <span class="hljs-number">397</span>]<br></code></pre></td></tr></table></figure><p>可以看出，处理后<code>state[i]</code>内容与<code>state[i+1]</code>和<code>state[i+397]</code>有关。</p><p>其中第7步是必须进行的一步(异或的次序不影响结果，所以异或<code>state[i+397]</code>可以看成最后一步。</p><p>但第6步是根据第4步结果的奇偶性确定的,不一定有第6步,但是因为第7步是第5步或者第6步异或<code>state[i+397]</code>的结果,我们可以考察新生成的<code>state[i]</code>异或<code>state[i+397]</code>的结果，来判断是否进行了第六步的操作。 </p><p>由于<code>0x9908b0df =&gt; 10011001000010001011000011011111</code>,而第5步的最高位必定是0,但是如果执行了第6步那么执行后的结果首位则会变成1,于是我们可以根据第7步逆向出的结果的首位判断是否进行了第6步.进而推出第5步,第5步的后31位包含了<code>state[i]</code>的第1位和<code>state[i+1]</code>的第2位至第31位,根据第6步是否进行可以得到<code>state[i+1]</code>的最后1位,所以根据现在的<code>state[i]</code>和以前的<code>state[i+397]</code>,可以获得原来<code>state[i]</code>的1位信息和<code>state[i+1]</code>的31位信息,要获得<code>state[i]</code>剩下的31位信息,需要对现在的<code>state[i-1]</code>进行同样的运算.当需要计算第一位<code>state</code>时,剩下的<code>state</code>都已经恢复了,可以利用恢复了的最后一位<code>state</code>获得还未恢复的<code>state[0]</code>的后31位。</p><p>逆向代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">invtwist</span>(<span class="hljs-params">self</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp = <span class="hljs-variable language_">self</span>.mt[i]^<span class="hljs-variable language_">self</span>.mt[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res = tmp&amp;high<br>        tmp = <span class="hljs-variable language_">self</span>.mt[i-<span class="hljs-number">1</span>]^<span class="hljs-variable language_">self</span>.mt[(i+<span class="hljs-number">396</span>)%<span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res |= (tmp)&amp;low<br>        <span class="hljs-variable language_">self</span>.mt[i] = res<br></code></pre></td></tr></table></figure><p>由此，我们可以上一下整个MT19937的工具包供使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>.mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        <span class="hljs-variable language_">self</span>.mt[<span class="hljs-number">0</span>] = seed<br>        <span class="hljs-variable language_">self</span>.mti = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i] = _int32(<span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] ^ <span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getstate</span>(<span class="hljs-params">self,op=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mti == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> op==<span class="hljs-literal">False</span>:<br>            <span class="hljs-variable language_">self</span>.twist()<br>        y = <span class="hljs-variable language_">self</span>.mt[<span class="hljs-variable language_">self</span>.mti]<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.mti = (<span class="hljs-variable language_">self</span>.mti + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> _int32(y)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>            y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>            <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">self,res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>        tmp = res<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>            tmp = res ^ tmp &gt;&gt; shift &amp; mask<br>        <span class="hljs-keyword">return</span> tmp<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">self,res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>        tmp = res<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>            tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>        <span class="hljs-keyword">return</span> tmp<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">self,y</span>):<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">self,y</span>):<br>        y = <span class="hljs-variable language_">self</span>.inverse_right(y,<span class="hljs-number">18</span>)<br>        y = <span class="hljs-variable language_">self</span>.inverse_left(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>        y = <span class="hljs-variable language_">self</span>.inverse_left(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>        y = <span class="hljs-variable language_">self</span>.inverse_right(y,<span class="hljs-number">11</span>)<br>        <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setstate</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(s)!=<span class="hljs-number">624</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The length of prediction must be 624!&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i]=<span class="hljs-variable language_">self</span>.recover(s[i])<br>        <span class="hljs-comment">#self.mt=s</span><br>        <span class="hljs-variable language_">self</span>.mti=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-variable language_">self</span>.setstate(s)<br>        <span class="hljs-variable language_">self</span>.twist()<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.getstate(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">invtwist</span>(<span class="hljs-params">self</span>):<br>        high = <span class="hljs-number">0x80000000</span><br>        low = <span class="hljs-number">0x7fffffff</span><br>        mask = <span class="hljs-number">0x9908b0df</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            tmp = <span class="hljs-variable language_">self</span>.mt[i]^<span class="hljs-variable language_">self</span>.mt[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>]<br>            <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>                tmp ^= mask<br>                tmp &lt;&lt;= <span class="hljs-number">1</span><br>                tmp |= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp &lt;&lt;=<span class="hljs-number">1</span><br>            res = tmp&amp;high<br>            tmp = <span class="hljs-variable language_">self</span>.mt[i-<span class="hljs-number">1</span>]^<span class="hljs-variable language_">self</span>.mt[(i+<span class="hljs-number">396</span>)%<span class="hljs-number">624</span>]<br>            <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>                tmp ^= mask<br>                tmp &lt;&lt;= <span class="hljs-number">1</span><br>                tmp |= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp &lt;&lt;=<span class="hljs-number">1</span><br>            res |= (tmp)&amp;low<br>            <span class="hljs-variable language_">self</span>.mt[i] = res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    D=MT19937(<span class="hljs-number">48</span>)<br>    <span class="hljs-built_in">print</span>(D.getstate())<br>    <span class="hljs-built_in">print</span>(D.mt[:<span class="hljs-number">5</span>])<br>    <span class="hljs-built_in">print</span>(D.recover(<span class="hljs-number">90324435</span>))<br>    <span class="hljs-built_in">print</span>(D.extract_number(<span class="hljs-number">90324435</span>))<br>    D.twist()<br>    <span class="hljs-built_in">print</span>(D.mt[:<span class="hljs-number">5</span>])<br>    D.invtwist()<br>    <span class="hljs-built_in">print</span>(D.mt[:<span class="hljs-number">5</span>])<br><span class="hljs-comment">#Main Below#</span><br>example()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21May1</title>
    <link href="/2021/05/17/21May1/"/>
    <url>/2021/05/17/21May1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-5月的切题"><a href="#huangx607087-5月的切题" class="headerlink" title="huangx607087 5月的切题"></a>huangx607087 5月的切题</h1><h2 id="0-Intruduction"><a href="#0-Intruduction" class="headerlink" title="0.Intruduction"></a>0.Intruduction</h2><p>之前4月准备更新2篇博客的，不过自己因为准备六级所以只能在4月9日写了一篇博客就结束了（。5月份虽然还是紧张地备考，自己还是抽出来了一点点时间来打打CTF。简单做了一些题目。。这个时候距离六级也就剩20几天了。六月份还有期末考试。可以说这个是自己第二阶段CTF的学学习的最后一篇文章。等7月7日的暑假，自己CTF进入第三阶段，到时候争取能跟寒假一样有个突破，然后9月说不定能<del>进线下很显然这是不可能的，被Nu1L大佬压制，注定只有在X1c中摸鱼的份了</del>。</p><p><del>5月15日，ciscn做出了三道密码题，1200分，死而无憾</del>（ciscnRSA那道题过于简单，故博客中不放这道题的wp）</p><p>本博客常用符号：$|E|$表示集合$E$内元素的个数，或者椭圆曲线上的点数。$\dfrac{\ln}{\ln 2}$表示某个数字的比特位数，$\dfrac{\ln}{\ln 10}$表示十进制位数，$\mathrm{int}(x)$表示向下取整，$\mathrm{int}(x+0.5)$表示四舍五入</p><h2 id="1-CISCN-2021-imageencrypt"><a href="#1-CISCN-2021-imageencrypt" class="headerlink" title="1.[CISCN 2021]imageencrypt"></a>1.[CISCN 2021]imageencrypt</h2><p>这道题是一个对一张图片的加密（实际上是对一个数组的加密），题目给出了加密代码、附加明文和附加密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Chall.py</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag,image,r,key1,key2<br><span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">assert</span>(flag[:<span class="hljs-number">5</span>]==<span class="hljs-string">&#x27;CISCN&#x27;</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(r))==<span class="hljs-number">3</span>)<br>data = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">chr</span>,image))<br><span class="hljs-keyword">assert</span>(flag[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>] == md5.new(data).hexdigest())<br><span class="hljs-keyword">assert</span>(key1&lt;<span class="hljs-number">256</span>)<br><span class="hljs-keyword">assert</span>(key2&lt;<span class="hljs-number">256</span>)<br>x0 = random.random()<br>x0 = <span class="hljs-built_in">round</span>(x0,<span class="hljs-number">6</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(r*x*(<span class="hljs-number">3</span>-x),<span class="hljs-number">6</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">pixel,key1,key2,x0,m,n</span>):<br>    num = m*n/<span class="hljs-number">8</span>    <br>    seqs = []<br>    x = x0<br>    bins = <span class="hljs-string">&#x27;&#x27;</span><br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        x = generate(x)<br>        tmp.append(x)<br>        seqs.append(<span class="hljs-built_in">int</span>(x*<span class="hljs-number">22000</span>))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> seqs:<br>        bin_x  = <span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bin_x) &lt; <span class="hljs-number">16</span>:<br>            bin_x = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(bin_x))+bin_x<br>        bins += bin_x<br>    <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(pixel) == m*n)<br>    cipher = [ <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            index = n*i+j<br>            ch = <span class="hljs-built_in">int</span>(bins[<span class="hljs-number">2</span>*index:<span class="hljs-number">2</span>*index+<span class="hljs-number">2</span>],<span class="hljs-number">2</span>)<br>            pix = pixel[index]<br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-number">0</span>:<br>                pix = (pix^key1)&amp;<span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-number">1</span>:<br>                pix = (~pix^key1)&amp;<span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-number">2</span>:<br>                pix = (pix^key2)&amp;<span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> ch == <span class="hljs-number">3</span>:<br>                pix = (~pix^key2)&amp;<span class="hljs-number">0xff</span><br>            cipher[index] = pix <br>    <span class="hljs-keyword">return</span> cipher<br>flagimage = image<br>testimage = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>*<span class="hljs-number">16</span>):<br>    testimage.append(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))<br><span class="hljs-built_in">print</span> testimage<br><span class="hljs-built_in">print</span> encrypt(testimage,key1,key2,x0,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span> encrypt(flagimage,key1,key2,x0,<span class="hljs-number">24</span>,<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>通过审计代码可以发现：题目中一共有4个未知量：$x_0,r,key_1,key_2$。加密过程也很简单：通过$x_0,r$两个数字通过函数$f(x)&#x3D;rx(3-x)$不断迭代生成一个序列，然后根-据序列里的值来确定明文对哪个值进行异或。</p><h3 id="Step-1-求-key-值"><a href="#Step-1-求-key-值" class="headerlink" title="Step 1:求$key$值"></a>Step 1:求$key$值</h3><p>根据个人做题习惯：先将给出来的附加明文、附加密文、flag密文写入<code>given.py</code>，分别命名为<code>Pg,Cg,Cf</code>。</p><p>很显然，由于对明文的加密仅仅是对$key_1,key_2$的异或操作，因此我们可以先对$Pg,Cg$两个数组进行一次异或，可以得到$key_1,key_2$在集合$(78,177,86,169)$中。其中不难发现$78$的取反是$177$，$86$的取反是$169$。所以$key_1$的取值有两种$(78,177)$，$key_2$的取值有两种$(86,169)$，并且$key_1,key_2$的值进行调换是不等价的，也就是要关注顺序，又是两种可能性。因此，可能的$(key_1,key_2)$的数对一共有$8$种，因此我们可以利用这$8$种组合生成对应的加密指令串，也就是题目<code>encrypt</code>函数中的<code>bins</code></p><p>这一步的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> Pg,Cg<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Generate</span>(<span class="hljs-params">key1,key2</span>):<br>    <span class="hljs-keyword">global</span> K1<br>    s=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> K1:<br>        <span class="hljs-keyword">if</span>(i==key1):<br>            s+=<span class="hljs-string">&quot;00&quot;</span><br>        <span class="hljs-keyword">if</span>(i==(<span class="hljs-number">255</span>-key1)):<br>            s+=<span class="hljs-string">&quot;01&quot;</span><br>        <span class="hljs-keyword">if</span>(i==key2):<br>            s+=<span class="hljs-string">&quot;10&quot;</span><br>        <span class="hljs-keyword">if</span>(i==(<span class="hljs-number">255</span>-key2)):<br>            s+=<span class="hljs-string">&quot;11&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s)==<span class="hljs-number">512</span><br>    <span class="hljs-built_in">print</span>(s)<br>K1,K2=[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Pg)):<br>    K1.append((Pg[i]^Cg[i])&amp;<span class="hljs-number">0xff</span>)<br>    K2.append((~Pg[i]^Cg[i])&amp;<span class="hljs-number">0xff</span>)<br><span class="hljs-built_in">print</span>(K1)<br><span class="hljs-built_in">print</span>(K2)<br>Generate(<span class="hljs-number">78</span>,<span class="hljs-number">86</span>)<br>Generate(<span class="hljs-number">78</span>,<span class="hljs-number">169</span>)<br>Generate(<span class="hljs-number">177</span>,<span class="hljs-number">86</span>)<br>Generate(<span class="hljs-number">177</span>,<span class="hljs-number">169</span>)<br>Generate(<span class="hljs-number">86</span>,<span class="hljs-number">78</span>)<br>Generate(<span class="hljs-number">86</span>,<span class="hljs-number">177</span>)<br>Generate(<span class="hljs-number">169</span>,<span class="hljs-number">78</span>)<br>Generate(<span class="hljs-number">169</span>,<span class="hljs-number">177</span>)<br></code></pre></td></tr></table></figure><p>我们可以将生成的$8$个字符串写如<code>possible.py</code>文件中，定义数组<code>psb</code>储存这$8$个字符串，分别对应上面的八个可能的组合密钥，<code>possible.py</code>文件内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">psb=[<span class="hljs-string">&#x27;0001...1001&#x27;</span>,<br><span class="hljs-string">&#x27;0001...1101&#x27;</span>,<br><span class="hljs-string">&#x27;0100...1000&#x27;</span>,<br><span class="hljs-string">&#x27;0100...1100&#x27;</span>,<br><span class="hljs-string">&#x27;1011...0011&#x27;</span>,<br><span class="hljs-string">&#x27;1110...0010&#x27;</span>,<br><span class="hljs-string">&#x27;1011...0111&#x27;</span>,<br><span class="hljs-string">&#x27;1110...0110&#x27;</span>,]<br></code></pre></td></tr></table></figure><h3 id="Step-2-求-r-x-0-值"><a href="#Step-2-求-r-x-0-值" class="headerlink" title="Step 2:求$r,x_0$值"></a>Step 2:求$r,x_0$值</h3><p>也就是说，我们已经知道了密钥对$(key_1,key_2)$的八个可能组合，现在还有$(x_0,r)$这个组合我们还不知道，$x_0$是六位小数在区间内$[0.000000,0.999999]$，$r$是一个未知的数字。</p><p>根据题目中<code>assert(len(str(r))==3)</code>可知：$r$的取值有两个范围，一个是$[0.0,9.9]$内的一位小数，还有一个是$[100,999]$之间的三位数。不过根据简单的分析，由于题目中对产生的小数有乘$22000$的操作，假设当$x&#x3D;0.1$时，$100×0.1×2.9×22000&#x3D;638000$，远超$16$位整数最大值$65536$，因此$r$只有$[0.1,9.9]$之间。</p><p>我一开始猜的$r&#x3D;5.3$，结果运行加密脚本突然报错了，然后通过输出的数据，我发现迭代几次之后，数字的值就远远超过了$10^{300}$的数量级。说明$r$一定是有个范围的。</p><p>自己尝试了一下，发现当$r≤1.3$的时候整个迭代序列是收敛的，$r&gt;1.3$的时候迭代序列是发散的（因为函数图像左边可以走到负无穷）。所以，我们可以得出：$r$一共有$13$种取值方案，$x_0$一共有$10^6$中可能取值，因此对于一组密钥的枚举，一共是一千三百万种可能性，进行简单的剪枝还是可枚举的——只需要枚举一位根据可能性判断一位，一旦不符合直接<code>return 0</code>，进行下一轮的枚举即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> possible <span class="hljs-keyword">import</span> *<br>answer=psb[<span class="hljs-number">0</span>]<br>keyz=[(<span class="hljs-number">78</span>,<span class="hljs-number">86</span>),(<span class="hljs-number">78</span>,<span class="hljs-number">169</span>),(<span class="hljs-number">177</span>,<span class="hljs-number">86</span>),(<span class="hljs-number">177</span>,<span class="hljs-number">169</span>),(<span class="hljs-number">86</span>,<span class="hljs-number">78</span>),(<span class="hljs-number">86</span>,<span class="hljs-number">177</span>),(<span class="hljs-number">169</span>,<span class="hljs-number">78</span>),(<span class="hljs-number">169</span>,<span class="hljs-number">177</span>)]<br>Standard=[]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">x,r</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(r*x*(<span class="hljs-number">3</span>-x),<span class="hljs-number">6</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BruteForce</span>(<span class="hljs-params">key1,key2,x0,m,n,r</span>):<br>    num = m*n//<span class="hljs-number">8</span>    <br>    seqs = []<br>    x = x0<br>    bins = <span class="hljs-string">&#x27;&#x27;</span><br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        x = generate(x,r)<br>        tmp.append(x)<br>        seqs.append(<span class="hljs-built_in">int</span>(x*<span class="hljs-number">22000</span>))<br>        <span class="hljs-keyword">if</span>(seqs!=Standard[:<span class="hljs-built_in">len</span>(seqs)]):<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> T <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Breaking &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;th Possibility&#x27;</span>)<br>    k1,k2=keyz[T]<br>    answer=psb[T]<br>    Standard=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(answer),<span class="hljs-number">16</span>):<br>        Standard.append(<span class="hljs-built_in">int</span>(answer[i:i+<span class="hljs-number">16</span>],<span class="hljs-number">2</span>))<br>    x0=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x0&lt;<span class="hljs-number">0.999999</span>:<br>        x0=<span class="hljs-built_in">round</span>(x0+<span class="hljs-number">0.000001</span>,<span class="hljs-number">6</span>)<br>        r=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> r&lt;<span class="hljs-number">1.3</span>:<br>            r=r+<span class="hljs-number">0.1</span><br>            <span class="hljs-keyword">if</span>(BruteForce(k1,k2,x0,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,r)):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Find(k1,k2,x0,r)!\n&#x27;</span>,k1,k2,x0,r)<br>                <span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Result:</span><br><span class="hljs-string">Breaking 7th Possibility</span><br><span class="hljs-string">Find(k1,k2,x0,r)!</span><br><span class="hljs-string"> 169 78 0.840264 1.2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Step-3-整合结果，求出答案"><a href="#Step-3-整合结果，求出答案" class="headerlink" title="Step 3:整合结果，求出答案"></a>Step 3:整合结果，求出答案</h3><p>我们成功找出了$x_0&#x3D;0.840264,r&#x3D;1.2$，这样四个未知数所有的内容就全被我们知道了。扩展一下操作串，然后解密回去就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> Cf<br>x0,r=<span class="hljs-number">0.840264</span>,<span class="hljs-number">1.2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(r*x*(<span class="hljs-number">3</span>-x),<span class="hljs-number">6</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key1,key2,x0,m,n</span>):<br>    num = m*n//<span class="hljs-number">8</span>    <br>    seqs = []<br>    x = x0<br>    bins = <span class="hljs-string">&#x27;&#x27;</span><br>    tmp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        x = generate(x)<br>        tmp.append(x)<br>        seqs.append(<span class="hljs-built_in">int</span>(x*<span class="hljs-number">22000</span>))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> seqs:<br>        bin_x  = <span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bin_x) &lt; <span class="hljs-number">16</span>:<br>            bin_x = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(bin_x))+bin_x<br>        bins += bin_x<br>    <span class="hljs-keyword">return</span> bins<br>decstr=encrypt(<span class="hljs-number">169</span>,<span class="hljs-number">78</span>,<span class="hljs-number">0.840264</span>,<span class="hljs-number">24</span>,<span class="hljs-number">16</span>)<br>Pf=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Cf)):<br>    op=<span class="hljs-built_in">int</span>(decstr[i*<span class="hljs-number">2</span>:i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>],<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#print(op)</span><br>    <span class="hljs-keyword">if</span>(op==<span class="hljs-number">0</span>):<br>        Pf.append(Cf[i]^<span class="hljs-number">169</span>)<br>    <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>):<br>        Pf.append(Cf[i]^<span class="hljs-number">86</span>)<br>    <span class="hljs-keyword">if</span>(op==<span class="hljs-number">2</span>):<br>        Pf.append(Cf[i]^<span class="hljs-number">78</span>)<br>    <span class="hljs-keyword">if</span>(op==<span class="hljs-number">3</span>):<br>        Pf.append(Cf[i]^<span class="hljs-number">177</span>)<br><span class="hljs-built_in">print</span>(Pf)<br>S=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Pf:<br>   S*=<span class="hljs-number">256</span><br>   S+=i<br>S=long_to_bytes(S)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CISCN&#123;&#x27;</span>+md5(S).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><span class="hljs-comment">#CISCN&#123;7fa176002ced947e49f1752c1eb9dd62&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-CopperMove"><a href="#2-CopperMove" class="headerlink" title="2.CopperMove"></a>2.CopperMove</h2><h3 id="Step-1：初步观察代码，确定算法"><a href="#Step-1：初步观察代码，确定算法" class="headerlink" title="Step 1：初步观察代码，确定算法"></a>Step 1：初步观察代码，确定算法</h3><p>还是先看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt, gcd<br><span class="hljs-keyword">import</span> random<br>BITS = <span class="hljs-number">512</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>flag = f.read()<br>f.close()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_prime</span>(<span class="hljs-params">nbit</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = getPrime(nbit)<br>        <span class="hljs-keyword">if</span> p % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">nbit</span>):<br>    p = get_prime(nbit)<br>    q = get_prime(nbit)<br>    <span class="hljs-keyword">if</span> q &gt; p:<br>        p, q = q, p<br>    n = p * q<br>    bound = <span class="hljs-built_in">int</span>(sqrt(<span class="hljs-number">2</span> * n)) // <span class="hljs-number">12</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = random.randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">round</span>(sqrt(bound)))<br>        y = random.randint(<span class="hljs-number">1</span>, bound) // x<br>        zbound = <span class="hljs-built_in">int</span>(((p - q) * <span class="hljs-built_in">round</span>(n ** <span class="hljs-number">0.25</span>) * y) // (<span class="hljs-number">3</span> * (p + q)))<br>        z = zbound - ((p + <span class="hljs-number">1</span>) * (q + <span class="hljs-number">1</span>) * y + zbound) % x<br>        e = ((p + <span class="hljs-number">1</span>) * (q + <span class="hljs-number">1</span>) * y + z) // x<br>        <span class="hljs-keyword">if</span> gcd(e, (p + <span class="hljs-number">1</span>) * (q + <span class="hljs-number">1</span>)) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    gifts = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:][:<span class="hljs-number">22</span>], <span class="hljs-number">2</span>), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:][<span class="hljs-number">256</span>:<span class="hljs-number">276</span>], <span class="hljs-number">2</span>)]<br>    <span class="hljs-keyword">return</span> n, e, gifts<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">p1, p2</span>):<span class="hljs-comment"># ECC Add</span><br>    <span class="hljs-keyword">if</span> p1 == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> p2<br>    <span class="hljs-keyword">if</span> p2 == (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> p1<br>    <span class="hljs-keyword">if</span> p1[<span class="hljs-number">0</span>] == p2[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> (p1[<span class="hljs-number">1</span>] != p2[<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> p1[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> p1[<span class="hljs-number">0</span>] == p2[<span class="hljs-number">0</span>]:<br>        tmp = (<span class="hljs-number">3</span> * p1[<span class="hljs-number">0</span>] * p1[<span class="hljs-number">0</span>]) * inverse(<span class="hljs-number">2</span> * p1[<span class="hljs-number">1</span>], n) % n<br>    <span class="hljs-keyword">else</span>:<br>        tmp = (p2[<span class="hljs-number">1</span>] - p1[<span class="hljs-number">1</span>]) * inverse(p2[<span class="hljs-number">0</span>] - p1[<span class="hljs-number">0</span>], n) % n<br>    x = (tmp * tmp - p1[<span class="hljs-number">0</span>] - p2[<span class="hljs-number">0</span>]) % n<br>    y = (tmp * (p1[<span class="hljs-number">0</span>] - x) - p1[<span class="hljs-number">1</span>]) % n<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">int</span>(y))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">n, p</span>):<br>    r = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    tmp = p<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">0</span> &lt; n:<br>        <span class="hljs-keyword">if</span> n &amp; <span class="hljs-number">1</span> == <span class="hljs-number">1</span>:<br>            r = add(r, tmp)<br>        n, tmp = n &gt;&gt; <span class="hljs-number">1</span>, add(tmp, tmp)<br>    <span class="hljs-keyword">return</span> r<br>n, e, hint = gen(BITS)<br>pt = (bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">2</span>]), bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">2</span>:]))<br>c = mul(e, pt)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;h1 = <span class="hljs-subst">&#123;hint[<span class="hljs-number">0</span>]&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;h2 = <span class="hljs-subst">&#123;hint[<span class="hljs-number">1</span>]&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>\n&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>初次代码审计，可能并看不出什么，不过这里我们可以发现这样两个情况：</p><p>一是生成$e$的方式非常复杂，并且$p,q\equiv 2 \pmod 3$。</p><p>二是add、mul函数是二元组的计算，并且看似非常复杂，像坐标的计算</p><p>根据条件二，可以判断出这应该是ECC，根据条件一，可以判断出这里用的是KMOV-91算法，相关内容见博客上发布的<strong>ECCNotes3(2021.3.25)</strong></p><h3 id="Step-2：二次审计代码，定参数性质"><a href="#Step-2：二次审计代码，定参数性质" class="headerlink" title="Step 2：二次审计代码，定参数性质"></a>Step 2：二次审计代码，定参数性质</h3><p>通过审计代码，我们可以发现：$\dfrac{\ln x}{\ln 2}&#x3D;254,\dfrac{\ln y}{\ln 2}&lt;260,\dfrac{\ln n}{\ln 2}&#x3D;\dfrac{\ln e}{\ln 2}&#x3D;1024$。并且$\dfrac{\ln }{\ln 2}(ex-yn)&#x3D;535$。</p><p>由于这里不知道WienerAttack怎么做，不过我们可以将这个特殊化成RSA中低解密指数广播（虽然只有一组）攻击的形式，构造低解密指数攻击的格，就可以把$x$求出来了。（相关方法见文章<strong>VNCTF WriteUp，2021.4.9发布</strong>）</p><p>然后根据$y&#x3D;\dfrac{ex}n$，可以很快的求出$y$的值。然后就可以求出余数$k$。</p><p>然后我们可以这样进行推导：由<br>$$<br>k&#x3D;y(p+q+1)-z<br>$$<br>可以推出<br>$$<br>k&#x3D;y(p+q+1)-\mathrm{zbound}-[(\phi y-\mathrm{zbound})\mod x]<br>$$<br>其中$\phi&#x3D;(p+1)(q+1)$，其意义是椭圆曲线上的点数，不是RSA中的$\phi&#x3D;(p-1)(q-1)$！</p><p>然后我们根据条件，又可以推出<br>$$<br>k&#x3D;y(p+q+1)+{\text{int}(\dfrac{(p-q)\text{int}(\sqrt[4]n+0.5)y}{3(p+q)}})-[\phi y-\mathrm{zbound} \mod x]<br>$$<br>由于最后一项一定小于$x$，而第二项与$\dfrac{(p-q)\text{int}(\sqrt[4]n+0.5)y}{3(p+q)}$真实值不超过$1$。因此上面的式子除以$y$，就是$K&#x3D;p+q+1+\dfrac{(p-q)\text{int}(\sqrt[4]n+0.5)y}{3(p+q)}$的值。而此时的未知量，只剩下了$p,q$。</p><p>因此我们可以得到这样的式子：<br>$$<br>p-q&#x3D;\dfrac{3(p+q)(K-1-(p+q))}{\mathrm{int}(\sqrt[4]{n}+0.5)}<br>$$<br>又根据$(p+q)^2-(p-q)^2&#x3D;4n$，假设$p+q&#x3D;s$，之前的结果可以得到这样的结果<br>$$<br>4n&#x3D;s^2-\dfrac{\mathrm{int}(9s^2(K-1-s)^2)}{\mathrm{int}^2(\sqrt[4]n +0.5)}<br>$$<br>然后用二分法求解即可。</p><p>求出来之后，就可以知道分解$p,q$，求出解密指数$d$，题目出解。</p><p>这里椭圆曲线是$y^2&#x3D;x^3+b$，相关内容见<strong>ECC Notes3</strong>中的KMOV91</p><p>上一下解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e=<br>n=<br>Cx=<br>Cy=<br>M=matrix(ZZ,[[<span class="hljs-number">2</span>^<span class="hljs-number">512</span>,e],[<span class="hljs-number">0</span>,n]])<br>M=M.LLL()<br>x=(<span class="hljs-built_in">abs</span>(M[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])&gt;&gt;<span class="hljs-number">512</span>)<br>y=e*x//n<br>k=e*x-y*n<br>K=k//y<br>l,r=<span class="hljs-number">0</span>,K<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">515</span>):<br>    s=(l+r)//<span class="hljs-number">2</span><br>    v=s*s-<span class="hljs-built_in">int</span>(s*s*<span class="hljs-number">9</span>*(K-<span class="hljs-number">1</span>-s)*(K-<span class="hljs-number">1</span>-s))//(<span class="hljs-built_in">round</span>(n**<span class="hljs-number">0.25</span>)*<span class="hljs-built_in">round</span>(n**<span class="hljs-number">0.25</span>))<br>    <span class="hljs-keyword">if</span>(v&lt;<span class="hljs-number">4</span>*n):<br>        l=s<br>    <span class="hljs-keyword">else</span>:<br>        r=s<br>pandq=r<br>d=inverse(e,n+pandq+<span class="hljs-number">1</span>)<br>b=(Cy**<span class="hljs-number">2</span>-Cx**<span class="hljs-number">3</span>)%n<br>E=EllipticCurve(Zmod(n), [<span class="hljs-number">0</span>, b])<br>C=E(Cx,Cy)<br>P=d*C<br>flag=long_to_bytes(P[<span class="hljs-number">0</span>])+long_to_bytes(P[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#CISCN&#123;e91fef4ead7463b13d00bda65f540477&#125;</span><br></code></pre></td></tr></table></figure><p>2021虎符CTF得到这道题是这个题目的扩展版,只不过这里$\ln x&#x3D;0.38\ln n$，提供了三组数据，也一样解。</p><p><a href="https://ctf.njupt.edu.cn/597.html#simultaneous">REFERENCE</a></p><h2 id="3-XDCTF-RSA"><a href="#3-XDCTF-RSA" class="headerlink" title="3.[XDCTF RSA]"></a>3.[XDCTF RSA]</h2><p>2021年5月7日，做出了shallow出的题目，死而无憾</p><p>还是先按照惯例看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(bytes_to_long(flag) , e , n))<br>_q = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(q)[<span class="hljs-number">2</span>:][::-<span class="hljs-number">1</span>] , <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(p ^ _q)<br></code></pre></td></tr></table></figure><p>题目给出了$e,n$的同时，还给出了$p$的值与$q’$异或之后的值，其中$q’$是$q$的比特位完全反过来对应的值.</p><p>之前自己在网上见到过一个题目，条件是$q$的比特位为$p$的比特位倒过来，也就是$p&#x3D;q’$。这就说明那道题是这一题的一个特殊情况：$p \text { xor } q’&#x3D;0$。所以可以认为这两题是同一个题目</p><p>所以我们只需要一位一位，同时枚举$p,q$的高位就可以了，这样顺便就能把对应的低位求出来。因此枚举是$256$轮而不是$512$轮。这边还有一点，就是异或后的值不足$512$个比特位，因此我们要对$a$（也就是异或的值）的高位进行补$0$。</p><p>然后我们可以就可以开始我们的dfs操作了，不过这里有几个剪枝点可以简单的提一下：</p><p>1.根据同余的性质可知：无论在多少进制下，只要两个数的最后$n$位固定下来了，那么这两个数的乘积的最后$n$位也被固定了。因此我们只要发现枚举时两个数乘出来最后的比特位与$n$值对应的比特位不一致，那么我们就把这个状态舍弃掉</p><p>2.由于我们是一位一位的从$p,q$的高位开始枚举，因此实际上随着枚举的进行，如果假设中间未被枚举到的数位全是$0$的话，$p,q$的值应该是逐渐变大的。因此在枚举中，如果发现$p,q$两个数的乘积超过了$n$，就又可以说明这一种情况不符合条件了，也需要通过<code>continue</code>将其舍弃，这样我们就可以给枚举值定上限了。</p><p>3.与此同时，我们还可以给枚举值定下限。假设我们枚举的时候，中间未被枚举到的位全是$1$，那么我们枚举时就可以认为$p,q$两个值是不断缩小的，而此时我们假设的$p,q$两个数乘积还不到$n$，就说明这种情况也不符合题意，我们可以通过这个方式给枚举值定下限。而如果我们想假设这两个数未被枚举到的比特位全是$1$的话，可以认为是$2^{511-\mathrm{Round}}\mathrm{CurP}$（具体原因可以自己尝试一下）。</p><p>这样设置这三个筛选条件，就可以获得$p,q$的值解密了。</p><p><del>还有两题实在做不出来，因为自己tcl</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> e,n,c,a<br>bina=<span class="hljs-built_in">bin</span>(a)[<span class="hljs-number">2</span>:]<br>bina=<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">512</span>-<span class="hljs-built_in">len</span>(bina))+bina<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">P,Q,Round</span>):<br>    <span class="hljs-keyword">if</span> Round==<span class="hljs-number">256</span>:<br>        <span class="hljs-keyword">if</span> P*Q==n:<br>            <span class="hljs-keyword">global</span> p,q<br>            p,q=P,Q<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            CurP=P+i*(<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))+(<span class="hljs-built_in">int</span>(bina[Round])^j)*(<span class="hljs-number">2</span>**Round)<br>            CurQ=Q+j*(<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))+(<span class="hljs-built_in">int</span>(bina[<span class="hljs-number">511</span>-Round])^i)*(<span class="hljs-number">2</span>**Round)<br>            <span class="hljs-keyword">if</span> CurP*CurQ&gt;n:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span>  (CurP+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round))*((CurQ+<span class="hljs-number">2</span>**(<span class="hljs-number">511</span>-Round)))&lt;n: <br>                <span class="hljs-keyword">continue</span>     <br>            <span class="hljs-keyword">if</span> (CurP*CurQ)%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>))!=n%(<span class="hljs-number">2</span>**(Round+<span class="hljs-number">1</span>)):<br>                <span class="hljs-keyword">continue</span><br>            dfs(CurP,CurQ,Round+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-comment">#------Main Below------#</span><br>p,q=<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span><br>dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span> p!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> q!=<span class="hljs-literal">None</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="4-CSAWQual-2019-byte-me"><a href="#4-CSAWQual-2019-byte-me" class="headerlink" title="4.[CSAWQual 2019]byte_me"></a>4.[CSAWQual 2019]byte_me</h2><p>XDCTF中shallow出了一个块密码题，是CBC模式，<del>但自己太菜了没做出来</del>，然后我在buu上找到了一个同样的块密码，不过这里用的是EBC模式，关于块密码题，我会在第三阶段的CTF学习中，会专门在一篇博客中对几种块密码的加密模式进行一个比较详细的阐述.</p><p>ECB模式，即电子密码本，对每一块明文逐个加密就可以得到密文（最后一个块要填充）。该模式具有简单、高效的特点，然而缺点也很明显，就是密文很有规律（因为使用的是同一个密钥），容易在主动攻击中被破解。在DES&#x2F;3DES加密中，取用的块长度为8，而在AES加密中，块长度为16。</p><p>该模式有个很显著的特点：既不需要计数器也不需要初始向量iv</p><p>首先我们看一下加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">text, block_size</span>):<br>    pad_size = block_size - (<span class="hljs-built_in">len</span>(text) % block_size)<br>    <span class="hljs-keyword">if</span> pad_size == <span class="hljs-number">0</span>:<br>        pad_size = block_size<br>    pad = <span class="hljs-built_in">chr</span>(pad_size) * pad_size<br>    <span class="hljs-keyword">return</span> text + pad<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_key</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<br>        [random.choice(string.ascii_letters + string.digits) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num)]<br>    ).upper()<br>key = random_key(<span class="hljs-number">16</span>)<br>random_string = random_key(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">15</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ecb_enc</span>(<span class="hljs-params">text</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    <span class="hljs-keyword">return</span> cipher.encrypt(text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encryption_oracle</span>(<span class="hljs-params">text, unknown</span>):<br>    text = pad(random_string + text + unknown, <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> ecb_enc(text)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">string_length_detect</span>():<br>    str1 = encryption_oracle(<span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    decoded_flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readline()<br>    <span class="hljs-built_in">print</span>(encryption_oracle(decoded_flag, <span class="hljs-string">&quot;&quot;</span>).encode(<span class="hljs-string">&quot;hex&quot;</span>))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        userInput = raw_input(<span class="hljs-string">&quot;Tell me something: &quot;</span>)<br>        <span class="hljs-built_in">print</span>(encryption_oracle(<span class="hljs-built_in">str</span>(userInput), decoded_flag).encode(<span class="hljs-string">&quot;hex&quot;</span>))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    exit(main())<br></code></pre></td></tr></table></figure><p>通过代码审计，我们可以得到这样一个关系：设明文为$m$，一个随机前缀$w$（长度在1到15位之间）。一开始给出$w+m$的加密结果$c$（<strong>见下图第一段</strong>），数了一下，一共$128$位，考虑到$w$的长度是1到15位，那么估计$m$的长度应该是32至​48​位之间的样子。也就是需要三个块。而这道题，是对AES-ECB模式的选择明文攻击，对服务器发送字符串$s$，最后服务器返回对$w+s+m$加密的密文</p><p>一开始自己没有思路的时候，对服务器发送了字符串<code>a</code>,<code>aa</code>,<code>aaa</code>,<code>aaaa</code>,… …，然后我发现当字符<code>a</code>的个数达到某个值的时候，最前面32位的密文保持不变——经过思考，这不变的32位密文，是随机前缀$w$通过填充字符<code>a</code>至16位时的密文。假设这一段字符<code>a</code>称为字符串$i$，那么我们取使加密结果不再改变的<code>a</code>字符的最小值作为字符串$i$，那么此时第一段加密结果，也就是最前面32位，就是字符串$w+i$的结果，第32至64位是$m$前16位的加密结果，称为$m_1$，再往后就是$m_2,m_3$，分别对应$m$的第17-32位和第33位及以后的加密结果。<strong>见下图第二段</strong></p><p>然后，我们可以构造一段长度15，内容为<code>#</code>的字符串，称为$k$串，对服务器发送$i+k$，服务器返回$w+i+k+m$的密文，其中$w+i$这一个长度为16的字符串对应的密文前32位，而密文第 33至48位对应着$k$和$m$第一位的密文。这一次，我们可以对这一位进行爆破。<strong>见下图第三段灰色部分，为爆破的这一位</strong>。如果爆破时的某一个加密结果的33至48位与初始发送的33至48位一致，那么我们就认为这一位成功爆破。并存储下来作为$f$</p><p>然后我们就可以把$k$改成14个<code>#</code>，然后13个<code>#</code>，每次发送 $i+k+f$，返回$w+i+k+f+m$的密文。其中$w+i$为16位，$k+f$为16位，不破坏加密的整体性，<strong>见下图第四段和第五段</strong>，棕色是我们已知的$m_1$的部分，灰色是我们爆破的那一位</p><p><img src="/2021/05/17/21May1/201.png" alt="401"></p><p>很快，我们知道了$m_1$的全部，也就是flag的前16位，见下面第六段**(注意下面这张图的标尺与上面一个图不一样！)**</p><p>这个时候，我们可以截取$m_1$的最后15位，然后仍然是爆破第整个序列第32位，使这两个地方的加密值相同，可以获得$m_2$的第一位。</p><p>然后截取$m_1$的最后14位，13位，这样我们可以知道的$m_2$的内容越来越多… …<strong>见下图第七段</strong></p><p>同理，<strong>见下图第八段和第九段，同理可以知道$m_3$的所有内容</strong></p><p><img src="/2021/05/17/21May1/202.png" alt="402"></p><p>最后上一下脚本和运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">29419</span>)<br>C=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-comment">#print(C)</span><br><span class="hljs-comment">#print(len(C))</span><br><span class="hljs-comment">#sh.interactive()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>(<span class="hljs-params">sh,L,R</span>):<br>    <span class="hljs-keyword">global</span> suffex,flag<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(i,flag[<span class="hljs-number">15</span>:])<br>        suff=<span class="hljs-string">&#x27;#&#x27;</span>*i<br>        sh.recvuntil(<span class="hljs-string">&#x27;ng: &#x27;</span>)<br>        <span class="hljs-comment">#print(flag+&#x27;\n&#x27;)</span><br>        sh.send(suffex+suff+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            rightseq=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>):<br>            nowch=<span class="hljs-built_in">chr</span>(j)<br>            sh.recvuntil(<span class="hljs-string">&#x27;ng: &#x27;</span>)<br>            sh.send(suffex+flag[-<span class="hljs-number">15</span>:]+nowch+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                getseq=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span>(getseq[<span class="hljs-number">32</span>:<span class="hljs-number">64</span>]==rightseq[L:R]):<br>                flag=flag+nowch<br>                <span class="hljs-keyword">break</span><br>flag=<span class="hljs-string">&#x27;#&#x27;</span>*<span class="hljs-number">15</span><br>recvsuff=<span class="hljs-string">&#x27;0123456789abcdef0123456789abcdef&#x27;</span><br>suffex=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    suff=<span class="hljs-string">&#x27;*&#x27;</span>*(i+<span class="hljs-number">1</span>)<br>    sh.recvuntil(<span class="hljs-string">&#x27;ng: &#x27;</span>)<br>    sh.send(suff+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        curseq=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span>(curseq[:<span class="hljs-number">32</span>]==recvsuff):<br>        suffex=<span class="hljs-string">&#x27;*&#x27;</span>*i<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        recvsuff=curseq[:<span class="hljs-number">32</span>]<br><span class="hljs-built_in">print</span>(suffex)<br>getflag(sh,<span class="hljs-number">32</span>,<span class="hljs-number">64</span>)<br>getflag(sh,<span class="hljs-number">64</span>,<span class="hljs-number">96</span>)<br>getflag(sh,<span class="hljs-number">96</span>,<span class="hljs-number">128</span>)<br></code></pre></td></tr></table></figure><p><img src="/2021/05/17/21May1/1.jpg" alt="403"></p><h2 id="5-CISCN2018-Crackme-Java"><a href="#5-CISCN2018-Crackme-Java" class="headerlink" title="5.[CISCN2018] Crackme Java"></a>5.[CISCN2018] Crackme Java</h2><p>首先看一下题目，刚好最近学了一下java，能够搞懂题目的意思</p><p>然后简单的审计一下代码，发现使Elgamal，只不过$c_1,c_2$都是以$32$进制给出来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test0</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">BigInteger</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">BigInteger</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711&quot;</span>);<br>    <span class="hljs-keyword">static</span> BigInteger h= <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     Alice write the below algorithm for encryption.</span><br><span class="hljs-comment">     The public key &#123;p, h&#125; is broadcasted to everyone.</span><br><span class="hljs-comment">    @param val: The plaintext to encrypt.</span><br><span class="hljs-comment">        We suppose val only contains lowercase letter &#123;a-z&#125; and numeric charactors, and is at most 256 charactors in length.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">pkEnc</span><span class="hljs-params">(String val)</span>&#123;<br>        BigInteger[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>[<span class="hljs-number">2</span>];<br>        BigInteger bVal=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(val.toLowerCase(),<span class="hljs-number">36</span>);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt()+<span class="hljs-string">&quot;&quot;</span>);<br>        ret[<span class="hljs-number">0</span>]=two.modPow(r,p);<br>        ret[<span class="hljs-number">1</span>]=h.modPow(r,p).multiply(bVal);<br>        <span class="hljs-keyword">return</span> ret[<span class="hljs-number">0</span>].toString(<span class="hljs-number">36</span>)+<span class="hljs-string">&quot;==&quot;</span>+ret[<span class="hljs-number">1</span>].toString(<span class="hljs-number">36</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* Alice write the below algorithm for decryption. x is her private key, which she will never let you know.</span><br><span class="hljs-comment">    public static String skDec(String val,BigInteger x)&#123;</span><br><span class="hljs-comment">        if(!val.contains(&quot;==&quot;))&#123;</span><br><span class="hljs-comment">            return null;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else &#123;</span><br><span class="hljs-comment">            BigInteger val0=new BigInteger(val.split(&quot;==&quot;)[0],36);</span><br><span class="hljs-comment">            BigInteger val1=new BigInteger(val.split(&quot;==&quot;)[1],36);</span><br><span class="hljs-comment">            BigInteger s=val0.modPow(x,p).modInverse(p);</span><br><span class="hljs-comment">            return val1.multiply(s).mod(p).toString(36);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;You intercepted the following message, which is sent from Bob to Alice:&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;eag0vit7sboilgcfu0fbkbrmjgs4pzi2oznmqrkey5h1bwicvborngscx050u8vpghi69xqjmotgrtj4vq8fgw9tzi916o034bu==ahcwy7c0qq5cnxdntssqrj972nhvzt5liqlq0cvv0o1fm2ee4205nemuy5tvkda0hyetu5a5xcqqov8exk901z5xebvkcdo3jiq1gj8pkxzhjaeg9z6syu58neijxy56am7d1l9grhgtgkkfc432wm6h3jr8y1xx&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Please figure out the plaintext!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//eag0vit7sboilgcfu0fbkbrmjgs4pzi2oznmqrkey5h1bwicvborngscx050u8vpghi69xqjmotgrtj4vq8fgw9tzi916o034bu==ahcwy7c0qq5cnxdntssqrj972nhvzt5liqlq0cvv0o1fm2ee4205nemuy5tvkda0hyetu5a5xcqqov8exk901z5xebvkcdo3jiq1gj8pkxzhjaeg9z6syu58neijxy56am7d1l9grhgtgkkfc432wm6h3jr8y1xx</span><br></code></pre></td></tr></table></figure><p>注意到$r$是<code>random_integer</code>，说明应该不超过$42$亿，简单枚举一下就可以知道$r$的值了</p><p>$r$解出来了就可以知道所有的内容了<del>不过不知道最后应该交上去什么，不过西电大佬dbt是解出来的，不过他也忘记了，因为真的不好改</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span>(s[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;flag&#123;&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        <span class="hljs-keyword">if</span>(s[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">128</span>)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>p=<span class="hljs-number">11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711</span><br>h=<span class="hljs-number">7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916</span><br>c1=<span class="hljs-string">&#x27;eag0vit7sboilgcfu0fbkbrmjgs4pzi2oznmqrkey5h1bwicvborngscx050u8vpghi69xqjmotgrtj4vq8fgw9tzi916o034bu&#x27;</span><br>c2=<span class="hljs-string">&#x27;ahcwy7c0qq5cnxdntssqrj972nhvzt5liqlq0cvv0o1fm2ee4205nemuy5tvkda0hyetu5a5xcqqov8exk901z5xebvkcdo3jiq1gj8pkxzhjaeg9z6syu58neijxy56am7d1l9grhgtgkkfc432wm6h3jr8y1xx&#x27;</span><br>c1,c2=<span class="hljs-built_in">int</span>(c1,<span class="hljs-number">36</span>),<span class="hljs-built_in">int</span>(c2,<span class="hljs-number">36</span>)<br>r=<span class="hljs-number">1599939680</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,r,p)==c1)<br>e1=<span class="hljs-built_in">pow</span>(h,r,p)<br><span class="hljs-keyword">assert</span> c2%e1==<span class="hljs-number">0</span><br>bval=c2//e1<br>table=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span><br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">from</span> base36 <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(dumps(bval))<br><span class="hljs-comment">#ciscncongratulationsthisisdesignedbyalibabasecurity2096022101</span><br></code></pre></td></tr></table></figure><h2 id="6-Conclusion"><a href="#6-Conclusion" class="headerlink" title="6.Conclusion"></a>6.Conclusion</h2><p>huangx607087 CTF学习的第二阶段至此就结束了。后面准备备考六级和期末考试了。</p><p>7月7日，博客会继续更新，第三阶段CTF学习开始，自己争取能够在以后有1次去线下看看各位大佬们的机会吧<del>虽然我知道就算是去了大概率还是去摸鱼的</del>，寒假自己的CTF水平有了个突破，争取这个暑假也能有个突破吧</p><p>不知不觉，今天都已经5月18日了，7月7日放暑假，也就是说自己大一就剩不到50天了（草</p><p>没想到自己已经走了这么远了啊… …<del>怎么感觉昨天才入学啊woc</del>……</p><p>争取到时候能有Am4dalao的一半水平吧（，哎（</p><p><del>打CTF能认识dw和dbt两位密码神，死而无憾</del></p><p><del>6月28日进入考试周，冲冲冲，争取每门课都能有60——不过我发现自己预习不完了怎么办</del>，我只是不想补考（哎</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF WriteUp</title>
    <link href="/2021/04/09/VNCTF-WriteUp/"/>
    <url>/2021/04/09/VNCTF-WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="VNCTF-WriteUp-By-huangx607087"><a href="#VNCTF-WriteUp-By-huangx607087" class="headerlink" title="VNCTF WriteUp By huangx607087"></a>VNCTF WriteUp By huangx607087</h1><h2 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="0.Introduction"></a>0.Introduction</h2><p>3月14日的VNCTF，自己一道题也不会，只能靠赛后复现了。</p><h2 id="1-WhiteGive"><a href="#1-WhiteGive" class="headerlink" title="1.WhiteGive"></a>1.WhiteGive</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>m = bytes_to_long(url)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>d = getPrime(<span class="hljs-number">256</span>)<br>e = inverse(d,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br>m = e<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * p * q<br>e = <span class="hljs-number">0x10001</span><br>d = inverse(e,lcm(p,lcm(p-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)))<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br>hint = <span class="hljs-built_in">pow</span>(d,e,n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)p<br><span class="hljs-built_in">print</span>(hint)<br></code></pre></td></tr></table></figure><p>这道题给出了第一步加密的$n,c$的值，并对第一次的$e$进行了另一轮加密操作。其中$d$是$e&#x3D;65537$模$\dfrac{p(p-1)(q-1)}{\gcd(p-1,q-1)}$的逆元。因此我们要求出第一轮$e$的值。而给出了$h\equiv d^e \pmod n$</p><p>一开始，自己想的是计算出$e^{e-1}$，由$c&#x3D;m^e$，那么我们可以计算。</p><p><img src="/2021/04/09/VNCTF-WriteUp/Q1.png" alt="Q1"></p><p>然后尝试枚举$\gcd(p-1,q-1)$的值，看看能不能解出一个小于$1024$比特的值，结果失败了。<del>这道题就没有继续做下去了</del>。</p><p>然后看了西电大佬Deebato的Exp，自己才得知了这道题正确的解法：</p><p>我们可以推出这样的式子：由$ed\equiv 1 \pmod {\dfrac{p(p-1)(q-1)}{\gcd(p-1,q-1)}}$。既然我们已知了$d^e$，那我们也可以计算出$e$的值，那么我们就有了$(ed)^e\equiv 1 \pmod {\dfrac{p(p-1)(q-1)}{\gcd(p-1,q-1)}}$。因此，$(((ed)^e-1)\mod n)\equiv 0 \pmod {\dfrac{p(p-1)(q-1)}{\gcd(p-1,q-1)}}$。因此我们可以计算$(ed)^e$的值，然后与$n$取GCD即可。我们就得到了$p$值，接着就是正常的RSA解密了。</p><p><del>解出$p,q$后才发现$\gcd(p-1,q-1)&#x3D;6$，不知道自己当时枚举的时候出现了什么问题</del></p><p>不过我们进入第二步，我们看到了$\ln d &#x3D; 0.25 \ln n$，考虑Wienerattack，不过好像失败了（。还好，我在<strong>RSA Notes 4</strong>中还有一个脚本，这个能够跑出来。</p><p>解出来后，是一个网站。。。里面竟然还有一题（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag,padding<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">7</span> <br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>c1 = <span class="hljs-built_in">pow</span>(m,e,n)<br>c2 = <span class="hljs-built_in">pow</span>(m+padding,e,n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c1)<br><span class="hljs-built_in">print</span>(c2)<br></code></pre></td></tr></table></figure><p>很显然，乍一看以为是Related Message Attack。结果发现我们不知道Padding。查了一下才知道是Short-Padding Attack。上一下脚本，以后再研究<del>（gugugu）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">short_pad_attack</span>(<span class="hljs-params">c1, c2, e, n</span>):<br>    PRxy.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br>    PRx.&lt;xn&gt; = PolynomialRing(Zmod(n))<br>    PRZZ.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))<br>    g1 = x^e - c1<br>    g2 = (x+y)^e - c2<br>    q1 = g1.change_ring(PRZZ)<br>    q2 = g2.change_ring(PRZZ)<br>    h = q2.resultant(q1)<br>    h = h.univariate_polynomial()<br>    h = h.change_ring(PRx).subs(y=xn)<br>    h = h.monic()<br>    kbits = n.nbits()//(<span class="hljs-number">2</span>*e*e)<br>    diff = h.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor &gt;= n^0.4</span><br>    <span class="hljs-keyword">return</span> diff<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">related_message_attack</span>(<span class="hljs-params">c1, c2, diff, e, n</span>):<br>    PRx.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    g1 = x^e - c1<br>    g2 = (x+diff)^e - c2<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">g1, g2</span>):<br>        <span class="hljs-keyword">while</span> g2:<br>            g1, g2 = g2, g1 % g2<br>        <span class="hljs-keyword">return</span> g1.monic()<br>    <span class="hljs-keyword">return</span> -gcd(g1, g2)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <br>    e = <span class="hljs-number">7</span><br>    c1 =<br>    c2 = <br>    diff = short_pad_attack(c1, c2, e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;difference of two messages is %d&quot;</span> % diff)<br>    m1 = related_message_attack(c1, c2, diff, e, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;m1:&quot;</span>, m1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;m2:&quot;</span>, m1 + diff)<br></code></pre></td></tr></table></figure><p>最后得出flag<code>VNCTF&#123;H4ppyNeWy34r!2021_V&amp;N_figHt1ng!&#125;</code></p><h2 id="2-FACTOR"><a href="#2-FACTOR" class="headerlink" title="2.FACTOR"></a>2.FACTOR</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_public_key</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        p, q = getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>)<br>        N, phi, not_phi = p * q, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>), (p + <span class="hljs-number">1</span>) * (q + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">try</span>:<br>            e = inverse(d, not_phi)<br>            <span class="hljs-keyword">assert</span> gcd(e, phi) == <span class="hljs-number">1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> (N, e)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">pubkey, m</span>):<br>    N, e = pubkey<br>    c = <span class="hljs-built_in">pow</span>(m, e, N)<br>    <span class="hljs-keyword">return</span> c<br>m = bytes_to_long(flag)<br>d = getPrime(<span class="hljs-number">300</span>)<br>pubkeys = [get_public_key(d), get_public_key(d)]<br>cs = encrypt(pubkeys[<span class="hljs-number">0</span>], m), encrypt(pubkeys[<span class="hljs-number">1</span>], m)<br><span class="hljs-built_in">print</span>(pubkeys)<br><span class="hljs-built_in">print</span>(cs)<br></code></pre></td></tr></table></figure><p>题目的代码很简单，简单理解一下，就会发现实际上是通过一个很小的解密指数$d$所生成的两组公钥。<del>一开始自己看的不认真，以为是Extending Wiener Attack，结果怎么做也做不出来（x</del></p><p>最后才知道，这原来是一种新的攻击方法。如果解密指数$d$比较低，我们可以通过构造格的方法来解决。</p><p>相关的论文是这样解释的：如果使用一个小$d$为私钥来构造$r$组公钥，而构造出的模数的数量级接近，那么我们可以根据$ed\equiv 1 \pmod n$构造如下的式子：<br>$$<br>e_id &#x3D; 1 + k_i \phi(n_i)<br>$$<br>其中我们假设$n_1&lt;n_2&lt;n_3&lt;…&lt;n_r&lt;2n_1$。论文中说：如果$\dfrac{\ln d}{\ln n}&#x3D;\delta$，则若$\delta&lt;0.5-\dfrac{1}{2(r+1)}-\dfrac{\ln \delta}{\ln n_r}$，那么所有的模数$n$都可以在多项式的时间复杂度内被分解。</p><p>下面我们简单地说一下解决方法：假设$M&#x3D;(\sqrt n_5)^-$，$s&#x3D;n-\phi(n)$。(注：本博客用上标$+$表示向上取整或无限从右趋近，用下标$-$表示向下取整或者无限从左趋近)。那么我们可以构造这样的式子：</p><p><img src="/2021/04/09/VNCTF-WriteUp/1.png" alt="1"></p><p>然后我们可以构造以下的矩阵（以$r&#x3D;5$为例）</p><p><img src="/2021/04/09/VNCTF-WriteUp/2.png" alt="2"></p><p>根据上面的式子和上面的矩阵（假设矩阵记为$B$）,我们就可以构造$\vec v&#x3D;(d,k_1,k_2,k_3,k_4,k_5),\vec w&#x3D;(d\sqrt{n_5},1-k_1s_1,1-k_2s_2,1-k_3s_3,1-k_4s_4,1-k_5s_5)$。这样我们就满足$\vec vB&#x3D;\vec w$的构造了。不过跟过去不同的是：这次解出来的最短向量为$\vec v$而不是前几次的$\vec w$。根据这个递推式也可以发现</p><p>由此可见，在数据足够多的情况下，如果$\ln d&lt;0.5\ln n$，那么我们就有可能解出来$d$的值。所以根据我们在RSA中的经验，在发放公钥的时候，一定要保证$\ln d&gt;\ln n$。不然很容易被攻破。</p><p>总结一下，Wienerattack是$n$相同，$d$改变，$\ln d&lt;0.5\ln n$。而共私钥指数攻击是$d$相同，$n$改变，$\ln d&lt;0.5\ln n$。</p><p>所以我们可以上一下脚本，这里$r&#x3D;2$，因此格是$3$维的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1=<span class="hljs-number">5362254810180378444.</span>.....<br>e1=<span class="hljs-number">3762917428094791884.</span>.....<br>n2=<span class="hljs-number">1154833387078533235.</span>.....<br>e2=<span class="hljs-number">5794296112064899907.</span>.....<br>c1=<span class="hljs-number">5320050759114401782.</span>.....<br>c2=<span class="hljs-number">5186139432313258226.</span>.....<br><span class="hljs-keyword">assert</span> n2&gt;n1<br>M=<span class="hljs-built_in">int</span>(sqrt(n2))<br>B=[[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]<br>B[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],B[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],B[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=M,e1,e2<br>B[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],B[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]=n1,n2<br>B=Matrix(ZZ,B)<br>B=B.LLL()<br><span class="hljs-keyword">if</span>(B[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]&lt;<span class="hljs-number">0</span>):<br>    B=-B<br>d,t1,t2=B[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]//M,B[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],B[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]<br>k1,k2=(d*e1-t1)//n1,(d*e2-t2)//n2<br>k1.nbits(),k2.nbits()<br>s1,s2=(t1-<span class="hljs-number">1</span>)//k1-<span class="hljs-number">1</span>,(t2-<span class="hljs-number">1</span>)//k2-<span class="hljs-number">1</span><br>var(<span class="hljs-string">&#x27;x&#x27;</span>)<br>F,G=x^<span class="hljs-number">2</span>-s1*x+n1,x^<span class="hljs-number">2</span>-s2*x+n2<br>p1,q1=F.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],F.roots()[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>p2,q2=G.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],G.roots()[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>phi1,phi2=(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>),(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1,d2=inverse(e1,ZZ(phi1)),inverse(e2,ZZ(phi2))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c2,d2,n2)),long_to_bytes(<span class="hljs-built_in">pow</span>(c1,d1,n1)))<br><span class="hljs-comment">#b&#x27;vnctf&#123;7d47956b-bc55-4897-a550-cda0b221ce67&#125; vnctf&#123;7d47956b-bc55-4897-a550-cda0b221ce67&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-Strange-Function-1"><a href="#3-Strange-Function-1" class="headerlink" title="3.Strange Function 1"></a>3.Strange Function 1</h2><p>按照惯例，首先看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>MENU = <span class="hljs-string">br&#x27;&#x27;&#x27;[+] 1.function</span><br><span class="hljs-string">[+] 2.only_function_numerator</span><br><span class="hljs-string">[+] 3.only_function_denominator</span><br><span class="hljs-string">[+] 4.exit</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        random.seed(os.urandom(<span class="hljs-number">8</span>))<br>        proof = <span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])<br>        _hexdigest = sha256(proof.encode()).hexdigest()<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">f&quot;[+] sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())<br>        x = <span class="hljs-variable language_">self</span>.recv(prompt=<span class="hljs-string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(x+proof[<span class="hljs-number">4</span>:].encode()).hexdigest() != _hexdigest:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">function_only_numerator</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        ********</span><br><span class="hljs-string">        * hide *</span><br><span class="hljs-string">        ********</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">function_only_denominator</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        ********</span><br><span class="hljs-string">        * hide *</span><br><span class="hljs-string">        ********</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">my_round</span>(<span class="hljs-params">self, value, x</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(value * (<span class="hljs-number">10</span>**x)) / ((<span class="hljs-number">10</span>**x) * <span class="hljs-number">1.0</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">self, x</span>):<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.lenth):<br>            numerator = <span class="hljs-built_in">ord</span>(flag[i])<br>            denominator = x - <span class="hljs-variable language_">self</span>.data[i]<br>            <span class="hljs-keyword">try</span>:<br>                tmp = numerator / denominator<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Error!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            res += tmp<br>        <span class="hljs-keyword">assert</span> <span class="hljs-variable language_">self</span>.my_round(res,<span class="hljs-number">10</span>) == <span class="hljs-variable language_">self</span>.my_round(<span class="hljs-variable language_">self</span>.function_only_numerator(x) / <span class="hljs-variable language_">self</span>.function_only_denominator(x),<span class="hljs-number">10</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        signal.alarm(<span class="hljs-number">500</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.proof_of_work():<br>            <span class="hljs-keyword">return</span>        <br>        <span class="hljs-variable language_">self</span>.data = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>            <span class="hljs-variable language_">self</span>.data.append(getRandomInteger(<span class="hljs-number">16</span>))<br>        <span class="hljs-variable language_">self</span>.data.sort()<br>        <span class="hljs-variable language_">self</span>.lenth = <span class="hljs-built_in">len</span>(flag)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-variable language_">self</span>.lenth == <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.data)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Welcome!&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Can you find the flag through the calculating?&#x27;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.send(MENU, newline=<span class="hljs-literal">False</span>)<br>            choice = <span class="hljs-variable language_">self</span>.recv()<br>            <span class="hljs-keyword">if</span>(choice == <span class="hljs-string">b&#x27;1&#x27;</span>):<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;[+] Plz give me your x: &quot;</span>)<br>                now = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().strip().decode())<br>                now = <span class="hljs-variable language_">self</span>.function(now)<br>                <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;[+] let me show you the answer: &quot;</span>+<span class="hljs-built_in">str</span>(now)).encode())<br>            <span class="hljs-keyword">elif</span>(choice == <span class="hljs-string">b&#x27;2&#x27;</span>):<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;[+] Plz give me your x: &quot;</span>)<br>                now = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().strip().decode())<br>                now = <span class="hljs-variable language_">self</span>.function_only_numerator(now)<br>                <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;[+] let me show you the answer: &quot;</span>+<span class="hljs-built_in">str</span>(now)).encode())<br>            <span class="hljs-keyword">elif</span>(choice == <span class="hljs-string">b&#x27;3&#x27;</span>):<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;[+] Plz give me your x: &quot;</span>)<br>                now = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().strip().decode())<br>                now = <span class="hljs-variable language_">self</span>.function_only_denominator(now)<br>                <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;[+] let me show you the answer: &quot;</span>+<span class="hljs-built_in">str</span>(now)).encode())<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-variable language_">self</span>.request.close()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10001</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>通过代码审计，我们发现，题目会给出一个秘密的字符串$s$，并给出一组数据$a$，其中构造一个函数（$t$为程序进行的轮数，$5$轮后给出flag）<br>$$<br>f(x)&#x3D;\sum_{i&#x3D;1}^{16t} \dfrac{s_i}{x-a_i}<br>$$<br>此处$a$中的数字的规模为$2^{32}$，所以我们可以直接对服务器发送$a_i+1$的值，这样我们就可以获得每一个$s_i$值的非常精确的值了。</p><p>下面直接给出解密脚本。实际上对于远程题来说：<strong>确定接收的内容还是比较困难的</strong>，有的时候即使使用<code>recvuntil</code>也比较复杂。所以截取稳定的两段内容的时候个人一般习惯于数下标（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16,s64</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16)==<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64)==<span class="hljs-number">64</span><br>    table=<span class="hljs-string">&quot;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span><br>    <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> table:<br>            <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> table:<br>                <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> table:<br>                    s=i1+i2+i3+i4+s16<br>                    <span class="hljs-keyword">if</span>(sha256(s.encode()).hexdigest()==s64):<br>                        <span class="hljs-keyword">return</span> i1+i2+i3+i4<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_2_list</span>(<span class="hljs-params">s</span>):<br>    li,inli,num,table=[],<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;0123456789&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> table:<br>            inli,num=<span class="hljs-number">1</span>,num*<span class="hljs-number">10</span>+<span class="hljs-built_in">int</span>(i)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> inli==<span class="hljs-number">1</span>:<br>                li.append(num)<br>                inli,num=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> li,<span class="hljs-built_in">len</span>(li)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_2_float</span>(<span class="hljs-params">s</span>):<br>    flo,uit,dot=<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-string">&#x27;.&#x27;</span>:<br>            dot=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> dot==<span class="hljs-number">0</span>:<br>            flo=flo*<span class="hljs-number">10</span>+<span class="hljs-built_in">int</span>(i)<br>        <span class="hljs-keyword">else</span>:<br>            flo+=<span class="hljs-built_in">int</span>(i)*uit<br>            uit=uit/<span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> flo<br><span class="hljs-comment">#--------MAIN BELOW--------#</span><br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">26452</span>)<br>s1=sh.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>s2=getyanzhengma(s1[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],s1[<span class="hljs-number">37</span>:<span class="hljs-number">101</span>])<br>sh.send(s2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] sent yanzhengma&#x27;</span>)<br><span class="hljs-keyword">for</span> T <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;th Round Begin&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> T:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">else</span>:<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    tokn,lentokn=str_2_list(s1)<br>    subans=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lentokn):<br>        s1=sh.recvuntil(<span class="hljs-string">&#x27;xit&#x27;</span>)<br>        sh.send(<span class="hljs-string">&#x27;1&#x27;</span>)<br>        s1=sh.recvuntil(<span class="hljs-string">&#x27;x:&#x27;</span>)<br>        sh.send(<span class="hljs-built_in">str</span>(tokn[i]+<span class="hljs-number">1</span>))<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>        subans+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(str_2_float(s1[<span class="hljs-number">36</span>:<span class="hljs-number">48</span>])+<span class="hljs-number">0.5</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27; th Round Answer: &#x27;</span>+subans)<br>    sh.recvuntil(<span class="hljs-string">&#x27;xit&#x27;</span>)<br>    sh.send(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sh.send(subans)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] Sent &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;th Round Answer&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="4-Strange-Function-2"><a href="#4-Strange-Function-2" class="headerlink" title="4.Strange Function 2"></a>4.Strange Function 2</h2><p>我们再来看看2.0版本发生了什么变化（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br>MENU = <span class="hljs-string">br&#x27;&#x27;&#x27;[+] 1.function</span><br><span class="hljs-string">[+] 2.check_answer</span><br><span class="hljs-string">[+] 3.exit</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        <span class="hljs-variable language_">self</span>.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        random.seed(os.urandom(<span class="hljs-number">8</span>))<br>        proof = <span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters+string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])<br>        _hexdigest = sha256(proof.encode()).hexdigest()<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">f&quot;[+] sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;_hexdigest&#125;</span>&quot;</span>.encode())<br>        x = <span class="hljs-variable language_">self</span>.recv(prompt=<span class="hljs-string">b&#x27;[+] Plz tell me XXXX: &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(x+proof[<span class="hljs-number">4</span>:].encode()).hexdigest() != _hexdigest:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">self, x</span>):<br>        res = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.lenth):<br>            numerator = <span class="hljs-built_in">ord</span>(<span class="hljs-variable language_">self</span>.token[i])<br>            denominator = x - <span class="hljs-variable language_">self</span>.data[i]<br>            <span class="hljs-keyword">try</span>:<br>                tmp = numerator / denominator<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Error!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br>            res += tmp<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        signal.alarm(<span class="hljs-number">1000</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.proof_of_work():<br>            <span class="hljs-keyword">return</span>            <br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Welcome!&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] Can you find the flag through the calculating?&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.score = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.token = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="hljs-number">8</span>))<br>        <span class="hljs-variable language_">self</span>.lenth = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.token)<br>        <span class="hljs-variable language_">self</span>.data = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.lenth):<br>            <span class="hljs-variable language_">self</span>.data.append(getRandomInteger(<span class="hljs-number">17</span>))<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.data).encode())<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-variable language_">self</span>.send(MENU, newline=<span class="hljs-literal">False</span>)<br>            choice = <span class="hljs-variable language_">self</span>.recv()<br>            <span class="hljs-keyword">if</span>(choice == <span class="hljs-string">b&#x27;1&#x27;</span>):<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;[+] Plz give me your x: &quot;</span>)<br>                now = <span class="hljs-built_in">int</span>(<span class="hljs-variable language_">self</span>.recv().strip().decode())<br>                now = <span class="hljs-variable language_">self</span>.function(now)<br>                <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;[+] let me show you the answer: &quot;</span>+<span class="hljs-built_in">str</span>(now)).encode())<br>            <span class="hljs-keyword">elif</span>(choice == <span class="hljs-string">b&#x27;2&#x27;</span>):<br>                guess = <span class="hljs-variable language_">self</span>.recv().strip().decode()<br>                <span class="hljs-keyword">if</span>(guess == <span class="hljs-variable language_">self</span>.token):<br>                    <span class="hljs-variable language_">self</span>.score += <span class="hljs-number">1</span><br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;[+] You win!&quot;</span>)<br>                    <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;[!] Now your score: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.score)).encode())<br><br>                    <span class="hljs-variable language_">self</span>.token = <span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(string.digits + string.ascii_letters) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((<span class="hljs-variable language_">self</span>.score+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>)])<br>                    <span class="hljs-variable language_">self</span>.lenth = <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>.token)<br>                    <span class="hljs-variable language_">self</span>.data = []<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.lenth):<br>                        <span class="hljs-variable language_">self</span>.data.append(getRandomInteger(<span class="hljs-number">17</span>))<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.data).encode())<br>                    <br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">self</span>.score &gt;= <span class="hljs-number">5</span>):<br>                        <span class="hljs-variable language_">self</span>.send(flag.encode())<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[+] What do you want to say???&#x27;</span>)<br>                    <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&#x27;[!] Go away!&#x27;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-variable language_">self</span>.request.close()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10002</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>很显然，我们发现了一个很重要的不同：</p><p>在函数<br>$$<br>f(x)&#x3D;\sum_{i&#x3D;1}^{8t} \dfrac{s_i}{x-a_i}<br>$$<br>里面，$a_i$的规模从$2^{32}$降到了$2^{17}$，这就导致了每当我们输入$x&#x3D;a_i+1$后，给出来的数据偏离整数较大，如果我我们这个时候继续用第三题中的代码，会导致部分数字出现形如$109.47886234,53.53195675$等这种离整数较远的数据，甚至出现了$61.06428516$（因为<code>9</code>的ASCII码值是$57$，<code>A</code>的ASCII码值是$65$，说明这种情况下噪声已经远远超过了$1$）。直接跑的话必然会出错。</p><p>然而，虽然这里会出现一个较大的误差，不过是多个误差叠加而成，这里我们获得的数据实际上反应了$s_i$的大概值，因此我们考虑降噪的时候，</p><p>这里我们就需要对接收到的数据进行一个处理：</p><p>观察这个函数（<del>我突然想到了XDU的RE大佬Innerspace含树，不知道为什么，快逃</del>）<br>$$<br>f(x)&#x3D;\sum_{i&#x3D;1}^{8t} \dfrac{s_i}{x-a_i}<br>$$<br>我们改变一下，假设我们想要提取$s_j$（我们已知$x&#x3D;a_j+1$，因此左边的分母值是$1$，不过由于浮点误差等原因，$x-a_i$不会严格等于$1$，但非常接近$1$）。<br>$$<br>\dfrac{s_j}{x-a_j}&#x3D;f(x)-\sum_{i\in [1,8t],i\not &#x3D;j}\dfrac{s_i}{x-a_i}<br>$$<br>因此我们可以先获取我们通过每次发送$a_j+1$的值，先存储我们接收到的浮点数，然后通过降噪处理,获得我们真正需要的$s_j$值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReduceError</span>(<span class="hljs-params">tokn,lflo</span>):<br>    lflo2=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tokn)):<br>        cnt=lflo[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tokn)):<br>            <span class="hljs-keyword">if</span> i==j:<br>                <span class="hljs-keyword">continue</span><br>            cnt-=lflo[j]/(-tokn[j]+tokn[i]+<span class="hljs-number">1</span>)<br>        lflo2.append(cnt)<br>    <span class="hljs-keyword">return</span> lflo2<br></code></pre></td></tr></table></figure><p>然后我们通过ReduceError处理一下，就获得了我们想要的数据。然后直接一遍过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16,s64</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16)==<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64)==<span class="hljs-number">64</span><br>    table=<span class="hljs-string">&quot;0123456789QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span><br>    <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> table:<br>            <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> table:<br>                <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> table:<br>                    s=i1+i2+i3+i4+s16<br>                    <span class="hljs-keyword">if</span>(sha256(s.encode()).hexdigest()==s64):<br>                        <span class="hljs-keyword">return</span> i1+i2+i3+i4<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_2_list</span>(<span class="hljs-params">s</span>):<br>    li,inli,num,table=[],<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;0123456789&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> table:<br>            inli,num=<span class="hljs-number">1</span>,num*<span class="hljs-number">10</span>+<span class="hljs-built_in">int</span>(i)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> inli==<span class="hljs-number">1</span>:<br>                li.append(num)<br>                inli,num=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> li,<span class="hljs-built_in">len</span>(li)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_2_float</span>(<span class="hljs-params">s</span>):<br>    flo,uit,dot=<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-string">&#x27;.&#x27;</span>:<br>            dot=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> dot==<span class="hljs-number">0</span>:<br>            flo=flo*<span class="hljs-number">10</span>+<span class="hljs-built_in">int</span>(i)<br>        <span class="hljs-keyword">else</span>:<br>            flo+=<span class="hljs-built_in">int</span>(i)*uit<br>            uit=uit/<span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> flo<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReduceError</span>(<span class="hljs-params">tokn,lflo</span>):<br>    lflo2=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tokn)):<br>        cnt=lflo[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tokn)):<br>            <span class="hljs-keyword">if</span> i==j:<br>                <span class="hljs-keyword">continue</span><br>            cnt-=lflo[j]/(-tokn[j]+tokn[i]+<span class="hljs-number">1</span>)<br>        lflo2.append(cnt)<br>    <span class="hljs-keyword">return</span> lflo2<br><span class="hljs-comment">#--------MAIN BELOW--------#</span><br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">25102</span>)<br>s1=sh.recvuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>s2=getyanzhengma(s1[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],s1[<span class="hljs-number">37</span>:<span class="hljs-number">101</span>])<br>sh.send(s2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] sent yanzhengma&#x27;</span>)<br><span class="hljs-keyword">for</span> T <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    lflo=[]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;th Round Begin&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> T:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">else</span>:<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    tokn,lentokn=str_2_list(s1)<br>    subans=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lentokn):<br>        s1=sh.recvuntil(<span class="hljs-string">&#x27;xit&#x27;</span>)<br>        sh.send(<span class="hljs-string">&#x27;1&#x27;</span>)<br>        s1=sh.recvuntil(<span class="hljs-string">&#x27;x:&#x27;</span>)<br>        sh.send(<span class="hljs-built_in">str</span>(tokn[i]+<span class="hljs-number">1</span>))<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>        lflo.append(str_2_float(s1[<span class="hljs-number">36</span>:<span class="hljs-number">48</span>]))<br>    <span class="hljs-built_in">print</span>(lflo)<br>    lflo=ReduceError(tokn,lflo)<br>    <span class="hljs-built_in">print</span>(lflo)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lflo:<br>        subans+=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i+<span class="hljs-number">0.5</span>)))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27; th Round Answer: &#x27;</span>+subans)<br>    sh.recvuntil(<span class="hljs-string">&#x27;xit&#x27;</span>)<br>    sh.send(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sh.send(subans)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[#] Sent &#x27;</span>+<span class="hljs-built_in">str</span>(T+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;th Round Answer&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        s1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>以下的运行截图，反映了降噪后数据的合理性，我们可以发现，降噪后的数据还是非常靠近整数值的。</p><p><img src="/2021/04/09/VNCTF-WriteUp/F7.jpg" alt="F7"></p><p>这里DeeBaTo大佬也提供了一种方法，用的是中间ASCII码交叉的方式，从中间的ASCII值$85$逼近，相当于一种丢番图的思想。</p><p>网页链接<a href="https://d33b4t0.com/2021/03/28/VNCTF2021Wp/">Deebato-VNCTFWP-2021-3-28</a></p><p><del>（本来打算把代码放进来的，不过复制出了问题，就不放了吧）</del></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>VNCTF的5道题目，个人认为总体质量还是比较高的。不过自己水平还是太菜了，导致一个月后才进行复现。</p><p>最近首当其冲的是CET6的准备，争取一次过，过了CET6，英语直接跑路。</p><p>然后还要复习高数大物电路C++</p><p><code>huangx607087,去复习，gkd，不然你期末就挂科了</code></p><p><del>我仿佛已经看到了自己期末高数和大物挂了的场景</del></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECCNotes3</title>
    <link href="/2021/03/25/ECCNotes3/"/>
    <url>/2021/03/25/ECCNotes3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习ECC的笔记3"><a href="#huangx607087学习ECC的笔记3" class="headerlink" title="huangx607087学习ECC的笔记3"></a>huangx607087学习ECC的笔记3</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>这一系列主要介绍几种ECC的加密方法，以及通过对RSA的类比，将RSA中常见的几种攻击方法应用于ECC上。</p><p>3月23日，自己进了X1c，感谢Am4师傅一路带我，自己后面要更加努力。然而自己还有6月的六级和期末考试，（一定要过六级，期末考试一定要全过。。不过可以确定的是，自己会在暑假寻求一个突破。在9月能够成为Am4师傅那样（x</p><h2 id="1-椭圆曲线上的除式"><a href="#1-椭圆曲线上的除式" class="headerlink" title="1.椭圆曲线上的除式"></a>1.椭圆曲线上的除式</h2><p>在椭圆曲线$y^2&#x3D;x^3+ax+b$上，我们可以定义这样的除式：<br>$$<br>F_{-1},F_0,F_1,F_2,F_3&#x3D;-1,0,1,2y,3x^4+6ax^2+12bx-a^2<br>$$</p><p>$$<br>F_4&#x3D;4y(x^6+5ax^4+20bx^3-5a^2x^2-4abx-8b^2-a^3)<br>$$</p><p>$$<br>F_{2i}&#x3D;F_{i+2}F_{i}^3-F_{i+1}^3F_{i-1}<br>$$</p><p>$$<br>F_{2i+1}&#x3D;\dfrac{F_i(F_{i+2}F_{i-1}^2-F_{i-2}F^2_{i+1})}{2y}<br>$$</p><p>顺便我们在定义一下多项式$G,H$<br>$$<br>G_{i}&#x3D;xF_i^2-F_{i+1}F_{i-1}<br>$$</p><p>$$<br>H_i&#x3D;(F_{i+2}F_{i-1}^2-F_{i-2}F^2_{i+1}) &#x2F;4y<br>$$</p><p>所以，我们可以得到以下的式子：<br>$$<br>mP&#x3D;(\dfrac{G_m(P)}{F_m^2(P)},\dfrac{H_m(P)}{F_m^3(P)})<br>$$<br>而这个式子如果想实现的话，可以调用sagemath中的<code>_multiple_x_numerator</code>,<code>_multiple_x_denominator</code>两个函数来实现对$x$坐标的数乘的多项式（最终用$x$表示）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">E=EllipticCurve(GF(<span class="hljs-number">10007</span>),[<span class="hljs-number">5362</span>,<span class="hljs-number">7045</span>])<br>Fz=E._multiple_x_numerator(<span class="hljs-number">7</span>)<br>Fz<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">x^49 + 9573*x^47 + 1673*x^46 + 9230*x^45 + 7088*x^44 + 2559*x^43 + 1491*x^42 + 1730*x^41 + 1886*x^40 + 8655*x^39 + 9529*x^38 + 2785*x^37 + 3587*x^36 + 3847*x^35 + 3439*x^34 + 1171*x^33 + 7340*x^32 + 2033*x^31 + 5346*x^30 + 3021*x^29 + 6843*x^28 + 1123*x^27 + 6261*x^26 + 4150*x^25 + 5110*x^24 + 9659*x^23 + 8409*x^22 + 6218*x^21 + 1501*x^20 + 4233*x^19 + 4240*x^18 + 5172*x^17 + 2625*x^16 + 1767*x^15 + 5499*x^14 + 7768*x^13 + 308*x^12 + 1527*x^11 + 2631*x^10 + 6193*x^9 + 6584*x^8 + 9405*x^7 + 1509*x^6 + 7683*x^5 + 3994*x^4 + 8777*x^3 + 2600*x^2 + 3465*x + 993</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>经过数据的观察可以看出，$mP$中$x$坐标的分子表达式次数总是$m^2$，分母次数总是$m^2-1$，这也印证了之前<strong>笔记1</strong>中提到的$\ln u$正比于$m^2$的结论。</p><p>一般情况下，对椭圆曲线上的点加密的时候，我们可以选择横坐标$x$，然后在椭圆曲线上找点。</p><p>我们可以选取一个整数$k$，明文$m$，我们可以计算$m^3+am+b$是否是模$q$的二次剩余。如果是的话，直接对结果开平方即可（见我之前数论笔记）。如果不是的话，我们计算$m+1$，直到找到符合的$m$值。根据二次剩余的分布可知，我们找不到的期望值为$\dfrac 1 {2^k}$。</p><h2 id="2-几种ECC加密算法"><a href="#2-几种ECC加密算法" class="headerlink" title="2.几种ECC加密算法"></a>2.几种ECC加密算法</h2><p>之前我们讲过DH密钥交换和Elgamal加密系统，这里我们多介绍几个基于ECC的加密系统。</p><h3 id="0x01-Demytko加密"><a href="#0x01-Demytko加密" class="headerlink" title="0x01 Demytko加密"></a>0x01 Demytko加密</h3><h4 id="1-加密"><a href="#1-加密" class="headerlink" title="1.加密"></a>1.加密</h4><p>寻找两个大素数$p,q$，然后计算$n&#x3D;pq$。然后确定椭圆曲线的系数$a,b$，并保证$\gcd(4a^3+27b^2,n)&#x3D;1$。</p><p>然后我们计算$N_1,N_2,N_3,N_4&#x3D;|E_p|,2p+2-N_1,|E_q|,2q+2-N_3$。 由于自己博客中某些符号无法打出来，因此我们借用符号$|D|$表示集合$D$中的元素个数而不是我打不出来的那个符号<del>（因为打那个符号博客处理时会出严重问题导致markdown混乱</del></p><p>接着选取$e$保证$\gcd(e,N_i)&#x3D;1$即可。其中$i$为$1$到$4$。同时计算$d_1,d_2,d_3,d_4$分别为$e$在模$\dfrac{N_1N_3}{\gcd(N_1N_3)},\dfrac{N_1N_4}{\gcd(N_1N_4)},\dfrac{N_2N_3}{\gcd(N_2N_3)},\dfrac{N_2N_4}{\gcd(N_2N_4)}$下的逆元。</p><p>计算出这些数值之后，我们把$n,e,u$作为公钥，$p,q,d_1,d_2,d_3,d_4$作为私钥。</p><p>加密时，选取点$P$满足其横坐标为$m$，然后计算$c&#x3D;(eP)_x$。</p><h4 id="2-解密"><a href="#2-解密" class="headerlink" title="2.解密"></a>2.解密</h4><p>解密方计算$w&#x3D;c^3+ac+b$，然后在$d_1$到$d_4$中选择一个这样的私钥用于解密，方法如下。为与分数的出发区分开，以下用$\mathrm{lgd}(\dfrac{a}{b})$来表示$a$是否是$b$的二次剩余，若是值为$1$，不是的话值为$-1$。相关内容可见<strong>0xGame Div 4</strong>。</p><table><thead><tr><th align="center">$\mathrm{lgd}(\dfrac{w}{p})$</th><th align="center">$\mathrm{lgd}(\dfrac{w}{q})$</th><th align="center">选取私钥$d$</th></tr></thead><tbody><tr><td align="center">$1$</td><td align="center">$1$</td><td align="center">$d_1$</td></tr><tr><td align="center">$1$</td><td align="center">$-1$</td><td align="center">$d_2$</td></tr><tr><td align="center">$-1$</td><td align="center">$1$</td><td align="center">$d_3$</td></tr><tr><td align="center">$-1$</td><td align="center">$-1$</td><td align="center">$d_4$</td></tr></tbody></table><p>然后选取点$Q$使得其横坐标为$c^3+ac+b$，然后计算$dQ$即可，其横坐标就是$m$。</p><p>为了快速地算出$|E_p|,|E_q|$，我们可以选取$p\equiv q\equiv 2 \pmod 3$且$a&#x3D;0$或者$p\equiv q\equiv 3 \pmod 4$且$a&#x3D;0$，那么$|E_p|&#x3D;p+1,|E_q|&#x3D;q+1$。</p><h3 id="0x02-KMOV算法"><a href="#0x02-KMOV算法" class="headerlink" title="0x02 KMOV算法"></a>0x02 KMOV算法</h3><h4 id="1-加密-1"><a href="#1-加密-1" class="headerlink" title="1.加密"></a>1.加密</h4><p>寻找两个大素数$p,q$，然后计算$n&#x3D;pq$。然后确定椭圆曲线的系数$a,b$，并保证$\gcd(4a^3+27b^2,n)&#x3D;1$。</p><p>然后计算$N_1,N_2&#x3D;|E_p|,|E_q|$。并选择$e$使得$\gcd(e,N_1)&#x3D;\gcd(e,N_2)&#x3D;1$。同时计算$d$是$e$模$\dfrac{N_1N_2}{\gcd{N_1N_2}}$的逆元。</p><p>其中公钥为$n,e,a,b$，私钥为$p,q,d$。</p><p>加密时，直接计算$C&#x3D;eP$的值即可。</p><h4 id="2-解密-1"><a href="#2-解密-1" class="headerlink" title="2.解密"></a>2.解密</h4><p>直接计算$dC&#x3D;P$。</p><p>然而，这个加密算法有一个比较大的缺点，就是除非使用了特殊的曲线和特殊的素数，不然计算$|E_p|,|E_q|$式一件非常难的事情。因此，1991年有人对这个系统进行了改进，给出了KMOV91。</p><h4 id="3-KMOV91"><a href="#3-KMOV91" class="headerlink" title="3.KMOV91"></a>3.KMOV91</h4><p>在KMOV91中，直接选取$p\equiv q\equiv 2 \pmod 3$，使得$N_1,N_2&#x3D;p+1,q+1$。其中$n,e$为公钥，$p,q,d$为私钥。而使用椭圆曲线$y^2&#x3D;x^3+b,b&#x3D;P_y^2-P_x^3$。最后保证$P_x^3 \not \equiv  P_y^2 \pmod n$即可进行加密。其他过程与原来一样。</p><h2 id="3-近期CTF中基于椭圆曲线的攻击方法"><a href="#3-近期CTF中基于椭圆曲线的攻击方法" class="headerlink" title="3.近期CTF中基于椭圆曲线的攻击方法"></a>3.近期CTF中基于椭圆曲线的攻击方法</h2><h3 id="1-ECC低指数广播攻击-NepCTF-lowExpoent"><a href="#1-ECC低指数广播攻击-NepCTF-lowExpoent" class="headerlink" title="1. ECC低指数广播攻击 NepCTF lowExpoent"></a>1. ECC低指数广播攻击 NepCTF lowExpoent</h3><h4 id="0o01-分析题目"><a href="#0o01-分析题目" class="headerlink" title="0o01.分析题目"></a>0o01.分析题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">e, nbits, msg</span>):<br>    p, q = [getPrime(<span class="hljs-built_in">int</span>(nbits)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>    N = p*q<br>    x = <span class="hljs-built_in">int</span>(msg)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a, b = [getRandomRange(<span class="hljs-number">1</span>, N) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>        P.&lt;Yp&gt; = PolynomialRing(Zmod(p))<br>        fp = x^<span class="hljs-number">3</span> + a*x + b - Yp^<span class="hljs-number">2</span><br>        P.&lt;Yq&gt; = PolynomialRing(Zmod(q))<br>        fq = x^<span class="hljs-number">3</span> + a*x + b - Yq^<span class="hljs-number">2</span><br>        <span class="hljs-keyword">try</span>:<br>            yp, yq = <span class="hljs-built_in">int</span>(fp.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(fq.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>            y = crt([yp, yq], [p, q])<br>            E = EllipticCurve(IntegerModRing(N), [a, b])<br>            msg_point = E.point((x, y))<br>            Ep = EllipticCurve(IntegerModRing(p), [a, b])<br>            Eq = EllipticCurve(IntegerModRing(q), [a, b])<br>            N1 = Ep.order()<br>            N2 = <span class="hljs-number">2</span>*p+<span class="hljs-number">2</span>-N1<br>            N3 = Eq.order()<br>            N4 = <span class="hljs-number">2</span>*q+<span class="hljs-number">2</span>-N3<br>            d = &#123;<br>                ( <span class="hljs-number">1</span>, <span class="hljs-number">1</span>): inverse_mod(e, lcm(N1, N3)),<br>                ( <span class="hljs-number">1</span>,-<span class="hljs-number">1</span>): inverse_mod(e, lcm(N1, N4)),<br>                (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>): inverse_mod(e, lcm(N2, N3)),<br>                (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): inverse_mod(e, lcm(N2, N4))<br>            &#125;<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    cip_point = e*msg_point<br>    ciphertext = cip_point.xy()[<span class="hljs-number">0</span>]<br>    privKey = (d, p, q)<br>    pubKey = (a, b, N)<br>    <span class="hljs-keyword">return</span> (ciphertext, pubKey, privKey)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Decrypt</span>(<span class="hljs-params">ciphertext, pubKey, privKey</span>):<br>    d, p, q = privKey<br>    a, b, N = pubKey<br>    x = ciphertext<br>    w = x^<span class="hljs-number">3</span> + a*x + b % N<br>    P.&lt;Yp&gt; = PolynomialRing(Zmod(p))<br>    fp = x^<span class="hljs-number">3</span> + a*x + b -Yp^<span class="hljs-number">2</span><br>    yp = fp.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    P.&lt;Yq&gt; = PolynomialRing(Zmod(q))<br>    fq = x^<span class="hljs-number">3</span> + a*x + b -Yq^<span class="hljs-number">2</span><br>    yq = fq.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    y = crt([<span class="hljs-built_in">int</span>(yp), <span class="hljs-built_in">int</span>(yq)], [p, q])<br>    E = EllipticCurve(IntegerModRing(N), [a, b])<br>    cip_point = E.point([x, y])<br>    legendre_symbol_p = legendre_symbol(w, p)<br>    legendre_symbol_q = legendre_symbol(w, q)<br>    msg_point = d[(legendre_symbol_p, legendre_symbol_q)]*cip_point<br>    <span class="hljs-keyword">return</span> msg_point.xy()[<span class="hljs-number">0</span>]<br>msg = bytes_to_long(flag)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):<br>    current_st = time()<br>    cipher = Encrypt(<span class="hljs-number">3</span>, <span class="hljs-number">256</span>, msg)<br>    f.writelines(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;\n&quot;</span>.<span class="hljs-built_in">format</span>(cipher[<span class="hljs-number">0</span>],*cipher[<span class="hljs-number">1</span>]))<br>f.close()<br></code></pre></td></tr></table></figure><p>然后题目最终给出了$70$组不同的$(c,a,b,n)$的四元组，均为对同一明文$x$的加密。</p><p>那么这道题，我们可以首先构造关于$x$的多项式。我们刚才看到了，$F_3(x)&#x3D;3x^4+6ax^2+12bx-a^2$，那么我们可以得到分子的值和分母的值<br>$$<br>G&#x3D;x(3x^4+6ax^2+12bx-a^2)^2-8(x^3+ax+b)(x^6+5ax^4+20bx^3-5ax^2-4ab-8b^2-a^3)<br>$$</p><p>$$<br>F^2&#x3D;(3x^4+6ax^2+12bx-a)^2<br>$$</p><p>然后我们由$c\equiv\dfrac G {F^2} \pmod n$，那么有$G-cF^2\equiv 0 \pmod n$。由于$F^2$是八次式，$G$是九次式，因此我们可以构造出$70$个九次式（不过最好保证构造出来的$G$均为<code>monic</code>，也就是最高次项九次项为$1$。</p><p>然后，我们继续类比RSA中低指数广播攻击的方法，可以分别对常数项到九次项分别进行中国剩余定理，并将所有的模数相乘，得到一个所有的系数都很大的一个多项式。（当然九次项系数还是$1$）。然后我们可以看到，这个$N&#x3D;\prod_{i&#x3D;1}^{70} n$，由于$n$的比特数大概是$512$，也就是$\ln n&#x3D;355$，那么$\ln N&#x3D;24842$，而我们需要密文的规模不超过$\ln m&#x3D;355$。次数为$9$次式，因此根据Copeersmith定理：只要$\ln x&lt;2760 $，就可以求出这个式子的一个根。很显然$m$的值是符合条件的。</p><p>因此这个过程就转化成了求多项式的小根，直接用<code>small_roots</code>就可以解出来了。不过Sagemath中的这些命令也并不是特别好用的<del>我还是调程序调了半天</del>。因此建议通过LLL算法手写一个求多项式小根的脚本。。。。。。</p><h4 id="0o02-自己的exp"><a href="#0o02-自己的exp" class="headerlink" title="0o02.自己的exp"></a>0o02.自己的exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br>c=[]<br>a=[]<br>b=[]<br>n=[]<br>Fzlist=[]<br>Fmlist=[]<br>Dlist=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):<br>    R.&lt;x&gt;=PolynomialRing(Zmod(n[i]))<br>    Fz=x*(<span class="hljs-number">3</span>*x^<span class="hljs-number">4</span>+<span class="hljs-number">6</span>*a[i]*x^<span class="hljs-number">2</span>+<span class="hljs-number">12</span>*b[i]*x-a[i]^<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>-<span class="hljs-number">8</span>*(x^<span class="hljs-number">3</span>+a[i]*x+b[i])*(x^<span class="hljs-number">6</span>+<span class="hljs-number">5</span>*a[i]*x^<span class="hljs-number">4</span>+<span class="hljs-number">20</span>*b[i]*x^<span class="hljs-number">3</span>-<span class="hljs-number">5</span>*a[i]^<span class="hljs-number">2</span>*x^<span class="hljs-number">2</span>-<span class="hljs-number">4</span>*a[i]*b[i]*x-<span class="hljs-number">8</span>*b[i]^<span class="hljs-number">2</span>-a[i]^<span class="hljs-number">3</span>)<br>    Fm=(<span class="hljs-number">3</span>*x^<span class="hljs-number">4</span>+<span class="hljs-number">6</span>*a[i]*x^<span class="hljs-number">2</span>+<span class="hljs-number">12</span>*b[i]*x-a[i]^<span class="hljs-number">2</span>)^<span class="hljs-number">2</span><br>    Fzlist.append(Fz)<br>    Fmlist.append(Fm*c[i])<br>    Dlist.append(Fz-c[i]*Fm)<br>Crtlist=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        Crtlist[j][i]=ZZ(Dlist[i][j])<br>A=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    A.append(CRT(Crtlist[i],n))<br>N=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> n:<br>    N*=i<br>O.&lt;y&gt;=PolynomialRing(Zmod(N))<br>S=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    S+=A[i]*y^i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Finding Roots&#x27;</span>)<br>oo,oooo,ooooo=<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br>S.small_roots(epsilon=<span class="hljs-number">1</span>/<span class="hljs-number">16</span>)<br>[<span class="hljs-number">3088969433059681806521206959873975785377227976800172674306727155831805513908352148702210247662586117242206183337522557</span>]<br></code></pre></td></tr></table></figure><h4 id="0o03-出题人Am4的官方wp"><a href="#0o03-出题人Am4的官方wp" class="headerlink" title="0o03 出题人Am4的官方wp"></a>0o03 出题人Am4的官方wp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>ciphertext = []<br>a, b, n = [], [], []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):<br>ci, ai, bi, ni = [<span class="hljs-built_in">int</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> f.readline().strip().split(<span class="hljs-string">&quot;, &quot;</span>)]<br>ciphertext.append(ci)<br>a.append(ai)<br>b.append(bi)<br>n.append(ni)<br>e = <span class="hljs-number">3</span><br>deg = <span class="hljs-number">9</span><br>coeffi = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>):<br>E = EllipticCurve(IntegerModRing(n[i]), [a[i], b[i]])<br>P.&lt;m&gt; = PolynomialRing(Zmod(n[i]))<br>f = ciphertext[i]*E._multiple_x_denominator(e, m) -<br>E._multiple_x_numerator(e, m)<br>coeffi.append(f.coefficients(sparse=<span class="hljs-literal">False</span>))<br>large_coeffi = [crt([<span class="hljs-built_in">int</span>(coeffi[j][i]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>)], [n[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span><br><span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg+<span class="hljs-number">1</span>)]<br>N_bitlength = <span class="hljs-built_in">sum</span>([n[i].bit_length() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">70</span>)])<br>min_n = <span class="hljs-built_in">min</span>(n)<br>N = reduce(<span class="hljs-keyword">lambda</span> x, y: x*y, n)<br>Sc = large_coeffivar(<span class="hljs-string">&quot;x&quot;</span>)<br>assume(x, <span class="hljs-string">&#x27;integer&#x27;</span>)<br>f =<br>Sc[<span class="hljs-number">9</span>]*x^<span class="hljs-number">9</span>+Sc[<span class="hljs-number">8</span>]*x^<span class="hljs-number">8</span>+Sc[<span class="hljs-number">7</span>]*x^<span class="hljs-number">7</span>+Sc[<span class="hljs-number">6</span>]*x^<span class="hljs-number">6</span>+Sc[<span class="hljs-number">5</span>]*x^<span class="hljs-number">5</span>+Sc[<span class="hljs-number">4</span>]*x^<span class="hljs-number">4</span>+Sc[<span class="hljs-number">3</span>]*x^<span class="hljs-number">3</span>+Sc[<span class="hljs-number">2</span>]*x^<span class="hljs-number">2</span><br>+Sc[<span class="hljs-number">1</span>]*x+Sc[<span class="hljs-number">0</span>]<br>lat = []<br>lat.append([large_coeffi[i]*min_n**i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg+<span class="hljs-number">1</span>)]+[<span class="hljs-number">1</span>/(deg+<span class="hljs-number">1</span>)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg+<span class="hljs-number">1</span>):<br>lat.append([((min_n**j)*N <span class="hljs-keyword">if</span> (i==j) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg+<span class="hljs-number">1</span>)]+[<span class="hljs-number">0</span>])<br>Mat = matrix(lat)<br>Mat_LLL = Mat.LLL()<br><span class="hljs-keyword">for</span> lin <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg):<br>Sc = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Mat_LLL[lin]]<br>Sc = [(Sc[i]//(min_n**i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(deg+<span class="hljs-number">1</span>)]<br>var(<span class="hljs-string">&quot;x&quot;</span>)<br>assume(x, <span class="hljs-string">&#x27;integer&#x27;</span>)<br>f =<br>Sc[<span class="hljs-number">9</span>]*x^<span class="hljs-number">9</span>+Sc[<span class="hljs-number">8</span>]*x^<span class="hljs-number">8</span>+Sc[<span class="hljs-number">7</span>]*x^<span class="hljs-number">7</span>+Sc[<span class="hljs-number">6</span>]*x^<span class="hljs-number">6</span>+Sc[<span class="hljs-number">5</span>]*x^<span class="hljs-number">5</span>+Sc[<span class="hljs-number">4</span>]*x^<span class="hljs-number">4</span>+Sc[<span class="hljs-number">3</span>]*x^<span class="hljs-number">3</span>+Sc[<span class="hljs-number">2</span>]*x^<span class="hljs-number">2</span><br>+Sc[<span class="hljs-number">1</span>]*x+Sc[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(factor(f))<br><span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">m =</span><br><span class="hljs-string">3088969433059681806521206959873975785377227976800172674306727155831805513908352</span><br><span class="hljs-string">148702210247662586117242206183337522557</span><br><span class="hljs-string">print(long_to_bytes(m))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-ECC上的相关明文攻击"><a href="#2-ECC上的相关明文攻击" class="headerlink" title="2.ECC上的相关明文攻击"></a>2.ECC上的相关明文攻击</h3><h4 id="0o01-分析题目-1"><a href="#0o01-分析题目-1" class="headerlink" title="0o01 分析题目"></a>0o01 分析题目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes, getPrime, getRandomRange<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>flag = bytes_to_long(flag)<br>p, q = [getPrime(<span class="hljs-built_in">int</span>(<span class="hljs-number">256</span>)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>a, b = [getRandomRange(<span class="hljs-number">1</span>, p*q) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, p, q, e</span>):<br>        <span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.q = p, q<br>        <span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b = a, b<br>        <span class="hljs-variable language_">self</span>.N = <span class="hljs-variable language_">self</span>.p*<span class="hljs-variable language_">self</span>.q<br>        <span class="hljs-variable language_">self</span>.e = e<br>        <span class="hljs-variable language_">self</span>.Kbits = <span class="hljs-number">8</span><br>        Ep = EllipticCurve(IntegerModRing(<span class="hljs-variable language_">self</span>.p), [<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b])<br>        Eq = EllipticCurve(IntegerModRing(<span class="hljs-variable language_">self</span>.q), [<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b])<br>        N1 = Ep.order()<br>        N2 = <span class="hljs-number">2</span>*<span class="hljs-variable language_">self</span>.p+<span class="hljs-number">2</span>-N1<br>        N3 = Eq.order()<br>        N4 = <span class="hljs-number">2</span>*<span class="hljs-variable language_">self</span>.q+<span class="hljs-number">2</span>-N3<br>        <span class="hljs-variable language_">self</span>.d = &#123;<br>            ( <span class="hljs-number">1</span>, <span class="hljs-number">1</span>): inverse_mod(<span class="hljs-variable language_">self</span>.e, lcm(N1, N3)),<br>            ( <span class="hljs-number">1</span>,-<span class="hljs-number">1</span>): inverse_mod(<span class="hljs-variable language_">self</span>.e, lcm(N1, N4)),<br>            (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>): inverse_mod(<span class="hljs-variable language_">self</span>.e, lcm(N2, N3)),<br>            (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>): inverse_mod(<span class="hljs-variable language_">self</span>.e, lcm(N2, N4))<br>        &#125;<br>        <span class="hljs-variable language_">self</span>.E = EllipticCurve(IntegerModRing(<span class="hljs-variable language_">self</span>.N), [<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Enc</span>(<span class="hljs-params">self, plaintext</span>):<br>        <span class="hljs-keyword">try</span>:<br>            msg_point = <span class="hljs-variable language_">self</span>.msg_to_point(plaintext)<br>            cip_point = <span class="hljs-variable language_">self</span>.e*msg_point<br>            <span class="hljs-keyword">return</span> cip_point.xy()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Dec</span>(<span class="hljs-params">self, ciphertext</span>):<br>        x = ciphertext<br>        w = x^<span class="hljs-number">3</span> + <span class="hljs-variable language_">self</span>.a*x + <span class="hljs-variable language_">self</span>.b % <span class="hljs-variable language_">self</span>.N<br>        P.&lt;Yp&gt; = PolynomialRing(Zmod(<span class="hljs-variable language_">self</span>.p))<br>        fp = x^<span class="hljs-number">3</span> + <span class="hljs-variable language_">self</span>.a*x + <span class="hljs-variable language_">self</span>.b -Yp^<span class="hljs-number">2</span><br>        yp = fp.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>        P.&lt;Yq&gt; = PolynomialRing(Zmod(<span class="hljs-variable language_">self</span>.q))<br>        fq = x^<span class="hljs-number">3</span> + <span class="hljs-variable language_">self</span>.a*x + <span class="hljs-variable language_">self</span>.b -Yq^<span class="hljs-number">2</span><br>        yq = fq.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>        y = crt([<span class="hljs-built_in">int</span>(yp), <span class="hljs-built_in">int</span>(yq)], [<span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.q])<br>        cip_point = <span class="hljs-variable language_">self</span>.E.point([x, y])<br>        legendre_symbol_p = legendre_symbol(w, <span class="hljs-variable language_">self</span>.p)<br>        legendre_symbol_q = legendre_symbol(w, <span class="hljs-variable language_">self</span>.q)<br>        msg_point = <span class="hljs-variable language_">self</span>.d[(legendre_symbol_p, legendre_symbol_q)]*cip_point<br>        <span class="hljs-keyword">return</span> msg_point.xy()[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-variable language_">self</span>.Kbits<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">msg_to_point</span>(<span class="hljs-params">self, x, shift=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-keyword">if</span> shift:<br>            x &lt;&lt;= <span class="hljs-variable language_">self</span>.Kbits<br>        checkPoint = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-variable language_">self</span>.Kbits):<br>            P.&lt;Yp&gt; = PolynomialRing(Zmod(<span class="hljs-variable language_">self</span>.p))<br>            fp = x^<span class="hljs-number">3</span> + <span class="hljs-variable language_">self</span>.a*x + <span class="hljs-variable language_">self</span>.b - Yp^<span class="hljs-number">2</span><br>            P.&lt;Yq&gt; = PolynomialRing(Zmod(<span class="hljs-variable language_">self</span>.q))<br>            fq = x^<span class="hljs-number">3</span> + <span class="hljs-variable language_">self</span>.a*x + <span class="hljs-variable language_">self</span>.b - Yq^<span class="hljs-number">2</span><br>            <span class="hljs-keyword">try</span>:<br>                yp, yq = <span class="hljs-built_in">int</span>(fp.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(fq.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>                y = crt([yp, yq], [<span class="hljs-variable language_">self</span>.p, <span class="hljs-variable language_">self</span>.q])<br>                E = EllipticCurve(IntegerModRing(<span class="hljs-variable language_">self</span>.p*<span class="hljs-variable language_">self</span>.q), [<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b])<br>                checkPoint = E.point((x, y))<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span>:<br>                x += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> checkPoint<br>delta = <span class="hljs-number">28552609273</span><br>e = <span class="hljs-number">137</span><br>cip = Task(a, b, p, q, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;a&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;p*q&#125;</span>&quot;</span>)<br>plaintext1 = cip.msg_to_point(flag, shift=<span class="hljs-literal">True</span>).xy()[<span class="hljs-number">0</span>]<br>ciphertext1 = cip.Enc(plaintext1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext1 = <span class="hljs-subst">&#123;ciphertext1&#125;</span>&quot;</span>)<br>plaintext2 = cip.msg_to_point(flag+delta, shift=<span class="hljs-literal">True</span>).xy()[<span class="hljs-number">0</span>]<br>ciphertext2 = cip.Enc(plaintext2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext2 = <span class="hljs-subst">&#123;ciphertext2&#125;</span>&quot;</span>)<br>delta = plaintext2 - plaintext1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;delta = <span class="hljs-subst">&#123;delta&#125;</span>&quot;</span>)<br><span class="hljs-comment"># a = 4281014323581546488462714122303747203636223358897123235803046898862939653328802115362584316327572195541081125920528501180620492421895128401613948866529122</span><br><span class="hljs-comment"># b = 1504110610934153564757355169781343270879282969971532470271782059859117769089994716068562704547770368420258743734175281689611986131092394954948339191589449</span><br><span class="hljs-comment"># n = 6638798722521613809421411597209101115203859862340555482590990067056543831415553727351714220257486793657912537305448979625073630917241320204281256125412671</span><br><span class="hljs-comment"># ciphertext1 = 6327639450575093157999054915625304951894564605402541939450801256931875815282143921161475586010526883609974743159835451980804875847625527741681757415519394</span><br><span class="hljs-comment"># ciphertext2 = 3275348139763310265438126795688591830796510682708632201044899744259822398076574133105844638686347122066389056025294466297206704146167073441486603569471235</span><br><span class="hljs-comment"># delta = 7309467973885</span><br></code></pre></td></tr></table></figure><p>很显然，这道题给出了$m$的明文和$m+d$的明文，加密指数为$137$，那么我们就可以用我们刚才提到的函数构造出多项式，然后求多项式的GCD来确定最后的根。</p><p>不过整个代码的实现还是挺困难的，因为里面的微操很多，比如要把求出来的多项式先转成list再转回多项式。不然程序运行会出现错误。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br>a = <span class="hljs-number">4281014323581546488462714122303747203636223358897123235803046898862939653328802115362584316327572195541081125920528501180620492421895128401613948866529122</span><br>b = <span class="hljs-number">1504110610934153564757355169781343270879282969971532470271782059859117769089994716068562704547770368420258743734175281689611986131092394954948339191589449</span><br>n = <span class="hljs-number">6638798722521613809421411597209101115203859862340555482590990067056543831415553727351714220257486793657912537305448979625073630917241320204281256125412671</span><br>c1= <span class="hljs-number">6327639450575093157999054915625304951894564605402541939450801256931875815282143921161475586010526883609974743159835451980804875847625527741681757415519394</span><br>c2= <span class="hljs-number">3275348139763310265438126795688591830796510682708632201044899744259822398076574133105844638686347122066389056025294466297206704146167073441486603569471235</span><br>d = <span class="hljs-number">7309467973885</span><br>E=EllipticCurve(Zmod(n),[a,b])<br>Fz=E._multiple_x_numerator(<span class="hljs-number">137</span>)<br>Fm=E._multiple_x_denominator(<span class="hljs-number">137</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Proof Work Finished&#x27;</span>)<br>Fmlist=<span class="hljs-built_in">list</span>(Fm)<br>Fzlist=<span class="hljs-built_in">list</span>(Fz)<br>R.&lt;t&gt;=PolynomialRing(Zmod(n))<br>Fm1,Fm2,Fz1,Fz2=<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Fmlist)):<br>    Fm1+=Fmlist[i]*(t^i)<br>    Fm2+=Fmlist[i]*((t+d)^i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Fzlist)):<br>    Fz1+=Fzlist[i]*(t^i)<br>    Fz2+=Fzlist[i]*((t+d)^i)<br>G1,G2=c1*Fm1-Fz1,c2*Fm2-Fz2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcdpro</span>(<span class="hljs-params">g1, g2</span>):<br>    <span class="hljs-keyword">while</span> g2:<br>        g1, g2 = g2, g1 % g2<br>    <span class="hljs-keyword">return</span> g1.monic()<br>    <span class="hljs-comment">#return -gcdpro(g1, g2)[0]</span><br>H=(gcdpro(G1,G2))<br><span class="hljs-built_in">print</span>(H)<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(long_to_bytes(n-H[<span class="hljs-number">0</span>]))<br><span class="hljs-comment">#b&#x27;DASCTF&#123;692d49f84fe5497fa05d6e91a1cf4e3e&#125;\x04&#x27;</span><br></code></pre></td></tr></table></figure><p>当然，ECC中也可以通过使用共模攻击和RSA中的Coppersmith来出题。可以预测的是，到目前为止，CTF中ECC的题目的数量并不是特别多。这就。】说明了ECC有可能会成为后面CTF的一个出题热门点。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECCNotes2</title>
    <link href="/2021/03/04/ECCNotes2/"/>
    <url>/2021/03/04/ECCNotes2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习ECC的笔记2"><a href="#huangx607087学习ECC的笔记2" class="headerlink" title="huangx607087学习ECC的笔记2"></a>huangx607087学习ECC的笔记2</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这一系列笔记主要介绍椭圆曲线密码学的知识，接着笔记1继续扩展。</p><p>这一笔记本来2.22就创建开始写了，咕到了3月4日才勉强提交，哎（准备补充笔记3了。<strong>笔记3不会接着笔记2继续讲</strong>。。。。。</p><h2 id="6-椭圆曲线上的双线性对"><a href="#6-椭圆曲线上的双线性对" class="headerlink" title="6.椭圆曲线上的双线性对"></a>6.椭圆曲线上的双线性对</h2><p>在线性代数中，向量空间$R^n$中两个向量$\vec v,\vec w$，它们的数量积就是它们对应分量的积之和。</p><p>现在有两个$n$维行向量$\vec v,\vec w$和一个$n$阶方阵$A$，那么我们可以定义一个函数$\beta(\vec v,\vec w)&#x3D;\vec vA\vec w^T$。其中$\vec w^T$中的上标$T$表示转置，将行向量化为列向量以满足矩阵乘法的规则。当然有<br>$$<br>\beta(a_1\vec v_1+a_2\vec v_2,\vec w)&#x3D;a_1\beta(\vec v_1,\vec w)+a_2\beta(\vec v_2,\vec w)<br>$$</p><p>$$<br>\beta(\vec v,b_1\vec w_1+b_2\vec w_2)&#x3D;b_1\beta(\vec v,\vec w_1)+a_2\beta(\vec v,\vec w_2)<br>$$</p><p>还有一种双线性配对是$R^2$上的行列式映射。 因此，如果$\vec v&#x3D;(v_1,v_2)$和$\vec w&#x3D;(w_1,w_2)$，那么有$\delta(\vec v,\vec w)&#x3D;v_1w_2-v_2w_1$，也就是将这两个行向量构造出的矩阵的行列式的值。</p><p>我们在本节中讨论的双线性对是相似的，因为它们以椭圆曲线上的两个点作为输入，并给出一个数字作为输出。 然而，双线性条件略有不同，因为输出值是有限场的非零元素，所以用乘积代替刚才最上面两个线性组合右边的和。</p><p>椭圆曲线上的双线性对具有许多重要的密码学应用。 对于这些应用程序中的大多数，有必要使用有限域的素数阶$GF(p^k)$。</p><h3 id="6x01-椭圆曲线上的有限阶点"><a href="#6x01-椭圆曲线上的有限阶点" class="headerlink" title="6x01 椭圆曲线上的有限阶点"></a>6x01 椭圆曲线上的有限阶点</h3><p>我们首先简要描述椭圆曲线上的有限阶点</p><p><strong>定义：</strong>当椭圆曲线$E$上的一点$P$，满足$mP&#x3D;O$的时候，那么这个点的阶就是$m$。$E$上所有阶为$m$的点记为$E[m]$。这类点称为有限阶点或扭转点。</p><p>很显然，如果$P,Q\in E[m]$，那么$P+Q,-P \in E[m]$。故$E[m]$是$E$的一个子群。当然，定义域是$GF(49)$的椭圆曲线$E$上所有阶为$10$的点的集合记为$E(GF(49))[10]$。其他的情况可以此类推。</p><p>当椭圆曲线的定义域为$Q,R,C$时，那么$E(C)[m]&#x3D;\dfrac{Z}{mZ}×\dfrac{Z}{mZ}$。</p><p>当椭圆曲线在$GF(p)$上时，如果$p$不是$m$的因数，那么对于任意的$j$，都存在$k$使得$E(GF(P^{jk}))[m]&#x3D;\dfrac{Z}{mZ}×\dfrac{Z}{mZ}$。</p><p>如果$l$为素数，曲线的定义域为$K$，那么有$E(K)[l]&#x3D;\dfrac{Z}{lZ}×\dfrac{Z}{lZ}$，那么我们可以认为$E[l]$是在$\dfrac{Z}{lZ}×\dfrac{Z}{lZ}$上的一个向量空间。当然，对于合数$m$，$E(K)[m]$中也会有两个点$P_1,P_2$，使得$E[m]$中的任意一个点$P$，都可以用$P_1,P_2$线性表示成$P&#x3D;aP_1+bP_2$。对于系数$a,b∈\dfrac{Z}{mZ}$的唯一选择。 当然，如果$m$很大，可能很难找到$a$和$b$。 实际上，如果$P$是$P_1$的倍数，那么求$a$的值与解$P$和$P1$的ECDLP是相同的。</p><h3 id="6x02-椭圆曲线上的有理数函数和约数"><a href="#6x02-椭圆曲线上的有理数函数和约数" class="headerlink" title="6x02 椭圆曲线上的有理数函数和约数"></a>6x02 椭圆曲线上的有理数函数和约数</h3><p>为了定义Weil和Tate对，我们需要解释椭圆曲线上的有理函数如何与其零点和极点相关。 我们从一个变量的有理函数的简单情况开始。 有理数函数是多项式的比值<br>$$<br>f(x)&#x3D;\dfrac{\sum_{i&#x3D;0}^{n}a_ix^i}{\sum_{i&#x3D;0}^{n}b_ix^i}<br>$$<br>根据代数基本定理，在复数范围内，于$n$次方程有$n$个根，那么$f(x)$还可以写成这样的形式，其中所有的$\alpha$和所有的$\beta$都不相同。<br>$$<br>f(x)&#x3D;\dfrac{a\prod_{i&#x3D;1}^r (x-\alpha_i)^{e_i}}{b\prod_{i&#x3D;1}^s (x-\beta_i)^{d_i}}<br>$$<br>由于$\alpha$与$\beta$中的值没有交集，因此，我们得到所有的$\alpha$值都是$f(x)$的零点，所有的$\beta$值都是$f(x)$的极点。我们通过定义$f(x)$的除数为形式和来跟踪$f(x)$的零点和极点及其倍数。定义：<br>$$<br>\mathrm{div} (f(x))&#x3D;\sum_{i&#x3D;1}^r e_i\alpha_i-\sum_{i&#x3D;1}^sd_i\beta_i<br>$$<br>在椭圆曲线$E:y^2&#x3D;x^3+Ax+B$中，如果把$x,y$都看成是某个变量的有理函数$x(t),y(t)$，那么椭圆曲线$E$上面的$f$的有些零点和极点会消失。此外，可以将倍数分配给零点和极点，因此 $f$ 有一个相关的除数<br>$$<br>\mathrm{div}(f)&#x3D;\sum_{P\in E} n_P[P]<br>$$<br>在这个形式和中，系数$n_P$是整数，只有有限的$n_P$是非零的，所以$\mathrm{div}(f)$是有限和。</p><p>下面我们假设一个椭圆曲线方程$y^2&#x3D;x^3+Ax+B$，那么我们可以有<br>$$<br>x^3+Ax+B&#x3D;(x-\alpha_1)(x-\alpha_2)(x-\alpha_3)<br>$$<br>那么很显然，$(\alpha_i,0)$都是椭圆曲线上阶数为$2$的点，设$P_i&#x3D;(\alpha_i,0)$，那么我们可以有$2P_1&#x3D;2P_2&#x3D;2P_3&#x3D;O$。那么$y$就会在这三个点上消失，然后我们就有<br>$$<br>\mathrm{div}(Y)&#x3D;[P_1]+[P_2]+[P_3]-3[O]<br>$$<br>并且可以推出，$P_1,P_2,P_3$都是不同的点。</p><p>更一般地，我们可以定义椭圆曲线$E$上的除数定义成$D&#x3D;\sum_{P\in E}n_P[P]$，其中$n_p\in Z$并且$n_P&#x3D;0$对所有但是有限个点$P\in E$。</p><p>其中，除数的度数就是它的系数之和：$\deg D &#x3D;\deg \sum_{P\in E}n_P[P]&#x3D;\sum_{P \in E} n_p$。</p><p>我们也可以通过方括号来定义除数的和：$\mathrm{Sum}(D)&#x3D;\mathrm{Sum}\sum_{P\in E}n_P[P]&#x3D;\sum_{P\in E}n_PP$。</p><p>注意，$n_PP$意味着用加法法则把$P$加到自己的$n_P$次上在$E$上，很自然地会问哪些除数是函数的除数，哪些除数是函数的除数函数的除数决定函数的大小。这些问题是由下面的定理来回答。</p><p><strong>定理1：</strong>设$f$和$g$是椭圆曲线上的有理函数，如果$\mathrm{div}(f)&#x3D;\mathrm {div} (g)$，那么存在一个非零常数$c$使得$f&#x3D;cg$。</p><p><strong>定理2：</strong>设$D&#x3D;\sum_{P\in E}n_P[P]$，为椭圆曲线$E$上的一个除数，则$D$是$E$上有理函数的除数当且仅当$\deg D&#x3D;0 \text{ and Sum}(D)&#x3D;O$。</p><p>特别地，如果$E$上的有理函数没有零或极点，那么它就是一个常数。</p><h3 id="6x03-Weil配对"><a href="#6x03-Weil配对" class="headerlink" title="6x03 Weil配对"></a>6x03 Weil配对</h3><p>用$e_m$表示的Weil配对以一对点作为输入$P, Q∈E[m]$，并给出单位$e_m(P,Q)$的第$m$个根作为输出。双线性Weil对的性质用方程表示<br>$$<br>e_m(P_1+P_2,Q)&#x3D;e_m(P_1,Q)e_m(P_2Q)<br>$$</p><p>$$<br>e_m(P,Q_1+Q_2)&#x3D;e_m(P,Q_1)e_m(P,Q_2)<br>$$</p><p><strong>定义：</strong>设$P,Q∈E[m]$，即$P$和$Q$是$m$阶点群$E$。设$f_P$和$f_Q$是$E$上的有理函数满足$\mathrm{div}(f_P)&#x3D;m[P]−m[O]$和$\mathrm{div}(fQ)&#x3D;m[Q]−m[O]$。$P$和$Q$的Weil配对值就是<br>$$<br>e_m(P,Q)&#x3D;\dfrac{f_P(Q+S)f_Q(-S)}{f_P(S)f_Q(P-S)}<br>$$<br>其中$S\in E $且$S$不为$O,P,-Q,P-Q$。并且$e_m(P,Q)$的值与函数$f_P,f_Q$的选取无关。</p><p>Weil配对的值满足$e_m(P,Q)^m&#x3D;1$、$e_m(P,Q)&#x3D;e_m(Q,P)^{-1}$，其中$P,Q\in E[m]$且对于任何的$P\in E[m]$，都有$e_m(P,P)&#x3D;1$。</p><p>并且，Weil配对是非退化的，也就是说，如果对于任意的$Q\in E[m]$，都有$e_m(P,Q)&#x3D;1$，那么可以推出$P&#x3D;O$。</p><p>我们选择一个基$P_1,P_2∈E[m]$。那么任意元素$P∈E[m]$都可以是在此基础上写成$P&#x3D;a_PP_1+b_PP_2$。</p><p>因此我们可以又以下的式子:<br>$$<br>e_m(P,Q)&#x3D;e_m(P_1,P_2)^{a_Pb_Q-a_Qb_P}<br>$$<br>Weil配对的优点是它可以非常有效地计算不必用$E[m]$的基来表示$P$和$Q$。</p><h3 id="6x04-一种有效的算法来计算Weil配对"><a href="#6x04-一种有效的算法来计算Weil配对" class="headerlink" title="6x04 一种有效的算法来计算Weil配对"></a>6x04 一种有效的算法来计算Weil配对</h3><p>我们设椭圆曲线$E$上有两点$P,Q$，直线$P,Q$的斜率为$k$，$S(x,y)\in E$，那么我们设<br>$$<br>g_{P,Q}&#x3D;\dfrac{y-y_P-k(x-x_P)}{x+x_P+x_Q-k^2}<br>$$<br>如果$x_P&#x3D;x_Q$且$P \not &#x3D;Q$，那么上式的值视为$x-x_P$。如果$P&#x3D;Q$，那么$k$视为$P$点在椭圆曲线上对应点的切线的斜率，而切线的斜率可以用高等数学中隐函数求导法求出为$y’&#x3D;\dfrac{3x^2+A}{2y}$</p><p>因此，我们还可以获得这样一个式子：$\mathrm{div}(g_{P,Q})&#x3D;[P]+[Q]-[P+Q]-[O]$。</p><p>下面的算法返回一个除数满足$\mathrm{div}(f_P ) &#x3D; m[P] − [mP] − (m − 1)[O]$。</p><p>已知$P(36,60)$和$Q(121,387)$均为有限域上椭圆曲线$y^2\equiv x^3+30x+34\pmod{631} $上的$5$阶点，设$S(x,y)&#x3D;(19,186)$为椭圆曲线上符合条件的任意一点，通过下面的代码，我们可以求出$e_5(P.Q)$的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">o1=GF(<span class="hljs-number">631</span>)<br>A,B=<span class="hljs-number">30</span>,<span class="hljs-number">34</span><br>E=EllipticCurve(o1,[A,B])<br>m=<span class="hljs-number">5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">P,Q,S</span>):<br>    <span class="hljs-keyword">if</span>(P[<span class="hljs-number">0</span>]==Q[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> P!=Q):<br>        <span class="hljs-keyword">return</span> S[<span class="hljs-number">0</span>]-P[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> P[<span class="hljs-number">0</span>]==Q[<span class="hljs-number">0</span>]:<br>        k=(<span class="hljs-number">3</span>*P[<span class="hljs-number">0</span>]*P[<span class="hljs-number">0</span>]+A)/(<span class="hljs-number">2</span>*P[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>        k=(P[<span class="hljs-number">1</span>]-Q[<span class="hljs-number">1</span>])/(P[<span class="hljs-number">0</span>]-Q[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> (S[<span class="hljs-number">1</span>]-P[<span class="hljs-number">1</span>]-k*(S[<span class="hljs-number">0</span>]-P[<span class="hljs-number">0</span>]))/(S[<span class="hljs-number">0</span>]+P[<span class="hljs-number">0</span>]+Q[<span class="hljs-number">0</span>]-k*k)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">P,S</span>):<br>    T,f=P,<span class="hljs-number">1</span><br>    n=<span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(n)):<br>        f=f*f*g(T,T,S)<br>        T=<span class="hljs-number">2</span>*T<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(n[i]):<br>            f=f*g(T,P,S)<br>            T=T+P<br>    <span class="hljs-keyword">return</span> f<br>P,Q,S=E(<span class="hljs-number">36</span>,<span class="hljs-number">60</span>),E(<span class="hljs-number">121</span>,<span class="hljs-number">387</span>),E(<span class="hljs-number">19</span>,<span class="hljs-number">186</span>)<br>tmp1=F(P,Q+S)/F(P,S)<br>tmp2=F(Q,P-S)/F(Q,-S)<br>ePQ=tmp1/tmp2<br><span class="hljs-built_in">print</span>(tmp1,tmp2,ePQ)<br><span class="hljs-comment">#198 345 242</span><br></code></pre></td></tr></table></figure><p>可以看出：$242^5\equiv 1 \pmod {631}$</p><p>特别地，如果$P \in E[m]$，那么$\mathrm{div}(f_P)&#x3D;m[P]-m[O]$。</p><h3 id="6x05-Tate配对"><a href="#6x05-Tate配对" class="headerlink" title="6x05 Tate配对"></a>6x05 Tate配对</h3><p> Weil对是椭圆曲线上的非退化双线性形式在任何领域。对于有限域上的椭圆曲线还有另一对，我们称之为Tate配对在密码学中经常使用，因为它在计算上有点复杂比Weil配对更有效。在本节中，我们将简要介绍Tate配对。</p><p>设$E$是$GF(q)$上的一个椭圆曲线，$l$是一个素数，设$P\in E(GF(q))[l],Q \in E(GF(q))$，选择$E$上的有理函数$f_P$使得：<br>$$<br>\mathrm{div}(f_P)&#x3D;l[P]-l[O]<br>$$<br>并且Tate对$P,Q$的值为<br>$$<br>τ (P,Q)&#x3D;\dfrac{f_P(Q+S)}{f_P(S)}<br>$$<br>其中$S$是$E(GF(q))$上任一点，并且使得上式的分子分母不为$0$的点。</p><p>事实证明，Tate配对的值只有在乘以$GF(q)$元素的$l$次幂之后才有明确的定义。如果$q \equiv 1 \pmod l$，我们定义$P,Q$的Tate配对为<br>$$<br>τ’(P,Q)&#x3D;τ’(P,Q)^{(q-1)&#x2F;l}&#x3D;(\dfrac{f_P(Q+S)}{f_P(S)})^{(q-1)&#x2F;l}<br>$$<br>设$E$是$GF(q)$上的一个椭圆曲线，$l$是素数满足$q\equiv 1 \pmod l$且$E(GF(q))[L]&#x3D;\dfrac{Z}{lZ}$。</p><p>那么我们可以得到这样一个映射：<br>$$<br>:E(GF(q))[l]×E(GF(q))[l] \rightarrow GF(q)<br>$$<br>并且这个$τ’$的性质也满足：<br>$$<br>τ’(P_1+P_2,Q)&#x3D;τ’(P_1,Q)τ’(P_2Q)<br>$$</p><p>$$<br>τ’(P,Q_1+Q_2)&#x3D;τ’(P,Q_1)τ’(P,Q_2)<br>$$</p><p>并且$τ’(P,P)$的值$x$满足$x^l\equiv 1 \pmod p$且$x \not &#x3D;1$。</p><h2 id="7-GF-p-k-上的Weil对"><a href="#7-GF-p-k-上的Weil对" class="headerlink" title="7.$GF(p^k)$上的Weil对"></a>7.$GF(p^k)$上的Weil对</h2><h3 id="7x01-嵌入度和MOV算法"><a href="#7x01-嵌入度和MOV算法" class="headerlink" title="7x01 嵌入度和MOV算法"></a>7x01 嵌入度和MOV算法</h3><p>设$E$是$GF(p)$上的一个椭圆曲线，$m≥1$且$p$不整除$m$，为了能够获得非零的Weil配对值，我们需要用一个$E$上的独立的阶为$m$的点，一般情况下，阶为$m$的点一般有$m^2$个，但它们的坐标可能在一个更大的域中才能完全出现。</p><p><strong>定义：嵌入度</strong> 设$E$是$GF(p)$上的椭圆曲线，$m≥1$且$p$不整除$m$，$E$对$m$的嵌入度的值为使得以下式子成立的最小$k$值：<br>$$<br>E(GF(p^k))[m] &#x3D; (\dfrac Z{mZ})^2<br>$$<br>而在密码学的应用中，当$m$是一个大素数时，这一情况下嵌入度也可以这样理解：</p><p>设$E$是$GF(p)$上的一个椭圆曲线，$l$是一个与$p$不相等的素数，那么$E$对$l$的嵌入度可能是下面三种情况之一：</p><p>1.$E$的嵌入度为$1$，不过当$l&gt;\sqrt p +1$的时候这张情况时不可能的<br>2.$p \equiv 1 \pmod l$时，$E$的嵌入度为$l$<br>3.$p \not \equiv 1 \pmod l$时，此时的嵌入度就是使得下面式子成立的最小$k(≥2)$值。<br>$$<br>p^k \equiv 1 \pmod l<br>$$<br>设$E$是$GF(p)$上的一个椭圆曲线，$P\in E$并且$P$的阶为$l$，$l$是一个大素数且$l&gt;\sqrt p +1$。那么我们可以用下面的步骤来求解ECDLP，而这里求解ECDLP的问题就需要用到求解DLP的问题</p><p>1.计算$n&#x3D;|E(GF(p^k))|$，其中$|E|$表示椭圆曲线内所含点数<br>2.随机选取一个点$T \in E(GF(p^k))$且$T\not \in E(GF(p))$<br>3.设$T’&#x3D;(n&#x2F;l)T$，如果$T’&#x3D;O$，重新选择$T$<br>4.计算$\alpha&#x3D;e_l(P,T’)$和$\beta &#x3D;e_l(Q,T’)$<br>5.计算离散对数$\alpha^x\equiv \beta \pmod p$<br>6.那么我们可以求出$Q&#x3D;xP$，ECDLP求解。</p><h2 id="99-后记"><a href="#99-后记" class="headerlink" title="99.后记"></a>99.后记</h2><p>ECC笔记2到这里暂时先结束，写的比较匆忙，书上5.8、5.9、5.10有很多比较晦涩难懂的东西，个人感觉在CTF中的应用不是很广泛，后期会对这一笔记进行更新补充（<del>根本原因是因为自己太菜了，看不懂（</del></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes6</title>
    <link href="/2021/03/01/LatticeNotes6/"/>
    <url>/2021/03/01/LatticeNotes6/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记6"><a href="#huangx607087学习格密码的笔记6" class="headerlink" title="huangx607087学习格密码的笔记6"></a>huangx607087学习格密码的笔记6</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这个笔记<strong>并没有</strong>接着之前发布的笔记5，并且文章的tag标为Explog而不是Notes，主要讲的是LLL算法在RSA中的使用。</p><p>100天的时间，自己终于把NCTF那道题研究了出来，wtcl</p><h2 id="1-RSA-WienerAttack"><a href="#1-RSA-WienerAttack" class="headerlink" title="1. RSA WienerAttack"></a>1. RSA WienerAttack</h2><p>我们先来回顾一下Wienerattack，Wienerattack主要是基于连分数展开，在自己的刷题记录**21Feb2[2021.2.16]**中我们提到过连分数展开的一些注意事项并进行了简单的证明以及连分数展开中精确覆盖的条件 。下面我们再来回顾一下相关的知识点：</p><p><strong>勒让德定理</strong>：若$a \in Q, c,d\in Z,\gcd (c,d)&#x3D;1$，如果有<br>$$<br>|a-\dfrac c d| &lt; \dfrac 1 {2d^2}<br>$$<br>那么在对$a$进行连分数展开的时候，可以精确覆盖到$\dfrac c d$的值。下面我们简单证明一下WienerAttack的有效性。</p><p>设$ed &#x3D; 1+kl,g&#x3D;\gcd(p-1,q-1),gl&#x3D;(p-1)(q-1)$，也就是说，$l$是$(p-1)(q-1)$的最小公倍数。则当$4 \ln d&lt;\ln n$时，有：<br>$$<br>|\dfrac e n - \dfrac k {dg}|&#x3D;|\dfrac 1 {dn}-\dfrac {ks}{dgn}|&lt;\dfrac {ks}{dgn}&lt;\dfrac 1 {2(dg)^2}<br>$$<br>那么可以通过$\dfrac e n$的连分数展开精确覆盖到$\dfrac k {dg}$。又因为$ed&#x3D;k(p-1)(q-1)+1$，那么我们有<br>$$<br>edg&#x3D;k(p-1)(q-1)+g,k&gt;g<br>$$<br>因此，可以有<br>$$<br>\mathrm{floor}(\dfrac{edg}{k})&#x3D;(p-1)(q-1)<br>$$<br>其中floor表示向下取整。</p><p>又因为<br>$$<br>\dfrac{pq-(p-1)(q-1)+1} 2&#x3D;\dfrac {p+q} 2<br>$$<br>那么有<br>$$<br>(\dfrac{p+q}2)-pq&#x3D;(\dfrac{p-q}2)^2<br>$$<br>因此我们只需要判断一下连分数中$(\dfrac{p-q} 2)^2$是否为平方数即可。附上sagemath代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sagemath</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">possible</span>(<span class="hljs-params">e,alist,N</span>): <br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> alist:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = floor(e*(<span class="hljs-number">1</span>/x))<br>        <span class="hljs-keyword">if</span> (N-phi+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> sqrt(<span class="hljs-built_in">pow</span>((N-phi+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)-N).is_integer():<br>                (p,q)=var(<span class="hljs-string">&#x27;p,q&#x27;</span>)<br>                x=solve([(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)==phi, p*q==N],p,q)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(x[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]).split(<span class="hljs-string">&#x27;==&#x27;</span>)[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wiener_attack</span>(<span class="hljs-params">e,N</span>):<br>    c=continued_fraction(e/N)<br>    alist=c.convergents()<br>    <span class="hljs-keyword">return</span> possible(e,alist,N)<br>n=<br>e=<br>t=wiener_attack(e,n)<br><span class="hljs-built_in">print</span> (t)<br></code></pre></td></tr></table></figure><h2 id="2-Extend-Wiener-Attack-2D"><a href="#2-Extend-Wiener-Attack-2D" class="headerlink" title="2. Extend Wiener Attack 2D"></a>2. Extend Wiener Attack 2D</h2><p>当我们将$e$的个数从$1$提升到$2$的时候，也就是假如已知一个模数$n$和$2$个$e$值，并且这两个$e$值对应的解密指数$d$都比较小，那么我们就有了$e_id_i-k_in&#x3D;1$，其中$i$取值为$1,2$。</p><p>根据我刚才得到的式子：<br>$$<br>edg&#x3D;k(p-1)(q-1)+g,k&gt;g<br>$$<br>设$s&#x3D;1-p-q$，上式化简成<br>$$<br>edg-kn&#x3D;g+ks<br>$$<br>那么我们就有<br>$$<br>e_1d_1g_1&#x3D;g+k_1(p-1)(q-1),e_2d_2g_2&#x3D;g+k_2(p-1)(q-1)<br>$$<br>然后，通过化简，消去$(p-1)(q-1)$，就有<br>$$<br>k_2d_1e_1-k_1d_2e_2&#x3D;k_2-k_1<br>$$<br>然后很快就有<br>$$<br>\dfrac {e_1} {e_2}-\dfrac{k_1d_2}{k_2d_1}&#x3D;\dfrac {k_2-k_1}{k_2d_1e_2}<br>$$<br>很显然，如果$2(k_2-k_1)d_1k_2&lt;e_2$，那么我们也可以通过连分数逼近的方式，求出$\dfrac {e_1}{e_2}$连分数展开中的精确覆盖的值$\dfrac{d_2k_1}{d_1k_2}$，但着想找到$d_1,d_2$时基本不现实的。</p><p>那么这就进入了Extend Wiener Attack</p><p>根据构造格进行LLL的要求，我们必须要确定已知量和未知量。在这里已知量是$e,n$，未知量是$k,d,s,g$，</p><p>那么根据我们刚刚构造的式子：<br>$$<br>k_2d_1e_1g-k_1d_2e_2g&#x3D;k_2g-k_1g[1]<br>$$</p><p>$$<br>d_1gk_2e_1-k_1k_2n&#x3D;k_2g+k_1k_2(pq-p-q+1)&#x3D;k_2g+k_1k_2s[2]<br>$$</p><p>$$<br>(e_1d_1g-k_1n)(e_2d_2g-k_2n)&#x3D;(g+k_1s)(g+k_2s)[3]<br>$$</p><p>$[3]$可以继续进行化简，得到：<br>$$<br>d_1d_2g^2e_1e_2-d_1gk_2e_1n-d_2gk_1e_2n+k_1k_2n^2&#x3D;(g+k_1s)(g+k_2s)[3]<br>$$<br>然后我们考虑一下构造矩阵：由于等号最左边最大长度是$4$，因此需要构造一个$\mathrm{4x4}$的矩阵。因此我们要考虑凑个数。我们发现：$[2][3]$中都有$k_1k_2$这个元素，因此我们可以凑一个$k_1k_2$出来。</p><p>因此，根据$\vec vA&#x3D;\vec w$构造法则，我们可以构造：$\vec v&#x3D;(k_1k_2,k_2d_1g,k_1d_2g,d_1d_2g^2)$，$\vec w&#x3D;(k_1k_2,k_2g-k_1g,k_2g+k_1k_2s,(g+k_1s)(g+k_2s))$，这样使得向量$\vec v$和向量$\vec w$包括了所有的未知量。然后就可以构造已知量矩阵$A$如下图了。</p><img src="/2021/03/01/LatticeNotes6/1.png" alt="1" style="zoom:40%;"><p>这里是四维的矩阵，很显然其行列式的值为$ne_1e_2^2$。但向量$\vec w$的长度明显要长很多。因此我们就开始考虑扩大$\det A$的值。</p><p>根据我们已知条件，有$e≈n,k≈d≈n^b,g≈1,s≈\sqrt n$。因此，$\det A ≈ n^4$，而$|\vec w|$明显大于这个数。这个时候我们就可以他通过对矩阵得列乘上一个数得倍数使得条件满足。</p><p>这个时候，我们就可以给矩阵第一列乘上$n$，第二列乘上$\sqrt n$，第三列乘上$n^{1+b}$使得条件满足，这也就是通过矩阵的列乘上一个数字使得条件满足。</p><p>因此，构造后的$\vec w$为<br>$$<br>\vec w&#x3D;(k_1k_2n,k_2g-k_1g\sqrt{n},k_2g+k_1k_2sn^{1+b},(g+k_1s)(g+k_2s))<br>$$<br>此时可以计算出$|\vec w|&lt; 2n^{1+2b}$，也就是<br>$$<br>2\sqrt[4]{\det A}&#x3D;2n \sqrt[8]{13+2b}<br>$$<br>然后有$b≤\dfrac 5 {14}$。然后可以带入$n^{1+b}$中，然后对$A$使用$LLL$算法求出$A$的最短向量$\vec w$，然后计算$\vec v &#x3D;\vec w A^{-1}$，利用$A$的前两项求出$\phi&#x3D;(p-1)(q-1)$，这里有$\phi&#x3D;e_1 \dfrac {k_1k_2}{k_2d_1g}$。</p><h2 id="3-例题-2020羊城杯-Simple"><a href="#3-例题-2020羊城杯-Simple" class="headerlink" title="3.例题 [2020羊城杯] Simple"></a>3.例题 [2020羊城杯] Simple</h2><p>首先看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br>key = <span class="hljs-string">&quot;abcdefgh&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">m</span>):<br>    des = DES.new(key, DES.MODE_ECB)<br>    res = des.encrypt(m)<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    p = getPrime(<span class="hljs-number">2048</span>)<br>    q = getPrime(<span class="hljs-number">2048</span>)<br>    n = p * q<br>    bit = n.bit_length()<br>    phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        u = getPrime(bit / <span class="hljs-number">4</span> - num)<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(u, phi_n) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        t = gmpy2.invert(u, phi_n)<br>        e = bytes_to_long(des_encrypt(long_to_bytes(t)))<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(e, phi_n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (n, e)<br>P = getPrime(<span class="hljs-number">1024</span>)<br>Q = getPrime(<span class="hljs-number">1024</span>)<br>N = P * Q<br>E = <span class="hljs-number">65537</span><br>lcm = gmpy2.lcm(P-<span class="hljs-number">1</span>, Q-<span class="hljs-number">1</span>)<br>e1 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>e2 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, E, N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;N = &quot;</span> + <span class="hljs-built_in">str</span>(N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;e2 = &quot;</span> + <span class="hljs-built_in">str</span>(e2)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;C = &quot;</span> + <span class="hljs-built_in">str</span>(c)  <br>_n, _e = gen_key()<br>_c = <span class="hljs-built_in">pow</span>(e1, _e, _n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;n = &quot;</span> + <span class="hljs-built_in">str</span>(_n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;e = &quot;</span> + <span class="hljs-built_in">str</span>(_e)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(_c)<br></code></pre></td></tr></table></figure><p>整个题目可以分为两部分解决。我们首先可以通过一次DES解密可以获得$t$值。注意到$ut\equiv 1 \pmod {phin}$，而$4\ln u&lt;\ln t$，因此我们可以直接通过wiener attack求出$u$的值。进而就可以解密出$e_1$的值了。其中求$u$得值就用的上面得WienerAttack脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> *<br>des=DES.new(<span class="hljs-string">b&quot;abcdefgh&quot;</span>,DES.MODE_ECB)<br>t=bytes_to_long(des.decrypt(long_to_bytes(e)))<br>u=<span class="hljs-number">11797660359487393794703501696733722234597800563221644744216546283873417801358839752749644652587148151353963016872894291750625278074742782471171817895256720486745393451876158473621006168530167397313514152556156473219068407536794185608357374065375644916773016430063167943099951326297693</span><br>phi=(t*u-<span class="hljs-number">1</span>)<br>d=inverse(e,t*u-<span class="hljs-number">1</span>)<br>e1=(<span class="hljs-built_in">pow</span>(c,d,n))<br></code></pre></td></tr></table></figure><p>然后我们就可以发动Extend Wiener Attack，可以注意到这里两个未知的素数都在$730$位，因此我们就有$b&#x3D;730$，$n$是$2048$位。直接根据刚才的理论构建格矩阵即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c=...<br>n=...<br>e1=...<br>e2=...<br>M=[[<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n*n],[<span class="hljs-number">0</span>,e1,e1,-e1*n],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-e2,-e2*n],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,e1*e2]]<br>S1,S2=<span class="hljs-built_in">int</span>(n^<span class="hljs-number">0.5</span>),<span class="hljs-built_in">int</span>(n^(<span class="hljs-number">1</span>+<span class="hljs-number">730</span>/<span class="hljs-number">2048</span>))<br>D=diagonal_matrix(ZZ,[n,S1,S2,<span class="hljs-number">1</span>])<br>M=matrix(ZZ,M)*D<br>w=vector(ZZ,(M).LLL()[<span class="hljs-number">0</span>])<br>v=w*M^(-<span class="hljs-number">1</span>)<br>phi = <span class="hljs-built_in">int</span>(v[<span class="hljs-number">1</span>]//v[<span class="hljs-number">0</span>]*e1)<br>d=inverse(<span class="hljs-number">65537</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,N)<br><span class="hljs-built_in">print</span> (long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;GWHT&#123;3da44ca8379b98fdc1c86f9b34dcc1ef&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-3D-4D-Expand-WienerAttack"><a href="#4-3D-4D-Expand-WienerAttack" class="headerlink" title="4. 3D &amp; 4D Expand WienerAttack"></a>4. 3D &amp; 4D Expand WienerAttack</h2><p>实际上，我们如果比较一下上面的值，可以发现$\ln d &#x3D; 0.35 \ln n$，超过了我们之前说过的$0.25$的比值。而实际上，随着格维度的增加(普通的WienerAttack可以认为是一维的)，允许的$\ln d$与$\ln n$的比值也在增加。下面是$n&#x3D;1$到$7$时Expand Wiener Attack 所允许的最大比值，最高可以到$0.5$。</p><table><thead><tr><th align="center">$n$</th><th align="center">$1$</th><th align="center">$2$</th><th align="center">$3$</th><th align="center">$4$</th><th align="center">$5$</th><th align="center">$6$</th><th align="center">$≥7$</th></tr></thead><tbody><tr><td align="center">$\dfrac{\ln d}{\ln n}$</td><td align="center">$0.25$</td><td align="center">$0.357$</td><td align="center">$0.4$</td><td align="center">$0.441$</td><td align="center">$0.468$</td><td align="center">$0.493$</td><td align="center">$0.5$</td></tr></tbody></table><p>而实际上，我们通过观察之前二维的格的值，会发现推导时经常用到两个式子，下面我们为了简化，给这两个常用式子打个tag：<br>$$<br>[W_1]:e_1d_1g-k_1n&#x3D;g+k_1s<br>$$</p><p>$$<br>[G_{(12)}]:e_2e_2k_1-e_1d_1k_2&#x3D;k_2-k_1<br>$$</p><p>在二维的格中，我们假设格基本单位为$A$，行变换对角矩阵为$P$，列变换对角矩阵为$Q$，那么在刚才二维的格中，$A_2$的值入下图</p><p><img src="/2021/03/01/LatticeNotes6/2.png" alt="2"></p><p>而$P_2&#x3D;\mathrm{diag}(1,e_1,e_2,e_1e_2),Q_2&#x3D;\mathrm{diag}(n,n^{0.5},n^{1+b},1)$。其中$b$是我们估计的$\dfrac{\ln d}{\ln n}$的值。</p><p>并且不要忘记$\vec v_2&#x3D;(k_1k_2,d_1k_2g,k_1d_2g,d_1d_2g^2)$。</p><p>下面我我们尝试构建一下三维的情形：</p><p>首先是类比$\vec v$的值，由于三维的出现了$k_3$，因此$\vec v$中每个分量的$k$和$d$的值个数之和应该为$3$。并且注意到$\vec v$中的一个分量有几个$d$，对应的那个分量就要乘上$g$的几次方，因此，我们可以构造出<br>$$<br>\vec v_3&#x3D;(k_1k_2k_3,d_1k_2k_3g,k_1d_2k_3g,d_1d_2k_3g^2,k_1k_2d_3g,d_1k_2d_3g^2,k_1d_2d_3g^2,d_1d_2d_3g^3)<br>$$<br>可以看出$\vec v_3$的前三个分量仅仅是把$\vec v_2$中的所有分量都乘上了个$k_3$，因此，如果$A_3$看作分块矩阵的话，$A_3$的左上角应当是$A_2$，左下角应当是$0$矩阵。同理，我们还可以类比出$A_3$的第五列和第八列的值，参考一下表达式$G_{13}$和表达式$W_1W_2W_3$即可。</p><p>不过，如果我们想构建含有$d_1d_3$的表达式（并且还不能有$d_2d_3$项出现）考虑到这一结构，我们可以构建$W_1G_{23}$来解决。不过最后为保证$g$的指数足够需要乘上一个$g$。同理，构建含有$d_2d_3$的表达式，那就设置$W_2G_{13}$解决。</p><p>因此，我们构建的格$A_3$如下，其中第$5,8$两列可以类比一下得到，$6,7$两列通过通过$W,G$两个式子的组合来完成。</p><p><img src="/2021/03/01/LatticeNotes6/3.png" alt="3"></p><p>那么，我们可以获得列$1$到$8$的原始推导式</p><table><thead><tr><th align="center">$1$</th><th align="center">$2$</th><th align="center">$3$</th><th align="center">$4$</th></tr></thead><tbody><tr><td align="center">$k_1k_2k_3$</td><td align="center">$W_1k_2k_3$</td><td align="center">$G_{12}k_3g$</td><td align="center">$W_1W_2k_3$</td></tr><tr><td align="center">$5$</td><td align="center">$6$</td><td align="center">$7$</td><td align="center">$8$</td></tr><tr><td align="center">$k_2G_{13}$</td><td align="center">$W_1G_{23}g$</td><td align="center">$W_{2}G_{13}g$</td><td align="center">$W_1W_2W_3$</td></tr></tbody></table><p>其中如果推导时发现$g$的指数不足，需要补$g$的指数，上面第$3,6,7$个推导式就是如此</p><p>类比$P_{3}$，我们通过二进制思维，可以很容易地由$P_2$构建出<br>$$<br>P_3&#x3D;\mathrm{diag}(1,e_1,e_2,e_1e_2,e_3,e_1e_3,e_2e_3,e_1e_2e_3)<br>$$<br>不过$Q_3$就不是那么好构造了。我们还是假设$b&#x3D;\dfrac{\ln d}{\ln n}$。</p><p>那么有$k_1k_2k_3s^3≈n^{3(b+0.5)}$，因此我们发现，当格的维数提升$1$时，观察矩阵$P_3A_3$每一列最上面的非$0$元那么对应的分量就要提升$0.5$，如果某一列对应的最高非零元出现了$e$，指数还需要附加一个$b$。而如果最高非零元$n$的指数每增加$1$，那么$Q$对应分量$n$的指数就降低$0.5$。</p><p>因此我们可以i继续构造表格：</p><table><thead><tr><th align="center">列数$i$</th><th align="center">$1$</th><th align="center">$2$</th><th align="center">$3$</th><th align="center">$4$</th></tr></thead><tbody><tr><td align="center">最高非$0$元</td><td align="center">$1$</td><td align="center">$-n$</td><td align="center">$-e_1$</td><td align="center">$n^2$</td></tr><tr><td align="center">$Q_{ii}$</td><td align="center">$n^{1.5}$</td><td align="center">$n$</td><td align="center">$n^{1.5+b}$</td><td align="center">$n^{0.5}$</td></tr><tr><td align="center">列数$i$</td><td align="center">$5$</td><td align="center">$6$</td><td align="center">$7$</td><td align="center">$8$</td></tr><tr><td align="center">最高非$0$元</td><td align="center">$-e_1$</td><td align="center">$e_2n$</td><td align="center">$e_1n$</td><td align="center">$-n^3$</td></tr><tr><td align="center">$Q_$</td><td align="center">$n^{1.5+b}$</td><td align="center">$n^{1+b}$</td><td align="center">$n^{1+b}$</td><td align="center">$1$</td></tr></tbody></table><p>$$<br>Q_3&#x3D;\mathrm{diag}(n^{1.5},n,n^{1.5+b},n^{0.5},n^{1.5+b},n^{1+b},n^{1+b},1)<br>$$</p><p>这样子的话，我们三维的情况就构造好了，三维可以解决$\ln d&#x3D;0.4\ln n$的情形。</p><p>后面就是考虑构建四维的格。很显然，在四维的格里面，$\vec v_4$中每个分量含$d$的个数分别是从$1$到$4$。其中通过类比$\vec v_3$中给了我们构造分量中含$0,1,2$个$d$的方法，并且最后全是$d$的情况的是所有$W$式相乘。因此，我们就需要考虑考虑$3$个$d$的构造方法。</p><p>由于我们只有$W$式和$G$式，如果想要让式子中有$3$个$d$，其中必须要包含$d_4$，以构造$\vec v_4$中的第$12$个分量$d_1d_2k_3d_4g^3$的情况为例，我们需要的是$d_1d_2$，并且不能出现$d_3d_4$的乘积得到情况，那么我们可以直接乘上$W_1W_2$。而如果我们想分开$d_3,d_4$,那就可以给过去一个$G_{34}$，通过构造$G_{34}W_1W_2$来完成。</p><p>因此，我们可以直接得到$A_4$矩阵，也可以类比出$P_4,Q_4$</p><p><img src="/2021/03/01/LatticeNotes6/4.png" alt="4"><br>$$<br>P_4&#x3D;\mathrm{diag}(1,e_1,e_2,e_1e_2,e_3,e_1e_3,e_2e_3,e_1e_2e_3,e_4,e_1e_4,e_2e_4,e_1e_2e_4,e_3e_4,e_1e_3e_4,e_2e_3e_4,e_1e_2e_3e_4)<br>$$</p><p>$$<br>Q_4&#x3D;\mathrm{diag}(n^2,n^{1.5},n^{2+b},n,n^{2+b},n^{1.5+b},n^{1.5+b},n^{0.5},n^{2+b},n^{1.5+b},n^{1.5+b},n^{1+b},n^{1.5+b},n^{1+b},n^{1+b},1)<br>$$</p><p>当然，我们还可以扩展到$5,6,7$维的情况，这里就不再赘述。</p><h2 id="5-例题-2020NCTF-RRRSA"><a href="#5-例题-2020NCTF-RRRSA" class="headerlink" title="5.例题 [2020NCTF] RRRSA"></a>5.例题 [2020NCTF] RRRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#RSA.py</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, getRandomNBitInteger, GCD, inverse<br>lcm = <span class="hljs-keyword">lambda</span> x, y: x*y // GCD(x,y)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bits</span>):<br>        p = getPrime(bits//<span class="hljs-number">2</span>)<br>        q = getPrime(bits//<span class="hljs-number">2</span>)<br>        <span class="hljs-variable language_">self</span>.N = p * q<br>        <span class="hljs-variable language_">self</span>.lbd = lcm(p-<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>)<br>        <span class="hljs-variable language_">self</span>.gen_ed(bits)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_ed</span>(<span class="hljs-params">self, bits</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            d = getRandomNBitInteger(<span class="hljs-built_in">int</span>(bits*<span class="hljs-number">0.4</span>))<br>            <span class="hljs-keyword">if</span> GCD(d, <span class="hljs-variable language_">self</span>.lbd) == <span class="hljs-number">1</span>:<br>                e = inverse(d, <span class="hljs-variable language_">self</span>.lbd)<br>                <span class="hljs-variable language_">self</span>.e, <span class="hljs-variable language_">self</span>.d = e, d<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(m, <span class="hljs-variable language_">self</span>.e, <span class="hljs-variable language_">self</span>.N)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, c, d</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(c, d, <span class="hljs-variable language_">self</span>.N)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task.py</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG<br>MENU = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. encrypt</span><br><span class="hljs-string">2. decrypt</span><br><span class="hljs-string">3. newkey</span><br><span class="hljs-string">4. encflag</span><br><span class="hljs-string">5. exit&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>():<br>    proof = <span class="hljs-string">&#x27;&#x27;</span>.join([choice(ascii_letters+digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)])<br>    _hexdigest = sha256(proof.encode()).hexdigest()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;_hexdigest&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        prefix = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Give me XXXX: &quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error!&quot;</span>)<br>        exit(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> sha256((prefix+proof[<span class="hljs-number">4</span>:]).encode()).hexdigest() == _hexdigest<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    CHANCE = <span class="hljs-number">1</span><br>    RRRSA = RSA(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My public key: <span class="hljs-subst">&#123;RRRSA.e&#125;</span>, <span class="hljs-subst">&#123;RRRSA.N&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(MENU)<br>            choice = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>)<br>            <span class="hljs-keyword">if</span> choice == <span class="hljs-string">&quot;1&quot;</span>:<br>                m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Your message: &quot;</span>))<br>                c = RRRSA.encrypt(m)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your cipher: <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;2&quot;</span>:<br>                c = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Your message: &quot;</span>))<br>                d = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Your decryption exponent: &quot;</span>))<br>                m = RRRSA.decrypt(c, d)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Your message: <span class="hljs-subst">&#123;m&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;3&quot;</span>:<br>                RRRSA.gen_ed(<span class="hljs-number">1024</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;My new public key: <span class="hljs-subst">&#123;RRRSA.e&#125;</span>, <span class="hljs-subst">&#123;RRRSA.N&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">elif</span> choice == <span class="hljs-string">&quot;4&quot;</span>:<br>                <span class="hljs-keyword">if</span> CHANCE:<br>                    CHANCE -= <span class="hljs-number">1</span><br>                    flag = <span class="hljs-built_in">int</span>.from_bytes(FLAG, <span class="hljs-string">&#x27;big&#x27;</span>)<br>                    encflag = RRRSA.encrypt(flag)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;encflag: <span class="hljs-subst">&#123;encflag&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nope, only 1 chance to get encflag.&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Bye!&quot;</span>)<br>                exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error!&quot;</span>)<br>            exit(-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">if</span> proof_of_work():<br>        task()<br></code></pre></td></tr></table></figure><p>通过观察代码，可以看到：每次生成的$d$满足$\ln d &#x3D; 0.4 \ln n$的规模。而$n$得值自始至终都是不变化的，但与普通的共模攻击不同的就是，我们只能获得一次flag的密文。因此可以使用Extend WienerAttack。而根据这边$b&#x3D;0.4$的规模，就构造$4$维的格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n=<br>e=<br>c=<br>e1=<br>e2=<br>e3=<br>e4=<br>A=[<br>[<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n^<span class="hljs-number">4</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-n,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,n^<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,-n^<span class="hljs-number">2</span>,-n^<span class="hljs-number">3</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">3</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n,n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,-n,n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">3</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,-n,n^<span class="hljs-number">2</span>,-n,n^<span class="hljs-number">2</span>,n^<span class="hljs-number">2</span>,-n^<span class="hljs-number">3</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-n,<span class="hljs-number">0</span>,-n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,-n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br>Q=[n^<span class="hljs-number">2</span>,n^<span class="hljs-number">1.5</span>,n^<span class="hljs-number">2.4</span>,n,n^<span class="hljs-number">2.4</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">0.5</span>,n^<span class="hljs-number">2.4</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">1.4</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">1.4</span>,n^<span class="hljs-number">1.4</span>,<span class="hljs-number">1</span>]<br>P=[<span class="hljs-number">1</span>,e1,e2,e1*e2,e3,e1*e3,e2*e3,e1*e2*e3,e4,e1*e4,e2*e4,e1*e2*e4,e3*e4,e1*e3*e4,e2*e3*e4,e1*e2*e3*e4]<br>A,P,Q=matrix(ZZ,A),diagonal_matrix(ZZ,P),diagonal_matrix(ZZ,Q)<br>A=P*A*Q<br>w=vector(ZZ,A.LLL()[<span class="hljs-number">0</span>])<br>v=w*A^(-<span class="hljs-number">1</span>)<br>phi=<span class="hljs-built_in">int</span>(e1*v[<span class="hljs-number">1</span>]//v[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(phi))<br>d=inverse(e,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-comment">#NCTF&#123;Aft3r_411__t0morr0w_1s_an0ther_d4y&#125;</span><br></code></pre></td></tr></table></figure><p>当然也可以构造三维的格，不过这里边界卡的比较死(恰好$0.4$左右)，可能会导致不稳定，需要多试几次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e=<br>c= <br>e2= <br>e1= <br>n= <br>e3=<br>A=[[<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-n^<span class="hljs-number">3</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-n,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,<span class="hljs-number">0</span>,n,<span class="hljs-number">0</span>,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n,-n,n^<span class="hljs-number">2</span>],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,-n],<br>[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br>P=[<span class="hljs-number">1</span>,e1,e2,e1*e2,e3,e1*e3,e2*e3,e1*e2*e3]<br>Q=[n^<span class="hljs-number">1.5</span>,n,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">0.5</span>,n^<span class="hljs-number">1.9</span>,n^<span class="hljs-number">1.4</span>,n^<span class="hljs-number">1.4</span>,<span class="hljs-number">1</span>]<br>A,P,Q=matrix(ZZ,A),diagonal_matrix(ZZ,P),diagonal_matrix(ZZ,Q)<br>A=P*A*Q<br>w=vector(ZZ,A.LLL()[<span class="hljs-number">0</span>])<br>v=w*A^(-<span class="hljs-number">1</span>)<br>phi1,phi2=<span class="hljs-built_in">int</span>(e1*v[<span class="hljs-number">1</span>]//v[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(e2*v[<span class="hljs-number">2</span>]//v[<span class="hljs-number">0</span>])<br>phi=<span class="hljs-built_in">int</span>(phi1)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(phi1))<br>d,d0=inverse(e,phi),inverse(e2,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>RSA与格密码的结合，还是比较难的（，自己NCTF在放题后100天，本地复现的时候才做出来（（（</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HgameDiv3,4</title>
    <link href="/2021/02/28/HgameDiv3/"/>
    <url>/2021/02/28/HgameDiv3/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame-Div-3-4题解"><a href="#Hgame-Div-3-4题解" class="headerlink" title="Hgame Div 3,4题解"></a>Hgame Div 3,4题解</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>终于在接触CTF差不多大约6个月后，尝试打了一下杭州电子科大的CTF招新题（<del>总体感觉只有4个字：我太菜了</del></p><p>只做了密码学，其他的题目不看，<del>因为不是我研究的内容（</del></p><p>第3，4两周的题目确实难度变大了很多</p><h2 id="1-LikiPrime"><a href="#1-LikiPrime" class="headerlink" title="1. LikiPrime"></a>1. LikiPrime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2n<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secrets, flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_prime</span>(<span class="hljs-params">secret</span>):<br>    prime = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(secret):<br>        prime = prime &lt;&lt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> prime - <span class="hljs-number">1</span><br>random.shuffle(secrets)<br>m = s2n(flag)<br>p = get_prime(secrets[<span class="hljs-number">0</span>])<br>q = get_prime(secrets[<span class="hljs-number">1</span>])<br>n = p * q<br>e = <span class="hljs-number">0x10001</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n = &#123;&#125;.format(n)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e = &#123;&#125;.format(e)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c = &#123;&#125;.format(c)&quot;</span>)<br></code></pre></td></tr></table></figure><p>题目最后给出的是$n,e,c$的值。</p><p>通过简单地观察代码，我们可以发现，$p,q$都具有$2^k-1$的形式，并且都是素数。$n$的位数为$5072$</p><p>$p.q$的值。</p><p>枚举出$p,q$之后。之后就是正常的RSA解密了。</p><p><code>hgame&#123;Mers3nne~Pr!Me^re4l1y_s0+5O-li7tle!&#125;</code></p><h2 id="2-HappyNewYear"><a href="#2-HappyNewYear" class="headerlink" title="2.HappyNewYear"></a>2.HappyNewYear</h2><p>题目描述：Liki 的朋友们在新年的时候给她发送了新年祝福。好家伙，一看就是群发的，有几个朋友发送的内容还是相同的</p><p>然后题目给出了很多$n,c$的值，并且$e&#x3D;3$。不出意外应该是低指数广播攻击。因为提示有一样的，因此我们可以两两枚举，使用CRT求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crt2</span>(<span class="hljs-params">m1,m2,r1,r2</span>):<br>    M=m1*m2<br>    t1,t2=inverse(m2,m1),inverse(m1,m2)<br>    <span class="hljs-keyword">return</span> (r1*t1*m2+r2*t2*m1)%M<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data2.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>n,c=[],[]<br>a=[]<br>b=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    n.append(<span class="hljs-built_in">int</span>(f.readline()))<br>    c.append(<span class="hljs-built_in">int</span>(f.readline()))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>        now=crt2(n[i],n[j],c[i],c[j])<br>        <span class="hljs-keyword">if</span>(now <span class="hljs-keyword">in</span> a):<br>            <span class="hljs-keyword">if</span> now <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> b:<br>                b.append(now)<br>        <span class="hljs-keyword">else</span>:<br>            a.append(now)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    c,d=iroot(i,<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">if</span>(d):<br>        <span class="hljs-built_in">print</span>(long_to_bytes(c))<br></code></pre></td></tr></table></figure><h2 id="3-EncryptedChats"><a href="#3-EncryptedChats" class="headerlink" title="3.EncryptedChats"></a>3.EncryptedChats</h2><p>题目首先给出了两个人的对话，还有AES加密的过程。</p><h4 id="1-Dialogue"><a href="#1-Dialogue" class="headerlink" title="1.Dialogue"></a>1.Dialogue</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Switch:</span> <span class="hljs-string">你好老伙汁</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">你好</span><br><span class="hljs-attr">Switch:</span> <span class="hljs-string">所以为什么这家伙在这里</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">因为我是来记录你们谈话内容的</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">好吧</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">不过我可以提一个要求吗</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">?</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">我们...换一个群聊</span><br><span class="hljs-attr">Switch:</span> <span class="hljs-string">好啊!</span> <span class="hljs-string">我看看,</span> <span class="hljs-string">就换到加法群聊吧!</span><br><span class="hljs-attr">Switch:</span> <span class="hljs-string">喂,</span> <span class="hljs-string">帮忙选一个质数</span> <span class="hljs-string">g</span> <span class="hljs-string">吧</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">??,</span> <span class="hljs-number">12602983924735419868428783329859102652072837431735895060811258460532600319539509800915989811879506790207025505003183121812480524033163157114086741486989697</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">这位女士，可以劳烦您再为我们选择一个质数</span> <span class="hljs-string">p</span> <span class="hljs-string">吗</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">???...那就,</span>  <span class="hljs-number">30567260905179651419358486099834315837354102714690253338851161207042846254351374572818884286661092938876675032728700590336029243619773064402923830209873155153338320502164587381848849791304214084993139233581072431814555885408821184652544361671134564827265516331283076223247829980225591857643487356406284913560960657053777612115591241983729716542192518684003840806442329098770424504275465756739925434019460351138273272559738332984560095465809481270198689251655392941966835733947437503158486731906649716026200661065054914445245468517406404904444261196826370252359102324767986314473183183059212009545789665906197844518119</span> <span class="hljs-string">吧,</span> <span class="hljs-string">够大了吗?</span><br><span class="hljs-attr">Million:</span> <span class="hljs-string">好的,</span> <span class="hljs-string">我选好我的</span> <span class="hljs-string">a</span> <span class="hljs-string">了,</span> <span class="hljs-string">那么</span> <span class="hljs-string">A</span> <span class="hljs-string">=</span> <span class="hljs-number">6407001517522031755461029087358686699246016691953286745456203144289666065160284103094131027888246726980488732095429549592118968601737506427099198442788626223019135982124788211819831979642738635150279126917220901861977041911299607913392143290015904211117118451848822390856596017775995010697100627886929406512483565105588306151304249791558742229557096175320767054998573953728418896571838697779621641522372719890056962681223595931519174265357487072296679757688238385898442549594049002467756836225770565740860731932911280385359763772064721179733418453824127593878917184915316616399071722555609838785743384947882543058635</span><br><span class="hljs-comment"># A = a ^ g % p = pow(g, a, p)</span><br><span class="hljs-attr">Switch:</span> <span class="hljs-string">okay,</span> <span class="hljs-string">b</span> <span class="hljs-string">也选好了,</span> <span class="hljs-string">B</span> <span class="hljs-string">=</span> <span class="hljs-number">5522084830673448802472379641008428434072040852768290130448235845195771339187395942646105104638930576247008845820145438300060808178610210847444428530002142556272450436372497461222761977462182452947513887074829637667167313239798703720635138224358712513217604569884276513251617003838008296082768599917178457307640326380587295666291524388123169244965414927588882003753247085026455845320527874258783530744522455308596065597902210653744845305271468086224187208396213207085588031362747352905905343508092625379341493584570041786625506585600322965052668481899375651376670219908567608009443985857358126335247278232020255467723</span><br><span class="hljs-comment"># B = b ^ g % p = pow(g, b, p)</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">????</span><br><span class="hljs-attr">Million:</span> &#123;<span class="hljs-attr">&#x27;iv&#x27;:</span> <span class="hljs-string">&#x27;d3811beb5cd2a4e1e778207ab541082b&#x27;</span>, <span class="hljs-attr">&#x27;encrypted_flag&#x27;:</span> <span class="hljs-string">&#x27;059e9c216bcc14e5d6901bcf651bee361d9fe42f225bc0539935671926e6c092&#x27;</span>&#125;<br><span class="hljs-attr">Switch:</span> &#123;<span class="hljs-attr">&#x27;iv&#x27;:</span> <span class="hljs-string">&#x27;b4259ed79d050dabc7eab0c77590a6d0&#x27;</span>, <span class="hljs-attr">&#x27;encrypted_flag&#x27;:</span> <span class="hljs-string">&#x27;af3fe410a6927cc227051f587a76132d668187e0de5ebf0608598a870a4bbc89&#x27;</span>&#125;<br><span class="hljs-attr">Million:</span> <span class="hljs-string">再见伙汁</span><br><span class="hljs-attr">Switch:</span> <span class="hljs-string">再见</span><br><span class="hljs-attr">Liki:</span> <span class="hljs-string">?????</span><br><br></code></pre></td></tr></table></figure><h4 id="2-AES-encryption"><a href="#2-AES-encryption" class="headerlink" title="2.AES encryption"></a>2.AES encryption</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> shared_secret, FLAG<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">shared_secret: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-comment"># Derive AES key from shared secret</span><br>    sha1 = hashlib.sha1()<br>    sha1.update(<span class="hljs-built_in">str</span>(shared_secret).encode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br>    key = sha1.digest()[:<span class="hljs-number">16</span>]<br>    <span class="hljs-comment"># Encrypt flag</span><br>    iv = os.urandom(<span class="hljs-number">16</span>)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    ciphertext = cipher.encrypt(pad(FLAG, <span class="hljs-number">16</span>))<br>    <span class="hljs-comment"># Prepare data to send</span><br>    data = &#123;&#125;<br>    data[<span class="hljs-string">&#x27;iv&#x27;</span>] = iv.<span class="hljs-built_in">hex</span>()<br>    data[<span class="hljs-string">&#x27;encrypted_flag&#x27;</span>] = ciphertext.<span class="hljs-built_in">hex</span>()<br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-built_in">print</span>(encrypt_flag(shared_secret))<br></code></pre></td></tr></table></figure><h4 id="3-Solution"><a href="#3-Solution" class="headerlink" title="3.Solution"></a>3.Solution</h4><p>很显然，看到两个人的对话，就知道这道题考点是数字签名。也就是著名的DH密钥交换算法。这个在我的<strong>DLP Notes 1</strong>里面有较为详细的介绍。</p><p>不过在这边有一个新的概念就是群：简单来说，群就是一个封闭的运算集合。在一个群$G$里面，使用的运算符号是$\mathrm{op}$。那么对于任意的$a,b,\in G$，满足交换律律$a \text{ op }b&#x3D;b\text{ op }a$，结合律$a\text{ op }b\text{ op }c&#x3D;a\text{ op }(b\text{ op }c)$。并且群中有一个中性元$e$，每个元素$a$都有一个逆元$a^{-1}$，使得$a\text{ op } a^{-1}&#x3D;e$。当然，$a\text{ op }a$在群中可以记作$a^2$。</p><p>从上述对话中我们可以看到：这里使用的是加法群，因此$\mathrm{op}&#x3D;+$，而表面上的指数，实际上应该是数学计算中的乘号。</p><p>根据DH密钥交换系统，最后共享密钥是群里面的$g^{ab}$。由于这里是加法群，因此共享内容是$gab$三者乘积模$p$的值。因此直接求个逆元就可以得到$a,b$。</p><p>至于AES部分，直接模仿他的加密过程构建密钥即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> g,p,A,B<br>d=inverse(g,p)<br>a,b=A*d%p,B*d%p<br>S=g*a*b%p<br>sha1=hashlib.sha1()<br>sha1.update(<span class="hljs-built_in">str</span>(S).encode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br>key=sha1.digest()[:<span class="hljs-number">16</span>]<br>iv=[<span class="hljs-number">0xd3811beb5cd2a4e1e778207ab541082b</span>,<span class="hljs-number">0xb4259ed79d050dabc7eab0c77590a6d0</span>]<br>c=[<span class="hljs-number">0x059e9c216bcc14e5d6901bcf651bee361d9fe42f225bc0539935671926e6c092</span>,<span class="hljs-number">0xaf3fe410a6927cc227051f587a76132d668187e0de5ebf0608598a870a4bbc89</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    iv[i]=long_to_bytes(iv[i])<br>    c[i]=long_to_bytes(c[i])<br>cipher1 = AES.new(key, AES.MODE_CBC, iv[<span class="hljs-number">0</span>])<br>cipher2 = AES.new(key, AES.MODE_CBC, iv[<span class="hljs-number">1</span>])<br>d1=cipher1.decrypt(c[<span class="hljs-number">0</span>])<br>d2=cipher2.decrypt(c[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(d1,d2)<br></code></pre></td></tr></table></figure><h2 id="4-夺宝大冒险1"><a href="#4-夺宝大冒险1" class="headerlink" title="4.夺宝大冒险1"></a>4.夺宝大冒险1</h2><h3 id="Step-1：阅读题目，确定算法"><a href="#Step-1：阅读题目，确定算法" class="headerlink" title="Step 1：阅读题目，确定算法"></a>Step 1：阅读题目，确定算法</h3><p>还是先看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>flag = <span class="hljs-string">&quot;xxxx&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cxx1ff</span>:<br>    c4ff1x = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c66f6 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c4ff10 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.state = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.state = (<span class="hljs-variable language_">self</span>.state * <span class="hljs-variable language_">self</span>.c4ff1x + <span class="hljs-variable language_">self</span>.c66f6) % <span class="hljs-variable language_">self</span>.c4ff10<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.state<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cxx2ff</span>:<br>    c4ff1x = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c66f6 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c4ff10 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.state = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.state = (<span class="hljs-variable language_">self</span>.state * <span class="hljs-variable language_">self</span>.c4ff1x + <span class="hljs-variable language_">self</span>.c66f6) % <span class="hljs-variable language_">self</span>.c4ff10<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.state<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cxx3ff</span>:<br>    c4ff1x = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c66f6 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    c4ff10 = <span class="hljs-built_in">int</span>.from_bytes(os.urandom(<span class="hljs-number">8</span>),<span class="hljs-string">&#x27;big&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.state = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.state = (<span class="hljs-variable language_">self</span>.state * <span class="hljs-variable language_">self</span>.c4ff1x + <span class="hljs-variable language_">self</span>.c66f6) % <span class="hljs-variable language_">self</span>.c4ff10<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.state<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    gen = Cxx1ff(<span class="hljs-number">123</span>) <br>    <span class="hljs-built_in">print</span>((Cxx1ff.c4ff1x,Cxx1ff.c4ff10))<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    t1 = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t1.strip())==Cxx1ff.c66f6:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    gen = Cxx2ff(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>((Cxx2ff.c4ff10))<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    t1 = <span class="hljs-built_in">input</span>()<br>    t2 = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">int</span>(t1.strip())==Cxx2ff.c4ff1x) <span class="hljs-keyword">and</span> (<span class="hljs-built_in">int</span>(t2.strip())==Cxx2ff.c66f6):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test3</span>():<br>    gen = Cxx3ff(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    <span class="hljs-built_in">print</span>(gen.<span class="hljs-built_in">next</span>())<br>    t1 = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t1.strip())==Cxx3ff.c4ff10:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    ans = <span class="hljs-number">0</span><br>    ans += test1()<br>    ans += test2()<br>    ans += test3()<br>    <span class="hljs-keyword">if</span> ans&gt;=<span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;win&quot;</span>)<br>        <span class="hljs-built_in">print</span>(flag)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fail&quot;</span>)<br></code></pre></td></tr></table></figure><p>通过阅读代码可以发现，这道题实际上是线性同余生成器的一个题目。线性同余生成器就是通过递推式$X_{n+1}\equiv AX_{n}+B \pmod M$的计算来生成随机数，它包括一个线性函数$Ax+B$和模$M$运算。</p><p>而这道题，实际上分成了三个小问，当三个小问都答对的时候，服务器会直接给你flag，下面我们逐一解决这三小问。</p><h3 id="Step-2-分步解决问题，提出初步方案。"><a href="#Step-2-分步解决问题，提出初步方案。" class="headerlink" title="Step 2: 分步解决问题，提出初步方案。"></a>Step 2: 分步解决问题，提出初步方案。</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h4><p>第一问是已知$A,M,X_{0}&#x3D;123,X_1,X_2$，求$B$。那么我们根据<br>$$<br>X_{1}\equiv AX_{0}+B \pmod M<br>$$<br>可以直接推出<br>$$<br>B\equiv X_{1}-AX_{0} \pmod M<br>$$<br>所以，第一问真正的计算只有一行代码（所有的数据都是我进行本地测试时使用的数据，服务器给出的数据可能不一样）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">3423853412712492282</span><br>m=<span class="hljs-number">17055887075354437978</span><br>x1=<span class="hljs-number">8976750431089074058</span><br>b=(x1-<span class="hljs-number">123</span>*a)%m<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h4><p>第二问，已知$M,X_0&#x3D;123,X_1,X_2,X_3$。要求出$A,B$那么我们根据$X_1\equiv AX_0+B \pmod M$、$X_2\equiv AX_1+B \pmod M$、$X_3\equiv AX_2+B \pmod M$。第二个式子减去第一个式子，第三个式子减去第二个式子，消去了$B$，就得到<br>$$<br>X_2-X_1\equiv A(X_1-X_0)\pmod M<br>$$</p><p>$$<br>X_3-X_2\equiv A(X_2-X_1)\pmod M<br>$$</p><p>所以，以第一个式子两边除以$X_1-X_0$，我们就可以得到：<br>$$<br>(X_2-X_1)(X_1-X_0)^{-1}\equiv A \pmod M<br>$$<br>当然，我们也可以用第二个式子<br>$$<br>(X_3-X_2)(X_2-X_1)^{-1}\equiv A \pmod M<br>$$<br>$A$求出来之后，那么我们根据<br>$$<br>AX_0+B\equiv X_1\pmod M<br>$$<br>可以得到<br>$$<br>B\equiv X_1-AX_0 \pmod M<br>$$<br>这样题目就得出了解。</p><p>上一下第二问的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">G</span>(<span class="hljs-params">d1,d2,m</span>):<br>    <span class="hljs-keyword">return</span> (d2)*inverse(d1,m)%m<br>m=<span class="hljs-number">17339855340627587175</span><br>x0=<span class="hljs-number">123</span><br>x1=<span class="hljs-number">11280784678567285991</span><br>x2=<span class="hljs-number">16229269394156588360</span><br>x3=<span class="hljs-number">12807800121938543462</span><br>detla1,detla2,detla3=x1-x0,x2-x1,x3-x2<br>a=G(detla1,detla2,m)<br>b=(x1-<span class="hljs-number">123</span>*a)%m<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><h4 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h4><p>第三问，已知$X_0$到$X_7$的值，要求出模数$M$。</p><p>根据我们知道的$X_0$到$X_7$的递推式，我们依然想到了消元。</p><p>根据第二问我们已经获得的两个式子：<br>$$<br>(X_2-X_1)(X_1-X_0)^{-1}\equiv A \pmod M<br>$$</p><p>$$<br>(X_3-X_2)(X_2-X_1)^{-1}\equiv A \pmod M<br>$$</p><p>联立这两个式子，我们可以得到<br>$$<br>(X_2-X_1)(X_1-X_0)^{-1}\equiv(X_3-X_2)(X_2-X_1)^{-1} \pmod M<br>$$<br>干脆把分母也去了吧<br>$$<br>(X_2-X_1)^2\equiv(X_3-X_2)(X_1-X_0) \pmod M<br>$$<br>然后把同余号也去了吧（<br>$$<br>(X_2-X_1)^2&#x3D;(X_3-X_2)(X_1-X_0)+k_2M<br>$$<br>最后移项<br>$$<br>(X_2-X_1)^2-(X_3-X_2)(X_1-X_0)&#x3D;+k_2M<br>$$<br>同理可得：<br>$$<br>(X_3-X_2)^2-(X_4-X_3)(X_2-X_1)&#x3D;+k_3M<br>$$<br>我们可以通过这一手段获得$k_2M,k_3M,k_4M,k_5M,k_6M$的值，然后直接求GCD就可以了。</p><p>上一下第三问的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *i<br>x0=<span class="hljs-number">123</span><br>x1=<span class="hljs-number">9994867626161635096</span><br>x2=<span class="hljs-number">5753461374688204354</span><br>x3=<span class="hljs-number">11648048026234191592</span><br>x4=<span class="hljs-number">1202418284492042518</span><br>x5=<span class="hljs-number">10468479901118246086</span><br>x6=<span class="hljs-number">8754702082052904382</span><br>x7=<span class="hljs-number">4553263904866307968</span><br>detla1,detla2,detla3,detla4,detla5=x1-x0,x2-x1,x3-x2,x4-x3,x5-x4<br>detla6,detla7=x6-x5,x7-x6<br>P2=detla2**<span class="hljs-number">2</span>-detla3*detla1<br>P3=detla3**<span class="hljs-number">2</span>-detla4*detla2<br>P4=detla4**<span class="hljs-number">2</span>-detla5*detla3<br>P5=detla5**<span class="hljs-number">2</span>-detla6*detla4<br>P6=detla6**<span class="hljs-number">2</span>-detla7*detla5<br>P2,P3,P4,P5,P6=<span class="hljs-built_in">abs</span>(P2),<span class="hljs-built_in">abs</span>(P3),<span class="hljs-built_in">abs</span>(P4),<span class="hljs-built_in">abs</span>(P5),<span class="hljs-built_in">abs</span>(P6)<br>E=GCD(P2,P3)<br>E=GCD(E,P4)<br>E=GCD(E,P5)<br>E=GCD(E,P6)<br><span class="hljs-built_in">print</span>(E)<br></code></pre></td></tr></table></figure><h3 id="Step-3-回顾并完善方案"><a href="#Step-3-回顾并完善方案" class="headerlink" title="Step 3.回顾并完善方案"></a>Step 3.回顾并完善方案</h3><p>内测的时候，这三个代码都能够得出正确答案，但都是概率性正确（也就是总是会出错），原因可能如下：</p><p>第一问的$M&gt;A$且$\gcd(A,M)\not &#x3D;1$的时候，大概有$70\text{percent}$的概率会出现第一问的错误。因为两边的模是不能月的，之前就提出过$2x\equiv2 \pmod 6$的解是$x_1&#x3D;1$和$x_2&#x3D;4$。</p><p>第二问可能同时出现$\gcd (X_1-X_0,M)\not &#x3D;1$和$\gcd (X_2-X_1,M)\not &#x3D;1$，此时逆元无法求出，解题会非常麻烦。</p><p>第三问可能会出现$M$的比特位长$≥65$的情况，因为最后求$\gcd$的时候，$M$前面的系数没有消成$1$。</p><p>总之，这些问题处理起来，会非常麻烦，但在数据比较好的情况下，这三个做法都能做出来。</p><p>所以，如果最后搞不出来，那就干脆重连算了。比如说，在第二问$\gcd$全部不等于$1$的时候程序自动<code>raise ValueError</code>，第三问解出的数字比特位长于$64$也<code>raise</code>一个<code>ValueError</code>。第三问解决出来后把服务器的反馈全盘接受，一旦出现<code>fail</code>自动重连，因此只要我们最后接收到的字符串的长度大于$5$，就说明我们获得了flag，然后直接输出就行了。</p><p>由于我们不能预估这些概率，所以我打算多次连接（，脚本如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s1</span>(<span class="hljs-params">a,m,x1,x2</span>):<br>    <span class="hljs-keyword">return</span> (x1-<span class="hljs-number">123</span>*a)%m<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2</span>(<span class="hljs-params">m,x1,x2,x3</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">G</span>(<span class="hljs-params">d1,d2,m</span>):<br>        <span class="hljs-comment">#print(GCD(d1,m))</span><br>        <span class="hljs-keyword">assert</span> GCD(d1,m)==<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> (d2)*inverse(d1,m)%m<br>    x0=<span class="hljs-number">123</span><br>    detla1,detla2,detla3=x1-x0,x2-x1,x3-x2<br>    <span class="hljs-keyword">try</span>:<br>        a=G(detla1,detla2,m)<br>        b=(x1-<span class="hljs-number">123</span>*a)%m<br>        <span class="hljs-comment">#print(a.bit_length(),b.bit_length())</span><br>        <span class="hljs-keyword">return</span>(a,b)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">try</span>:<br>            a=G(detla2,detla3,m)<br>            b=(x1-<span class="hljs-number">123</span>*a)%m<br>            <span class="hljs-comment">#print(a.bit_length(),b.bit_length())</span><br>            <span class="hljs-keyword">return</span>(a,b)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">raise</span> ValueError<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s3</span>(<span class="hljs-params">x1,x2,x3,x4,x5,x6,x7</span>):<br>    x0=<span class="hljs-number">123</span><br>    detla1,detla2,detla3,detla4,detla5=x1-x0,x2-x1,x3-x2,x4-x3,x5-x4<br>    detla6,detla7=x6-x5,x7-x6<br>    P2=detla2**<span class="hljs-number">2</span>-detla3*detla1<br>    P3=detla3**<span class="hljs-number">2</span>-detla4*detla2<br>    P4=detla4**<span class="hljs-number">2</span>-detla5*detla3<br>    P5=detla5**<span class="hljs-number">2</span>-detla6*detla4<br>    P6=detla6**<span class="hljs-number">2</span>-detla7*detla5<br>    P2,P3,P4,P5,P6=<span class="hljs-built_in">abs</span>(P2),<span class="hljs-built_in">abs</span>(P3),<span class="hljs-built_in">abs</span>(P4),<span class="hljs-built_in">abs</span>(P5),<span class="hljs-built_in">abs</span>(P6)<br>    E=GCD(P2,P3)<br>    E=GCD(E,P4)<br>    E=GCD(E,P5)<br>    E=GCD(E,P6)<br>    <span class="hljs-comment">#print(E.bit_length())</span><br>    <span class="hljs-keyword">if</span> E.bit_length()&gt;<span class="hljs-number">64</span>:<br>        <span class="hljs-keyword">raise</span> ValueError<br>    <span class="hljs-keyword">return</span> E<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getamin1</span>(<span class="hljs-params">s1</span>):<br>    arr,now,ind=[],<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s1:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>,<span class="hljs-number">58</span>):<br>            ind,now=<span class="hljs-number">1</span>,now*<span class="hljs-number">10</span>+<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">48</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> ind:<br>                arr.append(now)<br>                now,ind=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(arr)==<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>]<br><span class="hljs-comment">#---------------RUN BELOW-------------------#</span><br><span class="hljs-comment">#get 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    sh=remote(<span class="hljs-string">&quot;182.92.108.71&quot;</span>,<span class="hljs-number">30641</span>)<br>    so1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    x1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    x2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    a,m=getamin1(so1)<br>    x1,x2=<span class="hljs-built_in">int</span>(x1),<span class="hljs-built_in">int</span>(x2)<br>    ans1=s1(a,m,x1,x2)<br>    <span class="hljs-built_in">print</span>(ans1.bit_length())<br>    sh.sendline(<span class="hljs-built_in">str</span>(ans1))<br>    <span class="hljs-comment">#get 2</span><br>    m=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x1=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x2=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x3=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    a,b=s2(m,x1,x2,x3)<br>    sh.sendline(<span class="hljs-built_in">str</span>(a))<br>    sh.sendline(<span class="hljs-built_in">str</span>(b))<br>    <span class="hljs-comment">#get 3</span><br>    x1=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x2=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x3=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x4=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x5=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x6=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    x7=<span class="hljs-built_in">int</span>(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>    ans=s3(x1,x2,x3,x4,x5,x6,x7)<br>    sh.sendline(<span class="hljs-built_in">str</span>(ans))<br>    final=sh.recvall()<br>    sh.close()<br>    <span class="hljs-keyword">return</span> final<br><span class="hljs-comment">#------------------MAIN BELOW------------------#</span><br>T,F=<span class="hljs-number">1</span>,<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(T)+<span class="hljs-string">&#x27;th time trying&#x27;</span>)<br>    F=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        F=run()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(F)&gt;<span class="hljs-number">6</span>:<br>        <span class="hljs-built_in">print</span>(F)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;with using&#x27;</span>+<span class="hljs-built_in">str</span>(T)+<span class="hljs-string">&#x27;times to get the flag&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        T+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>运行截图，这里是用了$24$次，多测了几次，最好的一次重置$3$次获得flag，最坏的一次重置了$91$次。</p><p><img src="/2021/02/28/HgameDiv3/1.jpg" alt="1"></p><h3 id="Step-4-Reference"><a href="#Step-4-Reference" class="headerlink" title="Step 4 Reference"></a>Step 4 Reference</h3><p>不知道为什么出题人生成模数的时候不使用<code>getPrime(64)</code>而是使用<code>bytes_to_long(urandom(8))</code>，是大E了还是另有想法，只能坐等官方的week4的wp了。这说明自己还是太菜了（</p><p><strong>Update 2021.7.12</strong></p><p>当时打完了之后问了一下作者。<del>实际上是打完不久，但4个半月后才想起来Update</del>，此处实际上使用的是重复攻击意识，因为有的时候由于各种数据的原因，虽然算法是对的，但有可能也做不出最终结果。因此遇到这种情况的时候可以多试几次，就可以得出正确答案</p><h2 id="5-夺宝大冒险2"><a href="#5-夺宝大冒险2" class="headerlink" title="5.夺宝大冒险2"></a>5.夺宝大冒险2</h2><p>看一下题目，是lfsr求种子和随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LXFIQNN</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, init, mask, length</span>):<br>        <span class="hljs-variable language_">self</span>.init = init<br>        <span class="hljs-variable language_">self</span>.mask = mask<br>        <span class="hljs-variable language_">self</span>.lengthmask = <span class="hljs-number">2</span>**(length+<span class="hljs-number">1</span>)-<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        nextdata = (<span class="hljs-variable language_">self</span>.init &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        i = <span class="hljs-variable language_">self</span>.init &amp; <span class="hljs-variable language_">self</span>.mask &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span>:<br>            output ^= (i &amp; <span class="hljs-number">1</span>)<br>            i = i &gt;&gt; <span class="hljs-number">1</span><br>        nextdata ^= output<br>        <span class="hljs-variable language_">self</span>.init = nextdata<br>        <span class="hljs-keyword">return</span> output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">self, nbit</span>):<br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbit):<br>            output &lt;&lt;= <span class="hljs-number">1</span><br>            output |= <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> output<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> init, FLAG<br><span class="hljs-string">&quot;&quot;&quot;secret.py</span><br><span class="hljs-string">import os</span><br><span class="hljs-string">init = int.from_bytes(os.urandom(5), &#x27;big&#x27;)</span><br><span class="hljs-string">FLAG = &#x27;hgame&#123;xxx&#125;&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>prng = LXFIQNN(init, <span class="hljs-number">0b1011001010001010000100001000111011110101</span>, <span class="hljs-number">40</span>)<br>score = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;round <span class="hljs-subst">&#123;r&#125;</span> :: score <span class="hljs-subst">&#123;score&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;guess: &quot;</span>))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br>    secret = prng.random(<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> secret == guess:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Right&quot;</span>)<br>        score += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Wrong, the secret is <span class="hljs-subst">&#123;secret&#125;</span>&quot;</span>)<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span>(FLAG)<br></code></pre></td></tr></table></figure><p>CTFWIKI上说过，一个$n$位的lfsr，在知道掩码mask的情况下，只需要知道$n$位的输出，就可以恢复种子值，而如果在连mask也不知道的情况下，如果知道了$2n$位的输出，那么可以先通过矩阵运算得到mask的值，然后求个逆矩阵就可以得到种子的值了。</p><p>具体内容见自己博客的**Lfsr Notes[2021.1.27]**相关内容，下面直接上一下做题脚本。相关内容的构造可以直接模仿题目给出的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LXFIQNN</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, init, mask, length</span>):<br>        <span class="hljs-variable language_">self</span>.init = init<br>        <span class="hljs-variable language_">self</span>.mask = mask<br>        <span class="hljs-variable language_">self</span>.lengthmask = <span class="hljs-number">2</span>**(length+<span class="hljs-number">1</span>)-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        nextdata = (<span class="hljs-variable language_">self</span>.init &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        i = <span class="hljs-variable language_">self</span>.init &amp; <span class="hljs-variable language_">self</span>.mask &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span>:<br>            output ^= (i &amp; <span class="hljs-number">1</span>)<br>            i = i &gt;&gt; <span class="hljs-number">1</span><br>        nextdata ^= output<br>        <span class="hljs-variable language_">self</span>.init = nextdata<br>        <span class="hljs-keyword">return</span> output<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">random</span>(<span class="hljs-params">self, nbit</span>):<br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbit):<br>            output &lt;&lt;= <span class="hljs-number">1</span><br>            output |= <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> output<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padbin</span>(<span class="hljs-params">x,b</span>):<br>    s=<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>    s=<span class="hljs-string">&#x27;0&#x27;</span>*(b-<span class="hljs-built_in">len</span>(s))+s<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-comment">#------MAIN---BELOW------#</span><br>sh=remote(<span class="hljs-string">&quot;182.92.108.71&quot;</span>,<span class="hljs-number">30607</span>)<br>arr=[]<br>lj=[<span class="hljs-number">5</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    sh.recvuntil(<span class="hljs-string">&quot;guess: &quot;</span>)<br>    sh.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br>    judge=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(judge) <span class="hljs-keyword">in</span> lj<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(judge)==<span class="hljs-number">5</span>:<br>        arr.append(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span>:<br>        arr.append(<span class="hljs-built_in">int</span>(judge[<span class="hljs-number">21</span>:]))<br><span class="hljs-built_in">print</span>(arr)<br>mask = <span class="hljs-number">0xb28a108ef5</span><br>N = <span class="hljs-number">40</span><br>key = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>    key+=padbin(i,<span class="hljs-number">4</span>)<br>idx = <span class="hljs-number">0</span><br>ans = <span class="hljs-string">&quot;&quot;</span><br>key = key[<span class="hljs-number">39</span>] + key[:<span class="hljs-number">40</span>]<br><span class="hljs-keyword">while</span> idx &lt; <span class="hljs-number">40</span>:<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        <span class="hljs-keyword">if</span> mask &gt;&gt; i &amp; <span class="hljs-number">1</span>:<br>            tmp ^= <span class="hljs-built_in">int</span>(key[<span class="hljs-number">39</span> - i])<br>    ans = <span class="hljs-built_in">str</span>(tmp) + ans<br>    idx += <span class="hljs-number">1</span><br>    key = key[<span class="hljs-number">39</span>] + <span class="hljs-built_in">str</span>(tmp) + key[<span class="hljs-number">1</span>:<span class="hljs-number">39</span>]<br>num = <span class="hljs-built_in">int</span>(ans, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(num))<br>prng=LXFIQNN(num, mask, <span class="hljs-number">40</span>)<br>anses=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">300</span>):<br>    anses.append(prng.random(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">assert</span> anses[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]==arr<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>):<br>    tr1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(str1)<br>    sh.recvuntil(<span class="hljs-string">&quot;guess: &quot;</span>)<br>    sh.sendline(<span class="hljs-built_in">str</span>(anses[i]))<br>    str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(str1)<br>flag=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#hgame&#123;lfsr_121a111y^use-in&amp;crypto&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Explore SPN</title>
    <link href="/2021/02/26/Explore-SPN/"/>
    <url>/2021/02/26/Explore-SPN/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习SPN加密的笔记"><a href="#huangx607087学习SPN加密的笔记" class="headerlink" title="huangx607087学习SPN加密的笔记"></a>huangx607087学习SPN加密的笔记</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>BUUCTF上做了一道SPN的题目，<del>挺复杂的，得认真做亿点点笔记</del>，wp上讲的非常简单，自己摸了半天才做出来。</p><h2 id="1-什么是SPN"><a href="#1-什么是SPN" class="headerlink" title="1.什么是SPN"></a>1.什么是SPN</h2><p>SPN加密是分组密码的一种，其中包括一个$S$盒和一个$P$盒，$S$盒的作用是将某个数对应地变成另一个数，而$P$盒的作用是置换比特位。其英文全称叫Substitution-Permutation Network，翻译成中文就是代换-置换网络。</p><p>SPN加密网络中大概分为这三个过程。</p><p>第一步，准备这一次加密的密钥$k$，将输入的明文与$k$异或。</p><p>第二步，将第一步得到的所有的结果通过$S$盒，进行数字的代换。</p><p>第三步，对已知的比特位进行修改位置，不修改其值的置换。</p><p>因此根据上面的观察，可以得出结论：只有$S$盒的代换是一个非线性的过程，似乎没有什么规律，其他的步骤都是可逆的。</p><p>例如：已知一个SPN的$S$盒和$P$盒如下：</p><table><thead><tr><th>$x$</th><th>$0$</th><th>$1$</th><th>$2$</th><th>$3$</th><th>$4$</th><th>$5$</th><th>$6$</th><th>$7$</th><th>$8$</th><th>$9$</th><th>$10$</th><th>$11$</th><th>$12$</th><th>$13$</th><th>$14$</th><th>$15$</th></tr></thead><tbody><tr><td>$S(x)$</td><td>$6$</td><td>$14$</td><td>$5$</td><td>$12$</td><td>$1$</td><td>$7$</td><td>$11$</td><td>$2$</td><td>$0$</td><td>$4$</td><td>$15$</td><td>$8$</td><td>$13$</td><td>$10$</td><td>$3$</td><td>$9$</td></tr><tr><td>$P(x)$</td><td>$1$</td><td>$3$</td><td>$0$</td><td>$5$</td><td>$6$</td><td>$7$</td><td>$2$</td><td>$4$</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td><td>&#x2F;</td></tr></tbody></table><p>很显然，这个$S$盒一个单位是$8$个比特值，其中每$4$比特进行一次置换。</p><p>当数字$186(11,10)$先通过$S$盒再通过$P$盒时，变换是这样的：首先，先通过$S$盒置换，$11$变成$8$，$10$变成$15$。数字的值从$186(\text{BAH})$改为了$143(\text{8FH})$。其比特为$10001111\text{B}$。然后进行置换：首位(下标$0$）的$1$被换到第三位(下标$1$）,以此类推，最终数字变成了$01101011\text{B}$也就是$107(\text{6BH})$。</p><h2 id="2-对非线性S盒的分析——线性处理"><a href="#2-对非线性S盒的分析——线性处理" class="headerlink" title="2.对非线性S盒的分析——线性处理"></a>2.对非线性S盒的分析——线性处理</h2><p>所谓线性分析，就是寻找一个给定的密码系统下，具有如下的线性表达式，其中所有的小写字母取值都在$0,1$内。</p><p>$$<br>P[p_1,p_2,…,p_n] \text{ xor } C[c_1,c_2,…,c_n]&#x3D;K[k_1,k_2,…,k_n]<br>$$<br>因此，线性分析的基本思想就是通过寻找一个给定密码算法有效的线性近似表达式来破译密码系统。因为每个密码系统均为非线性系统，因此只能寻找线性近似的表达式。</p><p>其中，对于一个随机给定的明文$P$和相对应的密文$C$，上面的等式成立的概率不等于$0.5$。<strong>一般情况下，会构造一个关于明文和倒数第二轮输入的线性表达式，就有可能会付出最后一轮加密使用的子密钥的一个子集，达到攻击的目的。</strong></p><p>因此，如果我们向对一个$S$盒进行线性处理的时候，就要考虑考虑其是否存在线性优势，以及如何求单轮和多轮的线性优势。因此，我们可以设$e&#x3D;p-0.5$为偏差值，因此等式的有效性可以用$|\delta|$来衡量。</p><p>下面我们引入堆积引理，表达式如下，其中所有的$x$取值范围均为$0,1$。<br>$$<br>Pr(\sum_{i&#x3D;1}^n x_i \equiv 0 \pmod 2\text{ }) &#x3D;0.5+2^{n-1}\prod_{i&#x3D;1}^n\delta_i<br>$$<br>很显然，如果某一个$\delta$值为$0$，那么整个算式的$\delta$值也为$0$。</p><p>因此，利用堆积引理，我们可以将每轮变换中偏差最大的线性逼近式进行组合。而组合后的线性逼近式也会有最大的偏差值。</p><p>而线性组合使用的式子则为，其中$x$值为通过$S$盒的输入值<br>$$<br>f\equiv \sum_{i&#x3D;1}^n a_ix_i \pmod 2<br>$$<br>当然，我们也可以找出$S$盒的输出值$y$进行一次线性组合。<br>$$<br>g\equiv \sum_{i&#x3D;1}^n b_iy_i \pmod 2<br>$$<br>最后计算一下$f+g \equiv 0 \pmod 2$的概率，并与$0.5$进行比较，偏差越大越好。</p><p>以我们上面的那个例子为例，假如我们决定使用的组合表达式为$f\equiv 1x_1+1x_2+1x_3+1x_4\pmod 2$，$g \equiv 0y_1+1y_2+0y_3+0y_4$，我们通过枚举$0$到$15$的每个值可以求出$f+g\equiv 0 \pmod 2$的情况有$10$种，概率$0.625$，偏差$\delta&#x3D;0.625-0.5&#x3D;0.125&#x3D;12.5\text{percent}$。为了能够给出一个符号，我们直接组合$f$的所有系数为$1111\text{B}&#x3D;7$，和$g$的系数$0100\text B&#x3D;4$，记作$\delta_{(7,4)}&#x3D;0.125$。</p><p>如果我们对所有的可能性都枚举一次，可以得到这样一张表，其中$i$循环用于枚举输入数字，$j$循环用于枚举输入的线性组合的系数，$k$循环用于枚举输出的线性组合的系数。因此我们只需要开一个二维计数数组就可以了。最后这个数组中的$256$个数值构成了一个线性逼近表。而这个线性逼近表的不均匀性，也就提供了线性分析的可能性，因此我们只要选择出最佳线性逼近式来进行线性攻击。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> s[<span class="hljs-number">16</span>]=&#123;<span class="hljs-number">6</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-type">double</span> p[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumbitpros</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> c=a&amp;x,d=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(c)<br>&#123;<br>d+=c&amp;<span class="hljs-number">1</span>;<br>c&gt;&gt;=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> d&amp;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,k;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">15</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">15</span>;j++)<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-number">15</span>;k++)<br>&#123;<br><span class="hljs-type">int</span> a=<span class="hljs-built_in">sumbitpros</span>(j,i),b=<span class="hljs-built_in">sumbitpros</span>(k,s[i]);<br>p[j][k]+=(a==b);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">15</span>;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">15</span>;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf &quot;</span>,<span class="hljs-built_in">abs</span>(p[i][j]<span class="hljs-number">-8</span>)/<span class="hljs-number">16</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>输出结果如下，红色数字标出了每一行出现得最大值。</p><p><img src="/2021/02/26/Explore-SPN/1.png" alt="1"></p><p>然后我们就可以得到一个系数数组<code>[0,1,11,2,1,5,5,3,11,12,6,7,12,8,2,4]</code>。</p><p>归纳一下线性攻击的过程为:假如我们能够在一个明文比特子集和最后一轮即将进行代换的输入状态比特子集之间找到一个概率线性关系，换句话说，即存在一个比特子集使得其中元素的异或表现出非随机的分布(即明文和最后一轮输入的最佳线性逼近<br>式)，再假设一个攻击者拥有大量的用同一未知密钥加密的明文密文对.</p><p>对每一个明文密文对，将用所有的(最后一轮)候选密钥来对最后一轮解密密文.对每一个候选密钥，计算包含在线性关系式中的相关比特的异或的值，然后确定上述的线性关系式是否成立。如果成立，就在对应于特定候选密钥的计数器上加$1$.</p><p>在这个过程的最后，我们希望计数频率离明密文对数的一半最远的候选密钥含有那些密钥比特的正确值.<br>可以看到，线性攻击成功只依赖于明文的个数$N$和$|p- 0.5|$, 并且随着$N$或$|p -0.5|$的增加而增加。</p><p>需要说明的是:在选择从一轮到多轮线性逼近式时，除了考虑有效性外，还需使得得到的最后关系式中，只包含明文、密文和最后一轮的密钥比特，才能实施有效攻击。</p><h2 id="3-CTF实战——以-NPUCTF2020-EzSPN为例"><a href="#3-CTF实战——以-NPUCTF2020-EzSPN为例" class="headerlink" title="3. CTF实战——以[NPUCTF2020]EzSPN为例"></a>3. CTF实战——以[NPUCTF2020]EzSPN为例</h2><h3 id="Step-1-阅读代码看懂题目"><a href="#Step-1-阅读代码看懂题目" class="headerlink" title="Step 1 阅读代码看懂题目"></a>Step 1 阅读代码看懂题目</h3><p>我们首先来看一下这个加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify, unhexlify<br><span class="hljs-keyword">import</span> Crypto.Random.random <span class="hljs-keyword">as</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>coef = [<span class="hljs-number">239</span>, <span class="hljs-number">163</span>, <span class="hljs-number">147</span>, <span class="hljs-number">71</span>, <span class="hljs-number">163</span>, <span class="hljs-number">75</span>, <span class="hljs-number">219</span>, <span class="hljs-number">73</span>]<br>sbox = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>random.shuffle(sbox)<br>sboxi = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    sboxi.append(sbox.index(i))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doxor</span>(<span class="hljs-params">l1,l2</span>):<br>    <span class="hljs-keyword">return</span> [x[<span class="hljs-number">0</span>]^x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1,l2)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trans</span>(<span class="hljs-params">blk</span>):<br>    res = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>):<br>        bits = [<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> blk[k:k+<span class="hljs-number">8</span>]]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            res.append(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([x[(i+<span class="hljs-number">1</span>) % <span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bits]),<span class="hljs-number">2</span>))<br>        res[k:k+<span class="hljs-number">8</span>] = [(coef[i] * res[k+i]) % <span class="hljs-number">256</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_block</span>(<span class="hljs-params">pt, ks</span>):<br>    cur = doxor(pt, ks[:<span class="hljs-number">8</span>])<br>    cur = [sbox[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cur]<br>    cur = trans(cur)<br>    cur = [sboxi[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cur]<br>    cur = doxor(cur, ks[<span class="hljs-number">8</span>:])<br>    <span class="hljs-keyword">return</span> cur<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">pt, k</span>):<br>    x = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pt)%<span class="hljs-number">8</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> (<span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(pt)%<span class="hljs-number">8</span>)<br>    pt += [x]*x<br>    ct = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(pt), <span class="hljs-number">8</span>):<br>        res = encrypt_block([x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pt[i:i+<span class="hljs-number">8</span>]], k)<br>        ct += <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&quot;&#123;:02x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(xx) <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> res])<br>    <span class="hljs-keyword">return</span> ct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doout</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) % <span class="hljs-number">16</span>:<br>        x = (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(x) % <span class="hljs-number">16</span>) * <span class="hljs-string">&quot;0&quot;</span> + x<br>    <span class="hljs-keyword">return</span> x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doin</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(unhexlify(x))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genkeys</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(os.urandom(<span class="hljs-number">2</span>*<span class="hljs-number">8</span>))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(sbox)<br>    key = genkeys()<br>    ct = encrypt(flag, key)<br>    <span class="hljs-built_in">print</span>(ct)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pt = doin(<span class="hljs-built_in">input</span>())<br>        <span class="hljs-built_in">print</span>(doout(encrypt(pt, key)))<br></code></pre></td></tr></table></figure><p>简单分析一下代码就可以知道，每$8$个字符为一组，共$64$个比特值进行加密。其中$S$盒的容量是$8$比特，包含一个字节，题目一开始给出了$S$盒和flag的密文。代换有了，不过还没有置换。</p><p>不过我们可以看到<code>trans</code>函数似乎给出了比特位的置换规则。自己内测一下+分析一下，可以给出$P$盒的置换规则是：一组$8$个$8$比特数字中，遍历下标$-1$到$6$，先取最高位构成第一个新数字，然后取次高位构成第二个新数字，以此类推。最后还乘上了对应位的一个coef常数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">trans</span>(<span class="hljs-params">blk</span>):<br>    res = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>):<br>        bits = [<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> blk[k:k+<span class="hljs-number">8</span>]]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            res.append(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([x[(i+<span class="hljs-number">1</span>) % <span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> bits]),<span class="hljs-number">2</span>))<br>        res[k:k+<span class="hljs-number">8</span>] = [(coef[i] * res[k+i]) % <span class="hljs-number">256</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>当我们找出$S$盒和$P$盒的时候，考虑一些每一次加密的过程：先是将待加密数据与密钥异或，然后将数据通过$S$盒，然后进行$P$盒附带乘上coef常数置换，，最后再来一次$S^{-1}$盒以及与后半段密钥异或进行的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_block</span>(<span class="hljs-params">pt, ks</span>):<br>    cur = doxor(pt, ks[:<span class="hljs-number">8</span>])<br>    cur = [sbox[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cur]<br>    cur = trans(cur)<br>    cur = [sboxi[x] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cur]<br>    cur = doxor(cur, ks[<span class="hljs-number">8</span>:])<br>    <span class="hljs-keyword">return</span> cur<br></code></pre></td></tr></table></figure><p>每次我们可以任意选取一段明文，然后发送给服务器，服务器会反馈给我们加密结果。</p><p>根据刚才的分析，很显然，一旦我们知道了第二轮的密钥，就很容易将整个过程逆回去。所以我们要考虑求出第二轮密钥。</p><h3 id="Step-2-分析题目，分部解决"><a href="#Step-2-分析题目，分部解决" class="headerlink" title="Step 2 分析题目，分部解决"></a>Step 2 分析题目，分部解决</h3><p><strong>这里的分组对称密码中出现了S盒，因此我们必然是要考虑考虑S盒的线性攻击的</strong>。故我们选择分别对应Sbox八个输出的八个Sbox的最大偏差线性估计，来进行八个第二轮子密钥的猜测，时间复杂度为$O(256×8)&#x3D;O(2048)$。</p><p>而我们猜测这个密钥，同样地也可以用线性分析。不过这里我们就需要大量学习数据，就跟机器学习一样。按道理说，当数据足够大的时候，每个数字的结果应该都不相同，因此我们很容易就能找到那个偏差最大的数字，然后就是我们需要找到的第二轮密钥。</p><p>而整个过程，可以分为这么几个部分：</p><h4 id="1-初始化部分"><a href="#1-初始化部分" class="headerlink" title="[1] 初始化部分"></a>[1] 初始化部分</h4><p>初始化部分主要包括了：将接收到的$S$盒由字符串形式转化成数组、将十六位长的字符串转化成八个$0-255$内的数字、补位十六进制填充和二进制填充、返回两数组中对应位置异或的值，以及构建形如以下式子的线性组合，其中$A,X$是八比特数字，$a,x$是对应比特数。<br>$$<br>f(A,X)\equiv\sum _{i&#x3D;1}^8 a_ix_i  \pmod 2<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getboxinv</span>(<span class="hljs-params">s</span>):<br>    S,Q=[],[<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br>    cntint,endex=<span class="hljs-number">0</span>,<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>,<span class="hljs-number">58</span>):<br>            endex=<span class="hljs-literal">True</span><br>            cntint=cntint*<span class="hljs-number">10</span>+<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">48</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> endex==<span class="hljs-literal">True</span>:<br>                endex=<span class="hljs-literal">False</span><br>                S.append(cntint)<br>                Q[cntint]=<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">1</span><br>                cntint=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> S,Q<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s32tol8</span>(<span class="hljs-params">s16</span>):<br>    L8=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s16),<span class="hljs-number">2</span>):<br>        L8.append(<span class="hljs-built_in">int</span>(s16[i:i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> L8<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padhex</span>(<span class="hljs-params">x,b</span>):<br>    x=<span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> (b-<span class="hljs-built_in">len</span>(x))*<span class="hljs-string">&#x27;0&#x27;</span>+x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padbin</span>(<span class="hljs-params">x,b</span>):<br>    x=<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> (b-<span class="hljs-built_in">len</span>(x))*<span class="hljs-string">&#x27;0&#x27;</span>+x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doxor</span>(<span class="hljs-params">l1,l2</span>):<br>    <span class="hljs-keyword">return</span> [x[<span class="hljs-number">0</span>]^x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1,l2)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sumbitpros</span>(<span class="hljs-params">a,x</span>):<br>    c,d=a&amp;x,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> c:<br>        d+=c&amp;<span class="hljs-number">1</span><br>        c&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> d&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="2-初始化部分"><a href="#2-初始化部分" class="headerlink" title="[2] 初始化部分"></a>[2] 初始化部分</h4><p>线性化$S$盒的函数，可以发现，我们类比于上面$\text{16 x 16}$的表格，列举出一个$\text{256 x 256}$的表格，其中$i$是我们列举的输入数字，$j$是带入上面的线性组合对应的比特系数，$k$是$S$盒输出结果构造线性函数的比特系数。最后我们得到的<code>offset</code>序列，例如：<code>offser[115]</code>就是数字$115$通过$S$盒时的最佳逼近系数。这一部分已经在一开始有了讲解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">linersbox</span>(<span class="hljs-params">sbox</span>):<br>    lnipt=[]<br>    offset=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">15</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[lnrsbox]:&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;/256&#x27;</span>)<br>        si=sbox[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                a=sumbitpros(j,i)<br>                b=sumbitpros(k,si)<br>                <span class="hljs-keyword">if</span> a==b:<br>                    offset[j][k]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        offset[i]=[<span class="hljs-built_in">abs</span>(x-<span class="hljs-number">128</span>)/<span class="hljs-number">256.0</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> offset[i]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>): <br>        cur=[x[i] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> offset] <br>        lnipt.append(cur.index(<span class="hljs-built_in">max</span>(cur)))<br>    <span class="hljs-keyword">return</span> offset,lnipt<br></code></pre></td></tr></table></figure><h4 id="3-猜测第二段密钥部分"><a href="#3-猜测第二段密钥部分" class="headerlink" title="[3] 猜测第二段密钥部分"></a>[3] 猜测第二段密钥部分</h4><p>当我们想要获取密钥比特的时候，如果我们有了$r$轮加密过程的算法和前$r-1$轮的线性近似表达式，且表达式的线性可能性偏移量足够大，那么我们恢复最后一轮的子密钥攻击时可行的。把从最后一个子密钥中恢复出的密钥的一部分成为局部目标子密钥。而局部目标子密钥来自于最后一轮$S$盒相关联的子密钥。</p><p>特别地，对于所有可能的局部目标子密钥，相应的密文比特与其进行异或运算，结果就会继续通过最后一轮对应的$S$盒进行计算。</p><p>如果使用的是不正确的子密钥，那么这就会跟随机猜测输入产生的结果近似差不多，使得最后程序输出的概率接近于$0.5$，偏移量接近于$0$。</p><p>如果一个子密钥的计数值与明文-密文的数目一半相差最多，就会被认为是正确的子密钥。因为一个正确的子密钥会使得线性近似表达式成立的概率偏离于$0.5$。</p><p>所以我们可以产生大量的随机明文，并让服务器给我们进行加密获得密文，然后利用我们手上的明文和密文，通过大量数据的分析 ，最后我们就可以找出一个正确的子密钥了。在这里，我选择接收$16384$组附加明文和密文。（实际上$7000+$组的规模就够用了）</p><p>所以猜测密钥部分，我们可以用如下的代码，通过<code>getkey8f</code>函数中枚举$8$个部分，每个部分$256$中可能的取值，共$16384$组附加明文和附加密文。我们只需要不断地判断最后两个线性组合的相等概率与$0.5$相差多少就可以了，相差最大的那个，就一定是第二轮密钥了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">pt,ct,loc,gus,lnipt,coefinv</span>):<br>    pt,ct=s32tol8(pt),s32tol8(ct)<br>    ct[loc]^=gus<br>    ct[loc]=sbox[ct[loc]]<br>    ct[loc]=ct[loc]*coefinv[loc]&amp;<span class="hljs-number">255</span><br>    tmp1=sumbitpros(pt[<span class="hljs-number">0</span>],lnipt[<span class="hljs-number">1</span>&lt;&lt;((<span class="hljs-number">14</span>-loc)&amp;<span class="hljs-number">7</span>)])<br>    tmp2=sumbitpros(ct[loc],<span class="hljs-number">128</span>)<br>    <span class="hljs-keyword">return</span> tmp1==tmp2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getkey8f</span>(<span class="hljs-params">Tl,Cl,lnipt,coefinv,scale</span>):<br>    k8f=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[GettingKey]:ID=&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">8</span>))<br>        kount=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>        <span class="hljs-keyword">for</span> gskey <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale):<br>                <span class="hljs-keyword">if</span> guess(Tl[j],Cl[j],i,gskey,lnipt,coefinv):<br>                    kount[gskey]+=<span class="hljs-number">1</span><br>        beta=[<span class="hljs-built_in">abs</span>(x-scale//<span class="hljs-number">2</span>+<span class="hljs-number">0.0</span>)/(scale+<span class="hljs-number">0.0</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> kount]<br>        k8f.append(beta.index(<span class="hljs-built_in">max</span>(beta)))<br>    <span class="hljs-keyword">return</span> k8f<br></code></pre></td></tr></table></figure><h4 id="4-通过第二段密钥恢复第一段密钥和解密明文"><a href="#4-通过第二段密钥恢复第一段密钥和解密明文" class="headerlink" title="[4] 通过第二段密钥恢复第一段密钥和解密明文"></a>[4] 通过第二段密钥恢复第一段密钥和解密明文</h4><p>当第二段密钥得到之后，我们就可以通过一组附加密文和附加明文，进而求得第一段密钥，第一段密钥求出后，直接模仿加密的形式，写出所有步骤的逆，flag就出来了。</p><p>以下是求第一段密钥和对密文进行解密的过程，这一过程很简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getkey07</span>(<span class="hljs-params">pt,ct,k8f,coefinv,sbox,sinv</span>):<br>    pt,ct=s32tol8(pt),s32tol8(ct)<br>    cur=ct<br>    cur=doxor(cur,k8f)<br>    cur=[sbox[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    cur=transinv(cur)<br>    cur=[sinv[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    k07=doxor(pt,cur)<br>    <span class="hljs-keyword">return</span> k07<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ct,k07,k8f,sbox,sinv</span>):<br>    ct=s32tol8(ct)<br>    cur=ct<br>    cur=doxor(cur,k8f)<br>    cur=[sbox[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    cur=transinv(cur)<br>    cur=[sinv[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    m=doxor(cur,k07)<br>    <span class="hljs-keyword">return</span> m<br></code></pre></td></tr></table></figure><h4 id="5-完整代码"><a href="#5-完整代码" class="headerlink" title="[5] 完整代码"></a>[5] 完整代码</h4><p>整个解题过程中，步骤还是很多的，<del>是自己目前写的最长的脚本</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getboxinv</span>(<span class="hljs-params">s</span>):<br>    S,Q=[],[<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br>    cntint,endex=<span class="hljs-number">0</span>,<span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>,<span class="hljs-number">58</span>):<br>            endex=<span class="hljs-literal">True</span><br>            cntint=cntint*<span class="hljs-number">10</span>+<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">48</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> endex==<span class="hljs-literal">True</span>:<br>                endex=<span class="hljs-literal">False</span><br>                S.append(cntint)<br>                Q[cntint]=<span class="hljs-built_in">len</span>(S)-<span class="hljs-number">1</span><br>                cntint=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> S,Q<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s32tol8</span>(<span class="hljs-params">s16</span>):<br>    L8=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s16),<span class="hljs-number">2</span>):<br>        L8.append(<span class="hljs-built_in">int</span>(s16[i:i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> L8<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padhex</span>(<span class="hljs-params">x,b</span>):<br>    x=<span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> (b-<span class="hljs-built_in">len</span>(x))*<span class="hljs-string">&#x27;0&#x27;</span>+x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padbin</span>(<span class="hljs-params">x,b</span>):<br>    x=<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> (b-<span class="hljs-built_in">len</span>(x))*<span class="hljs-string">&#x27;0&#x27;</span>+x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doxor</span>(<span class="hljs-params">l1,l2</span>):<br>    <span class="hljs-keyword">return</span> [x[<span class="hljs-number">0</span>]^x[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(l1,l2)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sumbitpros</span>(<span class="hljs-params">a,x</span>):<br>    c,d=a&amp;x,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> c:<br>        d+=c&amp;<span class="hljs-number">1</span><br>        c&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> d&amp;<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">transinv</span>(<span class="hljs-params">blk</span>):<br>    res=[]<br>    blk=[(coefinv[i]*blk[i])&amp;<span class="hljs-number">255</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>    blk=[padbin(i,<span class="hljs-number">8</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blk]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        s=<span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>            s+=blk[j][i]<br>        res.append(<span class="hljs-built_in">int</span>(s,<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linersbox</span>(<span class="hljs-params">sbox</span>):<br>    lnipt=[]<br>    offset=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">15</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[lnrsbox]:&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;/256&#x27;</span>)<br>        si=sbox[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                a=sumbitpros(j,i)<br>                b=sumbitpros(k,si)<br>                <span class="hljs-keyword">if</span> a==b:<br>                    offset[j][k]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        offset[i]=[<span class="hljs-built_in">abs</span>(x-<span class="hljs-number">128</span>)/<span class="hljs-number">256.0</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> offset[i]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>): <br>        cur=[x[i] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> offset] <br>        lnipt.append(cur.index(<span class="hljs-built_in">max</span>(cur)))<br>    <span class="hljs-keyword">return</span> offset,lnipt<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">guess</span>(<span class="hljs-params">pt,ct,loc,gus,lnipt,coefinv</span>):<br>    pt,ct=s32tol8(pt),s32tol8(ct)<br>    ct[loc]^=gus<br>    ct[loc]=sbox[ct[loc]]<br>    ct[loc]=ct[loc]*coefinv[loc]&amp;<span class="hljs-number">255</span><br>    tmp1=sumbitpros(pt[<span class="hljs-number">0</span>],lnipt[<span class="hljs-number">1</span>&lt;&lt;((<span class="hljs-number">14</span>-loc)&amp;<span class="hljs-number">7</span>)])<br>    tmp2=sumbitpros(ct[loc],<span class="hljs-number">128</span>)<br>    <span class="hljs-keyword">return</span> tmp1==tmp2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getkey8f</span>(<span class="hljs-params">Tl,Cl,lnipt,coefinv,scale</span>):<br>    k8f=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[GettingKey]:ID=&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">8</span>))<br>        kount=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>        <span class="hljs-keyword">for</span> gskey <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale):<br>                <span class="hljs-keyword">if</span> guess(Tl[j],Cl[j],i,gskey,lnipt,coefinv):<br>                    kount[gskey]+=<span class="hljs-number">1</span><br>        beta=[<span class="hljs-built_in">abs</span>(x-scale//<span class="hljs-number">2</span>+<span class="hljs-number">0.0</span>)/(scale+<span class="hljs-number">0.0</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> kount]<br>        k8f.append(beta.index(<span class="hljs-built_in">max</span>(beta)))<br>    <span class="hljs-keyword">return</span> k8f<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getkey07</span>(<span class="hljs-params">pt,ct,k8f,coefinv,sbox,sinv</span>):<br>    pt,ct=s32tol8(pt),s32tol8(ct)<br>    cur=ct<br>    cur=doxor(cur,k8f)<br>    cur=[sbox[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    cur=transinv(cur)<br>    cur=[sinv[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    k07=doxor(pt,cur)<br>    <span class="hljs-keyword">return</span> k07<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ct,k07,k8f,sbox,sinv</span>):<br>    ct=s32tol8(ct)<br>    cur=ct<br>    cur=doxor(cur,k8f)<br>    cur=[sbox[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    cur=transinv(cur)<br>    cur=[sinv[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur]<br>    m=doxor(cur,k07)<br>    <span class="hljs-keyword">return</span> m<br><span class="hljs-comment">#----------MAIN BELOW----------#</span><br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">29170</span>)<br>sbox=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>C=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(C)<br>sbox,sinv=getboxinv(sbox)<br>Tl,Cl=[],[]<br>coefinv=[<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">155</span>,<span class="hljs-number">119</span>,<span class="hljs-number">11</span>,<span class="hljs-number">99</span>,<span class="hljs-number">83</span>,<span class="hljs-number">249</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16384</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">45</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[Recving]:&#x27;</span>+<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&#x27;/16384&#x27;</span>)<br>    cntsend=padhex(bytes_to_long(urandom(<span class="hljs-number">8</span>)),<span class="hljs-number">16</span>)<br>    Tl.append(cntsend)<br>    sh.sendline(cntsend)<br>    Cl.append(sh.recvline(keepends=<span class="hljs-literal">False</span>))<br>offset,lnipt=linersbox(sbox)<br>k8f=getkey8f(Tl,Cl,lnipt,coefinv,<span class="hljs-number">16384</span>)<br><span class="hljs-built_in">print</span>(k8f)<br>k07=getkey07(Tl[<span class="hljs-number">0</span>],Cl[<span class="hljs-number">0</span>],k8f,coefinv,sbox,sinv)<br><span class="hljs-built_in">print</span>(k07)<br>flag=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(C),<span class="hljs-number">16</span>):<br>    m=decrypt(C[i:i+<span class="hljs-number">16</span>],k07,k8f,sbox,sinv)<br>    flag+=m<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#[110, 112, 117, 99, 116, 102, 123, 55, 105, 110, 121, 83, 80, 78, 45, 99, 52, 110, 45, 98, 51, 45, 51, 64, 115, 105, 49, 121, 45, 99, 114, 52, 99, 107, 51, 100, 33, 33, 125, 1]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MatlabExperiment1-4</title>
    <link href="/2021/02/24/matlab1/"/>
    <url>/2021/02/24/matlab1/</url>
    
    <content type="html"><![CDATA[<h1 id="Matlab-Experiment-By-huangx607087"><a href="#Matlab-Experiment-By-huangx607087" class="headerlink" title="Matlab Experiment  By huangx607087"></a>Matlab Experiment  By huangx607087</h1><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><p>2月25日更新：4篇文章合一，因为自己的博客主要还是搞CTF而不是matlab（，因此这里主要还是以工具查阅的方式发布</p><h2 id="Div-1"><a href="#Div-1" class="headerlink" title="Div 1"></a>Div 1</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>计算$\lim_{x\rightarrow0} \dfrac{1-\cos(mx)}{x^2}$和$\lim_{x\rightarrow0} \dfrac{1-\cos(mx)}{x}$，其中$m$为自己学号的后4位，本博客中用的数值是$m&#x3D;1126$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; syms x<br>&gt;&gt; f=(<span class="hljs-number">1</span>-<span class="hljs-built_in">cos</span>(<span class="hljs-number">1126</span>*x))/(x*x);<br>&gt;&gt; limit(f,x,<span class="hljs-number">0</span>)<br><span class="hljs-comment">%633938</span><br>&gt;&gt; syms x<br>&gt;&gt; g=(<span class="hljs-number">1</span>-<span class="hljs-built_in">cos</span>(<span class="hljs-number">1126</span>*x))/(x);<br>&gt;&gt; limit(g,x,<span class="hljs-number">0</span>)<br><span class="hljs-comment">%0</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>$f(x)&#x3D;e^x\sin(\dfrac{mx}{1000})$，求$f’’(x)$和$f^{(6)}(1)$，此处$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; syms x<br>&gt;&gt; f=<span class="hljs-built_in">exp</span>(x)*<span class="hljs-built_in">sin</span>(<span class="hljs-number">1126</span>*x/<span class="hljs-number">1000</span>);<br>&gt;&gt; d1=diff(f,x,<span class="hljs-number">2</span>);<br>&gt;&gt; d2=diff(f,x,<span class="hljs-number">6</span>);<br>&gt;&gt; k=subs(d2,x,<span class="hljs-number">1</span>);<br><span class="hljs-comment">%(563*cos((563*x)/500)*exp(x))/250 - (66969*sin((563*x)/500)*exp(x))/250000</span><br><span class="hljs-comment">%(63380945166868791*exp(1)*sin(563/500))/15625000000000000 - (170878640482871*cos(563/500)*exp(1))/15625000000000</span><br></code></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>计算$\int_{0}^{+∞} e^{-mx^2} \text dx$，其中$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; syms x<br>&gt;&gt; f=<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1126</span>*x*x);<br>&gt;&gt; int(f,x,<span class="hljs-number">0</span>,<span class="hljs-built_in">inf</span>)<br><span class="hljs-comment">%(1126^(1/2)*pi^(1/2))/2252</span><br></code></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>给出$\sqrt[3]{\dfrac{m}{1000}+x}$在$x&#x3D;0$处的泰勒展开式，其中$x$的最高次幂为$4$，$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; syms x<br>&gt;&gt; f=(<span class="hljs-number">1126</span>/<span class="hljs-number">1000</span>+x)^(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>);<br>&gt;&gt; taylor(f,x,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;Order&#x27;</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">%  -(1250000000*500^(2/3)*563^(1/3)*x^4)/24414051311523 + (1250000*500^(2/3)*563^(1/3)*x^3)/14454737307 - (500*500^(2/3)*563^(1/3)*x^2)/2852721 + (500^(2/3)*563^(1/3)*x)/1689 + (500^(2/3)*563^(1/3))/500</span><br><br></code></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>数列$x$满足$x_1&#x3D;2,x_2&#x3D;1,x_n&#x3D;2x_{n-1}+\dfrac m {300}x_{n-2}$，用循环语句给出这个数列的前$20$项，并用向量的形式输出。其中$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br>&gt;&gt; <span class="hljs-keyword">for</span> n=<span class="hljs-number">3</span>:<span class="hljs-number">20</span><br>x(n)=<span class="hljs-number">2</span>*x(n<span class="hljs-number">-1</span>)+(<span class="hljs-number">1126</span>/<span class="hljs-number">300</span>)*x(n<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">end</span><br>sym(x)<br><span class="hljs-comment">%[ 2, 1, 713/75, 683/30, 5714999122138853/70368744177664, 545095937007935/2199023255552, 1760513646050073/2199023255552, 1391738510584149/549755813888, 4435425659045283/549755813888, 3523627465287435/137438953472, 2802290668494757/34359738368, 8910918441917557/34359738368, 7084941964896359/8589934592, 5632823933614673/2147483648, 4478421269405941/536870912, 3560577249130079/134217728, 2830851614013183/33554432, 562669471674589/2097152, 7157638204545749/8388608, 5690705185958165/2097152]</span><br></code></pre></td></tr></table></figure><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p><img src="/2021/02/24/matlab1/1.png" alt="T6"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; A=[<span class="hljs-number">4</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">2</span>;<span class="hljs-number">-3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>];<br>&gt;&gt; B=[<span class="hljs-number">1</span>,<span class="hljs-number">1126</span>/<span class="hljs-number">400</span>,<span class="hljs-number">4</span>;<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-3</span>;<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>];<br>det(A)<br><span class="hljs-built_in">ans</span> = <span class="hljs-number">-92</span><br>sym(A^<span class="hljs-number">-1</span>)<br><span class="hljs-built_in">ans</span> =<br>[  <span class="hljs-number">5</span>/<span class="hljs-number">46</span>, <span class="hljs-number">-7</span>/<span class="hljs-number">46</span>,  <span class="hljs-number">5</span>/<span class="hljs-number">46</span>]<br>[ <span class="hljs-number">-5</span>/<span class="hljs-number">23</span>, <span class="hljs-number">-9</span>/<span class="hljs-number">46</span>, <span class="hljs-number">13</span>/<span class="hljs-number">46</span>]<br>[  <span class="hljs-number">3</span>/<span class="hljs-number">46</span>,  <span class="hljs-number">5</span>/<span class="hljs-number">46</span>,  <span class="hljs-number">3</span>/<span class="hljs-number">46</span>]<br>&gt;&gt; [P,D]=eig(A)<br>P =<br>   <span class="hljs-number">-0.3490</span>   <span class="hljs-number">-0.8942</span>    <span class="hljs-number">0.2379</span><br>   <span class="hljs-number">-0.8952</span>    <span class="hljs-number">0.4403</span>    <span class="hljs-number">0.5181</span><br>    <span class="hljs-number">0.2772</span>   <span class="hljs-number">-0.0815</span>    <span class="hljs-number">0.8216</span><br>D =<br>   <span class="hljs-number">-2.7180</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>    <span class="hljs-number">5.1671</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>    <span class="hljs-number">6.5509</span><br>&gt;&gt; A*(B^<span class="hljs-number">-1</span>)<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0.0000</span>    <span class="hljs-number">0.0000</span>    <span class="hljs-number">2.0000</span><br>   <span class="hljs-number">-3.0351</span>   <span class="hljs-number">-8.5615</span>   <span class="hljs-number">-8.5439</span><br>    <span class="hljs-number">0.1597</span>   <span class="hljs-number">-1.9704</span>   <span class="hljs-number">-1.5503</span><br>&gt;&gt; (A^<span class="hljs-number">-1</span>)*B<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0.6304</span>    <span class="hljs-number">0.1973</span>    <span class="hljs-number">1.0000</span><br>    <span class="hljs-number">0.7391</span>   <span class="hljs-number">-0.8946</span>    <span class="hljs-number">0.0000</span><br>   <span class="hljs-number">-0.0217</span>    <span class="hljs-number">0.1184</span>    <span class="hljs-number">0.0000</span><br></code></pre></td></tr></table></figure><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>作图$f(x)$，其中$x\in [0,0.5]$时$f(x)&#x3D;2x$，$x\in [0.5,1]$时$f(x)&#x3D;2(1-x)$</p><p>使用的M文件：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[y]</span>=<span class="hljs-title">f</span><span class="hljs-params">(x)</span></span><br><span class="hljs-keyword">if</span> x&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;=<span class="hljs-number">0.5</span><br>    y=<span class="hljs-number">2</span>*x;<br><span class="hljs-keyword">elseif</span> <span class="hljs-number">0.5</span>&lt;x &amp;&amp; x&lt;=<span class="hljs-number">1</span><br>    y=<span class="hljs-number">2</span>*(<span class="hljs-number">1</span>-x);<br><span class="hljs-keyword">else</span><br>    y=<span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>绘图指令：</p><p><code>fplot(&#39;f&#39;,[0,1])</code></p><p>图片：</p><img src="/2021/02/24/matlab1/7.png" alt="7" style="zoom: 80%;"><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>绘制空间曲线$x&#x3D;\cos t+t \sin t,y&#x3D;\sin t-t\cos t,z&#x3D;-t$，其中$t \in[\dfrac{-30m}{1000},\dfrac{+30m}{1000}]$，$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; t=<span class="hljs-number">-30</span>*<span class="hljs-number">1126</span>/<span class="hljs-number">1000</span>:<span class="hljs-number">0.005</span>:<span class="hljs-number">30</span>*<span class="hljs-number">1126</span>/<span class="hljs-number">1000</span>;<br>x=<span class="hljs-built_in">cos</span>(t)+t.*<span class="hljs-built_in">sin</span>(t);<br>y=<span class="hljs-built_in">sin</span>(t)-t.*<span class="hljs-built_in">cos</span>(t);<br>z=-t;<br><span class="hljs-built_in">plot3</span>(x,y,z);grid on<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/8.png" alt="8" style="zoom: 80%;"><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>$f(x)&#x3D;\lambda e^{-\lambda x}, x&gt;0$，$x≤0$时$x$恒定为$0$，在同意坐标系内画出$f(x)$的图像，$\lambda$分别取$\dfrac{1000}{1126},\dfrac{500}{1126},\dfrac{400}{1126},\dfrac{100}{1126}$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; x=<span class="hljs-number">-1</span>:<span class="hljs-number">0.005</span>:<span class="hljs-number">5</span>;<br>f1=(<span class="hljs-number">0</span>) .* (x&lt;=<span class="hljs-number">0</span>) +(<span class="hljs-number">1000</span>/<span class="hljs-number">1126</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-1000</span>/<span class="hljs-number">1126</span>*x)) .* (x&gt;<span class="hljs-number">0</span>);<br>f2=(<span class="hljs-number">0</span>) .* (x&lt;=<span class="hljs-number">0</span>) +(<span class="hljs-number">500</span>/<span class="hljs-number">1126</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-500</span>/<span class="hljs-number">1126</span>*x)) .* (x&gt;<span class="hljs-number">0</span>);<br>f3=(<span class="hljs-number">0</span>) .* (x&lt;=<span class="hljs-number">0</span>) +(<span class="hljs-number">400</span>/<span class="hljs-number">1126</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-400</span>/<span class="hljs-number">1126</span>*x)) .* (x&gt;<span class="hljs-number">0</span>);<br>f4=(<span class="hljs-number">0</span>) .* (x&lt;=<span class="hljs-number">0</span>) +(<span class="hljs-number">100</span>/<span class="hljs-number">1126</span>*<span class="hljs-built_in">exp</span>(<span class="hljs-number">-100</span>/<span class="hljs-number">1126</span>*x)) .* (x&gt;<span class="hljs-number">0</span>);<br><span class="hljs-built_in">plot</span>(x,f1,<span class="hljs-string">&#x27;r&#x27;</span>,x,f2,<span class="hljs-string">&#x27;g&#x27;</span>,x,f3,<span class="hljs-string">&#x27;b&#x27;</span>,x,f4,<span class="hljs-string">&#x27;k&#x27;</span>); grid on<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/9.png" alt="9" style="zoom: 80%;"><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>用<code>ezplot</code>画隐函数$\sin (x^2+\dfrac{m}{1000}y^2)&#x3D;\cos (xy)$，$m&#x3D;1126$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">ezplot(<span class="hljs-string">&#x27;sin(x^2+1126/1000*y^2)-cos(x*y)&#x27;</span>,[<span class="hljs-number">-4</span> <span class="hljs-number">4</span> <span class="hljs-number">-4</span> <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/10.png" alt="10" style="zoom: 80%;"><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>作图$z&#x3D;mx^2+y^4$的图形，$m&#x3D;1126$。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x<br>syms y<br>ezmesh(<span class="hljs-number">1126</span>*x^<span class="hljs-number">2</span>+y^<span class="hljs-number">4</span>,[<span class="hljs-number">-9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">-13</span>,<span class="hljs-number">13</span>])<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/11.png" alt="11" style="zoom:80%;"><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>对于方程$e^x-3 \dfrac{m}{m+100}x^2&#x3D;0,m&#x3D;1126$。</p><p>1.绘制函数的图形<br>2.借助于软件中方程近似求根命令求出所有实根。<br>3.找出单调区间，并说明为什么这些区间是单调的<br>4.说明该方程确实只有你求出的这些实根<br>5.写出你做此题的体会</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%1-3问</span><br>syms x<br>f=<span class="hljs-built_in">exp</span>(x)<span class="hljs-number">-3</span>*<span class="hljs-number">1126</span>/<span class="hljs-number">1226</span>*x^<span class="hljs-number">2</span>;<br>fplot(f,[<span class="hljs-number">-4</span>,<span class="hljs-number">5</span>]);grid on<br>double(solve(f,x));<br><span class="hljs-comment">%图片见下图</span><br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0.9867</span><br>   <span class="hljs-number">-0.4751</span><br>    <span class="hljs-number">3.5441</span><br>df=diff(f,x);<br>double(solve(df))<br><span class="hljs-built_in">ans</span> =<br>    <span class="hljs-number">0.2279</span><br>    <span class="hljs-number">2.6998</span><br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/12.png" alt="12" style="zoom:80%;"><p>对于$f(x)&#x3D;e^x-\dfrac{1689}{613}x^2$，定义域是$R$。求导得$f’(x)&#x3D;e^x-\dfrac{3378}{613}x$。这个方程有两个根大致为$0.2279$和$2.6998$。因此$f(x)$在区间$[-∞，0.2279]$和$[2.6998,+∞]$这两个区间内单调增，在区间$[0.2279,2.6998]$单调减。因此$f(x)$在这三个单调区间内至多各有一个实根，我们已经求出来为$-0.4751,0.9867,3.5441$。</p><p>体会略去（</p><h2 id="Div-2"><a href="#Div-2" class="headerlink" title="Div 2"></a>Div 2</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><p>$x_{1}&#x3D;-1,x_{n+1}&#x3D;0.5(x_n+\dfrac{1126}{x_n})$。问数列$x_n$是否收敛，若收敛其值是多少，精确到$8$位有效数字</p><p><strong>Code</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x;<br>f=inline(<span class="hljs-string">&#x27;0.5*(x+1126/x)&#x27;</span>);<br>x1=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">15</span><br>x1=f(x1);<br>fprintf(<span class="hljs-string">&#x27;%g,%.8f\n&#x27;</span>,<span class="hljs-built_in">i</span>,x1);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>Result</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,-<span class="hljs-number">563</span>.<span class="hljs-number">50000000</span><br><span class="hljs-attribute">2</span>,-<span class="hljs-number">282</span>.<span class="hljs-number">74911269</span><br><span class="hljs-attribute">3</span>,-<span class="hljs-number">143</span>.<span class="hljs-number">36572086</span><br><span class="hljs-attribute">4</span>,-<span class="hljs-number">75</span>.<span class="hljs-number">60988006</span><br><span class="hljs-attribute">5</span>,-<span class="hljs-number">45</span>.<span class="hljs-number">25105685</span><br><span class="hljs-attribute">6</span>,-<span class="hljs-number">35</span>.<span class="hljs-number">06722679</span><br><span class="hljs-attribute">7</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">58849003</span><br><span class="hljs-attribute">8</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55593926</span><br><span class="hljs-attribute">9</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">10</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">11</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">12</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">13</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">14</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br><span class="hljs-attribute">15</span>,-<span class="hljs-number">33</span>.<span class="hljs-number">55592347</span><br></code></pre></td></tr></table></figure><p>因此$x$值是收敛的，收敛到$-33.55592347$。</p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><p>求出分式线性函数$f_1(x)&#x3D;\dfrac{x-1}{x+1126},f_2(x)&#x3D;\dfrac{x+1126^2}{x+1126}$的不动点，再编程判断它们的迭代序列是否收敛。</p><p><strong>f1</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x<br>f1=(x<span class="hljs-number">-1</span>)/(x+<span class="hljs-number">1126</span>);<br>fprintf(<span class="hljs-string">&quot;%.8f\n%.8f\n&quot;</span>,solve(f1-x,x))<br><span class="hljs-comment">%-1124.99911111</span><br><span class="hljs-comment">%-0.00088889</span><br>f1=inline(<span class="hljs-string">&#x27;(x-1)/(x+1126)&#x27;</span>);<br>x1=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">15</span><br>x1=f1(x1);<br>fprintf(<span class="hljs-string">&#x27;%g,%.8f\n&#x27;</span>,<span class="hljs-built_in">i</span>,x1);<br><span class="hljs-keyword">end</span><br><span class="hljs-number">1</span>,<span class="hljs-number">-7.94444444</span><br><span class="hljs-number">2</span>,<span class="hljs-number">-0.00800000</span><br><span class="hljs-number">3</span>,<span class="hljs-number">-0.00089521</span><br><span class="hljs-number">4</span>,<span class="hljs-number">-0.00088890</span><br><span class="hljs-number">5</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">6</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">7</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">8</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">9</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">10</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">11</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">12</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">13</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">14</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-number">15</span>,<span class="hljs-number">-0.00088889</span><br><span class="hljs-comment">%收敛于0.00088889</span><br></code></pre></td></tr></table></figure><p><strong>f2</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x<br>f2=(x+<span class="hljs-number">1126</span>*<span class="hljs-number">1126</span>)/(x+<span class="hljs-number">1126</span>);<br>fprintf(<span class="hljs-string">&quot;%.8f\n%.8f\n&quot;</span>,solve(f2-x,x))<br><span class="hljs-comment">%-1821.18274398</span><br><span class="hljs-comment">%696.18274398</span><br>f2=inline(<span class="hljs-string">&#x27;(x+1126*1126)/(x+1126)&#x27;</span>);<br>x1=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">30</span><br>x1=f2(x1);<br>fprintf(<span class="hljs-string">&#x27;%g,%.8f\n&#x27;</span>,<span class="hljs-built_in">i</span>,x1);<br><span class="hljs-keyword">end</span><br><span class="hljs-number">1</span>,<span class="hljs-number">1127.00000000</span><br><span class="hljs-number">2</span>,<span class="hljs-number">563.25033289</span><br><span class="hljs-number">3</span>,<span class="hljs-number">750.88885622</span><br><span class="hljs-number">4</span>,<span class="hljs-number">675.92009226</span><br><span class="hljs-number">5</span>,<span class="hljs-number">704.00009720</span><br><span class="hljs-number">6</span>,<span class="hljs-number">693.21307799</span><br><span class="hljs-number">7</span>,<span class="hljs-number">697.31755363</span><br><span class="hljs-number">8</span>,<span class="hljs-number">695.75007109</span><br><span class="hljs-number">9</span>,<span class="hljs-number">696.34785265</span><br><span class="hljs-number">10</span>,<span class="hljs-number">696.11975892</span><br><span class="hljs-number">11</span>,<span class="hljs-number">696.20677431</span><br><span class="hljs-number">12</span>,<span class="hljs-number">696.17357627</span><br><span class="hljs-number">13</span>,<span class="hljs-number">696.18624158</span><br><span class="hljs-number">14</span>,<span class="hljs-number">696.18140961</span><br><span class="hljs-number">15</span>,<span class="hljs-number">696.18325306</span><br><span class="hljs-number">16</span>,<span class="hljs-number">696.18254976</span><br><span class="hljs-number">17</span>,<span class="hljs-number">696.18281808</span><br><span class="hljs-number">18</span>,<span class="hljs-number">696.18271571</span><br><span class="hljs-number">19</span>,<span class="hljs-number">696.18275477</span><br><span class="hljs-number">20</span>,<span class="hljs-number">696.18273987</span><br><span class="hljs-number">21</span>,<span class="hljs-number">696.18274555</span><br><span class="hljs-number">22</span>,<span class="hljs-number">696.18274338</span><br><span class="hljs-number">23</span>,<span class="hljs-number">696.18274421</span><br><span class="hljs-number">24</span>,<span class="hljs-number">696.18274390</span><br><span class="hljs-number">25</span>,<span class="hljs-number">696.18274402</span><br><span class="hljs-number">26</span>,<span class="hljs-number">696.18274397</span><br><span class="hljs-number">27</span>,<span class="hljs-number">696.18274399</span><br><span class="hljs-number">28</span>,<span class="hljs-number">696.18274398</span><br><span class="hljs-number">29</span>,<span class="hljs-number">696.18274398</span><br><span class="hljs-number">30</span>,<span class="hljs-number">696.18274398</span><br><span class="hljs-comment">%收敛于696.18274398</span><br></code></pre></td></tr></table></figure><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><p>$f(x)&#x3D;2x,x\in[0,0.5]; 2(1-x),x\in(0.5,1]$的迭代是否会产生混沌。</p><p>不会产生混沌，只不过如果小数位数增多，周期会变长。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms x<br>f=inline(<span class="hljs-string">&#x27;(2*x) .*(x&gt;=0&amp;x&lt;=0.5) + (2*(1-x)) .* (x&gt;0.5&amp;x&lt;=1)&#x27;</span>)<br>x0=<span class="hljs-number">0.53</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">50</span><br>x0=f(x0);<br>fprintf(<span class="hljs-string">&#x27;%g,%g\n&#x27;</span>,<span class="hljs-built_in">i</span>,x0)<br><span class="hljs-keyword">end</span><br>-------------------Result-----------------<br><span class="hljs-number">1</span>,<span class="hljs-number">0.94</span><br><span class="hljs-number">2</span>,<span class="hljs-number">0.12</span><br><span class="hljs-number">3</span>,<span class="hljs-number">0.24</span><br><span class="hljs-number">4</span>,<span class="hljs-number">0.48</span><br><span class="hljs-number">5</span>,<span class="hljs-number">0.96</span><br><span class="hljs-number">6</span>,<span class="hljs-number">0.08</span><br><span class="hljs-number">7</span>,<span class="hljs-number">0.16</span><br><span class="hljs-number">8</span>,<span class="hljs-number">0.32</span><br><span class="hljs-number">9</span>,<span class="hljs-number">0.64</span><br><span class="hljs-number">10</span>,<span class="hljs-number">0.72</span><br><span class="hljs-number">11</span>,<span class="hljs-number">0.56</span><br><span class="hljs-number">12</span>,<span class="hljs-number">0.88</span><br><span class="hljs-number">13</span>,<span class="hljs-number">0.24</span><br><span class="hljs-number">14</span>,<span class="hljs-number">0.48</span><br><span class="hljs-number">15</span>,<span class="hljs-number">0.96</span><br></code></pre></td></tr></table></figure><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><p>$f(x)&#x3D;\alpha x(1-x),x\in[0,1]$，其中$x_0&#x3D;0.5$产生迭代序列的收敛性。其中$\alpha$分别取$2.6,3.4,3.6,3.84$。出现循环，指出周期。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs matlab">u=<span class="hljs-number">2.6</span>:<span class="hljs-number">0.01</span>:<span class="hljs-number">4.0</span>;<br>x=<span class="hljs-number">0.1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">300</span><br>x=u.*(x-x.^<span class="hljs-number">2</span>);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">80</span><br>x=u.*(x-x.^<span class="hljs-number">2</span>);<br><span class="hljs-built_in">plot</span>(u,x,<span class="hljs-string">&#x27;k.&#x27;</span>,<span class="hljs-string">&#x27;markersize&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">hold</span> on;<br><span class="hljs-keyword">end</span><br>grid on<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/24.png" alt="4" style="zoom:80%;"><p>$2.6$对应的周期是$1$，$3.4$对应的周期是$2$，$3.6$出现了混沌现象，$3.84$对应的周期是$3$。</p><h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><p>对于 Martin 迭代，取参数  $a,b,c$为下面的值会得到什么图形？</p><table><thead><tr><th align="center"></th><th align="center">$a$</th><th align="center">$b$</th><th align="center">$c$</th></tr></thead><tbody><tr><td align="center">$\mathbf{1}$</td><td align="center">$-1126$</td><td align="center">$1.126$</td><td align="center">$-1126$</td></tr><tr><td align="center">$\mathbf{2}$</td><td align="center">$1.126$</td><td align="center">$1.126$</td><td align="center">$0.5$</td></tr><tr><td align="center">$\mathbf{3}$</td><td align="center">$1.126$</td><td align="center">$1126$</td><td align="center">$-1126$</td></tr><tr><td align="center">$\mathbf{4}$</td><td align="center">$11.26$</td><td align="center">$112.6$</td><td align="center">$-10$</td></tr><tr><td align="center">$\mathbf{5}$</td><td align="center">$-112.6$</td><td align="center">$17$</td><td align="center">$4$</td></tr></tbody></table><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%输入edit，填写以下代码</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Martin</span><span class="hljs-params">(a,b,c,n)</span></span><br>f=@(x,y)(y-<span class="hljs-built_in">sign</span>(x)*<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">abs</span>(b*x-c)));<br>g=@(x)(a-x);<br>m=[<span class="hljs-number">0</span>;<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> n=<span class="hljs-number">1</span>:n<br>m(:,n+<span class="hljs-number">1</span>)=[f(m(<span class="hljs-number">1</span>,n),m(<span class="hljs-number">2</span>,n)),g(m(<span class="hljs-number">1</span>,n))];<br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">plot</span>(m(<span class="hljs-number">1</span>,:),m(<span class="hljs-number">2</span>,:),<span class="hljs-string">&#x27;kx&#x27;</span>);grid on<br>axis equal<br><span class="hljs-comment">%关闭edit</span><br>Martin(<span class="hljs-number">-1126</span>,<span class="hljs-number">1.126</span>,<span class="hljs-number">-1126</span>,<span class="hljs-number">10000</span>)<br>Martin(<span class="hljs-number">1.126</span>,<span class="hljs-number">1.126</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">10000</span>)<br>Martin(<span class="hljs-number">1.126</span>,<span class="hljs-number">1126</span>,<span class="hljs-number">-1126</span>,<span class="hljs-number">10000</span>)<br>Martin(<span class="hljs-number">11.26</span>,<span class="hljs-number">112.6</span>,<span class="hljs-number">-10</span>,<span class="hljs-number">10000</span>)<br>Martin(<span class="hljs-number">-112.6</span>,<span class="hljs-number">17</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10000</span>)<br></code></pre></td></tr></table></figure><img src="/2021/02/24/matlab1/25-1.png" alt="5-1" style="zoom:80%;"><img src="/2021/02/24/matlab1/25-2.png" alt="5-2" style="zoom:80%;"><img src="/2021/02/24/matlab1/25-3.png" alt="5-3" style="zoom:80%;"><img src="/2021/02/24/matlab1/25-4.png" alt="5-4" style="zoom:80%;"><img src="/2021/02/24/matlab1/25-5.png" alt="5-5" style="zoom:80%;"><h3 id="6-1"><a href="#6-1" class="headerlink" title="6"></a>6</h3><p>寻找分式函数$f(x)&#x3D;\dfrac{ax+b}{cx^2+dx+e}$，使它产生的迭代序列收敛到$\sqrt[3]{1126}$。如果迭代收敛，那么迭代的初值和收敛的速度成什么关系？</p><p>根据题目我们可以知道$\sqrt[3]{1126}$是方程$f(x)&#x3D;x$的解。因此，我们可以得到：<br>$$<br>cx^3+dx^2+(e-a)x-b&#x3D;0<br>$$<br>很显然，三次根号只能通过直接开三次根号实现，因此$c&#x3D;1,b&#x3D;1126$。为保证这个，只有$d&#x3D;0,e&#x3D;a$。</p><p>不过，这里有个小细节，为了保证点最后收敛于我们的期望值，因此我们期望值的导数的绝对值要小于$1$。这里我们通过试验，选取的值为$500$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%求收敛值的程序</span><br>syms x;<br>f=inline(<span class="hljs-string">&#x27;(500*x+1126)/(x^2+500)&#x27;</span>);<br>x1=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">15</span><br>x1=f(x1);<br>fprintf(<span class="hljs-string">&#x27;%g,%.8f\n&#x27;</span>,<span class="hljs-built_in">i</span>,x1);<br><span class="hljs-keyword">end</span><br><span class="hljs-number">1</span>,<span class="hljs-number">1.24950100</span><br><span class="hljs-number">2</span>,<span class="hljs-number">3.49060158</span><br><span class="hljs-number">3</span>,<span class="hljs-number">5.60599142</span><br><span class="hljs-number">4</span>,<span class="hljs-number">7.39329141</span><br><span class="hljs-number">5</span>,<span class="hljs-number">8.69476637</span><br><span class="hljs-number">6</span>,<span class="hljs-number">9.50902199</span><br><span class="hljs-number">7</span>,<span class="hljs-number">9.95985241</span><br><span class="hljs-number">8</span>,<span class="hljs-number">10.19015330</span><br><span class="hljs-number">9</span>,<span class="hljs-number">10.30253816</span><br><span class="hljs-number">10</span>,<span class="hljs-number">10.35609816</span><br><span class="hljs-number">11</span>,<span class="hljs-number">10.38132871</span><br><span class="hljs-number">12</span>,<span class="hljs-number">10.39314826</span><br><span class="hljs-number">13</span>,<span class="hljs-number">10.39867078</span><br><span class="hljs-number">14</span>,<span class="hljs-number">10.40124793</span><br><span class="hljs-number">15</span>,<span class="hljs-number">10.40244990</span><br><span class="hljs-comment">%求导数程序</span><br>syms x;<br>y=(<span class="hljs-number">500</span>*x+<span class="hljs-number">1126</span>)/(x^<span class="hljs-number">2</span>+<span class="hljs-number">500</span>);<br>dy=diff(y,x);<br>double(subs(dy,x,<span class="hljs-number">1126</span>^(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>)))<br></code></pre></td></tr></table></figure><p>如果迭代初值的函数值越接近于函数的吸引点的横坐标，那么收敛的速度越快。</p><h2 id="Div-3"><a href="#Div-3" class="headerlink" title="Div 3"></a>Div 3</h2><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><p><img src="/2021/02/24/matlab1/3T1.png" alt="T1"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms n<br>A=[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>x=[<span class="hljs-number">1</span>;<span class="hljs-number">2</span>];<br>[P,D]=eig(sym(A))<br>P =<br>[ <span class="hljs-number">-1</span>/<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>[    <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>D =<br>[ <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]<br>[ <span class="hljs-number">0</span>, <span class="hljs-number">5</span>]<br>An=P*D^n*(P^<span class="hljs-number">-1</span>)<br>[     <span class="hljs-number">2</span>^n/<span class="hljs-number">3</span> + (<span class="hljs-number">2</span>*<span class="hljs-number">5</span>^n)/<span class="hljs-number">3</span>,     <span class="hljs-number">5</span>^n/<span class="hljs-number">3</span> - <span class="hljs-number">2</span>^n/<span class="hljs-number">3</span>]<br>[ (<span class="hljs-number">2</span>*<span class="hljs-number">5</span>^n)/<span class="hljs-number">3</span> - (<span class="hljs-number">2</span>*<span class="hljs-number">2</span>^n)/<span class="hljs-number">3</span>, (<span class="hljs-number">2</span>*<span class="hljs-number">2</span>^n)/<span class="hljs-number">3</span> + <span class="hljs-number">5</span>^n/<span class="hljs-number">3</span>]<br>xn=An*x<br>     (<span class="hljs-number">4</span>*<span class="hljs-number">5</span>^n)/<span class="hljs-number">3</span> - <span class="hljs-number">2</span>^n/<span class="hljs-number">3</span><br> (<span class="hljs-number">2</span>*<span class="hljs-number">2</span>^n)/<span class="hljs-number">3</span> + (<span class="hljs-number">4</span>*<span class="hljs-number">5</span>^n)/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><p>将上面的矩阵第一行改为$0.4,0.2$，第二行改为$0.1,0.3$，再做一次实验求$x$通项。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs matlab">syms n<br>A=[<span class="hljs-number">0.4</span>,<span class="hljs-number">0.2</span>;<span class="hljs-number">0.1</span>,<span class="hljs-number">0.3</span>];<br>x=[<span class="hljs-number">1</span>;<span class="hljs-number">2</span>];<br>[P,D]=eig(sym(A))<br>P =<br>[ <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>]<br>[  <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>D =<br>[ <span class="hljs-number">1</span>/<span class="hljs-number">5</span>,   <span class="hljs-number">0</span>]<br>[   <span class="hljs-number">0</span>, <span class="hljs-number">1</span>/<span class="hljs-number">2</span>]<br>An=P*D^n*(P^<span class="hljs-number">-1</span>)<br>An =<br>[ (<span class="hljs-number">2</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n)/<span class="hljs-number">3</span> + (<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n/<span class="hljs-number">3</span>, (<span class="hljs-number">2</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n)/<span class="hljs-number">3</span> - (<span class="hljs-number">2</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n)/<span class="hljs-number">3</span>]<br>[     (<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n/<span class="hljs-number">3</span> - (<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n/<span class="hljs-number">3</span>,     (<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n/<span class="hljs-number">3</span> + (<span class="hljs-number">2</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n)/<span class="hljs-number">3</span>]<br>xn=An*x<br>xn=<br> <span class="hljs-number">2</span>*(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n - (<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n<br>   (<span class="hljs-number">1</span>/<span class="hljs-number">2</span>)^n + (<span class="hljs-number">1</span>/<span class="hljs-number">5</span>)^n<br></code></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><p><img src="/2021/02/24/matlab1/3T3.png" alt="T3"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>a=[];<br>x=<span class="hljs-number">2</span>*<span class="hljs-built_in">rand</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">30</span><br>a(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)=x;<br>x=A*x;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> a(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)==<span class="hljs-number">0</span><br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span> t=a(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>)/a(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>);<br>fprintf(<span class="hljs-string">&#x27;%g  %g\n&#x27;</span>,<span class="hljs-built_in">i</span>,t);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%以下为输出结果</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1.28936</span><br><span class="hljs-number">2</span>  <span class="hljs-number">1.10941</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1.04283</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1.01699</span><br><span class="hljs-number">5</span>  <span class="hljs-number">1.00677</span><br><span class="hljs-number">6</span>  <span class="hljs-number">1.0027</span><br><span class="hljs-number">7</span>  <span class="hljs-number">1.00108</span><br><span class="hljs-number">8</span>  <span class="hljs-number">1.00043</span><br><span class="hljs-number">9</span>  <span class="hljs-number">1.00017</span><br><span class="hljs-number">10</span>  <span class="hljs-number">1.00007</span><br><span class="hljs-number">11</span>  <span class="hljs-number">1.00003</span><br><span class="hljs-number">12</span>  <span class="hljs-number">1.00001</span><br><span class="hljs-number">13</span>  <span class="hljs-number">1</span><br><span class="hljs-number">14</span>  <span class="hljs-number">1</span><br><span class="hljs-number">15</span>  <span class="hljs-number">1</span><br><span class="hljs-number">16</span>  <span class="hljs-number">1</span><br><span class="hljs-number">17</span>  <span class="hljs-number">1</span><br><span class="hljs-number">18</span>  <span class="hljs-number">1</span><br><span class="hljs-number">19</span>  <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这个数列最终收敛于$1$。</p><h3 id="4-2"><a href="#4-2" class="headerlink" title="4"></a>4</h3><p>$x_n,y_n,m(x_n)$极限都存在，见代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">2.1</span>,<span class="hljs-number">3.4</span>,<span class="hljs-number">-1.2</span>,<span class="hljs-number">2.3</span>;<span class="hljs-number">0.8</span>,<span class="hljs-number">-0.3</span>,<span class="hljs-number">4.1</span>,<span class="hljs-number">2.8</span>;<span class="hljs-number">2.3</span>,<span class="hljs-number">7.9</span>,<span class="hljs-number">-1.5</span>,<span class="hljs-number">1.4</span>;<span class="hljs-number">3.5</span>,<span class="hljs-number">7.2</span>,<span class="hljs-number">1.7</span>,<span class="hljs-number">-9</span>];<br>x0=[<span class="hljs-number">1</span>;<span class="hljs-number">2</span>;<span class="hljs-number">3</span>;<span class="hljs-number">4</span>];<br>x=A*x0;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">100</span><br>a=<span class="hljs-built_in">max</span>(x);<br>b=<span class="hljs-built_in">min</span>(x);<br>m=a*(<span class="hljs-built_in">abs</span>(a)&gt;<span class="hljs-built_in">abs</span>(b))+b*(<span class="hljs-built_in">abs</span>(a)&lt;=<span class="hljs-built_in">abs</span>(b));<br>y=x/m;<br>x=A*y;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%以下为结果</span><br>x =<br>    <span class="hljs-number">0.9819</span><br>    <span class="hljs-number">3.2889</span><br>   <span class="hljs-number">-1.2890</span><br>  <span class="hljs-number">-11.2213</span><br>y =<br>   <span class="hljs-number">-0.0875</span><br>   <span class="hljs-number">-0.2931</span><br>    <span class="hljs-number">0.1149</span><br>    <span class="hljs-number">1.0000</span><br>m =<br>  <span class="hljs-number">-11.2213</span><br></code></pre></td></tr></table></figure><h3 id="5-2"><a href="#5-2" class="headerlink" title="5"></a>5</h3><p>求出上一题矩阵$A$的所有特征值和特征向量，并与上一题的结论做对比</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">2.1</span>,<span class="hljs-number">3.4</span>,<span class="hljs-number">-1.2</span>,<span class="hljs-number">2.3</span>;<span class="hljs-number">0.8</span>,<span class="hljs-number">-0.3</span>,<span class="hljs-number">4.1</span>,<span class="hljs-number">2.8</span>;<span class="hljs-number">2.3</span>,<span class="hljs-number">7.9</span>,<span class="hljs-number">-1.5</span>,<span class="hljs-number">1.4</span>;<span class="hljs-number">3.5</span>,<span class="hljs-number">7.2</span>,<span class="hljs-number">1.7</span>,<span class="hljs-number">-9</span>];<br>[P,D]=eig(A)<br>P =<br>    <span class="hljs-number">0.3779</span>    <span class="hljs-number">0.8848</span>   <span class="hljs-number">-0.0832</span>    <span class="hljs-number">0.3908</span><br>    <span class="hljs-number">0.5367</span>   <span class="hljs-number">-0.3575</span>   <span class="hljs-number">-0.2786</span>   <span class="hljs-number">-0.4777</span><br>    <span class="hljs-number">0.6473</span>   <span class="hljs-number">-0.2988</span>    <span class="hljs-number">0.1092</span>    <span class="hljs-number">0.7442</span><br>    <span class="hljs-number">0.3874</span>    <span class="hljs-number">0.0015</span>    <span class="hljs-number">0.9505</span>   <span class="hljs-number">-0.2555</span><br>D =<br>    <span class="hljs-number">7.2300</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>    <span class="hljs-number">1.1352</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>  <span class="hljs-number">-11.2213</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>   <span class="hljs-number">-5.8439</span><br></code></pre></td></tr></table></figure><p>$A$中绝对值最大的特征值等于$m(x_n)$的极限值。</p><p>并且$P$的特征值$-11.2213$对应的特征向量约为上题中向量$\vec y$的$\dfrac{20}{19}$倍。</p><h3 id="6-2"><a href="#6-2" class="headerlink" title="6"></a>6</h3><p>已知矩阵$A&#x3D;[0.75,0.5,0.25;0.125,0.25,0.5;0.125,0.25,0.25]$为天气矩阵，向量$\vec p_0&#x3D;(0.5,0.25,0.25)^T$，求出若干天之后的天气情况，保留$4$位小数。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">2</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>;<span class="hljs-number">1</span>/<span class="hljs-number">8</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">1</span>/<span class="hljs-number">8</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>];<br>P=[<span class="hljs-number">0.5</span>;<span class="hljs-number">0.25</span>;<span class="hljs-number">0.25</span>];<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-number">25</span><br>P(:,<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)=A*P(:,<span class="hljs-built_in">i</span>);<br><span class="hljs-keyword">end</span><br>P<br><span class="hljs-comment">%以下为输出结果</span><br>  列 <span class="hljs-number">1</span> 至 <span class="hljs-number">10</span><br>    <span class="hljs-number">0.5000</span>    <span class="hljs-number">0.5625</span>    <span class="hljs-number">0.5938</span>    <span class="hljs-number">0.6035</span>    <span class="hljs-number">0.6069</span>    <span class="hljs-number">0.6081</span>    <span class="hljs-number">0.6085</span>    <span class="hljs-number">0.6086</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span><br>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.2266</span>    <span class="hljs-number">0.2207</span>    <span class="hljs-number">0.2185</span>    <span class="hljs-number">0.2178</span>    <span class="hljs-number">0.2175</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span><br>    <span class="hljs-number">0.2500</span>    <span class="hljs-number">0.1875</span>    <span class="hljs-number">0.1797</span>    <span class="hljs-number">0.1758</span>    <span class="hljs-number">0.1746</span>    <span class="hljs-number">0.1741</span>    <span class="hljs-number">0.1740</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span><br>  列 <span class="hljs-number">11</span> 至 <span class="hljs-number">20</span><br>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span><br>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span><br>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span><br>  列 <span class="hljs-number">21</span> 至 <span class="hljs-number">26</span><br>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span>    <span class="hljs-number">0.6087</span><br>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span>    <span class="hljs-number">0.2174</span><br>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span>    <span class="hljs-number">0.1739</span><br></code></pre></td></tr></table></figure><p>得出结论：第$9$天开始，天气向量稳定于$(0.6087,0.2174,0.1739)^T$. <del>总感觉最后结果中的第一个分量缺了点什么</del>。</p><h3 id="7-1"><a href="#7-1" class="headerlink" title="7"></a>7</h3><p>求出第六题的矩阵$A$的特征值和特征向量，并与最终的结论进行对比。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">3</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">2</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>;<span class="hljs-number">1</span>/<span class="hljs-number">8</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">2</span>;<span class="hljs-number">1</span>/<span class="hljs-number">8</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>,<span class="hljs-number">1</span>/<span class="hljs-number">4</span>];<br>[P,D]=eig(A)<br>P =<br><br>   <span class="hljs-number">-0.9094</span>   <span class="hljs-number">-0.8069</span>    <span class="hljs-number">0.3437</span><br>   <span class="hljs-number">-0.3248</span>    <span class="hljs-number">0.5116</span>   <span class="hljs-number">-0.8133</span><br>   <span class="hljs-number">-0.2598</span>    <span class="hljs-number">0.2953</span>    <span class="hljs-number">0.4695</span><br>D =<br><br>    <span class="hljs-number">1.0000</span>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>    <span class="hljs-number">0.3415</span>         <span class="hljs-number">0</span><br>         <span class="hljs-number">0</span>         <span class="hljs-number">0</span>   <span class="hljs-number">-0.0915</span><br></code></pre></td></tr></table></figure><p>矩阵$A$有特征值$1$，对应向量是$\alpha&#x3D;(-0.9094,-0.3248,-0.2598)^T$，上题中的最终结果恰好是$\alpha$的$0.6696$倍。</p><h3 id="8-1"><a href="#8-1" class="headerlink" title="8"></a>8</h3><p><code>A=[3/4,7/18;1/4,11/18]</code>，设 $p_1$,$ p_2$ 为 $A$ 的 两 个 线 性 无 关 的 特 征 向 量 ， 若$p^{(0)}&#x3D;(0.5,0.5)^T$。具体求出上述的$u$, $v$ ，将 $p^(0)$ 表示成 $p_1$,$ p_2 $的线性组合， 求 $p^{(k)}$ 的具体表达式，并求 $k\rightarrow +∞$ 时$ p^{(k)}$ 的极限，与已知结论作比较.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab">A=[<span class="hljs-number">0.75</span>,<span class="hljs-number">7</span>/<span class="hljs-number">18</span>;<span class="hljs-number">0.25</span>,<span class="hljs-number">11</span>/<span class="hljs-number">18</span>];<br>p0=[<span class="hljs-number">0.5</span>;<span class="hljs-number">0.5</span>];<br>[P,D]=eig(sym(A));<br>B=sym(P^<span class="hljs-number">-1</span>)*p0<br>B =<br> <span class="hljs-number">5</span>/<span class="hljs-number">46</span><br> <span class="hljs-number">9</span>/<span class="hljs-number">23</span><br>syms k<br>pk=B(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)*D(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) .^ k*P(:,<span class="hljs-number">1</span>)+B(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)*D(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) .^ k*P(:,<span class="hljs-number">2</span>)<br>pk =<br> <span class="hljs-number">14</span>/<span class="hljs-number">23</span> - (<span class="hljs-number">5</span>*(<span class="hljs-number">13</span>/<span class="hljs-number">36</span>)^k)/<span class="hljs-number">46</span><br>  (<span class="hljs-number">5</span>*(<span class="hljs-number">13</span>/<span class="hljs-number">36</span>)^k)/<span class="hljs-number">46</span> + <span class="hljs-number">9</span>/<span class="hljs-number">23</span><br>vpa(limit(pk,k,<span class="hljs-number">100</span>),<span class="hljs-number">10</span>)<br><span class="hljs-built_in">ans</span> =<br> <span class="hljs-number">0.6086956522</span><br> <span class="hljs-number">0.3913043478</span><br></code></pre></td></tr></table></figure><p>结论：与上课时迭代出来的极限值是一样的。</p><h2 id="Div-4"><a href="#Div-4" class="headerlink" title="Div 4"></a>Div 4</h2><h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><p>用求定积分的 Monte Carlo 法近似计算$\pi$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs matlab">n=<span class="hljs-number">500000</span>;<br>kount=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:n<br>x=<span class="hljs-built_in">rand</span>;y=<span class="hljs-built_in">rand</span>;<br><span class="hljs-keyword">if</span>(x^<span class="hljs-number">2</span>+y^<span class="hljs-number">2</span>&lt;=<span class="hljs-number">1</span>)<br>kount=kount+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">ans</span>=<span class="hljs-number">4</span>*kount/n<br><span class="hljs-comment">%三次运行结果：3.1398 3.1424 3.1507</span><br></code></pre></td></tr></table></figure><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><p>根据任取一对正整数互质概率的讨论结果，现选取$112600$ 对随机的 $a,b$ 求出$\pi$ 的近似值。</p><p>提示：(1)最大公约数的命令:<code>gcd(a,b)</code> </p><p>(2)<code>randint(1,1,[u,v])</code>产生一个在$[u,v]$区间上的随机整数</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs matlab">kount=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">112600</span><br>a=<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">rand</span>*<span class="hljs-number">500000000</span>);<br>b=<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">rand</span>*<span class="hljs-number">500000000</span>);<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">gcd</span>(a,b)==<span class="hljs-number">1</span>;<br>kount=kount+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">sqrt</span>(<span class="hljs-number">6</span>*<span class="hljs-number">112600</span>/kount)<br><span class="hljs-comment">%三次运行结果：3.1377 3.1464 3.1394</span><br></code></pre></td></tr></table></figure><h3 id="3-3"><a href="#3-3" class="headerlink" title="3"></a>3</h3><p>求满足$c-b&#x3D;2,c&lt;1000$的所有勾股数，能否类似于书中的（11.8）， </p><p>把它们用一个公式表示出来？公式:$a&#x3D;2(u+1),b&#x3D;u^2+2u,c&#x3D;u^2+2u+2$</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> b=<span class="hljs-number">1</span>:<span class="hljs-number">998</span><br>a=<span class="hljs-built_in">sqrt</span>((b+<span class="hljs-number">2</span>)^<span class="hljs-number">2</span>-b^<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(a==<span class="hljs-built_in">floor</span>(a))<br>fprintf(<span class="hljs-string">&#x27;%d  %d  %d\n&#x27;</span>,a,b,b+<span class="hljs-number">2</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%以下为运行结果</span><br><span class="hljs-number">4</span>  <span class="hljs-number">3</span>  <span class="hljs-number">5</span><br><span class="hljs-number">6</span>  <span class="hljs-number">8</span>  <span class="hljs-number">10</span><br><span class="hljs-number">8</span>  <span class="hljs-number">15</span>  <span class="hljs-number">17</span><br><span class="hljs-number">10</span>  <span class="hljs-number">24</span>  <span class="hljs-number">26</span><br><span class="hljs-number">12</span>  <span class="hljs-number">35</span>  <span class="hljs-number">37</span><br><span class="hljs-number">14</span>  <span class="hljs-number">48</span>  <span class="hljs-number">50</span><br><span class="hljs-number">16</span>  <span class="hljs-number">63</span>  <span class="hljs-number">65</span><br><span class="hljs-number">18</span>  <span class="hljs-number">80</span>  <span class="hljs-number">82</span><br><span class="hljs-number">20</span>  <span class="hljs-number">99</span>  <span class="hljs-number">101</span><br><span class="hljs-number">22</span>  <span class="hljs-number">120</span>  <span class="hljs-number">122</span><br><span class="hljs-number">24</span>  <span class="hljs-number">143</span>  <span class="hljs-number">145</span><br><span class="hljs-number">26</span>  <span class="hljs-number">168</span>  <span class="hljs-number">170</span><br><span class="hljs-number">28</span>  <span class="hljs-number">195</span>  <span class="hljs-number">197</span><br><span class="hljs-number">30</span>  <span class="hljs-number">224</span>  <span class="hljs-number">226</span><br><span class="hljs-number">32</span>  <span class="hljs-number">255</span>  <span class="hljs-number">257</span><br><span class="hljs-number">34</span>  <span class="hljs-number">288</span>  <span class="hljs-number">290</span><br><span class="hljs-number">36</span>  <span class="hljs-number">323</span>  <span class="hljs-number">325</span><br><span class="hljs-number">38</span>  <span class="hljs-number">360</span>  <span class="hljs-number">362</span><br><span class="hljs-number">40</span>  <span class="hljs-number">399</span>  <span class="hljs-number">401</span><br><span class="hljs-number">42</span>  <span class="hljs-number">440</span>  <span class="hljs-number">442</span><br><span class="hljs-number">44</span>  <span class="hljs-number">483</span>  <span class="hljs-number">485</span><br><span class="hljs-number">46</span>  <span class="hljs-number">528</span>  <span class="hljs-number">530</span><br><span class="hljs-number">48</span>  <span class="hljs-number">575</span>  <span class="hljs-number">577</span><br><span class="hljs-number">50</span>  <span class="hljs-number">624</span>  <span class="hljs-number">626</span><br><span class="hljs-number">52</span>  <span class="hljs-number">675</span>  <span class="hljs-number">677</span><br><span class="hljs-number">54</span>  <span class="hljs-number">728</span>  <span class="hljs-number">730</span><br><span class="hljs-number">56</span>  <span class="hljs-number">783</span>  <span class="hljs-number">785</span><br><span class="hljs-number">58</span>  <span class="hljs-number">840</span>  <span class="hljs-number">842</span><br><span class="hljs-number">60</span>  <span class="hljs-number">899</span>  <span class="hljs-number">901</span><br><span class="hljs-number">62</span>  <span class="hljs-number">960</span>  <span class="hljs-number">962</span><br></code></pre></td></tr></table></figure><h3 id="4-3"><a href="#4-3" class="headerlink" title="4"></a>4</h3><p>对$c≤1000 ，c - b &#x3D; k(k  ≤200 )$，对哪些 $k$ 存在本原勾股数？</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:<span class="hljs-number">200</span><br><span class="hljs-keyword">for</span> b=<span class="hljs-number">1</span>:<span class="hljs-number">999</span><br>a=<span class="hljs-built_in">sqrt</span>((b+k)^<span class="hljs-number">2</span>-b^<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(a==<span class="hljs-built_in">floor</span>(a)&amp;<span class="hljs-built_in">gcd</span>(<span class="hljs-built_in">gcd</span>(a,b),b+k)==<span class="hljs-number">1</span>)<br>fprintf(<span class="hljs-string">&quot;%d\n&quot;</span>,k);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">8</span><br><span class="hljs-number">9</span><br><span class="hljs-number">18</span><br><span class="hljs-number">25</span><br><span class="hljs-number">32</span><br><span class="hljs-number">49</span><br><span class="hljs-number">50</span><br><span class="hljs-number">72</span><br><span class="hljs-number">81</span><br><span class="hljs-number">98</span><br><span class="hljs-number">121</span><br><span class="hljs-number">128</span><br><span class="hljs-number">162</span><br><span class="hljs-number">169</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h3 id="5-3"><a href="#5-3" class="headerlink" title="5"></a>5</h3><p><img src="/2021/02/24/matlab1/4T5.png" alt="T5"></p><table><thead><tr><th>$n$</th><th>$1$</th><th>$2$</th><th>$3$</th><th>$4$</th><th>$5$</th><th>$6$</th></tr></thead><tbody><tr><td>$p_n$</td><td>$2$</td><td>$7$</td><td>$26$</td><td>$97$</td><td>$362$</td><td>$1351$</td></tr><tr><td>$q_n$</td><td>$1$</td><td>$4$</td><td>$5$</td><td>$56$</td><td>$209$</td><td>$780$</td></tr><tr><td>$p_n+q_n$</td><td>$3$</td><td>$11$</td><td>$41$</td><td>$153$</td><td>$571$</td><td>$2131$</td></tr><tr><td>$p_n+2q_n$</td><td>$4$</td><td>$15$</td><td>$56$</td><td>$209$</td><td>$780$</td><td>$2911$</td></tr><tr><td>$p_n-q_n$</td><td>$1$</td><td>$3$</td><td>$11$</td><td>$41$</td><td>$153$</td><td>$571$</td></tr></tbody></table><p>$p_{n-1}+q_{n-1}&#x3D;p_n-q_n$，$q_n&#x3D;p_{n-1}+2q_{n-1}$。</p><p>所以可以推导出$p_n&#x3D;2p_{n-1}+3q_{n-1},q_n&#x3D;p_{n-1}+2q_{n-1}$</p><p>设$X_n&#x3D;(p_n,q_n)^T$，因此将$X_n$变换到$X_{n+1}$需要用到矩阵$A&#x3D;[2,3;1,2]$</p>]]></content>
    
    
    <categories>
      
      <category>SelfSkills</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECCNotes1</title>
    <link href="/2021/02/21/ECCNotes1/"/>
    <url>/2021/02/21/ECCNotes1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习ECC的笔记1"><a href="#huangx607087学习ECC的笔记1" class="headerlink" title="huangx607087学习ECC的笔记1"></a>huangx607087学习ECC的笔记1</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这一系列笔记主要介绍椭圆曲线密码学的知识。</p><h2 id="1-椭圆曲线"><a href="#1-椭圆曲线" class="headerlink" title="1.椭圆曲线"></a>1.椭圆曲线</h2><p>椭圆曲线是具有以下格式的曲线：<br>$$<br>y^2&#x3D;x^3+ax+b<br>$$<br>椭圆曲线的一个惊人的特点是，有一种自然的方法，在椭圆曲线上取两个点，并“添加”它们以产生第三个点。在“添加”周围放置引号，因为我们指的是一个操作，它以一种类似于在某些方面添加的方式结合两点（它是交换的和关联的，并且有一个恒等式），但在其他方面与添加非常不同。描述椭圆曲线上“加法定律”的最自然方法是使用几何。</p><p>椭圆曲线上已知$(x_1,y_1),(x_2,y_2)$两点时，我们可以利用以下公式计算第三点：<br>$$<br>x_3&#x3D;s^2-x_1-x_2<br>$$</p><p>$$<br>y_3&#x3D;s(x_1-x_3)-y_1<br>$$</p><p>其中，当两个点不同时，$s&#x3D;\dfrac{y_2-y_1}{x_2-x_1}$。当相同的两个点相加时，$s&#x3D;\dfrac {3x^2+a}{2y}$。并且假如点$M$是椭圆曲线上的一点，那么$M+M$也可以写作$2M$。</p><p>由于椭圆曲线是关于$x$的三次曲线，因此任意画一条直线$y&#x3D;kx+b$，与椭圆曲线联立方程组，都会有三个根。而这三个根的和恰好为$O$，其中$O$是坐标纸上一个无穷远的点，又被称为源点。</p><p>因此，椭圆曲线还满足以下四条运算律：$O+P&#x3D;P,P+(-P)&#x3D;O,P+Q&#x3D;Q+P$。并且如果两个点$P,Q$横坐标相同，纵坐标互为相反数，则$P+Q&#x3D;O$。</p><p>这里还有一个小小的结论，就是在不进行取模的情况下一个简单的点自加的时候（例如$y^2&#x3D;x^3+3x+5$上的点$(1,3)$）,无论是$x$坐标还是$y$坐标，分子和分母的增长的数量级都是迅速的，设$u$是$x$坐标分子、$x$坐标分母、$y$坐标分子、$y$坐标分母中的$4$个值得任意一个，那么都有$\ln u$正比于$k^2$，其中$k$是点自加的次数。并且，任何一个椭圆曲线上的整点都是有限的，基本不超过$15$个。</p><h2 id="2-有限域中的椭圆曲线"><a href="#2-有限域中的椭圆曲线" class="headerlink" title="2.有限域中的椭圆曲线"></a>2.有限域中的椭圆曲线</h2><p>有限域中的椭圆曲线要求$4a^3+27b^2 \not &#x3D;0$。</p><p>下面我们以椭圆曲线$y^2&#x3D;x^3+x+8$，定义域为$GF(13)$为例。寻找上面的点。</p><p>我们可以把$0$到$12$的每一个数字带进去计算$y$，然后判断$y$是否为二次剩余即可确定该点是否存在。</p><p>所以我们可以找到$9$个点：$O,(1,5),(1,8),(2,3),(2,10),(9,6),(9,7),(12,2),(12,11)$。</p><p>根据刚才的理论，我们可以计算$(1,8)+(9,7)&#x3D;(2,10)$。具体步骤请自己手搓（</p><p>而ECC在有限域上也遵循这样的计算法则，只不过多了一个模数$p$。下面的代码时计算$kA$的代码，输入相关的参数即可运行求解，使用的也是二分的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> p,a,b,k,x,y,G<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plus1</span>(<span class="hljs-params">X,Y</span>):<br>    K=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>    s=(Y[<span class="hljs-number">1</span>]-X[<span class="hljs-number">1</span>])*inverse(Y[<span class="hljs-number">0</span>]-X[<span class="hljs-number">0</span>],p)%p<br>    K[<span class="hljs-number">0</span>]=s*s-X[<span class="hljs-number">0</span>]-Y[<span class="hljs-number">0</span>]<br>    K[<span class="hljs-number">1</span>]=s*(X[<span class="hljs-number">0</span>]-K[<span class="hljs-number">0</span>])-X[<span class="hljs-number">1</span>]<br>    K[<span class="hljs-number">0</span>]%=p<br>    K[<span class="hljs-number">1</span>]%=p<br>    <span class="hljs-keyword">return</span> K<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul2</span>(<span class="hljs-params">X</span>):<br>    Y=X<br>    s=(<span class="hljs-number">3</span>*X[<span class="hljs-number">0</span>]*X[<span class="hljs-number">0</span>]+a)*inverse(<span class="hljs-number">2</span>*X[<span class="hljs-number">1</span>],p)%p<br>    K=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>    K[<span class="hljs-number">0</span>]=s*s-X[<span class="hljs-number">0</span>]-Y[<span class="hljs-number">0</span>]<br>    K[<span class="hljs-number">1</span>]=s*(X[<span class="hljs-number">0</span>]-K[<span class="hljs-number">0</span>])-X[<span class="hljs-number">1</span>]<br>    K[<span class="hljs-number">0</span>]%=p<br>    K[<span class="hljs-number">1</span>]%=p<br>    <span class="hljs-keyword">return</span> K<br>p=<span class="hljs-number">13</span><br>a=<span class="hljs-number">3</span><br>b=<span class="hljs-number">8</span><br>k=<span class="hljs-number">2</span><br>A=[<span class="hljs-number">1</span>,<span class="hljs-number">8</span>]<br>G=A<br>op=<span class="hljs-built_in">bin</span>(k)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(op)):<br>    A=mul2(A)<br>    <span class="hljs-keyword">if</span>(op[i]==<span class="hljs-string">&quot;1&quot;</span>):<br>        A=plus1(A,G)<br>    <span class="hljs-built_in">print</span>(A)<br><span class="hljs-built_in">print</span>(A[<span class="hljs-number">0</span>]+A[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="3-椭圆曲线上的离散对数ECDLP"><a href="#3-椭圆曲线上的离散对数ECDLP" class="headerlink" title="3.椭圆曲线上的离散对数ECDLP"></a>3.椭圆曲线上的离散对数ECDLP</h2><p>椭圆曲线上的离散对数问题的形式主要是当知道点$P,Q$的时候，寻找一个未知数$n$，使得<br>$$<br>Q&#x3D;nP<br>$$<br>这个时候，我们也可以写成$n&#x3D;\log_PQ$或$\dfrac {\ln (Q)}{\ln P}$</p><p>目前想要在$F_p$中解决ECDLP的时间复杂度是$O(\sqrt p)$。因此当$p$非常大的时候，计算ECDLP也是非常困难的。不过如果$p-1$是光滑数，那么使用PohilgHellman算法也是可以在较短时间内解决这个问题的。</p><h2 id="4-椭圆曲线密码学"><a href="#4-椭圆曲线密码学" class="headerlink" title="4.椭圆曲线密码学"></a>4.椭圆曲线密码学</h2><h3 id="4x01-椭圆曲线上的Diffie–Hellman密钥交换"><a href="#4x01-椭圆曲线上的Diffie–Hellman密钥交换" class="headerlink" title="4x01 椭圆曲线上的Diffie–Hellman密钥交换"></a>4x01 椭圆曲线上的Diffie–Hellman密钥交换</h3><p>首先先确定一个大素数$p$、一个椭圆曲线表达式$E$和椭圆曲线上的一点$P$。</p><p>Alice确定一个秘密的整数$a$，并计算$Q_A&#x3D;aP$。同时Bob确定一个秘密的整数$b$，计算$Q_B&#x3D;bP$。并互相发送$Q_A,Q_B$。</p><p>收到消息后，Alice计算$aQ_B$，Bob计算$bQ_A$即可。</p><h3 id="4x02椭圆曲线上的ElGamal公钥密码体制"><a href="#4x02椭圆曲线上的ElGamal公钥密码体制" class="headerlink" title="4x02椭圆曲线上的ElGamal公钥密码体制"></a>4x02椭圆曲线上的ElGamal公钥密码体制</h3><p>在确定一个大素数$p$，$GF(p)$上的一个椭圆曲线$E$和椭圆曲线上的一个点$P$。</p><p>Alice确定私钥$a$，并计算$Q&#x3D;aP$，并公开公钥$Q$。</p><p>Bob加密时，选取椭圆曲线上的一个点$M$和一个随机数$k$。并计算密文$C_1&#x3D;kP,C_2&#x3D;M+kQ$，将密文$(C_1,C_2)$发送给Alice。</p><p>Alice收到密文后，计算$C_2-aC_1$即可。</p><p>下面就是使用$y^2&#x3D;x^3+7x+8$，$p&#x3D;43$进行加密的例子,Sagemath代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">E=EllipticCurve(GF(<span class="hljs-number">43</span>),[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])<br>G=E(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment">#Alice Prepare</span><br>a=<span class="hljs-number">10</span><br>Q=a*G<br><span class="hljs-built_in">print</span>(Q)<br><span class="hljs-comment">#(13,19)</span><br><span class="hljs-comment">#Bob Encrypt</span><br>M=E(<span class="hljs-number">4</span>,<span class="hljs-number">33</span>)  <br>k=<span class="hljs-number">13</span><br>C1=k*G<br>C2=M+k*Q<br><span class="hljs-built_in">print</span>(C1,C2)<br><span class="hljs-comment">#(1,4),(4,10)</span><br><span class="hljs-comment">#Alice Decrypt</span><br><span class="hljs-built_in">print</span>(C2-a*C1)<br><span class="hljs-comment">#(4,33)</span><br></code></pre></td></tr></table></figure><h2 id="5-GF-2-和-GF-2-k-上的椭圆曲线"><a href="#5-GF-2-和-GF-2-k-上的椭圆曲线" class="headerlink" title="5.$GF(2)$和$GF(2^k)$上的椭圆曲线"></a>5.$GF(2)$和$GF(2^k)$上的椭圆曲线</h2><p>计算机会讲二进制，所以它们特别适合做模$2$的计算。 这表明使用椭圆曲线模$2$可能更有效。 不幸的是，如果$E$是在$GF(2)$上定义的椭圆曲线，那么$E(GF(2))$最多包含5个点，因此$E(GF(2))$对于密码学目的是没有用的。</p><p>然而，还有一些其他的域，也可以使得$2\equiv 0$，这种域就是$GF(2^k)$域。对于每个素数幂$p^k$，$GF(p^k)$都是一个有$p^k$个元素的素数域。因此，我们可以取一条椭圆曲线，它的方程在$GF(p^k)$中具有系数，并观察该曲线上具有坐标的点群。在这种更一般的情况下，Hasse定理是正确的。</p><p>Hasse定理：在$GF(p^k)$中，椭圆曲线$E(GF(p^k))$上的点数为$p^k+1-t_{p^k}$，其中$t_{p^k}$的绝对值不超过$2p^{(k&#x2F;2)}$。</p><p>例如，我们在复数域$GF(9)$中，可以构造$E(GF(9)):y^2&#x3D;x^3+(1+i)x+(2+i)$。这个椭圆曲线上有$10$个点，分别是$(2i,1+2i),(2i,2+i),(1+i,1+i),(1+i,2+2i),(2,0),(2+i,i),(2+i,2i),(2+2i,1),(2+2i,2)$和$O$。其中点可以相互叠加，只不过需要用到$i^2&#x3D;-1$和计算时不断地模$3$。不过我们要注意的就是构造椭圆曲线的时候，要注意$\Delta&#x3D;-16(4A^3+27B^2)$的值不为零（不过多数情况下，如果仅做判断，会省去前面的系数$-16$）。</p><p>只要我们在$2\not&#x3D;0$的字段中工作，那么$Δ\not &#x3D;0$条件与任何一个定义都是相同的，但是对于$GF(2^k)$其中$2&#x3D;0$的情况下，我们已经为每个标准椭圆曲线方程均满足$Δ&#x3D;0$。所以，我们要引入扩展椭圆曲线方程的形式：<br>$$<br>E: y^2+a_1xy+a_3y&#x3D;x^3+a_2x^2+a_4x+a_6<br>$$<br>其中，比我们一开始的椭圆曲线，多了$xy$交叉项、$y$的一次项和$x$的二次项。当然，这个曲线上也有一个无穷远的点$O$。此时的$\Delta$是这样算的：</p><p>设$b_2&#x3D;a_1^2+4a_2,b_4&#x3D;2a_4+a_1a_3,b_6&#x3D;a_3^2+4a_6,b_8&#x3D;a_6b_2-a_1a_3a_4+a_2a_3^2-a_4^2$。</p><p>那么$\Delta&#x3D;-b_2^2b_8-8b_4^3-27b_6^2+9b_2b_4b_6$。虽然这些公式看起来很复杂，但它们很容易计算，并且条件$Δ\not &#x3D;0$正是确保曲线$E$是非奇异的必要条件。</p><p>关于$E$的加法定律的几何定义与我们以前的定义相似，唯一的变化是旧的反射步骤$(x,y)→(x,−y)$被稍微复杂的反射步骤所取代，其中$-y$被替换成了$-y-a_1x-a_3$。而求一个点的负点，也是遵循$x$不变，$y$换成$-y-a_1x-a_3$的方法。</p><p>当$S(x_1,y_1),T(x_2,y_2)$两点相加时，我们也有：<br>$$<br>x(S+T)&#x3D;(\dfrac{y_2-y_1}{x_2-x_1})^2+a_1(\dfrac{y_2-y_1}{x_2-x_1})-a_2-x_1-x_2<br>$$<br>而求一个点$(x,y)$的两倍点，可以用这样的公式：<br>$$<br>x(2S)&#x3D;\dfrac{x^4-b_4x^2-2b_6x-b_8}{4x^3+b_2x^2+4b_4x+b_6}<br>$$<br>而当$GF(2^k)$域上计算的时候，我们就需要用到不可约多项式了。</p><p>例如：在$GF(8)$上，我们可以选取不可约多项式$t^3+t+1$。此时，$GF(8)$中的所有元素就被锁定在$t$的不超过二次多项式里面了。因此我们可以定义一个这样的椭圆曲线：<br>$$<br>y^2+(1+t)y\equiv x^3+(1+t^2)x+t \pmod{t^3+t+1}\text{ and }\pmod2<br>$$<br>这个上面一共有$9$个点，比如$(0,t),(0,1),(t,1+t),(1+t^2,t+t^2)……$等等，当然，$9$个点里面还包括一个无穷远点$O$</p><p>当然，我们也可以得到计算：$(1+t^2,t+t^2)+(1+t,t)&#x3D;(1+t^2,1+t^2)$和$2(t,1+t)&#x3D;(t,0)$。</p><p>定义：**(p-power)Frobenius**映射$τ$是由简单规则定义的从$GF(p^k)$到自身的映射，$τ(a)&#x3D;a^p$。</p><p>当然$τ(a+b)&#x3D;τ(a)+τ(b),τ(ab)&#x3D;τ(a)τ(b)(\text{in GF(2}^k))$。当然，对于椭圆曲线上的一点$P(x,y)$，也有$τ(P)&#x3D;(τ(x),τ(y))$。</p><p>换句话说，$τ$将$E(GF(2^k))$映射到自身，它满足加法定律。 (在数学术语中，Frobenius映射是$E(GF2^k)$与自身的群同态。 </p><p>$GF(p)$中椭圆曲线上的点的个数$\mathrm{ind }E$在区间$[p+1-2\sqrt p,p+1+2\sqrt p]$中。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Feb2</title>
    <link href="/2021/02/16/21Feb2/"/>
    <url>/2021/02/16/21Feb2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087开学前的切题2"><a href="#huangx607087开学前的切题2" class="headerlink" title="huangx607087开学前的切题2"></a>huangx607087开学前的切题2</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>之前BUUCTF上到了3000分，进入了Crypto的深水区，题目难度都是很大的，看来<del>我是不是只能看着wp搞懂题目后再做题了。</del></p><p>由于题目太难<del>（实际上是自己太菜）</del>，这篇文章原计划是12日至13日发布的，最后直到16日才开始写，<del>然后火速发布</del>（并没有）。</p><h2 id="1-BSidesSF2020-decrypto-1"><a href="#1-BSidesSF2020-decrypto-1" class="headerlink" title="1.[BSidesSF2020]decrypto-1"></a>1.[BSidesSF2020]decrypto-1</h2><p>通过观察下面的代码，可以发现，这个实际上是对一个文件进行了加密操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Crypto</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(key, <span class="hljs-built_in">bytes</span>):<br>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;key must be of type bytes!&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.key = key<br>        <span class="hljs-variable language_">self</span>._buf = <span class="hljs-built_in">bytes</span>()<br>        <span class="hljs-variable language_">self</span>._out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/stdout&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_extend_buf</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._buf += <span class="hljs-variable language_">self</span>.key<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_bytes</span>(<span class="hljs-params">self, nbytes</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>._buf) &lt; nbytes:<br>            <span class="hljs-variable language_">self</span>._extend_buf()<br>        ret, <span class="hljs-variable language_">self</span>._buf = <span class="hljs-variable language_">self</span>._buf[:nbytes], <span class="hljs-variable language_">self</span>._buf[nbytes:]<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, buf</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(buf, <span class="hljs-built_in">bytes</span>):<br>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;buf must be of type bytes!&#x27;</span>)<br>        stream = <span class="hljs-variable language_">self</span>.get_bytes(<span class="hljs-built_in">len</span>(buf))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(buf, stream))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_outfile</span>(<span class="hljs-params">self, fname</span>):<br>        <span class="hljs-variable language_">self</span>._out = <span class="hljs-built_in">open</span>(fname, <span class="hljs-string">&quot;wb&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_file</span>(<span class="hljs-params">self, fname</span>):<br>        buf = <span class="hljs-built_in">open</span>(fname, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>        <span class="hljs-variable language_">self</span>._out.write(<span class="hljs-variable language_">self</span>.encrypt(buf))<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JSONCrypto</span>(<span class="hljs-title class_ inherited__">Crypto</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_file</span>(<span class="hljs-params">self, fname</span>):<br>        buf = <span class="hljs-built_in">open</span>(fname, <span class="hljs-string">&quot;r&quot;</span>).read().strip()<br>        h = hashlib.sha256(buf.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>        data = &#123;<br>                <span class="hljs-string">&quot;filename&quot;</span>: fname,<br>                <span class="hljs-string">&quot;hash&quot;</span>: h,<br>                <span class="hljs-string">&quot;plaintext&quot;</span>: buf,<br>        &#125;<br>        outbuf = json.dumps(data, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">4</span>)<br>        <span class="hljs-variable language_">self</span>._out.write(<span class="hljs-variable language_">self</span>.encrypt(outbuf.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(argv) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s &lt;key&gt; &lt;infile&gt; [outfile]&quot;</span> % sys.argv[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">return</span><br>    argv.pop(<span class="hljs-number">0</span>)<br>    key = argv.pop(<span class="hljs-number">0</span>)<br>    inf = argv.pop(<span class="hljs-number">0</span>)<br>    crypter = JSONCrypto(key.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">if</span> sys.argv:<br>        crypter.set_outfile(argv.pop(<span class="hljs-number">0</span>))<br>    crypter.encrypt_file(inf)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><p>而整个加密过程，实际上就是data和key之间异或的操作。根据平常的经验，key的长度应该不会很长。而密文的加密文档叫flag.txt.enc。因此盲猜filename那一栏的值是flag.txt。这样子的话，data的长度已经超过了15。</p><p>然后我们就可以构造一个data，模仿他的构造字符串的过程对data异或密文，可以看出最前面实际上出现了循环结构，说明这就是我们需要的key。<code>n0t4=l4g</code></p><p>最后我们将key和data进行异或，就可以得到明文内容了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> json<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt.enc&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>b=fp.read()<br>fp.close()<br>data = &#123;<br>            <span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&#x27;flag.txt&#x27;</span>,<br>            <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-string">&#x27;000000000000000000000000000000000000000&#x27;</span>,<br>            <span class="hljs-string">&quot;plaintext&quot;</span>:<span class="hljs-string">&#x27;000000000000000000000000000000000000&#x27;</span><br>        &#125;<br>outbuf = json.dumps(data, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">4</span>)<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(outbuf),<span class="hljs-built_in">len</span>(b))):<br>    s+=<span class="hljs-built_in">chr</span>(b[i]^<span class="hljs-built_in">ord</span>(outbuf[i]))<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment">#n0t4=l4gn0t4=l4gn0t4=l4gn0t4=l4gn0t4=l4gn0t6ke&lt;5fa&quot;e=m0589q18o76mes6n9agj1s0&lt;......</span><br>key=<span class="hljs-string">b&#x27;n0t4=l4g&#x27;</span><br>ans=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>    ans+=<span class="hljs-built_in">chr</span>(b[i]^key[i%<span class="hljs-built_in">len</span>(key)])<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;filename&quot;: &quot;flag.txt&quot;,</span><br><span class="hljs-string">    &quot;hash&quot;: &quot;2f98b8afa014bf955533a3e72cee0417413ff744e25f2b5b5838f5741cd69547&quot;,</span><br><span class="hljs-string">    &quot;plaintext&quot;: &quot;CTF&#123;plz_dont_r0ll_ur_own_crypto&#125;&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-羊城杯-2020-GMC"><a href="#2-羊城杯-2020-GMC" class="headerlink" title="2.[羊城杯 2020]GMC"></a>2.[羊城杯 2020]GMC</h2><p>拿到题目，很显然啊，看到了有随机数的平方，容易想到使用之前提到过的二次剩余的相关知识来解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long,getRandomNBitInteger<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gmc</span>(<span class="hljs-params">a, p</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(a, (p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, p) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    [gp,gq] = [getPrime(<span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>    gN = gp * gq<br>    <span class="hljs-keyword">return</span> gN, gq, gp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_x</span>(<span class="hljs-params">gq,gp</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x = getRandomNBitInteger(<span class="hljs-number">512</span>)<br>        <span class="hljs-keyword">if</span> gmc(x,gp) ^ gmc(x,gq) == -<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> x <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_y</span>(<span class="hljs-params">gN</span>):<br>    gy_list = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(gy_list) != F_LEN:<br>        ty = getRandomNBitInteger(<span class="hljs-number">768</span>)<br>        <span class="hljs-keyword">if</span> gcd(ty,gN) == <span class="hljs-number">1</span>:<br>            gy_list.append(ty)<br>    <span class="hljs-keyword">return</span> gy_list<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    flag = <span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:]<br>    F_LEN = <span class="hljs-built_in">len</span>(flag)<br>    N, q, p = gen_key()<br>    x = gen_x(q, p)<br>    y_list = gen_y(N)<br>    ciphertext = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(F_LEN):<br>        tc = <span class="hljs-built_in">pow</span>(y_list[i],<span class="hljs-number">2</span>) * <span class="hljs-built_in">pow</span>(x,<span class="hljs-built_in">int</span>(flag[i])) % N<br>        ciphertext.append(tc)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./output.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">str</span>(N) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(F_LEN):<br>            f.write(<span class="hljs-built_in">str</span>(ciphertext[i]) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>很显然，gmc函数就是判断一个数是不是二次剩余的函数，因为在有限域里，二次剩余的ord值一定是$\dfrac{p-1}2$的因数。因此如果$a$是有限域中的二次剩余，那么$a^{\frac{p-1}2} \equiv 1 \pmod p$。</p><p>不过这里判断的是$n&#x3D;pq$的二次剩余情况。根据阅读代码，两个异或值等于$-2$的话，只有可能是一个$1$一个$-1$。而二次剩余的符号是可以相乘的。因此我们可以知道，生成的数字肯定不是二次剩余。</p><p>根据最后给出的数字：$y_i^2x^{f_i}$，其中$f_i$的取值为$0,1$。因此如果最后给出数字是二次剩余，那么对应的flag位是$0$，如果给出的数字是二次非剩余，那么对应的flag位是$1$。</p><p>这道题还算是比较简单的，直接上脚本，具体讲解可以回顾**0xGame Div 4[2020.10.29]**。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        x=x//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        _tmp=p<br>        p=x<br>        x=_tmp<br>        <span class="hljs-keyword">if</span> x%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br>n,s=<span class="hljs-number">0</span>,[]<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>n=<span class="hljs-built_in">int</span>(fp.readline())<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        a=<span class="hljs-built_in">int</span>(fp.readline())<br>        s.append(a)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s)+<span class="hljs-number">1</span>==<span class="hljs-number">304</span><br>ans=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span>(isqr(i,n)==<span class="hljs-number">1</span>):<br>        ans+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        ans+=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(ans,<span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure><h2 id="3-b01lers2020-Des-MMXX"><a href="#3-b01lers2020-Des-MMXX" class="headerlink" title="3.[b01lers2020]Des-MMXX"></a>3.[b01lers2020]Des-MMXX</h2><p>首先看一下题目的加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>SECRET = <span class="hljs-number">0xa</span><span class="hljs-comment">########e          # remember to erase this later..</span><br>seed = <span class="hljs-string">b&#x27;secret_sauce_#9&#x27;</span>   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">s</span>):<br>   keys = []<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2020</span>):<br>      s = sha256(s).digest()<br>      keys.append(s)<br>   <span class="hljs-keyword">return</span> keys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scramble</span>(<span class="hljs-params">s</span>):<br>   ret = <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(s &amp; <span class="hljs-number">0xfffff</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   ret += <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(s &gt;&gt; <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ret, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">keys, msg</span>):<br>   dk = scramble(SECRET)<br>   <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> keys:<br>      idx = dk &amp; <span class="hljs-number">3</span><br>      dk &gt;&gt;= <span class="hljs-number">2</span><br>      k = v[idx*<span class="hljs-number">8</span>:(idx+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>]<br>      cp = DES.new(k, DES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">8</span>))  <br>      msg = cp.encrypt(msg)<br>   <span class="hljs-keyword">return</span> msg<br>keys = keygen(seed)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>   msg = f.read()<br>ctxt = encrypt(keys, msg)<br><span class="hljs-built_in">print</span>(ctxt)<br><span class="hljs-comment">#Plaintext: b&#x27;Attack at DAWN!!&#x27;</span><br><span class="hljs-comment">#Ciphertext: b&#x27;\x15\x08T\xff&lt;\xf4\xc4\xc0\xd2;\xd6\x8a\x824\x83\xbe&#x27;</span><br></code></pre></td></tr></table></figure><p>通过题目给出的加密代码中，我们发现了最后还给出了一组附加的明文和密文，看来是有一定用处的。而SECRET虽然中间八位十六进制数被擦去，但给出了最高位的$\text{AH}$和最低位的$\text{EH}$（$\text H$后缀表示十六进制）。</p><p>观察一下scramble函数，与secret密切相关，因此我构造了一个十位的十六进制数$\text{123456789AH}$放进去，得出来的结果是$\text{6789A6789A6789A……123451234512345H}$。而加密的时候，取这个数字作为dk，然后dk每次除以$4$并获取余数。余数作为对应keys密钥中的密钥段。</p><p>注意到加密的前半段和后半段基本无关，而题目又给出了一个附加明文和附加密文。很显然，可以使用中间碰撞法进行攻击，通过分别枚举两端SECRET的值，然后比对输出结果，在两组每组$60000$多个输出中寻找到相同的输出。</p><p>构造密钥直接模仿其构造密钥的过程即可。而最需要主义的就是对key进行下标关系的计算，以及对生成的半密钥除以多少（也就是需要右移多少位）的问题，反正都是线性函数，举两个例子就可以判断了。  </p><p>枚举前半段加密密钥脚本（对附加明文加密到一半的操作）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#10.py</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>m=<span class="hljs-string">b&quot;Attack at DAWN!!&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">s</span>):<br>   keys = []<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2020</span>):<br>      s = sha256(s).digest()<br>      keys.append(s)<br>   <span class="hljs-keyword">return</span> keys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">K</span>(<span class="hljs-params">x</span>):<br>   ret = <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(x &amp; <span class="hljs-number">0xfffff</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ret,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">incrypt</span>(<span class="hljs-params">kinum,cip,keys</span>):<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1010</span>):<br>      idx=(kinum&gt;&gt;(<span class="hljs-number">2</span>*i))&amp;<span class="hljs-number">3</span><br>      k=keys[i][idx*<span class="hljs-number">8</span>:idx*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>]<br>      cp = DES.new(k, DES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">8</span>))<br>      cip=cp.encrypt(cip)<br>   <span class="hljs-keyword">return</span> cip<br>keys = keygen(<span class="hljs-string">b&#x27;secret_sauce_#9&#x27;</span>)<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ENCMID.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">65536</span>):<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">150</span>==<span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>    keynum=K(<span class="hljs-number">0xa0000</span>+i)<br>    fp.write(<span class="hljs-built_in">hex</span>(bytes_to_long(incrypt(keynum,m,keys)))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>枚举后半段加密密钥（对附加密文进行解密到一半的操作）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#11.py</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>c=<span class="hljs-string">b&quot;\x15\x08\x54\xff\x3c\xf4\xc4\xc0\xd2\x3b\xd6\x8a\x82\x34\x83\xbe&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">s</span>):<br>   keys = []<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2020</span>):<br>      s = sha256(s).digest()<br>      keys.append(s)<br>   <span class="hljs-keyword">return</span> keys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">K</span>(<span class="hljs-params">x</span>):<br>   ret = <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(x &amp; <span class="hljs-number">0xfffff</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ret,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dicrypt</span>(<span class="hljs-params">kinum,cip,keys</span>):<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1010</span>):<br>      idx=(kinum&gt;&gt;(<span class="hljs-number">2018</span>-<span class="hljs-number">2</span>*i))&amp;<span class="hljs-number">3</span><br>      k=keys[<span class="hljs-number">2019</span>-i][idx*<span class="hljs-number">8</span>:idx*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>]<br>      cp = DES.new(k, DES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">8</span>))<br>      cip=cp.decrypt(cip)<br>   <span class="hljs-keyword">return</span> cip<br>keys = keygen(<span class="hljs-string">b&#x27;secret_sauce_#9&#x27;</span>)<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;DECMID.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">65536</span>):<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">150</span>==<span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>    keynum=K(i*<span class="hljs-number">16</span>+<span class="hljs-number">0xe</span>)<br>    fp.write(<span class="hljs-built_in">hex</span>(bytes_to_long(dicrypt(keynum,c,keys)))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>在两组文件中寻找配对，大概需要用$20$秒左右。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#6.py</span><br>s=[]<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ENCMID.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    a=<span class="hljs-built_in">int</span>(f.readline(),<span class="hljs-number">16</span>)<br>    s.append(a)<br>f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;DECMID.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>    b=<span class="hljs-built_in">int</span>(f.readline(),<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">if</span> b <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s.index(b)))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(b))<br>f.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x3618</span><br><span class="hljs-string">0x4d9e</span><br><span class="hljs-string">0x8ac245ba53950c4fb8352bfe2639fcd9</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们可以看出，加密ID是$\text{3618H}$，解密ID是$\text{4D9EH}$，所以我们恢复了最后的SECRET的值为$\text{A4D9E3618EH}$。然后简单修改一下解密脚本就可以得出flag了。不过重要的是注意下标计算的问题，比如最终解密脚本中的 $4038-2i$和$2019-i$是如何算的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4.py</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>SECRET=<span class="hljs-number">0xa4d9e3618e</span> <br>seed = <span class="hljs-string">b&#x27;secret_sauce_#9&#x27;</span>   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">s</span>):<br>   keys = []<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2020</span>):<br>      s = sha256(s).digest()<br>      keys.append(s)<br>   <span class="hljs-keyword">return</span> keys<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scramble</span>(<span class="hljs-params">s</span>):<br>   ret = <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(s &amp; <span class="hljs-number">0xfffff</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   ret += <span class="hljs-string">&quot;&quot;</span>.join( [<span class="hljs-built_in">format</span>(s &gt;&gt; <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;020b&#x27;</span>)]*<span class="hljs-number">101</span> )<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ret, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">keys, msg</span>):<br>   dk = scramble(SECRET)<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2020</span>):<br>      idx = (dk&gt;&gt;(<span class="hljs-number">4038</span>-(<span class="hljs-number">2</span>*i)))&amp;<span class="hljs-number">3</span><br>      k = keys[<span class="hljs-number">2019</span>-i][idx*<span class="hljs-number">8</span>:(idx+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>]<br>      cp = DES.new(k, DES.MODE_CBC, <span class="hljs-built_in">bytes</span>(<span class="hljs-number">8</span>))  <br>      msg = cp.decrypt(msg)<br>   <span class="hljs-keyword">return</span> msg<br>keys = keygen(seed)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.enc&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>   msg = f.read()<br>ctxt = decrypt(keys, msg)<br><span class="hljs-built_in">print</span>(ctxt)<br></code></pre></td></tr></table></figure><p><code>pctf&#123;Two_tO_thE_s1xt33n7h?_E4sy-p3asy..&#125;</code></p><h2 id="4-pasecactf-2019-tornado-casino"><a href="#4-pasecactf-2019-tornado-casino" class="headerlink" title="4.[pasecactf_2019]tornado_casino"></a>4.[pasecactf_2019]tornado_casino</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br>flag = <span class="hljs-string">&#x27;&lt;redacted&gt;&#x27;</span><br>tornado_banner = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                                                              88              </span><br><span class="hljs-string">  ,d                                                          88              </span><br><span class="hljs-string">  88                                                          88              </span><br><span class="hljs-string">MM88MMM ,adPPYba,  8b,dPPYba, 8b,dPPYba,  ,adPPYYba,  ,adPPYb,88  ,adPPYba,   </span><br><span class="hljs-string">  88   a8&quot;     &quot;8a 88P&#x27;   &quot;Y8 88P&#x27;   `&quot;8a &quot;&quot;     `Y8 a8&quot;    `Y88 a8&quot;     &quot;8a  </span><br><span class="hljs-string">  88   8b       d8 88         88       88 ,adPPPPP88 8b       88 8b       d8  </span><br><span class="hljs-string">  88,  &quot;8a,   ,a8&quot; 88         88       88 88,    ,88 &quot;8a,   ,d88 &quot;8a,   ,a8&quot;  </span><br><span class="hljs-string">  &quot;Y888 `&quot;YbbdP&quot;&#x27;  88         88       88 `&quot;8bbdP&quot;Y8  `&quot;8bbdP&quot;Y8  `&quot;YbbdP&quot;&#x27; &#x27;&#x27;&#x27;</span><br>casino_banner = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                                88                          </span><br><span class="hljs-string">                                &quot;&quot;                          </span><br><span class="hljs-string">                                                            </span><br><span class="hljs-string"> ,adPPYba, ,adPPYYba, ,adPPYba, 88 8b,dPPYba,   ,adPPYba,   </span><br><span class="hljs-string">a8&quot;     &quot;&quot; &quot;&quot;     `Y8 I8[    &quot;&quot; 88 88P\&#x27;   `&quot;8a a8&quot;     &quot;8a  </span><br><span class="hljs-string">8b         ,adPPPPP88  `&quot;Y8ba,  88 88       88 8b       d8  </span><br><span class="hljs-string">&quot;8a,   ,aa 88,    ,88 aa    ]8I 88 88       88 &quot;8a,   ,a8&quot;  </span><br><span class="hljs-string"> `&quot;Ybbd8&quot;&#x27; `&quot;8bbdP&quot;Y8 `&quot;YbbdP&quot;\&#x27; 88 88       88  `&quot;YbbdP&quot;\&#x27; &#x27;&#x27;&#x27;</span><br>tornado_art = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   ((  &quot;####@@!!$$    ))</span><br><span class="hljs-string">       `#####@@!$$`  ))</span><br><span class="hljs-string">    ((  &#x27;####@!!$:</span><br><span class="hljs-string">   ((  ,####@!!$:   ))</span><br><span class="hljs-string">       .###@!!$:</span><br><span class="hljs-string">       `##@@!$:</span><br><span class="hljs-string">        `#@!!$</span><br><span class="hljs-string">  !@#    `#@!$:       @#$</span><br><span class="hljs-string">   #$     `#@!$:       !@!</span><br><span class="hljs-string">            &#x27;@!$:</span><br><span class="hljs-string">        &#x27;`\   &quot;!$: /`&#x27;</span><br><span class="hljs-string">           &#x27;\  &#x27;!: /&#x27;</span><br><span class="hljs-string">             &quot;\ : /&quot;</span><br><span class="hljs-string">  -.&quot;-/\\\-.&quot;//.-&quot;/:`\.&quot;-.JrS&quot;.&quot;-=_\\</span><br><span class="hljs-string">&quot; -.&quot;-.\\&quot;-.&quot;//.-&quot;.`-.&quot;_\\-.&quot;.-\&quot;.-//&#x27;&#x27;&#x27;</span><br>welcome = <span class="hljs-string">&#x27;Welcome!\n[1] - To slotmachine\n[2] - Enter promocode\n[3] - Exit\n&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sltmchn_wndw</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">print</span>(num)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;|&#x27;</span> + <span class="hljs-string">&#x27;|&#x27;</span>.join(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">hex</span>(num)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))) + <span class="hljs-string">&#x27;|&#x27;</span><br>slotmachine_menu = <span class="hljs-string">&#x27;[$] - $$$SPIN$$$\n&#x27;</span><br><span class="hljs-built_in">print</span>(tornado_banner)<br><span class="hljs-built_in">print</span>(casino_banner)<br><span class="hljs-built_in">print</span>(tornado_art)<br>user_balance = <span class="hljs-number">10</span><span class="hljs-comment">#$</span><br>promo = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    choice1 = <span class="hljs-built_in">input</span>(welcome)<br>    <span class="hljs-keyword">if</span> choice1 == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;$$$Its point of no return!$$$\n$$$     all or nothing    $$$\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your balance: <span class="hljs-subst">&#123;user_balance&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> user_balance &gt; <span class="hljs-number">0</span>:<br>                spin = <span class="hljs-built_in">input</span>(slotmachine_menu)<br>                <span class="hljs-keyword">if</span> spin == <span class="hljs-string">&#x27;$&#x27;</span>:<br>                    state = getrandbits(<span class="hljs-number">32</span>)<br>                    <span class="hljs-keyword">try</span>:<br>                        pff_try = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;It will be: &#x27;</span>), <span class="hljs-number">16</span>)<br>                    <span class="hljs-keyword">except</span>:<br>                        exit(<span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">if</span> pff_try == state:<br>                        <span class="hljs-built_in">print</span>(sltmchn_wndw(state))<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;OMGWTF$$$$$$$$$$$$&#x27;</span>)<br>                        <span class="hljs-built_in">print</span>(flag)<br>                        exit(<span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(sltmchn_wndw(state))<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Nice try!&#x27;</span>)<br>                        user_balance -= <span class="hljs-number">1</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Your balance: <span class="hljs-subst">&#123;user_balance&#125;</span>&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    exit(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sorry!&#x27;</span>)<br>                exit(<span class="hljs-number">0</span>)                   <br>    <span class="hljs-keyword">elif</span> choice1 == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> promo:<br>            promo = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your promocode: &#x27;</span>)<br>            <span class="hljs-keyword">if</span> promo == <span class="hljs-string">&#x27;b33_1_4m_b3333&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Great!&#x27;</span>)<br>                user_balance += <span class="hljs-number">1000</span><span class="hljs-comment">#$</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Only once!&#x27;</span>)      <br>    <span class="hljs-keyword">elif</span> choice1 == <span class="hljs-string">&#x27;3&#x27;</span>:<br>        exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>观察加密脚本可以发现，很容易地发现<code>getrandbits(32)</code>。而根据之前做题经验，这个就是让你预测MT19937。</p><p>首先上一下自己做的一个MT19937的工具包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        <span class="hljs-variable language_">self</span>.mt[<span class="hljs-number">0</span>] = seed<br>        <span class="hljs-variable language_">self</span>.mti = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i] = _int32(<span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] ^ <span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mti == <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.twist()<br>        y = <span class="hljs-variable language_">self</span>.mt[<span class="hljs-variable language_">self</span>.mti]<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.mti = (<span class="hljs-variable language_">self</span>.mti + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> _int32(y)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>            y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>            <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &gt;&gt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">y</span>):<br>    y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>    y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">y</span>):<br>    y = inverse_right(y,<span class="hljs-number">18</span>)<br>    y = inverse_left(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    y = inverse_left(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    y = inverse_right(y,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br></code></pre></td></tr></table></figure><p>然后我们根据题目的提示，获取$624$个内部状态就可以预测随机数了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> MT19937 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> mt19937predictor <span class="hljs-keyword">import</span> MT19937Predictor<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getnumber</span>(<span class="hljs-params">s29</span>):<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s29)==<span class="hljs-number">29</span><br>s=s29[<span class="hljs-number">13</span>]+s29[<span class="hljs-number">15</span>]+s29[<span class="hljs-number">17</span>]+s29[<span class="hljs-number">19</span>]+s29[<span class="hljs-number">21</span>]+s29[<span class="hljs-number">23</span>]+s29[<span class="hljs-number">25</span>]+s29[<span class="hljs-number">27</span>]<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>)<br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">29601</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;[3] - Exit&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;Enter your promocode:&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;b33_1_4m_b3333&#x27;</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;[3] - Exit&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>S=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">31</span>==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(i)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;N$$$&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;$&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;10000000&#x27;</span>)<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>str2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>S.append(getnumber(str2))<br>Q=[]<br>R=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> S:<br>Q.append(recover(i))<br>B=MT19937(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Q)==<span class="hljs-number">624</span><br>B.mt=Q<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(i,<span class="hljs-built_in">hex</span>(extract_number(B.mt[i])))<br>predictor = MT19937Predictor()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>predictor.setrandbits(S[i],<span class="hljs-number">32</span>)<br>Y2=predictor.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ans=&#x27;</span>,<span class="hljs-built_in">hex</span>(Y2))<br>sh.interactive()<br><br></code></pre></td></tr></table></figure><p>当然，也可以使用专门的包用来预测，这个包网上可以通过pip下载下来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> mt19937predictor <span class="hljs-keyword">import</span> MT19937Predictor<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getnumber</span>(<span class="hljs-params">s29</span>):<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s29)==<span class="hljs-number">29</span><br>s=s29[<span class="hljs-number">13</span>]+s29[<span class="hljs-number">15</span>]+s29[<span class="hljs-number">17</span>]+s29[<span class="hljs-number">19</span>]+s29[<span class="hljs-number">21</span>]+s29[<span class="hljs-number">23</span>]+s29[<span class="hljs-number">25</span>]+s29[<span class="hljs-number">27</span>]<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>)<br>sh=remote(<span class="hljs-string">&quot;node3.buuoj.cn&quot;</span>,<span class="hljs-number">29601</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;[3] - Exit&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;Enter your promocode:&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;b33_1_4m_b3333&#x27;</span>)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;[3] - Exit&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>S=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">31</span>==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(i)<br>str1=sh.recvuntil(<span class="hljs-string">&#x27;N$$$&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;$&#x27;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;10000000&#x27;</span>)<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>str2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>S.append(getnumber(str2))<br>predictor = MT19937Predictor()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>predictor.setrandbits(S[i],<span class="hljs-number">32</span>)<br>ans=predictor.getrandbits(<span class="hljs-number">32</span>)<br>sh.sendline(<span class="hljs-string">&#x27;$&#x27;</span>)<br>sh.sendline(<span class="hljs-built_in">hex</span>(ans)[<span class="hljs-number">2</span>:])<br>sh.interactive()<br></code></pre></td></tr></table></figure><h2 id="5-羊城杯-2020-RRRRRRSA"><a href="#5-羊城杯-2020-RRRRRRSA" class="headerlink" title="5.[羊城杯 2020]RRRRRRSA"></a>5.[羊城杯 2020]RRRRRRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">&#x27;GWHT&#123;************&#125;&#x27;</span><br>flag1 = flag[:<span class="hljs-number">19</span>].encode()<br>flag2 = flag[<span class="hljs-number">19</span>:].encode()<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br>P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)<br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)<br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br>E1 = getPrime(<span class="hljs-number">1024</span>)<br>E2 = sympy.nextprime(E1)<br>m1 = bytes_to_long(flag1)<br>m2 = bytes_to_long(flag2)<br>c1 = <span class="hljs-built_in">pow</span>(m1, E1, N1)<br>c2 = <span class="hljs-built_in">pow</span>(m2, E2, N2)<br>output = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;secret&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;N1=&#x27;</span> + <span class="hljs-built_in">str</span>(N1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;c1=&#x27;</span> + <span class="hljs-built_in">str</span>(c1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;E1=&#x27;</span> + <span class="hljs-built_in">str</span>(E1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;N2=&#x27;</span> + <span class="hljs-built_in">str</span>(N2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;c2=&#x27;</span> + <span class="hljs-built_in">str</span>(c2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;E2=&#x27;</span> + <span class="hljs-built_in">str</span>(E2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.close()<br></code></pre></td></tr></table></figure><p>这道题中，$n$具有$n&#x3D;p^2q$的形式，并且构成$n_1,n_2$中的$p,q$都是非常非常接近的（就是相邻两个素数的关系）不过，$p$和$q$的位数相差较大。</p><hr><h3 id="Insert：关于连分数逼近的问题"><a href="#Insert：关于连分数逼近的问题" class="headerlink" title="Insert：关于连分数逼近的问题"></a>Insert：关于连分数逼近的问题</h3><p>在之前RSA的笔记中，我们使用的WienerAttack的原理就是连分数逼近，所以我们这里补充介绍一下勒让德定理：、</p><p><strong>勒让德定理</strong>：假设$x\in R_+$，那么在$x$的连分数逼近展开中，如果有$|x-\dfrac a b|&lt;\dfrac 1 {2b^2}$，其中$\gcd (a,b)&#x3D;1$，那么可以认为$\dfrac ab$是$x$的连分数展开中的其中一项的值。</p><p>我们来回顾一下RSA中wienerattack的过程：</p><p>由$ed\equiv 1 \pmod \phi$，我们可以得到$ed-k\phi&#x3D;1$。两边同时除以$d\phi$，那么就有$|\dfrac e \phi-\dfrac k d |&#x3D;\dfrac 1 {d\phi}$。</p><p>又因为$n-\phi&#x3D;p+q-1&lt;3\sqrt n$。</p><p>所以根据勒让德定理，我们需要证明$|\dfrac e \phi-\dfrac k d |&lt;\dfrac 1 {2d^2}$，下面简单地给出证明：：</p><p>左边分式通分，得<br>$$<br>|\dfrac {ed-nk}{dn}|<br>$$<br>分母凑一个$k\phi$，可以有<br>$$<br>|\dfrac {ed-k\phi-nk+k\phi}{dn}|<br>$$<br>又因为$ed-k\phi&#x3D;1$，那么分子化简得<br>$$<br>|\dfrac {1-k(n-\phi)}{dn}|<br>$$<br>这个数字是小于$\dfrac{3k\sqrt n}{dn}&#x3D;\dfrac{3k}{d\sqrt n}$。因此我们根据前面的几个条件，可以推出最后的结果小于$\dfrac{1}{2d^2}$。所以，在整个连分数逼近的过程中，中间的结果必然准确覆盖了$\dfrac k d$的值。</p><hr><p>回到上面这道题，由于$p$是$1024$位，$p^2$是$2048$位，$q$是$512$位，比$2048$位小得多。而$p_1,p_2$、$q_1,q_2$是两组非常接近的数字，考虑到$p$更大，因此，当我们对$\dfrac {n_1} {n_2}$进行连分数逼近时，一定会准确覆盖到$\dfrac{p_1^2}{p_2^2}$或者$\dfrac {q_1}{q_2}$。</p><p>下面上一下解题过程,其中<code>solve</code>函数是连分数展开的过程，<code>simplify</code>函数和<code>getmidfrac</code>可以计算<code>g</code>数组中所涉及的所有的分数，以分子和分母形成的数对形式表现。最后枚举这个数对即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">a, b</span>):<br>    g=[]<br>    <span class="hljs-keyword">while</span>(a!=<span class="hljs-number">1</span>):<br>        g.append(a//b)<br>        a,b=b,a%b<br>    g.append(b)<br>    <span class="hljs-keyword">return</span> g<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">simplify</span>(<span class="hljs-params">x</span>):<br>    n,d=<span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x[::-<span class="hljs-number">1</span>]:<br>        n,d=d,i*d+n<br>    <span class="hljs-keyword">return</span> n,d<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getmidfrac</span>(<span class="hljs-params">x</span>):<br>    r=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(x)):<br>        r.append(simplify(x[:i]))<br>    <span class="hljs-keyword">return</span> r<br>g=solve(N1,N2)<br>g=getmidfrac(g)<br>q1,q2=<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> (a,b) <span class="hljs-keyword">in</span> g:<br>    <span class="hljs-keyword">if</span> b==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> N1%b==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> b-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b-N1:<br>        q1=b<br>        q2=a<br>        <span class="hljs-keyword">break</span><br>p1,p2=iroot(N1//q1,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>],iroot(N2//q2,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>phi1,phi2=p1*(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>),p2*(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1,d2=inverse(E1,phi1),inverse(E2,phi2)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c1,d1,N1)))<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c2,d2,N2)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HgameDiv1,2</title>
    <link href="/2021/02/14/HgameDiv1/"/>
    <url>/2021/02/14/HgameDiv1/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame-Div-1-2题解"><a href="#Hgame-Div-1-2题解" class="headerlink" title="Hgame Div 1,2题解"></a>Hgame Div 1,2题解</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>终于在接触CTF差不多大约5个月后，尝试打了一下杭州电子科大的CTF招新题（<del>总体感觉只有4个字：我太菜了</del></p><p>只做了密码学，其他的题目不看，<del>因为不是我研究的内容（</del></p><p><del><code>#define huangx607087 feiwu</code></del></p><p><strong>Update 2.15</strong></p><p><del>本以为21Feb2会先出的，结果发展到了瓶颈期</del>，21Feb2原计划是2.12或者2.13发布，结果到了2.15都没能发布（因为只刷了4题，没刷满5题），我是fw（</p><h2 id="1-组合密码"><a href="#1-组合密码" class="headerlink" title="1.组合密码"></a>1.组合密码</h2><p>首先拿到的附件很简单，就一个txt文件，里面不出意外应该是写的摩尔斯电码。随便在网上找一个解密网站解密，得到了一串数字，看到所有的数字都在$40$到$128$之间，应该是ASCII码，转换成字符，发现最后是两个等于号，果断Base64解密。</p><p>Base64解密之后，我们得到了这样一串字符：<code>Vigenere +Liki:&#125;VkmvJb!1XtAxe!hpM1&#123;M+9xqzrTM_Nj~cRg4x</code></p><p>看来应该是维吉尼亚密码，用密钥<code>Liki</code>进行解密，然后就得到了这样的内容：<code>&#125;KccnYt!1NlPpu!zeE1&#123;C+9pfrhLB_Fz~uGy4n</code></p><p>感觉没什么思路，不过看到两个大括号的顺序是乱的，目测应该是栅栏密码，一个一个调，发现栅栏数量是$6$的时候，比较符合flag的格式：<code>&#125;!!Ch~K1z+LucNe9BGclEp_ynP1fF4Yp&#123;rzntu</code>。</p><p>不难发现最后$5$个字母对应的明文应该是<code>emagh</code>，符合凯撒密码的样式。因此直接找一个凯撒密码解密的网站即可得到最终的结果，最后倒过来提交以下就行了。</p><h2 id="2-对称之美"><a href="#2-对称之美" class="headerlink" title="2.对称之美"></a>2.对称之美</h2><h3 id="PART-1-阅读题目"><a href="#PART-1-阅读题目" class="headerlink" title="PART 1 阅读题目"></a>PART 1 阅读题目</h3><p>首先先来看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG<br>key = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="hljs-number">16</span>))<br>cipher = <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">ord</span>(m)^<span class="hljs-built_in">ord</span>(k) <span class="hljs-keyword">for</span> m, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(FLAG, itertools.cycle(key))])<br><span class="hljs-built_in">print</span>(cipher)<br><span class="hljs-comment">#cipher=*</span><br></code></pre></td></tr></table></figure><p>题目给出了密钥的长度是$16$，然后最终结果就是将flag和密钥异或得出来的值。其中密钥里只含有A-Z,a-z和0-9，密文的长度是$1069$</p><h3 id="PART-2-拆解密文，计算方差"><a href="#PART-2-拆解密文，计算方差" class="headerlink" title="PART 2 拆解密文，计算方差"></a>PART 2 拆解密文，计算方差</h3><p>发现密钥的长度是$16$，密文很长，不出意外应该是通过字母频率攻击得到的。所以我们可以编写C++程序，将密文中的第$1,17,33…$位，$2,18,34,…$位进行逐个拆解，然后每个文件都爆破一下，计算爆破时的方差即可。</p><p>拆解密文的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10000</span>];<br><span class="hljs-type">char</span> s[<span class="hljs-number">40</span>]=<span class="hljs-string">&quot;Cip00.txt&quot;</span>;<br><span class="hljs-type">int</span> f[<span class="hljs-number">18</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">generate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>s[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x/<span class="hljs-number">10</span>;<br>s[<span class="hljs-number">4</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x%<span class="hljs-number">10</span>;<br>FILE *gp=<span class="hljs-built_in">fopen</span>(s,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=x;i&lt;=<span class="hljs-number">1069</span>;i+=<span class="hljs-number">16</span>)<br><span class="hljs-built_in">fprintf</span>(gp,<span class="hljs-string">&quot;%d\n&quot;</span>,a[i]);<br><span class="hljs-built_in">fclose</span>(gp);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>FILE *fp;<br><span class="hljs-type">int</span> i,j;<br>fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;cipher.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1069</span>;i++) <br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">16</span>;i++)<br><span class="hljs-built_in">generate</span>(i);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>然后是爆破密钥的代码，其中loss是计算的方差，初始化函数里有每个字母出现的概率，比如<code>A</code>出现的概率是$8.15\text{percent}$(注：以后博客中百分号用percent单词表示，因为上传博客时有百分号的地方会出错)，那么<code>pos[0]=8.15</code></p><p>我们把每次爆破出的概率放到<code>cul</code>数组中，最后的方差$ V&#x3D;\sum_{i&#x3D;0}^{25}(\mathrm{pos}[i]-\mathrm{cul}[i])^2 $。</p><p>这个方法也很巧妙，因为这个代码可以通过修改字符数组的方式 ，连续读取$16$个文件，并对应输出$16$个文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">asdf</span>&#123;<span class="hljs-type">char</span> chr;<span class="hljs-type">double</span> loss;<br>&#125;data[<span class="hljs-number">95</span>];<br><span class="hljs-type">double</span> pos[<span class="hljs-number">26</span>],cul[<span class="hljs-number">26</span>],K=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> files[<span class="hljs-number">26</span>]=<span class="hljs-string">&quot;Cip00.txt&quot;</span>;<br><span class="hljs-type">char</span> outfiles[<span class="hljs-number">26</span>]=<span class="hljs-string">&quot;Res00.txt&quot;</span>;<br><span class="hljs-type">char</span> Table[<span class="hljs-number">90</span>]=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">45000</span>],b[<span class="hljs-number">45000</span>],n=<span class="hljs-number">0</span>; <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(asdf a,asdf b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a.loss&lt;b.loss;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(cul,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(cul));<br><span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br><span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<br>n=<span class="hljs-number">0</span>;K=<span class="hljs-number">0</span>;<br>files[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x/<span class="hljs-number">10</span>;<br>files[<span class="hljs-number">4</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x%<span class="hljs-number">10</span>;<br>outfiles[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x/<span class="hljs-number">10</span>;<br>outfiles[<span class="hljs-number">4</span>]=<span class="hljs-string">&#x27;0&#x27;</span>+x%<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> i,j;<br>pos[<span class="hljs-number">0</span>]=<span class="hljs-number">8.15</span>,pos[<span class="hljs-number">1</span>]=<span class="hljs-number">1.44</span>,pos[<span class="hljs-number">2</span>]=<span class="hljs-number">2.76</span>,pos[<span class="hljs-number">3</span>]=<span class="hljs-number">3.79</span>;<br>pos[<span class="hljs-number">4</span>]=<span class="hljs-number">13.11</span>,pos[<span class="hljs-number">5</span>]=<span class="hljs-number">2.92</span>,pos[<span class="hljs-number">6</span>]=<span class="hljs-number">1.99</span>,pos[<span class="hljs-number">7</span>]=<span class="hljs-number">5.26</span>;<br>pos[<span class="hljs-number">8</span>]=<span class="hljs-number">6.35</span>,pos[<span class="hljs-number">9</span>]=<span class="hljs-number">0.13</span>,pos[<span class="hljs-number">10</span>]=<span class="hljs-number">0.42</span>,pos[<span class="hljs-number">11</span>]=<span class="hljs-number">3.39</span>;<br>pos[<span class="hljs-number">12</span>]=<span class="hljs-number">2.54</span>,pos[<span class="hljs-number">13</span>]=<span class="hljs-number">7.1</span>,pos[<span class="hljs-number">14</span>]=<span class="hljs-number">8</span>,pos[<span class="hljs-number">15</span>]=<span class="hljs-number">1.98</span>;<br>pos[<span class="hljs-number">16</span>]=<span class="hljs-number">0.12</span>,pos[<span class="hljs-number">17</span>]=<span class="hljs-number">6.83</span>,pos[<span class="hljs-number">18</span>]=<span class="hljs-number">6.1</span>,pos[<span class="hljs-number">19</span>]=<span class="hljs-number">10.47</span>;<br>pos[<span class="hljs-number">20</span>]=<span class="hljs-number">2.46</span>,pos[<span class="hljs-number">21</span>]=<span class="hljs-number">0.92</span>,pos[<span class="hljs-number">22</span>]=<span class="hljs-number">1.54</span>,pos[<span class="hljs-number">23</span>]=<span class="hljs-number">0.17</span>;<br>pos[<span class="hljs-number">24</span>]=<span class="hljs-number">1.98</span>,pos[<span class="hljs-number">25</span>]=<span class="hljs-number">0.08</span>; <br>FILE *fp=<span class="hljs-built_in">fopen</span>(files,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[++n]));<br>n--;<br><span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">culcloss</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">memset</span>(cul,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(cul));<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">double</span> V=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;b[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>cul[b[i]<span class="hljs-number">-65</span>]++;<br><span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;b[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)<br>cul[b[i]<span class="hljs-number">-97</span>]++;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>V+=(pos[i]-cul[i])*(pos[i]-cul[i])*<span class="hljs-number">100</span>/K;<br><span class="hljs-keyword">return</span> V;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>K=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(b));<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>b[i]=a[i]^Table[x];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;b[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>||b[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;b[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>++K;<br>data[x].chr=Table[x];<br>data[x].loss=<span class="hljs-built_in">culcloss</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">16</span>;i++)<br>&#123;<br><span class="hljs-built_in">init</span>(i);<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">strlen</span>(Table);j++)<br><span class="hljs-built_in">solve</span>(j);<br><span class="hljs-built_in">sort</span>(data,data+<span class="hljs-built_in">strlen</span>(Table),cmp);<br>FILE *gp=<span class="hljs-built_in">fopen</span>(outfiles,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">strlen</span>(Table);j++)<br><span class="hljs-built_in">fprintf</span>(gp,<span class="hljs-string">&quot;chr=%c  loss=%.4lf\n&quot;</span>,data[j].chr,data[j].loss);<br><span class="hljs-built_in">fclose</span>(gp);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PART-3-最后调整，得出答案"><a href="#PART-3-最后调整，得出答案" class="headerlink" title="PART 3 最后调整，得出答案"></a>PART 3 最后调整，得出答案</h3><p>我们来看看第$1$组输出的前$6$行输出和第$4$组输出的前$6$行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Res01.txt                             _ [] X<br>____________________________________________<br><span class="hljs-attribute">chr</span>=8  <span class="hljs-attribute">loss</span>=507.0642<br><span class="hljs-attribute">chr</span>=9  <span class="hljs-attribute">loss</span>=748.7868<br><span class="hljs-attribute">chr</span>=2  <span class="hljs-attribute">loss</span>=1161.6835<br><span class="hljs-attribute">chr</span>=3  <span class="hljs-attribute">loss</span>=1385.8863<br><span class="hljs-attribute">chr</span>=4  <span class="hljs-attribute">loss</span>=1426.1932<br><span class="hljs-attribute">chr</span>=5  <span class="hljs-attribute">loss</span>=1430.1443<br><br>Res04.txt                             _ [] X<br>_____________________________________________<br><span class="hljs-attribute">chr</span>=e  <span class="hljs-attribute">loss</span>=418.8335<br><span class="hljs-attribute">chr</span>=E  <span class="hljs-attribute">loss</span>=418.8335<br><span class="hljs-attribute">chr</span>=c  <span class="hljs-attribute">loss</span>=755.6027<br><span class="hljs-attribute">chr</span>=C  <span class="hljs-attribute">loss</span>=755.6027<br><span class="hljs-attribute">chr</span>=d  <span class="hljs-attribute">loss</span>=844.2964<br><span class="hljs-attribute">chr</span>=D  <span class="hljs-attribute">loss</span>=844.2964<br></code></pre></td></tr></table></figure><p>很显然，我们可以看出，第一组输出loss最小的是字符$8$，所以密钥应该是以$8$开头的，不过问题来了，每组输出对应的大小写字母都是一致的，也就是说，第$4$组输出我们无法判断E究竟是大写还是小写。</p><p>我们这边可以假设所有的字母都是大写字母，然后我们可以尝试解密。根据我解出的结果是<code>key=b&#39;89QEUTFDJAECOLTK&#39;</code></p><p>然后带入密文进行异或解密，前40位是这样的：<code>\nSYmmetry\x00In\x00ARt iS when THe\x00ELemeNts of</code></p><p>可以看到里面有<code>\x00</code>，对应的ASCII码是$0$，而如果我们将对应的部分改成小写字母，那么结果应该是<code>\x20</code>，也就是空格了。</p><p>修改之后，我们可以继续发现很多地方的大小写字母杂乱，看到输出实际上有英文句号的，那么可以推出只有一句话的开头才能用大写字母，所以不对的地方密钥前给成小写字母，最终我们可以得到正确的密钥是<code>b&#39;89qEUTFDJaeColtK&#39;</code></p><p>最后我们就可以得出答案了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> cipher<br>key=<span class="hljs-string">b&#x27;89qEUTFDJaeColtK&#x27;</span><br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    s+=<span class="hljs-built_in">chr</span>(key[i%<span class="hljs-built_in">len</span>(key)]^cipher[i])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Symmetry in art is when the elements of </span><br><span class="hljs-string">a painting or drawing balance each other </span><br><span class="hljs-string">out. This could be the objects themselves, </span><br><span class="hljs-string">but it can also relate to colors and </span><br><span class="hljs-string">other compositional techniques.</span><br><span class="hljs-string">You may not realize it, but your brain </span><br><span class="hljs-string">is busy working behind the scenes to seek </span><br><span class="hljs-string">out symmetry when you look at a painting. </span><br><span class="hljs-string">There are several reasons for this. The </span><br><span class="hljs-string">first is that we&#x27;re hard-wired to look for </span><br><span class="hljs-string">it. Our ancient ancestors may not have had </span><br><span class="hljs-string">a name for it, but they knew that their </span><br><span class="hljs-string">own bodies were basically symmetrical, as </span><br><span class="hljs-string">were those of potential predators or prey. </span><br><span class="hljs-string">Therefore, this came in handy whether </span><br><span class="hljs-string">choosing a mate, catching dinner or </span><br><span class="hljs-string">avoiding being on the menu of a snarling, </span><br><span class="hljs-string">hungry pack of wolves or bears!</span><br><span class="hljs-string">Take a look at your face in the mirror </span><br><span class="hljs-string">and imagine a line straight down the </span><br><span class="hljs-string">middle. You&#x27;ll see both sides of your </span><br><span class="hljs-string">face are pretty symmetrical. This is </span><br><span class="hljs-string">known as bilateral symmetry and it&#x27;s </span><br><span class="hljs-string">where both sides either side of this </span><br><span class="hljs-string">dividing line appear more or less the same.</span><br><span class="hljs-string">So here is the flag: </span><br><span class="hljs-string">hgame&#123;X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-Transformer"><a href="#3-Transformer" class="headerlink" title="3.Transformer"></a>3.Transformer</h2><p>题目意思很简单，一个替换密码，给出了$240$个片段和打乱的密文。不过虽然是打乱的，但是解压后我们只需要在文件夹中按大小排序，就可以做到基本对应了（因为替换密码加密后长度不变。，最短的是$25$字节的，一共有$7$个，所以我们只需要阅读$7$个即可。</p><p>看到flag文件中有疑似flag的内容，很明显，应该果断替换，盲猜最前面的内容是<code>hgame</code>，其他几个未知的字符也可以加进去，最后得到了这样的内容：<code>hgame&#123;ea5y_f0r_fun^3nd&amp;he11o_&#125;</code></p><p>不过最后提交之后一直不对，看来还少些什么，回顾密文，我们决定把给出的这段话破译掉</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Tqh ufso mnfcyh eaikauh kdkoht qpk aiud zkhc xpkkranc uayfi kfieh <span class="hljs-number">2003</span>, oqh xpkkranc fk <span class="hljs-string">&quot;qypth&#123;hp5d_s0n_szi^3ic&amp;qh11a_&#125;&quot;</span>,Dai<span class="hljs-comment">&#x27;o sanyho oa pcc oqh dhpn po oqh hic.</span><br></code></pre></td></tr></table></figure><p>果然，破译后有了大发现：最后的一句话内容是<code>to add the year at the end</code>，那么后面应该加个$2021$，最后提交内容是 </p><p><code>hgame&#123;ea5y_f0r_fun^3nd&amp;he11o_2021&#125;</code>，果然对了。</p><h2 id="4-signin"><a href="#4-signin" class="headerlink" title="4.signin"></a>4.signin</h2><p>先看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> FLAG<br>m = s2n(FLAG)<br>a = number.getPrime(<span class="hljs-number">1024</span>)<br>p = number.getPrime(<span class="hljs-number">1024</span>)<br>c = a ** p * m % p<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(p))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c))<br></code></pre></td></tr></table></figure><p>题目最后给出了$a,p,c$的值。其中$a^pm\equiv c\pmod p$。</p><p>根据费马小定理可知，$a^p\equiv a\pmod p$，因此原式就是$am\equiv c \pmod p$，故$a^{-1}c\equiv m \pmod p$，我们只需要用内置函数求个逆元就结束了。</p><h2 id="5-WhitegiveRSA"><a href="#5-WhitegiveRSA" class="headerlink" title="5.WhitegiveRSA"></a>5.WhitegiveRSA</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">882564595536224140639625987659416029426239230804614613279163</span><br><span class="hljs-attribute">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">65537</span><br><span class="hljs-attribute">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">747831491353896780365654517748216624798517769637260742155527</span><br></code></pre></td></tr></table></figure><p>题目描述得很简单。看到$N$并不是特别长，直接放Sagemath分解就得到<br>$$<br>N&#x3D;857504083339712752489993810777 ×1029224947942998075080348647219<br>$$<br>然后就是正常的因式分解了。</p><h2 id="6-gcd-or-more"><a href="#6-gcd-or-more" class="headerlink" title="6.gcd or more?"></a>6.gcd or more?</h2><p>这道题是RSA，$e&#x3D;2$的情景，首先想到的就是枚举$m&#x3D;kn+c$，不过貌似不可行</p><p>$e&#x3D;2$时，我们可以口算出$x^2\equiv 1 \pmod p$的解是$1$和$p-1$。然后Sagemath开根得出一个特解。</p><p>最后就是参考<strong>RSA Notes 3</strong>的内容，$e,\phi$不互素的情况的解法。</p><h2 id="7-The-Password"><a href="#7-The-Password" class="headerlink" title="7.The Password"></a>7.The Password</h2><p>题目的具体要求说的很明白了，就是求最后的$x$。</p><p><img src="/2021/02/14/HgameDiv1/1.png" alt="1"></p><p>首先，最容易想到的，就是异或运算的交换性和相同的数异或等于$0$的性质，因此我们可以把所有的$y$与$n$先进行异或更新下。</p><p>刚开始拿到题目的时候，以为是梅森旋转中的移位，不过最后发现移位是循环移位。</p><p>考虑到异或是二进制里的加，加上近期自己正在学格密码，因此想到了矩阵运算。</p><p><img src="/2021/02/14/HgameDiv1/2.png" alt="2"></p><p>验证了一下，果然符合循环移位异或的结果。那么我们就可以构建矩阵来解决问题了，附上sagemath中的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">y,n,l,r</span>):<br>    y^^=n<br>    M,v=[],[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        M.append([<span class="hljs-number">0</span>]*<span class="hljs-number">64</span>)<br>        v.append([<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        M[i][i],M[i][(i-l)%<span class="hljs-number">64</span>],M[i][(i+r)%<span class="hljs-number">64</span>]=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>    M=matrix(GF(<span class="hljs-number">2</span>),M)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        v[i]=y&amp;<span class="hljs-number">1</span><br>        y&gt;&gt;=<span class="hljs-number">1</span><br>    v=vector(GF(<span class="hljs-number">2</span>),v)<br>    M=M^-<span class="hljs-number">1</span><br>    G=vector(ZZ,M*v)<br>    s=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        s+=(G[i]&lt;&lt;i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s))<br><span class="hljs-comment">#------main-below------#</span><br>Y=[<span class="hljs-number">15789597796041222200</span>,<span class="hljs-number">8279663441787235887</span>,<span class="hljs-number">9666438290109535850</span>,<span class="hljs-number">10529571502219113153</span>,<span class="hljs-number">8020289479524135048</span>,<span class="hljs-number">10914636017953100490</span>,<span class="hljs-number">4622436850708129231</span>]<br>N=[<span class="hljs-number">14750142427529922</span>,<span class="hljs-number">2802568775308984</span>,<span class="hljs-number">15697145971486341</span>,<span class="hljs-number">9110411034859362</span>,<span class="hljs-number">4092084344173014</span>,<span class="hljs-number">2242282628961085</span>,<span class="hljs-number">10750832281632461</span>]<br>L=[<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">13</span>,<span class="hljs-number">64</span>-<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>]<br>R=[<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    solve(Y[i],N[i],L[i],R[i])<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x6867616d657b6c</span><br><span class="hljs-string">0x316e6530725f61</span><br><span class="hljs-string">0x31676562723026</span><br><span class="hljs-string">0x697340316d706f</span><br><span class="hljs-string">0x7231306e315e31</span><br><span class="hljs-string">0x6e246372797074</span><br><span class="hljs-string">0x6f7d</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>flag也就得出来了。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Feb1</title>
    <link href="/2021/02/09/21Feb1/"/>
    <url>/2021/02/09/21Feb1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087开学前的切题1"><a href="#huangx607087开学前的切题1" class="headerlink" title="huangx607087开学前的切题1"></a>huangx607087开学前的切题1</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>今天BUUCTF上到了2500分，Crypto榜，会解比较简单的格密码学的题目了。同时椭圆曲线的内容也看了一些。BUU上刷了几题，不过因为是深水区，都是非常难的大题目，看来自己CTF的水平还是有一定差距的（</p><h2 id="1-CISCN2018-sm"><a href="#1-CISCN2018-sm" class="headerlink" title="1.[CISCN2018]sm"></a>1.[CISCN2018]sm</h2><p>按照惯例应该先阅读一下题目，可以看出BUUCTF的深水区的题目都是非常难的，代码长度也相比于以前增加了很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,long_to_bytes,bytes_to_long<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen512num</span>():<br>    order=[]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(order)!=<span class="hljs-number">512</span>:<br>        tmp=randint(<span class="hljs-number">1</span>,<span class="hljs-number">512</span>)<br>        <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> order:<br>            order.append(tmp)<br>    ps=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        p=getPrime(<span class="hljs-number">512</span>-order[i]+<span class="hljs-number">10</span>)<br>        pre=<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:][<span class="hljs-number">0</span>:(<span class="hljs-number">512</span>-order[i])]+<span class="hljs-string">&quot;1&quot;</span><br>        ps.append(<span class="hljs-built_in">int</span>(pre+<span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">512</span>-<span class="hljs-built_in">len</span>(pre)),<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> ps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    choose=getPrime(<span class="hljs-number">512</span>)<br>    ps=gen512num()<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;gen over&quot;</span><br>    bchoose=<span class="hljs-built_in">bin</span>(choose)[<span class="hljs-number">2</span>:]<br>    r=<span class="hljs-number">0</span><br>    bchoose = <span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">512</span>-<span class="hljs-built_in">len</span>(bchoose))+bchoose<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        <span class="hljs-keyword">if</span> bchoose[i]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>            r=r^ps[i]<br>    flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()<br>    key=long_to_bytes(<span class="hljs-built_in">int</span>(hashlib.md5(long_to_bytes(choose)).hexdigest(),<span class="hljs-number">16</span>))<br>    aes_obj = AES.new(key, AES.MODE_ECB)<br>    ef=aes_obj.encrypt(flag).encode(<span class="hljs-string">&quot;base64&quot;</span>)<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>).write(<span class="hljs-built_in">str</span>(r))<br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(ef)<br>    gg=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ps:<br>        gg+=<span class="hljs-built_in">str</span>(p)+<span class="hljs-string">&quot;\n&quot;</span><br>    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ps&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>).write(gg)<br>run()<br></code></pre></td></tr></table></figure><p>题目中给出了$r$这个数字的值，还给出了ps这个序列，当然还有加密后的flag。</p><p>题目的意思很简单，就是生成了一个素数$p$，然后把素数$p$的二进制表示出来，并且生成了$512$个数字。如果$p$的那个比特位是$1$那就把$r$异或一下ps序列中的值。最后，$r$的值就是对应$p$的$1$比特位上的那个pr值得异或和。</p><p>因此，我们首要的任务就是求$p$。而想要求$p$，就需要求出$r$是哪些pr值的和。</p><p>打开给出的pr，简单扫一眼，发现全是偶数<del>（实际上仔细看的话，里面有且仅有一个奇数）</del>，说明了pr生成有玄机。再看一眼：原来生成数字的时候，先生成了一个$1$到$512$的一个排列，然后生成的那个数字，满足其最低位的那个比特位$1$，恰好是从右往左数对应排列的那个数字。</p><p>所以，我们就要计算出pr中所有数字的最低的$1$比特位所代表的数字，并对其取对数$\log_2$然后整数化。这样我们就可以得到一个$0-511$的一个序列。<del>作为一个oier，我想起了以前oi时期用上的那个lowbit函数</del>。</p><p>得到对应的$0-511$序列之后，然后我们就可以计算异或和了。</p><p>自己的exp第一部分多了两个数组：<code>endexnum,endexid</code>（注：index怕撞库函数名，因此改成了endex）用于求排列的逆，数组$s$是用于计算排列的。比如：假如<code>s[15]=334</code>，那么有<code>endexid[334]=15</code>，且<code>endexnum[334]</code>对应的那个数的lowbit值为$15$。这样可以避免后期用for循环查找，比较省时间，<del>虽然CTF对于时间的限制没有OI那么严格</del>。</p><p>因此，我们可以从$0$开始，判断$r$是否和$\log_2 \mathrm{lowbit}(x)&#x3D;0$的那个$x$值异或过了。根据异或计算的性质，我们可以很快完成后面的计算过程。</p><p>很快我们就解出了一个$p$，看到它是奇数，验证了一下，发现竟然不是素数。回顾自己的解题过程，发现异或开始时对应的$p$值是最高位，而我却把它当成了最低位计算。调整后，发现重新结出来的$p$是个素数，那么考虑到大数中出现素数的概率并不高，因此可以认为是正确的。</p><p>最后就是正常的解密，直接模仿题目给的内容即可。</p><p>个人做题有个习惯，就是喜欢把题目给出的一些特别长的list放到另一个python文件中，在exp里面直接import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log2<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> pslist <span class="hljs-keyword">import</span> ps<br><span class="hljs-keyword">from</span> r <span class="hljs-keyword">import</span> r<br><span class="hljs-keyword">from</span> ef <span class="hljs-keyword">import</span> ef<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowbit</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x&amp;(-x)<br>s=[]<br>endexnum,endexid=[<span class="hljs-number">0</span>]*<span class="hljs-number">512</span>,[<span class="hljs-number">0</span>]*<span class="hljs-number">512</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>    s.append(<span class="hljs-built_in">int</span>(log2(lowbit(ps[i]))))<br>    endexnum[s[-<span class="hljs-number">1</span>]]=ps[i]<br>    endexid[s[-<span class="hljs-number">1</span>]]=i<br>kount=<span class="hljs-number">0</span><br>xored=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>    tmp1,tmp2=(r&gt;&gt;i)&amp;<span class="hljs-number">1</span>,(kount&gt;&gt;i)&amp;<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> tmp1^tmp2:<br>        xored.append(i)<br>        kount^=endexnum[i]<br>p=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xored:<br>    p+=(<span class="hljs-number">1</span>&lt;&lt;(<span class="hljs-number">511</span>-endexid[i]))<br>key=long_to_bytes(<span class="hljs-built_in">int</span>(md5(long_to_bytes(p)).hexdigest(),<span class="hljs-number">16</span>))<br>aes_obj = AES.new(key, AES.MODE_ECB)<br>ef=b64decode(ef)<br>ef=aes_obj.decrypt(ef)<br><span class="hljs-built_in">print</span>(ef)<br></code></pre></td></tr></table></figure><p>然后我们就拿到了最后的flag：<code>flag&#123;shemir_alotof_in_wctf_fun!&#125;</code></p><h2 id="2-Zer0pts2020-ROR"><a href="#2-Zer0pts2020-ROR" class="headerlink" title="2.[Zer0pts2020]ROR"></a>2.[Zer0pts2020]ROR</h2><p>先看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>ror = <span class="hljs-keyword">lambda</span> x, l, b: (x &gt;&gt; l) | ((x &amp; ((<span class="hljs-number">1</span>&lt;&lt;l)-<span class="hljs-number">1</span>)) &lt;&lt; (b-l))<br>N = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> base <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>]:<br>    N *= <span class="hljs-built_in">pow</span>(base, random.randint(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>))<br>e = random.randint(<span class="hljs-number">271828</span>, <span class="hljs-number">314159</span>)<br>m = <span class="hljs-built_in">int</span>.from_bytes(flag, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-keyword">assert</span> m.bit_length() &lt; N.bit_length()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m.bit_length()):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(ror(m, i, m.bit_length()), e, N))<br><br></code></pre></td></tr></table></figure><p>一开始不知道ror究竟是个什么，自己写了个程序测试了一下，原来是将$x$循环左移$l$位，总字节数为$b$。</p><p>这道题乍一看以为是个RSA加密，但是根本不知道$N,e$的值，并且仅根据题目给出来的线索是根本求不出来的。不过还是能注意到$N$是个偶数，而一个数如果对一个偶数取模，那么其奇偶性不变。而乘方运算是不改变一个数字的奇偶性的。所以这道题给出的数字中，每个数字都泄露了明文的最后一个比特位，拼接起来就是flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>s,i=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;chall.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        a=<span class="hljs-built_in">int</span>(fp.readline())&amp;<span class="hljs-number">1</span><br>        s+=(a&lt;&lt;i)<br>        i=i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(long_to_bytes(s))<br></code></pre></td></tr></table></figure><p><code>zer0pts&#123;0h_1t_l34ks_th3_l34st_s1gn1f1c4nt_b1t&#125;</code></p><h2 id="3-羊城杯-2020-Power"><a href="#3-羊城杯-2020-Power" class="headerlink" title="3.[羊城杯 2020]Power"></a>3.[羊城杯 2020]Power</h2><h3 id="PART-1"><a href="#PART-1" class="headerlink" title="PART 1"></a>PART 1</h3><p>如果说前面两道题还算比较简单的，个人认为BUUCTF上从这道题开始，就是真正的硬核了。</p><p>首先看一下题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p**<span class="hljs-number">4</span>*q<br>e = <span class="hljs-number">0x10001</span><br>phi = gmpy2.lcm(p - <span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>dp = d % (p - <span class="hljs-number">1</span>)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;dp = &quot;</span> + <span class="hljs-built_in">str</span>(dp)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(c)<br>y = <span class="hljs-comment">#略去 *</span><br>g = <span class="hljs-number">2</span><br>x = <span class="hljs-number">2019</span>*p**<span class="hljs-number">2</span> + <span class="hljs-number">2020</span>*p**<span class="hljs-number">3</span> + <span class="hljs-number">2021</span>*p**<span class="hljs-number">4</span><br>c1 = <span class="hljs-built_in">pow</span>(g, x, y)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c1 = &quot;</span> + <span class="hljs-built_in">str</span>(c1)<br><span class="hljs-comment">#最后给出了dp,c,c1的值。</span><br></code></pre></td></tr></table></figure><p>题目代码较短<del>但这并不意味着题目容易解出来</del>。大致看了一下加密过程，我们应当先设法求出$p$。（不过$N$一直是未知的）。而想要求出$p$，就要尝试求出$x$。</p><p>首先，我们就是要解决一个离散对数问题。我们发现$y$是一个素数，因此我们尝试分解$y-1$，发现其大概是$100$万的光滑。</p><p><img src="/2021/02/09/21Feb1/3.png" alt="3"></p><p>然后就可以使用我在离散对数笔记里提到的那个脚本解了。不过发现太难解了，跑了半小时，五分之一进度都没跑到。查了一下Sagemath的使用手册，发现可以这样做，用时40秒左右。</p><p><img src="/2021/02/09/21Feb1/4.png" alt="4"></p><p>这样我们就解出了$x$。</p><p>解出$x$之后，由于$2021p^4+2020p^3+2019p^2-x&#x3D;0$。这个关于$p$的函数具有单调性，因此我们可以使用OI中讲过的二分答案的方式解决。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> valc <span class="hljs-keyword">import</span> C<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2021</span>*x**<span class="hljs-number">4</span>+<span class="hljs-number">2020</span>*x**<span class="hljs-number">3</span>+<span class="hljs-number">2019</span>*x**<span class="hljs-number">2</span>-C<br>L,R=<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">5120</span><br><span class="hljs-keyword">while</span> L&lt;=R:<br>    M=(L+R)//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span>(f(M)&gt;<span class="hljs-number">0</span>):<br>        R=M<br>    <span class="hljs-keyword">elif</span>(f(M)&lt;<span class="hljs-number">0</span>):<br>        L=M<br>    <span class="hljs-keyword">elif</span>(f(M)==<span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(M)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(L),<span class="hljs-built_in">hex</span>(R))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><p>解出$p$之后，知道了$d_p$，查阅资料，可以用这样的算法解决，这个代码也是在已知$d_p,p$和$n$的结构为$p^kq$类型的求$m$方法。</p><p><img src="/2021/02/09/21Feb1/5.png" alt="5"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> p,c,dp,e<br>mp1=<span class="hljs-built_in">pow</span>(c,dp,p)<br>mp=<span class="hljs-built_in">pow</span>(c,dp-<span class="hljs-number">1</span>,p)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    x=(c-<span class="hljs-built_in">pow</span>(mp1,e))%(p**(i+<span class="hljs-number">1</span>))<br>    y=x*mp1*inverse(e,p)%(p**(i+<span class="hljs-number">1</span>))<br>    mp1+=y<br><span class="hljs-built_in">print</span>(long_to_bytes(mp1))<br></code></pre></td></tr></table></figure><h2 id="4-watevrCTF-2019-Baby-RLWE"><a href="#4-watevrCTF-2019-Baby-RLWE" class="headerlink" title="4.[watevrCTF 2019]Baby RLWE"></a>4.[watevrCTF 2019]Baby RLWE</h2><h3 id="PART-1-1"><a href="#PART-1-1" class="headerlink" title="PART 1"></a>PART 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath Ver 9.0</span><br><span class="hljs-keyword">from</span> sage.stats.distributions.discrete_gaussian_polynomial <span class="hljs-keyword">import</span> DiscreteGaussianDistributionPolynomialSampler <span class="hljs-keyword">as</span> d_gauss<br>flag = <span class="hljs-built_in">bytearray</span>(raw_input())<br>flag = <span class="hljs-built_in">list</span>(flag)<br>n = <span class="hljs-built_in">len</span>(flag)<br>q = <span class="hljs-number">40961</span><br><span class="hljs-comment">## Finite Field of size q. </span><br>F = GF(q)<br><span class="hljs-comment">## Univariate Polynomial Ring in y over Finite Field of size q</span><br>R.&lt;y&gt; = PolynomialRing(F)<br><span class="hljs-comment">## Univariate Quotient Polynomial Ring in x over Finite Field of size 40961 with modulus b^n + 1</span><br>S.&lt;x&gt; = R.quotient(y^n + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_small_poly</span>():<br>    sigma = <span class="hljs-number">2</span>/sqrt(<span class="hljs-number">2</span>*pi)<br>    d = d_gauss(S, n, sigma)<br>    <span class="hljs-keyword">return</span> d()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_large_poly</span>():<br>    <span class="hljs-keyword">return</span> S.random_element()<br><span class="hljs-comment">## Public key 1</span><br>a = gen_large_poly()<br><span class="hljs-comment">## Secret key</span><br>s = S(flag)<br>file_out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;downloads/public_keys.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;a: &quot;</span> + <span class="hljs-built_in">str</span>(a) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-comment">## Error</span><br>    e = gen_small_poly()<br>    <span class="hljs-comment">## Public key 2</span><br>    b = a*s + e<br>    file_out.write(<span class="hljs-string">&quot;b: &quot;</span> + <span class="hljs-built_in">str</span>(b) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.close()<br></code></pre></td></tr></table></figure><p>这道题直接就给出的是Sagemath里的应用。题目给出的数据是一个多项式$a(x)$，和$100$个多项式$b(x)$。仔细观察一下发现$b(x)$对应次数接近。初步判定$n&#x3D;104$。</p><p><code> gen_large_poly()</code>函数是在多项式环里随机选取一个元素，这个不难理解。不过最后不知道<code>gen_small_poly()</code>究竟讲的什么，不过我们可以把它放到Sagemath中试验一下</p><p><img src="/2021/02/09/21Feb1/1.png" alt="1"></p><p>我们发现它生成的多项式的系数基本上在$[-2,2]$之间，说明最后加上的小多项式$e(x)$的每一项基本上也都是在$[-2,2]$之间。并且发现小多项式里面$0$是可取的。说明我们有可能只需要统计一下$b(x)$中对应次数哪个系数出现得最多，就说明原来的$b(x)$的值了。</p><p>因此，我们首先统计一下给出来的$100$个$b(x)$多项式值得情况，最终可以确定真正的$b(x)$。</p><p>确定$b(x)$之后，我们就可以求出$s(x)&#x3D;a^{-1}(x)b(x)$，进而拿到了flag。</p><p><img src="/2021/02/09/21Feb1/2.png" alt="2"></p><h3 id="PART-2-扩展阅读内容"><a href="#PART-2-扩展阅读内容" class="headerlink" title="PART 2 扩展阅读内容"></a>PART 2 扩展阅读内容</h3><h4 id="1-什么是后量子密码"><a href="#1-什么是后量子密码" class="headerlink" title="(1) 什么是后量子密码"></a>(1) 什么是后量子密码</h4><p>上面这道题就这样结束了，那么RLWE究竟是个什么东西呢？来了解下:</p><p><strong>后量子密码</strong>，作为未来 5-10 年逐渐代替 RSA、Diffie-Hellman、椭圆曲线等现行公钥密码算法的密码技术，正被越来越多的人所重视。本文是后量子密码科普专栏的第三篇。文中对基于格问题 (Ring Learning with Errors, RLWE) 的后量子密钥交换算法的原理进行介绍。</p><p>因此，这个问题得原理需要用到格。关于格密码学的基础内容，可以回顾我刚写的<strong>格密码笔记1到5</strong>。</p><h4 id="2-LWE、RLWE"><a href="#2-LWE、RLWE" class="headerlink" title="(2)LWE、RLWE"></a>(2)LWE、RLWE</h4><p>1996 年Ajtai 给出了格中困难问题从最坏情况到平均情况的规约证明。密码学中的困难性需要的是在 “平均情况” 下的困难性。Ajtai 的工作使得基于格问题构造的密码方案具有了可证明安全的性质。新的格困难问题中，有几种重要的平均情况困难的问题：SIS、LWE、RLWE 及变种。在一定的参数设定下，这些问题可以归约到 GapSVP、SIVP 等格上的困难问题（即求解这些问题并不比求解格上困难问题容易）。</p><p>下面介绍这几个问题的定义：</p><p><img src="/2021/02/09/21Feb1/S1.png" alt="S1"></p><p><del>太抽象了，我看不懂</del></p><p>说的简单一点，就是写出一个形如$as+e&#x3D;b$的形式，其中$a,b$是均匀随机的内容，$s$是私钥，$e$是一个服从某种分布的随机扰动项。</p><p>一般情况下，会选取矩阵$A$，列向量$\vec s,\vec e,\vec b$。不过由于选取矩阵的开销太大，有时候还会选取多项式$n$次多项式$x^n+1$，素数域$GF(p)$，计算$a(x)s(x)+e(x)&#x3D;b(x)$</p><h4 id="3-关于消除扰动项"><a href="#3-关于消除扰动项" class="headerlink" title="(3)关于消除扰动项"></a>(3)关于消除扰动项</h4><p><img src="/2021/02/09/21Feb1/S2.png" alt="S2"></p><p><img src="/2021/02/09/21Feb1/S3.png" alt="S3"></p><p><img src="/2021/02/09/21Feb1/S4.png" alt="S4"></p><p><img src="/2021/02/09/21Feb1/S5.png" alt="S5"></p><p>如果上面的内容过于复杂引起不适，建议结束阅读。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>BUUCTF深水区的题目，都是非常难的题目，而这些题目也是大赛里面的题目，很有学习价值的，能学到很多心得加密过程和算法（。</p><p>不过自己一直都是个mmxfw，因为自己太菜了，哎（</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes5</title>
    <link href="/2021/02/06/LatticeNotes5/"/>
    <url>/2021/02/06/LatticeNotes5/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记5"><a href="#huangx607087学习格密码的笔记5" class="headerlink" title="huangx607087学习格密码的笔记5"></a>huangx607087学习格密码的笔记5</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这个笔记接着之前发布的笔记4，继续往后面扩展新的内容。</p><h2 id="12-格约简算法"><a href="#12-格约简算法" class="headerlink" title="12.格约简算法"></a>12.格约简算法</h2><h3 id="12x01-2维高斯格约简"><a href="#12x01-2维高斯格约简" class="headerlink" title="12x01 2维高斯格约简"></a>12x01 2维高斯格约简</h3><p>假如我们已知$v_1,v_2$是格$L$中的一组基底，假设$v_1$的长度小于$v_2$，（如果不小于，则交换两向量的长度）。那么我们可以用以下的脚本逐步约简二维格中最短向量的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sgn</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x&lt;<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vecmul</span>(<span class="hljs-params">veca,vecb</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(veca)==<span class="hljs-built_in">len</span>(vecb) <br>    s=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(veca)):<br>        s+=veca[i]*vecb[i]<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getans</span> (veca,vecb):<br>    <span class="hljs-built_in">print</span>(veca,vecb)<br>    <span class="hljs-keyword">if</span> vecmul(vecb,vecb)&lt;vecmul(veca,veca):<br>        tmp=veca<br>        veca=vecb<br>        vecb=tmp<br>    <span class="hljs-built_in">print</span>(veca,vecb)<br>    m=<span class="hljs-built_in">int</span>(vecmul(veca,vecb)/vecmul(veca,veca)+<span class="hljs-number">0.5</span>*sgn(vecmul(veca,vecb)))<br>    <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">return</span> veca,vecb<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(vecb)):<br>        vecb[i]-=m*veca[i]<br>    <span class="hljs-keyword">return</span> getans(veca,vecb)<br>a=[<span class="hljs-number">66586820</span>,<span class="hljs-number">65354729</span>]<br>b=[<span class="hljs-number">6513996</span>,<span class="hljs-number">6393464</span>]<br>A,B=getans(a,b)<br><span class="hljs-built_in">print</span>(A,B)<br><span class="hljs-comment">#[2280, -1001] [-1324, -2376]</span><br></code></pre></td></tr></table></figure><h3 id="12x02-LLL格约简算法"><a href="#12x02-LLL格约简算法" class="headerlink" title="12x02 LLL格约简算法"></a>12x02 LLL格约简算法</h3><p>高斯的晶格约简算法给出了在维数$2$的晶格中找到最短非零向量的有效方法，但随着维数的增加，最短向量问题变得更加困难。 随着LLL算法的发表，1982年取得了重大进展。 在本节中，我们给出了LLL算法的完整描述，在下一节中，我们简要描述了它的一些推广。</p><p>当我们得到格$L$的一个基底时，我们肯定希望对于任意两个不同的基向量$\vec v_i,\vec v_j(i \not &#x3D;j)$，使得$\cos &lt;\vec v_i,\vec v_j&gt;&#x3D;\dfrac{\vec v_i·\vec v_j}{|\vec v_i||\vec v_j|}$越接近$0$越好。或者在更好的基上的向量尽可能短，首先是我们可以找到的最短向量，然后是长度尽可能慢地增加的向量，直到我们到达基中的最后一个向量。</p><p>前面的笔记，我提到过这样一个式子$\det L &#x3D;\text{Vol }(F)≤ \prod _{i&#x3D;1}^n |\vec v_i|$</p><p>其中$F$是格$L$的基本域。而如果基越正交，那么不等号两边就越接近。而为了能够得到一个更好的基底，我们可以使用施密特正交化的方法取得正交基。不过这里出现了一个问题：因为施密特正交化的方法中：由<br>$$<br>\vec v_i^*&#x3D;v_i-\sum_{j&#x3D;1}^{i-1}u_{ij}\vec v_j*<br>$$<br>注意到里面有这样一项$u_{ij}$并且这一项不能保证是整数。所以进行施密特正交化后的基$B^*$与原来的基$B$之间的转换出现了非整数的系数。而实际上，基$B$与基$B^*$的行列式是相同的。不过如果出现了这样两个条件，就说明$B$被约简了一次：</p><p><strong>UPD 2021.2.9</strong>：原来这里的公式改成了图片，因为在网页上公式显示异常。</p><p><img src="/2021/02/06/LatticeNotes5/upd1.png" alt="upd1"></p><p><strong>关于LLL算法一些其他的原理，以后会不定期补充。</strong>Sagemath中自带了矩阵的LLL计算，很方便。</p><p><img src="/2021/02/06/LatticeNotes5/1.png" alt="1"></p><p>以下是用Sagemath中的LLL算法计算矩阵$M$的对应矩阵$M^{LLL}$的。可以看出，最短的向量在第一行，的确断了不少。</p><p>当然，同一个矩阵使用LLL算法后，可能会算得不同的结果。如下图的矩阵，也是$M$经过LLL算法的一个答案。不过计算一下，可以看出$M$与$M^{LLL}$的行列式绝对值相同，例子中均为$777406251$。并且$H(M)&#x3D;0.47,H(M^{LLL})&#x3D;0.87897$，因此$M^{LLL}$中的向量基的确更加正交。但$M_2^{LLL}$中的$H$值约为$0.88824$。查看源码可知，Sagemath中的条件$2$的判断参数是$0.99$，而$M_2^{LLL}$使用的参数是$0.75$。因此，LLL算法对其使用的参数具有比较高的依赖性。。也有用$0.85$做的，不过无论如何，最上面一行的值总是一样的（至多差一个$-1$倍）</p><p><img src="/2021/02/06/LatticeNotes5/2.png" alt="2"></p><h3 id="12x03-使用LLL解决apprCVP问题："><a href="#12x03-使用LLL解决apprCVP问题：" class="headerlink" title="12x03 使用LLL解决apprCVP问题："></a>12x03 使用LLL解决apprCVP问题：</h3><p>我们在笔记3中解释了，如果晶格L具有正交基，那么SVP和CVP都很容易求解。 LLL算法不返回正交基，但它确实产生了一个基向量是准正交的基，即它们之间是合理正交的。 因此，我们可以将LLL算法与Babai算法相结合，形成一种求解APRCVP的算法。</p><p>这个算法很简单，先求出$M^{LLL}$中的向量作为基底，然后在Babai算法中使用LLL约简基进行计算。</p><h2 id="13-LLL在密码分析中的应用"><a href="#13-LLL在密码分析中的应用" class="headerlink" title="13.LLL在密码分析中的应用"></a>13.LLL在密码分析中的应用</h2><h3 id="13x01-回顾笔记1中的同余密码系统"><a href="#13x01-回顾笔记1中的同余密码系统" class="headerlink" title="13x01 回顾笔记1中的同余密码系统"></a>13x01 回顾笔记1中的同余密码系统</h3><p>当我们知道$q&#x3D;1000170007,h&#x3D;999304853$时，就可以使用高斯约简向量$(1,h)$和$(0,q)$，计算约简后的向量为$(-19653, -18557)$和$(-18497, 33426)$。最短的向量为前者。因此$f&#x3D;19653,g&#x3D;18557$，成功破解。</p><h3 id="13x02-回顾笔记1中背包密码中的LLL算法破解"><a href="#13x02-回顾笔记1中背包密码中的LLL算法破解" class="headerlink" title="13x02 回顾笔记1中背包密码中的LLL算法破解"></a>13x02 回顾笔记1中背包密码中的LLL算法破解</h3><p>涉及到的理论可以参见笔记1中的相关内容</p><p>下图展示了LLL在前两个例子中的体现</p><p><img src="/2021/02/06/LatticeNotes5/3.png" alt="3"></p><h3 id="13x03-回顾笔记3中的GGH公钥密码系统"><a href="#13x03-回顾笔记3中的GGH公钥密码系统" class="headerlink" title="13x03 回顾笔记3中的GGH公钥密码系统"></a>13x03 回顾笔记3中的GGH公钥密码系统</h3><p><img src="/2021/02/06/LatticeNotes5/4.png" alt="4"></p><p>攻击此密码系统，可以将向量组$W$约简。得到$\vec w_1&#x3D;(61,11,67),\vec w_2&#x3D;(36,-30,-86),\vec w_3&#x3D;(-10,102,-40)$，密文$\vec v&#x3D;(−79081427, −35617462, 11035473)$</p><p>此时$H(W)$高达$0.956$。因此我们很快就找到了答案为<br>$$<br>\vec v&#x3D;35\vec w_1-86\vec w_2+32\vec w_3&#x3D;(79081423, 35617459, −11035471)<br>$$<br>所以最后的答案是$35,-86,32$。考虑到原来$|v_2|&lt;|\vec v_1|&lt;|\vec v_3|$，因此调换顺序，成功破解明文为$(-86,35,32)$</p><h3 id="13x04-回顾笔记4中的NTRU算法"><a href="#13x04-回顾笔记4中的NTRU算法" class="headerlink" title="13x04 回顾笔记4中的NTRU算法"></a>13x04 回顾笔记4中的NTRU算法</h3><p>在笔记4中我们举的那个例子里，在$N&#x3D;7,q&#x3D;41,d&#x3D;2$的情况下，我们算得$h(x)$的表达式为<br>$$<br>h(x)&#x3D;20x^6+40x^5+2x^4+38x^3+8x^2+26x+30<br>$$<br>然后，我们可以构造下图的矩阵</p><p><img src="/2021/02/06/LatticeNotes5/5.png" alt="5"></p><p>同样地，我们可以使用LLL算法。算出结果后，将其对半分开，考虑到LLL算法有的时候会相差一个负号或者出现旋转的问题，因此，我们有$3$行答案符合条件，并且这$3$行互为旋转。</p><p>以用红色标出来的第一行为例：此时的$f(x)&#x3D;-x^6-x^5+x^3-x^2+1,g(x)&#x3D;x^5+x^4-x^2-1$。</p><p>不过，我们可以给$f(x)$乘上$-x^4$，那么有$-x^4f(x)&#x3D;x^6-x^4+x^3+x^2-1$，$-x^4g(x)&#x3D;x^6+x^4-x^2-x$。刚好与之前Alice和Bob所计算的结果是一样的，因此攻击者计算出来的$f(x),g(x)$也可以作为解密密钥使用。</p><p><img src="/2021/02/06/LatticeNotes5/6.png" alt="6"></p><h2 id="14-例题选讲-UPDATE-2021-2-20"><a href="#14-例题选讲-UPDATE-2021-2-20" class="headerlink" title="14.例题选讲[UPDATE 2021.2.20]"></a>14.例题选讲[UPDATE 2021.2.20]</h2><h3 id="14x01-NPUCTF2020-BABYLCG"><a href="#14x01-NPUCTF2020-BABYLCG" class="headerlink" title="14x01 NPUCTF2020[BABYLCG]"></a>14x01 NPUCTF2020[BABYLCG]</h3><p><strong>update 2021.2.8</strong></p><h4 id="STEP-1-读取题目"><a href="#STEP-1-读取题目" class="headerlink" title="STEP 1 读取题目"></a>STEP 1 读取题目</h4><p>我们先来看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bit_length</span>):<br>        m = getPrime(bit_length)<br>        a = getRandomRange(<span class="hljs-number">2</span>, m)<br>        b = getRandomRange(<span class="hljs-number">2</span>, m)<br>        seed = getRandomRange(<span class="hljs-number">2</span>, m)<br>        <span class="hljs-variable language_">self</span>._key = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:a, <span class="hljs-string">&#x27;b&#x27;</span>:b, <span class="hljs-string">&#x27;m&#x27;</span>:m&#125;<br>        <span class="hljs-variable language_">self</span>._state = seed <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>._state = (<span class="hljs-variable language_">self</span>._key[<span class="hljs-string">&#x27;a&#x27;</span>] * <span class="hljs-variable language_">self</span>._state + <span class="hljs-variable language_">self</span>._key[<span class="hljs-string">&#x27;b&#x27;</span>]) % <span class="hljs-variable language_">self</span>._key[<span class="hljs-string">&#x27;m&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._state<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">export_key</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._key<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_lcg</span>():<br>    rand_iter = LCG(<span class="hljs-number">128</span>)<br>    key = rand_iter.export_key()<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    f.write(<span class="hljs-built_in">str</span>(key))<br>    <span class="hljs-keyword">return</span> rand_iter<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak_data</span>(<span class="hljs-params">rand_iter</span>):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;old&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        f.write(<span class="hljs-built_in">str</span>(rand_iter.<span class="hljs-built_in">next</span>() &gt;&gt; <span class="hljs-number">64</span>) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-keyword">return</span> rand_iter<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">rand_iter</span>):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ct&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>    key = rand_iter.<span class="hljs-built_in">next</span>() &gt;&gt; <span class="hljs-number">64</span><br>    key = (key &lt;&lt; <span class="hljs-number">64</span>) + (rand_iter.<span class="hljs-built_in">next</span>() &gt;&gt; <span class="hljs-number">64</span>)<br>    key = long_to_bytes(key).ljust(<span class="hljs-number">16</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    iv = long_to_bytes(rand_iter.<span class="hljs-built_in">next</span>()).ljust(<span class="hljs-number">16</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    cipher = AES.new(key, AES.MODE_CBC, iv)<br>    pt = flag + (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-built_in">chr</span>(<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>)<br>    ct = cipher.encrypt(pt.encode())<br>    f.write(ct)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    rand_iter = gen_lcg()<br>    rand_iter = leak_data(rand_iter)<br>    encrypt(rand_iter)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>线性同余生成器简称LCG，就是通过$y\equiv ax+b\pmod m$的线性方程迭代产生随机数，随机数比较有规律可循。</p><p>题目给出$a,b,m$的同时，还给出了连续$20$个产生的数字，不过我们知道的只有它们的最高$64$位，低的$64$位不知道。</p><h4 id="STEP-2-初步分析，确定构建格矩阵的法则"><a href="#STEP-2-初步分析，确定构建格矩阵的法则" class="headerlink" title="STEP 2 初步分析，确定构建格矩阵的法则"></a>STEP 2 初步分析，确定构建格矩阵的法则</h4><p>为了简便，我们可以先从两个数字开始，假设我们已知的是高位部分是$c_1,c_2$，未知的低位部分是$d_1,d_2$，那么我们可以得到<br>$$<br>c_2+d_2\equiv a(c_1+d_1)+b \pmod m<br>$$<br>去掉同余号，可以得到下面的式子，其中$k$也是未知量<br>$$<br>c_2+d_2&#x3D;ac_1+ad_1+b+km<br>$$<br>如果我们对这个式子进行移项，那就有<br>$$<br>d_2&#x3D;ad_1+km+ac_1+b-c_2&#x3D;f(k,d_1)<br>$$<br>很显然，我们建立了$d_2$与$d_1$之间的递推关系。因此，我们要建立向量$\vec v,\vec w$和矩阵$M$，使得$\vec vM&#x3D;\vec w$。而想要建立矩阵和向量，就要保证<strong>等式右边有几个未知数，向量就至少要有几维，并且两个向量要覆盖到所有的未知量。而矩阵中的数字，只能是已知量，并且还要覆盖到题目给出的所有参数。因为到时候直接放入Sagemath中进行LLL算法的是所有元素均为已知量的矩阵$M$而不是带有未知数向量</strong>。</p><h4 id="STEP-3-从理论走向实践"><a href="#STEP-3-从理论走向实践" class="headerlink" title="STEP 3 从理论走向实践"></a>STEP 3 从理论走向实践</h4><p>根据刚刚总结的理论，我们有确定了等号右边有$2$个未知数，因此向量维数至少是$2$。然而，构造$2$维的向量很困难，因为我们上面$d_2$关于$d_1,k$的表达式实际上应该写成这个样子：<br>$$<br>d_2&#x3D;ad_1+km+(ac_1+b-c_2)&#x3D;f(k,d_1)+C<br>$$<br>不要小看这个$+C$的作用，因为这样我们直接就重构了表达式为$d_2&#x3D;f(k,d_1)+C$。而$C$是已知量，与$k,d_1$全部无关。故我们必须要构建三维的向量，并彻底确定$\vec v&#x3D;(k,d_1,1)$。矩阵$M$的第一列为$(m,a,C)^T$，向量$\vec w$的第一个分量为$d_2$。</p><p>因此，下图就表示我们构建格的雏形了。</p><p><img src="/2021/02/06/LatticeNotes5/7.png" alt="7"></p><p>此时，未知量$k,d_1,d_2$已经全部被包含，已知量$a,b,m,c_1,c_2$也全部被包含，没有什么必要的东西了。不过注意到一个问题：$\vec w$实际上是<strong>最后对矩阵M约简时的最短向量（这个很重要）</strong>。而相对于$k$来讲，我们更希望知道的时$d_1$，因此我们就让$\vec w$的第二个分量为$d_1$，完善了矩阵。</p><p><img src="/2021/02/06/LatticeNotes5/8.png" alt="8"></p><p>为了让最后一个数字尽可能地简单，我们可以把这个矩阵的第三列的前两个数全填成$0$。这样求最短向量的时候，最后一维也就是个固定的常数了。不过问题来了：矩阵右下角的那个数字真的可以随便取吗？</p><p><strong>当然不是</strong></p><p>我们在笔记2的时候就讲过<strong>Hermite定理</strong>：维数为$n$的每一个格$L$中都包含一个长度不超过$\sqrt n \sqrt[n]{\det L}$的向量$\vec v$。这里$n&#x3D;3$，假如右下角这个数是$x$。那么很容易计算$\det L&#x3D;mx$，其中$m$是模数，$128$位。也就是说，最短向量一定小于$\sqrt[6]{27m^2x^2}$。因此提高$x$的值准确度更高。以下就是当$x$很大和较小时解出来的值。如果算出来的$d_1,d_2$中有一个时负数，<del>那就只能换一组数据了</del> <strong>（直接去绝对值即可，Upd by shallow）</strong></p><p>因此，我们就恢复了一个数的低位。一旦这个数的低位被恢复，那我们就恢复了被省略掉的低位，获得了一个状态，那我们就立刻地推出了所有的答案了，flag也就解出来了。</p><p><img src="/2021/02/06/LatticeNotes5/9.png" alt="9"></p><h4 id="4-Reference"><a href="#4-Reference" class="headerlink" title="4. Reference"></a>4. Reference</h4><p>因为自己的做法确实有些局限性，为了获得更普遍的方法，我还是跟shallow大佬讨论了以下这道题的做法，但我可能还是太菜了，思考了两小时都没能实现这个做法。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs dns">shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">14</span>:<span class="hljs-number">05</span><br>这题给了你这么多数据，肯定不可能只用三个就做的<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">14</span>:<span class="hljs-number">21</span><br>我当时这题用的hnp的思路写的来着。。<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 20:14</span>:<span class="hljs-number">46</span><br>我用三个做出来了<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">14</span>:<span class="hljs-number">55</span><br>az<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 20:15</span>:<span class="hljs-number">04</span><br>不过调了几次参数<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">15</span>:<span class="hljs-number">49</span><br>那没事了<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">23</span>:<span class="hljs-number">36</span><br>负的直接绝对值就行<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">23</span>:<span class="hljs-number">46</span><br>刚刚算了一下界居然真的够。。<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 20:24</span>:<span class="hljs-number">15</span><br>那，大佬能说一下你当时是怎么做的吗<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">25</span>:<span class="hljs-number">34</span><br>把每个d表示成ad0 + b<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">25</span>:<span class="hljs-number">52</span><br>然后一排全a，第二排全b，剩下地方对角线填n<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">20</span>:<span class="hljs-number">26</span>:<span class="hljs-number">03</span><br>LLL完剩下的就全是di了<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 20:26</span>:<span class="hljs-number">14</span><br>好的，谢谢了，我过会试一下<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 22:03</span>:<span class="hljs-number">59</span><br>n就是他给出来的<span class="hljs-number">20</span>个高位吗<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 22:07</span>:<span class="hljs-number">03</span><br>（不好意思我理解失误）<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">22</span>:<span class="hljs-number">07</span>:<span class="hljs-number">30</span><br>n的是那个p<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">22</span>:<span class="hljs-number">07</span>:<span class="hljs-number">35</span><br>就是模<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">22</span>:<span class="hljs-number">09</span>:<span class="hljs-number">00</span><br>随便吧<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">22</span>:<span class="hljs-number">09</span>:<span class="hljs-number">01</span><br>都可以<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 22:09</span>:<span class="hljs-number">05</span><br>OK<br>shallow <span class="hljs-number">2021/2/6</span> <span class="hljs-number">22</span>:<span class="hljs-number">09</span>:<span class="hljs-number">15</span><br><span class="hljs-number">20</span>×<span class="hljs-number">22</span>也可以，<span class="hljs-number">22</span>×<span class="hljs-number">22</span>也可以<br>huangx6<span class="hljs-number">07087 2021</span>/<span class="hljs-number">2/6 22:13</span>:<span class="hljs-number">11</span><br>OK<br></code></pre></td></tr></table></figure><h3 id="14x02-ACTF2021-hashgame"><a href="#14x02-ACTF2021-hashgame" class="headerlink" title="14x02 ACTF2021 [hashgame]"></a>14x02 ACTF2021 [hashgame]</h3><p><strong>Updated 2021.2.20</strong></p><h4 id="1-读取题目："><a href="#1-读取题目：" class="headerlink" title="1.读取题目："></a>1.读取题目：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify, unhexlify<br>banner = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">               _  ___        _   _           _      ____                      </span><br><span class="hljs-string"> _ __ ___   __| |/ _ \      | | | | __ _ ___| |__  / ___| __ _ _ __ ___   ___ </span><br><span class="hljs-string">| &#x27;_ ` _ \ / _` | (_) |_____| |_| |/ _` / __| &#x27;_ \| |  _ / _` | &#x27;_ ` _ \ / _ \\</span><br><span class="hljs-string">| | | | | | (_| |\__, |_____|  _  | (_| \__ \ | | | |_| | (_| | | | | | |  __/</span><br><span class="hljs-string">|_| |_| |_|\__,_|  /_/      |_| |_|\__,_|___/_| |_|\____|\__,_|_| |_| |_|\___|</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md9</span>(<span class="hljs-params">m</span>):<br>    n, N = <span class="hljs-number">32</span>, <span class="hljs-number">2</span>**<span class="hljs-number">256</span><br>    h = <span class="hljs-number">69444099843545663157429813687097031070079259699713394209624552060334679683924</span><br>    g = <span class="hljs-number">91404868204801963538299172115753433950696139669081509476098772951762196709558</span><br>    <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">isinstance</span>(m, <span class="hljs-built_in">bytes</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(m) == n)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> m:<br>        h = ((h + x) * g) % N<br>    <span class="hljs-keyword">return</span> long_to_bytes(h)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        m1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>        m2 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            m1, m2 = unhexlify(m1), unhexlify(m2)<br>            <span class="hljs-keyword">if</span> m1 != m2:<br>                <span class="hljs-keyword">if</span> md9(m1) != md9(m2):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed!&quot;</span>)<br>                    <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125; win!&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Foolish try!&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something your input is wrong!&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    flag = os.environ.get(<span class="hljs-string">&#x27;FLAG&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Win!Here is the flag: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(flag))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(banner)<br>    challenge()<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="Step-2：初步分析，构造矩阵"><a href="#Step-2：初步分析，构造矩阵" class="headerlink" title="Step 2：初步分析，构造矩阵"></a>Step 2：初步分析，构造矩阵</h4><p>对于题目中给出的计算，我们可以进行简单地化简,在阅读题目要求后，我们可以理解为：题目要求我们找两组数字$x,y$，每组数字$32$个，并且数组$x$和数组$y$不能完全相同。最后就是找到满足条件的$2$组数字，使得<br>$$<br>hg^{32}+\sum_{i&#x3D;1}^{32} x_i g^{33-i}\equiv hg^{32}+\sum_{i&#x3D;1}^{32} y_i g^{33-i} \pmod{2^{256}}<br>$$<br>很显然地，我们可以约去两边的$hg^{32}$，等式变成了<br>$$<br>\sum_{i&#x3D;1}^{32} x_i g^{33-i}\equiv\sum_{i&#x3D;1}^{32} y_i g^{33-i} \pmod{2^{256}}<br>$$<br>然后将模式写成等式，得<br>$$<br>\sum_{i&#x3D;1}^{32} x_i g^{32-i}&#x3D;\sum_{i&#x3D;1}^{32} y_i g^{33-i} +2^{256}k<br>$$<br>然后我们可以合并一下两边：<br>$$<br>\sum_{i&#x3D;1}^{32}(x_i-y_i)g^{33-i}&#x3D;2^{256}k<br>$$<br>可以顺带进行移项<br>$$<br>\sum_{i&#x3D;1}^{32}(x_i-y_i)g^{33-i}-2^{256}k&#x3D;0<br>$$</p><p>观察化简后的式子，其中未知量是$x_i-y_i$和$k$，已知量是$g$。因此我们应该建立相应的递推式。</p><p>为了简化表达，我们先假设$i$的取值从$1$到$32$缩减成$1$到$3$来模拟构造矩阵。</p><p>在只有$3$组差值的情况下，并且我们最后要求出来的是$x_i-y_i$的值，因此，$E_3&#x3D;\text{diag}(1,1,1)$必须是我们构造矩阵中的一个子矩阵。并且$k$也是未知的，因此我们矩阵中还要加一个元素$k$。这样我们的向量就是$4$维行向量$(x_1-y_1,x_2-y_2,x_3-y_3,k)$，最后我们期望得到的内容就是前$3$个参量，而又因为$g^3(x_1-y_1)+g^2(x_2-y_2)+g(x_3-y_3)-2^{256}k&#x3D;0$。因此我们矩阵需要增加至$5$列。最后一列为列向量$(g^3,g^2,g,2^{256})^T$，负号扔给$k$。而最后我们得到的向量就是$(x_1-y_1,x_2-y_2,x_3-y_3,-k,0)$，向量的最后一列必须是$0$。</p><p>所以我们可以尝试构造一个这样的矩阵及其计算方式。</p><p><img src="/2021/02/06/LatticeNotes5/10.png" alt="10"></p><p>我们到最后只需要找到尾数是$0$的那一列，那么就成功了。</p><p>但这样好像是失败了（，因为LLL算法后结出来的最后的结果不为$0$。</p><p>看来，这里的计算应该是跟上面那个例子除了相同的问题。</p><h4 id="Step-3：构造并调整矩阵"><a href="#Step-3：构造并调整矩阵" class="headerlink" title="Step 3：构造并调整矩阵"></a>Step 3：构造并调整矩阵</h4><p>因此我们现在就需要对上面的矩阵进行调整。因为最短向量总是小于$\sqrt n \sqrt[n]{\det L}$。当格$L$对应的矩阵$M$不是方阵的时候，我们规定格$L$的行列式$\det L&#x3D;\det MM^T$。而当$\det L$太小的时候，就会导致最后解出来的向量更短，导致计算错误。因为：<br>$$<br>a^2+b^2&lt;(a+b)^2<br>$$<br>这就意味着符合条件时，最后一个$0$参数会被微小提升，来缓解其他分量的负担，向量长度变小了，但却不是我们想要的结果。</p><p>因此我们就要扩大$\det L$。而我们又想保持住等号右边的向量的形式，因此我们就需要对矩阵最右边一列所有数字同时乘上一个数$C$（不取模），然后这样格$L$的行列式就会提升到原来的$C^8$倍（如果构造出的是$M$规模是$33\text x34$，则$MM^T$就是$33\text x33$方阵，最右边乘上$C$就会导致矩阵行列式提升到原来的$C^{66}$倍）。而向量的长度，提升倍数将会小于$\sqrt[33]{C^{66}}&#x3D;C^2$倍。</p><p>因此，我们最后期望得到的矩阵计算是这样的，而在这道题中，$C$取$70$多就够了，然而我还是取了$2^{700}$为了保险。</p><p><img src="/2021/02/06/LatticeNotes5/11.png" alt="11"></p><p>构造矩阵运行了一下，可以发现，向量的所有分量都小于$255$。然后我们就可以构造一段模板$x$和一段变化过的$y$就行了。</p><p>这里有个问题：解出来的值有正有负，这个时候我们可以把所有正数都基于$\text{00H}$作为模板，负数基于$\text{FFH}$作为模板。例如，假如解出来的前$4$个数字是$32,-64,-96,128$，那么我们$x$组就构造$\text{00FFFF00H}$，$y$组构造$\text{20BF9F80}$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sagemath 9.1</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br>mod=<span class="hljs-number">2</span>^<span class="hljs-number">256</span><br>K,n=<span class="hljs-number">2</span>^<span class="hljs-number">700</span>,<span class="hljs-number">32</span><br>g=<span class="hljs-number">91404868204801963538299172115753433950696139669081509476098772951762196709558</span><br>M=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">2</span>)]<span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    ge=ZZ(<span class="hljs-built_in">pow</span>(g,n-i,mod))<br>    M[i][i]=<span class="hljs-number">1</span><br>    M[i][n+<span class="hljs-number">1</span>]=ZZ(ge*K)<br>M[n][n+<span class="hljs-number">1</span>]=ZZ(K*mod)<br>M=matrix(M)<br>A=M.LLL()<br>B,D=A[<span class="hljs-number">0</span>],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> B:<br>    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>        D.append(<span class="hljs-number">255</span>)<br>    <span class="hljs-keyword">else</span>:<br>        D.append(<span class="hljs-number">0</span>)<br>B=<span class="hljs-built_in">list</span>(B)<br><span class="hljs-built_in">print</span>(B,<span class="hljs-built_in">len</span>(B))<br><span class="hljs-built_in">print</span>(D,<span class="hljs-built_in">len</span>(D))<br>s,t=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padhex</span>(<span class="hljs-params">x,l</span>):<br>    s=<span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0&#x27;</span>*(l-<span class="hljs-built_in">len</span>(s))+s<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    s+=padhex(D[i],<span class="hljs-number">2</span>)<br>    t+=padhex(B[i]+D[i],<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(t)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b=[64, -39, 118, 7, 39, -3, 102, -7, -9, -9, -32, -48, 69, 58, 120, 133, 23, -197, 53, 23, -41, -45, 61, -101, 26, 2, -74, -57, 24, -23, -60, 52, -16, 0] 34</span><br><span class="hljs-string">d=[0, 255, 0, 0, 0, 255, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 255, 0, 0, 255, 255, 0, 255, 0, 0, 255, 255, 0, 255, 255, 0, 255, 0] 34</span><br><span class="hljs-string">s=00ff000000ff00ffffffffff0000000000ff0000ffff00ff0000ffff00ffff00</span><br><span class="hljs-string">t=40d8760727fc66f8f6f6dfcf453a7885173a3517d6d23d9a1a02b5c618e8c334</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="4-Reference-1"><a href="#4-Reference-1" class="headerlink" title="4.Reference"></a>4.Reference</h4><p>一开始自己想的是构造$64\text{x}64$的矩阵，想分出$y_{32}$，构造从$(x_1,x_2,…,x_{32},y_1,y_2,…,y_{31},k)$递推出$(x_1,x_2,…,y_{32},y_1,y_2,…,y_{31},k)$的想法，不过发现这样做构造矩阵并不可以。可能是因为这种构造下，$x_1$和$y_1$孤立，导致直接出$0$解。也就是说，这样由于是构造的方阵，可以直接使得LLL之后的向量结果，每一行的行向量都是单位矩阵中对应行向量的某个整数的倍数，直接构造出了$H(B)&#x3D;1$的完全正交基……。</p><p>这件事还是暴露了一个严重的问题就是：<del>huangx607087 is a feiwu</del></p><h2 id="15-总结"><a href="#15-总结" class="headerlink" title="15.总结"></a>15.总结</h2><p>到这里为止，格密码的5篇笔记全部投放完毕。由于最后一篇限于时间，没有过多地提及LLL算法的原理，仅仅是简单地提了一下LLL算法的使用方法，和解决了之前所抛出来的几个问题。后面主要就是将这些算法应用到CTF中的题目里去。可能会投放Notes6。但Notes6大概率会属于ExpLog。</p><p>以后有可能会对LLL算法的相关原理进行补充。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes4</title>
    <link href="/2021/02/05/LatticeNotes4/"/>
    <url>/2021/02/05/LatticeNotes4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记4"><a href="#huangx607087学习格密码的笔记4" class="headerlink" title="huangx607087学习格密码的笔记4"></a>huangx607087学习格密码的笔记4</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这个笔记接着之前发布的笔记3，继续往后面扩展新的内容。</p><h2 id="10-NTRU公钥加密系统"><a href="#10-NTRU公钥加密系统" class="headerlink" title="10.NTRU公钥加密系统"></a>10.NTRU公钥加密系统</h2><h3 id="10x00-Introduction"><a href="#10x00-Introduction" class="headerlink" title="10x00 Introduction"></a>10x00 Introduction</h3><p>基于整数因式分解难度或离散对数问题的密码系统是基于群的密码系统，因为底层的硬问题只涉及一个操作。 对于RSA、Diffie-Hellman和ElGamal，该组是模量$m$的单位模$m$的组，它可能是素数或复合的，群运算是乘法模$m$。对于ECC，组是椭圆曲线模$p$上的点集，群运算是椭圆曲线加法。</p><p>环是具有加法和乘法两种运算的代数对象，它们是通过分配律连接起来的。 在这一部分中，我们描述了NTRU公钥密码系统。 使用卷积多项式环最自然地描述NTRU，但潜在的困难的数学问题也可以解释为晶格中的SVP或CVP。</p><h3 id="10x01-NTRU公钥密码体制"><a href="#10x01-NTRU公钥密码体制" class="headerlink" title="10x01 NTRU公钥密码体制"></a>10x01 NTRU公钥密码体制</h3><p>固定一个整数$n≥1$和两个模数$p,q$并令$R,R_p,R_q$分别为卷积多项式环。（具体内容请回顾笔记3）</p><p>我们可以先将多项式$f(x)\in R$通过取模的方式降低其系数，使其成为$R_p$或者$R_q$中的元素，当然，我们也可以将$R_p$或者$R_q$中的元素看作是$R$中的元素。我们可以对参数$n,p,q$做出各种假设，特别地，我们可以要求$n$是素数，$\gcd (n,q)&#x3D;\gcd(p,q)&#x3D;1$等等。</p><p>在进入NTRU密码体制之前，我们要先引入一个符号：$T(d_1,d_2)$表示一类多项式的集合。若$f(x)\in T(d_1,d_2)$，就意味着$f(x)$中，有$d_1$个系数的值为$1$，有$d_2$个系数的值为$-1$，其他的系数的值均为$0$。例如：$f(x)&#x3D;x^7-x^6+x^4+x^3-x+1\in T(4,2)$</p><p>$T(d_1,d_2)$中的多项式可以称为三元多项式，因为多项式中系数的取值范围只有$0$和$±1$。而我们以前说的二进制多项式中，由于多项式里只存在$0,1$两种系数，这又可以成为二元多项式。</p><p>下面我们进入这个密码系统：</p><p>首先，Alice确定四元整数组$(N,p,q,d)$。满足$N,p$均为素数，$\gcd(N,q)&#x3D;\gcd (p,q)&#x3D;1$，且$q&gt;(6d+1)p$。</p><p>然后，Alice随机选取两个多项式$f(x)$和$g(x)$作为私钥，其中$f(x) \in T(d+1,d)$,$g(x)\in T(d,d)$，并计算$f(x)$在$R_p,R_q$中的逆$F_p(x),F_q(x)$。如果任意一个逆不存在，则重新选择$f(x)$。</p><p>然后，Alice在$R_q$中计算$h(x)&#x3D;F_q(x)g(x)$和之前确定的四元数组作为公钥。</p><p>加密时，Bob的明文是$m(x)$，其系数均在$(-\dfrac12p,\dfrac12p]$内，也就是说，$m(x)$是$R$中的元素，同时也是$R_p$中的元素。然后再随机选取一个多项式$r(x)\in T(d,d)$并计算密文$c(x)\equiv ph(x)r(x)+m(x)\pmod q$，完成加密。</p><p>当Alice收到密文后，她计算$a(x)\equiv f(x)c(x) \pmod q$。</p><p>然后在$R_p$中计算$F_p(x)a(x)$，即可明文得到$m(x)$</p><p>下面我们来尝试一下这个密钥系统：</p><p>首先，Alice确定了整数$(N,p,q,d)&#x3D;(7,3,41,2)$和$f(x)&#x3D;x^6-x^4+x^3+x^2-1,g(x)&#x3D;x^6+x^4-x^2-x$。保证了$f(x)\in T(3,2),g(x)\in T(2,2)$</p><p><img src="/2021/02/05/LatticeNotes4/1.png" alt="1"></p><p>然后计算出了$F_p(x)&#x3D;x^6+2x^5+x^3+x^2+1,F_q(x)&#x3D;8x^6+26x^5+31x^4+21x^3+40x^2+2x+37$。</p><p>接着，Alice计算$h(x)&#x3D;F_q(x)g(x)\equiv 20x^6+40x^5+2x^4+38x^3+8x^2+26x+30$。然后将$(N,p,q,d)$这一四元组和$h(x)$表达式公布作为公钥。</p><p>Bob选择了$R_p$中的表达式$m(x)&#x3D;2x^5+x^3+x^2+2x+1$，将其调整为$m(x)&#x3D;-x^5+x^3+x^2-x+1$。因为$p&#x3D;3$，并且要保证$m(x)$中所有系数的绝对值不超过$p$一半，因此通过$2\equiv -1 \pmod3$来实现。</p><p>接着，Bob随机选择了一个在$T(2,2)$中的多项式$r(x)&#x3D;x^6-x^5+x-1$</p><p>接着计算$c(x)&#x3D;pr(x)h(x)+m(x)&#x3D;31x^6+19x^5+4x^4+2x^3+40x^2+3x+25$，并将密文发送给Alice</p><p><img src="/2021/02/05/LatticeNotes4/2.png" alt="2"></p><p>Alice收到Bob的密文后，计算$a(x)&#x3D;c(x)f(x)&#x3D;x^6+10x^5+33x^4+40x^3+40x^2+x+40$。</p><p><img src="/2021/02/05/LatticeNotes4/3.png" alt="3"></p><p>在这里需要注意调整一下，由于$q&#x3D;41$，因此我们将$a(x)$中所有的系数的绝对值调到不超过$20$，于是有了<br>$$<br>a(x)&#x3D;x^6+10x^5-8x^4-x^3-x^2+x-1<br>$$<br>最后我们计算$F_p(x)a(x)&#x3D;2x^5+x^3+x^2+2x+1$，调整系数后，得到$-x^5+x^3+x^2-x+1&#x3D;m(x)$。因此获取明文。</p><p><img src="/2021/02/05/LatticeNotes4/4.png" alt="4"></p><p><strong>这个加密算法中，最容易搞混的就是环在不断地换，不过归纳一下，发现只有$m(x)$的确定与解密的最后一步是用到$Zmod(p)$的，其他大多数时候用到的都是$Zmod(q)$。</strong></p><h3 id="10x02-NTRU中的数学问题"><a href="#10x02-NTRU中的数学问题" class="headerlink" title="10x02 NTRU中的数学问题"></a>10x02 NTRU中的数学问题</h3><p>我们发现，$h(x)$的系数貌似是随机的，但经过验证，我们可以得出一个非常重要的结论<br>$$<br>f(x)h(x)\equiv g(x) \pmod {(x^N-1)} \text{   in   } Zmod(q)<br>$$<br><img src="/2021/02/05/LatticeNotes4/5.png" alt="4"></p><p>并且$f(x),g(x)$的系数都是非常小的。因此假如已知$h(x)$的情况下，我们是否可以找到符合条件的$f(x)$和$g(x)$呢？</p><p>然而，这个解实际上并不唯一，因为如果$f(x),g(x)$满足上面那个等式，那么$x^kf(x),x^kg(x),k\in Z_N$也符合上面那个等式。此时我们解出来的答案就是$x^km(x)$。</p><p>更一般地，具有足够小系数和满足上面那个结论的任意对多项式$f(x),g(x)$作为NTRU解密密钥。 例如，如果$f(x)$是原始解密密钥，且$θ(x)$有微小的系数，那么$θ(X)f(X)$也可以作为解密密钥。</p><p>为什么人们会认为NTRU密钥恢复问题是一个困难的数学问题？ 第一个必要的要求是，这个问题实际上不能通过蛮力或碰撞搜索来解决。 我们将在后面的内容中讨论这样的搜索。 更重要的是，下面一节中，我们证明了求解NTRU密钥恢复问题（几乎肯定）等价于在某一类格中求解SVP。 这将NTRU问题与一个经过充分研究的问题联系起来，尽管这是一个特殊的晶格集合。 格约简的使用是目前最著名的从公钥恢复NTRU私钥的方法。 晶格还原是最好的方法吗？ 就像整数分解和其他密码系统背后的各种离散对数问题一样，没有人知道是否存在更快的算法。 因此，判断NTRU密钥恢复问题难度的唯一方法是注意，它已经被数学和密码社区很好地研究。 然后应用目前已知的最快算法，对求解问题的难度进行定量估计。</p><p>那么想要在没有密钥的情况下，破解NTRU系统又多难呢？</p><p>首先，就是$T(d_1,d_2)$中的多项式个数，一共有$\text C_N^{d_1}\text C_{N-d_1}^{d_2}$个符合条件的多项式。并且当$d_1,d_2$接近于$\dfrac N 3$的时候，$\text C_N^{d_1}\text C_{N-d_1}^{d_2}$的值时最大的。</p><p>对于蛮力搜索，攻击者必须尝试$T(d+1,d)$中的每个多项式，直到她找到一个解密键，但请注意，$f(x)$的所有循环移位都是解密键，因此有$N$个符合条件的选项。 因此，它将需要攻击者大约尝试$\dfrac {\text C_N^{d+1}\text C_{N-d-1}^{d}}{N}$，可以找到$f(x)$的一个循环移位)。 </p><p>例如，如果一个符合条件的公钥为$(N,p,q,d)&#x3D;(251,3,257,83)$。<strong>（注：这里的$q&lt;(6d+1)p$，有可能出现解密失败）</strong>。那么想要找到一个可行的密钥，进行尝试的期望值$E$的数量级达到了$\ln E&#x3D;\ln \dfrac{\text C_{251}^{84}\text C_{167}^{83}}{251}&#x3D;264.5$。</p><p>当然，也可以使用空间换时间的做法，设定$f_1(x)&#x3D;\sum_{i&#x3D;1}^{(n&#x2F;2)^-}$和$f_1(x)&#x3D;\sum_{i&#x3D;n&#x2F;2}^{n}$。其中$(\frac n 2)^-$表示取不到$\frac n 2$。那么我们就可以找$f_1(x)h(x)$和$-f_2(x)h(x)$，看看是否有一样的内容（系数模$q$）。而这样的话，所需要的次数的数量级会降到$\ln E&#x3D;132.3$，也就是指数降到原来的一半。而当$d$接近于$\dfrac N 3$的时候，这个算法的复杂度大概是$O(1.7321^N)$。</p><p>因此，这时解密成功的对数值约为$\ln P&#x3D;\ln((\dfrac 3 {257})^{251}\text C_{251}^{84}\text C_{167}^{83})&#x3D;-847$。若对数取$\log_2$，则值为$-1222$</p><p>故除了$f(x)$的循环移位之后的表达式外，有其他密钥的概率非常低。</p><h2 id="11-NTRU与格密码系统"><a href="#11-NTRU与格密码系统" class="headerlink" title="11.NTRU与格密码系统"></a>11.NTRU与格密码系统</h2><h3 id="11x01-NTRU格"><a href="#11x01-NTRU格" class="headerlink" title="11x01 NTRU格"></a>11x01 NTRU格</h3><p>在这一部分中，我们解释了如何将NTRU密钥恢复表示为某一特殊类型晶格中的最短向量问题。 </p><p>假设我们在某一次解出来的$N&#x3D;3$情况下的$h(x)&#x3D;39x^2+23x+48$，对应的$q$值为$61$，那么我们可以构造这样一个矩阵，其中空白部分均为$0$，大小是$6\text{x}6$</p><img src="/2021/02/05/LatticeNotes4/6.png" alt="6" style="zoom:115%;"><p>扩展到$n$阶，则是一个$2n$阶的矩阵</p><img src="/2021/02/05/LatticeNotes4/7.png" alt="7" style="zoom:90%;"><p>其中左上角是单位阵$E$，左下角是$0$矩阵，右下角是数量矩阵$qE$，右上角则是$h(x)$的各个系数循环得来的。</p><p>假如我们现在有<br>$$<br>f(x)&#x3D;\sum_{i&#x3D;0}^{N-1} a_ix^i \text{   and    }g(x)&#x3D;\sum_{i&#x3D;0}^{N-1} b_ix^i<br>$$<br>然后我们可以构建一个向量$(\vec a,\vec b)&#x3D;(a_0,a_1,…,a_{N-1},b_0,b_1,…b_{N-1})$。这个向量也是$2n$维的，因此可以右乘$M_{\text h}^{\text{NTRU}}$</p><p>我们现在假设NTRU公钥$h(x)$是使用私有多项式$f(x)$和$g(x)$创建的，并计算当我们将NTRU矩阵乘以一个精心选择的向量时会发生什么。</p><p>因为我们刚才提到过一个式子：$f(x)h(x)\equiv g(x)\pmod{x^N-1} \text{  in  } R_q$。</p><p>那么我们可以写出这样的式子，其中$u(x)$也是一个多项式<br>$$<br>f(x)h(x)&#x3D;g(x)+qu(x)<br>$$<br>因此，我们可以有<br>$$<br>(\vec f,-\vec {u})M_{\text h}^{\text{NTRU}}&#x3D;(\vec f,\vec f·\vec h-q\vec u)&#x3D;(\vec f,\vec g)<br>$$<br>因此，$(\vec f,\vec g)$在格$L_{\text h}^{\text{NTRU}}$中。</p><p>当公钥中的$d≈\dfrac N 3,q≈6d≈2N$时。则$\det L_{\text h}^{\text{NTRU}}&#x3D;q^N $，$|(\vec f,\vec g)|≈2\sqrt d$。且由高斯启发式可以推出，最短非$0$向量的长度约为$\sigma(L_{\text h}^{\text{NTRU}})≈\dfrac{Nq}{\pi e}≈0.484N$。</p><p>当然，当$N$很大的时候，很大概率上，格中最短非零向量就是$(\vec f,\vec g)$或者其循环移位（又称旋转）。并且<br>$$<br>\dfrac {|(\vec f,\vec g)|}{\sigma (L)}≈\dfrac{2.39}{\sqrt N}<br>$$<br>所以$(\vec f,\vec g)$的长度数量级是$O(N^{-\frac 1 2})$，比高斯启发式所预测的长度要短。</p><h3 id="11x02-对NTRU晶格的安全性的定量分析"><a href="#11x02-对NTRU晶格的安全性的定量分析" class="headerlink" title="11x02 对NTRU晶格的安全性的定量分析"></a>11x02 对NTRU晶格的安全性的定量分析</h3><p>由我们之前的分析，可以得出：如果攻击者能够在NTRU格中找到一个最短的向量，那么解决这个问题的难度就至少达到了SVP问题的求解，如果攻击者可以在格中解决apprSVP问题在不超过$O(\sqrt N)$的短向量，那么攻击者发现的短向量就很可能是解密密钥。因此，这里就涉及到了如何估计在NTRU格综合你找到一个给短的或者最短的向量难度的问题。因此我们在下一条笔记中会讲到有多项式时间复杂度的LLL算法，但$N$很大时，LLL算法是找不到很小的向量的，因此笔记5我们还会讨论讨论BKZ-LLL算法。不过其运行时间有可能会达到指数级别。</p><p>不幸的是，标准晶格约简算法(如BKZ-LLL)的操作特性并没有像素数筛算法、指数微积分胡总和Pollard Rho算法那么得到较好的理解。这使得理论上很难预测晶格约简算法在任何给定的类格上的性能。 因此，在实践中，必须通过实验确定基于晶格的密码体制(如NTRU)的安全性。</p><p>粗略地说，一个参数序列$(N,q,d)$，其中$N$增长，使涉及$N,q,d$的某些比率保持近似恒定。 对于每组参数，一个人使用BKZ-LLL进行了许多实验，随着块大小的增加$β$直到算法在$L^{NTRU}_h$中找到一个短向量。 然后绘制平均运行时间对N的对数，验证点近似在线，并计算最佳拟合线$\ln(\text{Running Time}&#x3D;Ax+B)$。</p><p>在对N的许多值进行这样做之后，直到计算变得不可行时，人们可以使用这条线来推断NTRU晶格$L^{NTRU}_h$中寻找私钥向量所需的预期时间，以获得$N$的较大值。这些实验表明，$N$的值在$250$到$1000$之间，产生的安全与RSA、ElGamal和ECC目前的安全实现相当</p><p>刚刚我们说过，NTRU晶格中的短目标向量比高斯启发式预测的短$O( \sqrt N)$。 理论上和实验上，如果维数$n$的晶格具有极小的向量，例如$O(2^n)$比高斯预测短，那么LLL及其变体等晶格约简算法非常擅长于找到微小向量。 这是一个自然和非常有趣的问题，问是否只有$O(n^k)$比高斯预测短的向量也可能更容易找到。 这时，没有人知道这个问题的答案。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes3</title>
    <link href="/2021/02/04/LatticeNotes3/"/>
    <url>/2021/02/04/LatticeNotes3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记3"><a href="#huangx607087学习格密码的笔记3" class="headerlink" title="huangx607087学习格密码的笔记3"></a>huangx607087学习格密码的笔记3</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这个笔记接着之前发布的笔记2，继续往后面扩展新的内容。</p><h2 id="6-Babai算法和寻找好的基底解决apprCVP问题"><a href="#6-Babai算法和寻找好的基底解决apprCVP问题" class="headerlink" title="6.Babai算法和寻找好的基底解决apprCVP问题"></a>6.Babai算法和寻找好的基底解决apprCVP问题</h2><p>如果 一个格的基底中的向量两两正交，也就是对于任意的$i \not &#x3D; j$，均有$ \vec v_i·\vec v_j &#x3D;0 $。那么在这个格里面解决SVP和CVP问题就会是很简单的。可以证明，这个格中的最段向量就是$\vec v_1$到$\vec v_n$中的最短向量。因为向量的长度的平方为$(\sum_{i&#x3D;1}^n a_i\vec v_i)^2&#x3D;\sum _{i&#x3D;1}^n a_i^2\vec v_i^2$。又因为$a$是不全为$0$的整数，因此给基底中最短的那个向量前的系数赋值为$±1$，其他向量前的系数赋值为$0$即为我们所求的解。</p><p>而在正交基底的格中解决CVP问题，根据线性代数原理，对任意向量$\vec w$正交分解，可以分解成以下的式子：<br>$$<br>\vec w&#x3D;\sum_{i&#x3D;1}^n b_i\vec v_i,b_i \in R<br>$$<br>所以我们只需要找到一组$a$，使得$a_i$是$b_i$最近的那个整数就可以求出与$ \vec w $最接近的格中的向量。</p><p>然而，如果一个格中的基底向量是高度非正交的，也就是我们在<strong>笔记2</strong>中的<strong>52o01</strong>节提到的Hadamard比率$H(B)$接近于$0$时，CVP问题就没有那么好解决了。</p><p>一个可能的方法就是，假如给定了一个向量$\vec w&#x3D;\sum_{i&#x3D;1}^n b_i\vec v_i$。求与它最接近的格向量就是把所有的$b_i$通过四舍五入的方式转化成与其最接近的整数。不过这种方法在比较正交的基底的格中还是比较好用的，但对于由“不好的”基底组成的格来说，由于每个平行四边形（$2D$平面）会被拉的很长，那么里目标点最近的顶点的距离也会增加。因此除非基底相当正交，在维数低于$5$的格中apprCVP的这个问题还是不太好解决的。</p><p>因此，Babai算法就是在格中基底充分正交的情况下，对任意向量$\vec w$进行分解，然后取$\vec v_i$向量中的每个向量的系数$b_i$取其最接近的整数作为我们所求向量的分量。</p><p>例如，在一个三维的格中，假设$\vec v_1,\vec v_2,\vec v_3$充分正交（$H(v_1,v_2,v_3)&gt;0.7$），某个向量$\vec w$的分解表达式为$\vec w&#x3D;3.23\vec v_1+4.83\vec v_2-4.07\vec v_3$，那么与它最接近的一个格中的向量就是$3\vec v_1+5\vec v_2-4 \vec v_3$。如果$H(B)$值过于接近于$0$，那么就会导致最接近的向量值出现的偏差也会比较大，甚至很有可能就不是最近的格点了。</p><h2 id="7-基于困难格问题的密码"><a href="#7-基于困难格问题的密码" class="headerlink" title="7.基于困难格问题的密码"></a>7.基于困难格问题的密码</h2><p><strong>[Translated by baidu translation]</strong></p><p>在20世纪90年代中期，引入了几个密码系统，其潜在的硬问题是大维N的格L中的SVP和&#x2F;或CVP。其中最重要的，按字母顺序排列Dwork密码系统、Goldreich、Goldwasser和Halevi的GGH密码系统，以及Hoffstein、Pipher和Silverman提出的NTRU密码系统。</p><p>引入这些密码系统的动机是双重的。 首先，拥有基于各种硬数学问题的密码系统当然是令人感兴趣的，因为从那时起，解决一个数学问题的突破并不会损害所有系统的安全性。 其次，基于格的密码体制往往比分解或离散对数系统(如ElGamal、RSA和ECC)快得多。 粗略地说，为了实现$k$位的安全，ElGamal、RSA和ECC需要$O(K^3)$操作，而基于格的系统的加密和解密只需要$O(K^2)$操作。 此外，基于格的系统使用的简单线性代数操作在硬件和软件上非常容易实现。 然而，必须指出的是，基于格的密码体制的安全分析并不像基于因式分解和离散对数的系统那样容易理解。 因此，虽然基于点阵的系统是目前许多研究的主题，但与旧系统相比，它们的实际实现是很少的。</p><p>Ajtai-Dwork系统特别有趣，因为Ajtai和Dwork表明，除非在多项式时间内解决最坏情况下的晶格问题，否则它们的系统是可证明的安全的。 抵消这一重要的理论结果是密钥大小被证明是$O(N^4)$的实际限制，这导致了巨大的密钥。 阮和斯特恩随后表明，Ajtai-Dwork系统的任何实际和有效的实现都是不安全的。</p><p>然后我们会在下面继续讲解几个典型的格密码</p><h2 id="8-GGH公钥密码系统"><a href="#8-GGH公钥密码系统" class="headerlink" title="8.GGH公钥密码系统"></a>8.GGH公钥密码系统</h2><h3 id="8x01-加密过程"><a href="#8x01-加密过程" class="headerlink" title="8x01 加密过程"></a>8x01 加密过程</h3><p>Alice首先选取一组线性无关的向量组$\vec v_1,\vec v_2,…,\vec v_n$，它们之间是相当正交的。这样做的一个方法是确定一个参数$d&gt;0$，然后在$-d$与$d$之间随机选择基底向量$\vec v$的坐标。也可以计算它的Hadamard比率 来看看它们是否相当正交。确定好向量之后，就构建一个以$\vec v_1$到$\vec v_n$为基底的格$L$和由这些（行）向量构建的一个矩阵$V$。这些向量也将成为Alice的私钥。</p><p>Alice然后选择一个$n×n$的矩阵$U$，满足$U$中所有元素均为整数且$\det ^2 U&#x3D;1$。然后计算$W&#x3D;UV$，并将$W$中所有的行向量作为公钥。</p><p>当Bob想要传递信息给Alice时，他会选择一个小向量（比如二进制向量）作为他的明文$\vec m$。然后再选择一个小的随机扰动向量$\vec r$。然后他计算$\vec c&#x3D;\vec mW+\vec r$。$\vec c$并不是格上的点，但由于$\vec m$是一个小向量，因此$\vec r$是一个小向量。</p><p>Alice解密时也很直接，她可以使用Babai算法计算与$\vec c$最接近的格向量$\vec d $，然后计算$\vec dW^{-1}$就可以恢复明文$\vec m$</p><p>下面我们来尝试一下：</p><p>首先，Alice选择向量$\vec v_1&#x3D;(-97,19,19),\vec v_2&#x3D;(-36,30,86),\vec v_3&#x3D;(-184,-64,78)$作为基底$B$。经计算，$H(B)&#x3D;0.7462$，符合条件。</p><p>Alice构建如下矩阵$U$（其行列式为$-1$）,然后计算$W&#x3D;UV$如下图</p><img src="/2021/02/04/LatticeNotes3/1.png" alt="1" style="zoom:130%;"><p>然后，Bob设定明文为$\vec m&#x3D;(86,-35,-32)$，扰动向量为$\vec r&#x3D;(-4,-3,2)$</p><p>随后计算$\vec c&#x3D;\vec mW+\vec r&#x3D;(-79081427,-35617462,11035473)$，并将结果发送给Alice</p><p>收到消息后，Alice通过线性代数计算，分解$\vec c$得$\vec c &#x3D; 81878.97\vec v_1 − 292300.00 \vec v_2 + 443815.04 \vec v_3$.</p><p>然后她选取向量$\vec d&#x3D;81879\vec v_1 − 292300 \vec v_2 + 443815 \vec v_3&#x3D; (−79081423, −35617459, 11035471)$。容易看出$\vec d$与$\vec e$近似。然后Alice就可以计算出明文$\vec m&#x3D;\vec d W^{-1}&#x3D;(86,-35,-32)$</p><p>然而，当攻击者想要通过公钥计算密文得话，计算$\vec c&#x3D;75.76\vec w_1-34.52\vec w_2-24.18 \vec w_3$。因此得到了错误的明文$(75,-35,-24)$。原因也很简单。因为$H(V)&#x3D;0.7462$，比较大，而$H(W)&#x3D;0.00002$很小。因此导致了误差的出现。</p><p>当然，在$3$维的格中进行加解密是不安全的。后面的笔记中，我们会讲到LLL算法。</p><h3 id="8x02-附注"><a href="#8x02-附注" class="headerlink" title="8x02 附注"></a>8x02 附注</h3><p>1.我们观察到GGH是概率密码系统的一个例子，因为由于随机扰动r的选择，单个明文导致许多不同的密文。如果Bob使用不同的随机扰动两次发送相同的消息，或者使用相同的随机扰动发送不同的消息，这将导致潜在的危险。 因此，在实践中，随机扰动r是通过将哈希函数应用于明文$m$来确定的。</p><p>2.另一个版本的GGH逆转了$m$和$r$的角色，因此密文具有形式$c&#x3D;\vec rW+\vec m$。Alice通过计算最接近$c$的格向量找到$\vec rW$，然后她将明文恢复为$\vec m&#x3D;\vec c−\vec rW$。</p><h2 id="9-卷积多项式环"><a href="#9-卷积多项式环" class="headerlink" title="9.卷积多项式环"></a>9.卷积多项式环</h2><h3 id="9x01-简介"><a href="#9x01-简介" class="headerlink" title="9x01 简介"></a>9x01 简介</h3><p>在本节中，我们描述了NTRU公钥密码系统使用的特殊多项式商环，这也是在后面的笔记中我们会用到的。</p><p>固定一个整数$N$，使得卷积多项式的环是商环$R&#x3D;\dfrac{Z[x]}{x^N-1}$。同理，卷积多项式环模$q$后，剩下的环也是商环$R_q&#x3D;\dfrac{\frac{Z}{qZ}[x]}{x^N-1}$。</p><p>当然，$R$和$R_q$中的每个元素都有一个形式为$\sum _{i&#x3D;0}^{n-1}a_ix^i$。所有的$a$作为系数，取值范围为$Z$或者$Z_q$。而我们对$x^N-1$取模的原因也非常的简单，因为一旦出现了$x^N$，我们就可以将其替换成$1$，同理，出现$x^{N+1}$我们可以将其替换成$x$，</p><h3 id="9x02-无模数情况下的计算法则"><a href="#9x02-无模数情况下的计算法则" class="headerlink" title="9x02 无模数情况下的计算法则"></a>9x02 无模数情况下的计算法则</h3><p>两个多项式的加法，直接就是将$x$相同次数相加。设$f(x)&#x3D;\sum_{i&#x3D;0}^{n-1}a_ix^i,g(x)&#x3D;\sum_{i&#x3D;0}^{n-1}b_ix^i$。则<br>$$<br>f(x)+g(x)&#x3D;\sum_{i&#x3D;0}^{n-1}(a_i+b_i)x^i<br>$$<br>而对于$2$个多项式相乘$f(x)g(x)$，我们有这样的计算方法：<br>$$<br>f(x)g(x)&#x3D;\sum_{i&#x3D;0}^{n-1} \sum_{j+k\equiv i \pmod n} a_jb_k<br>$$<br>例如，假如$f(x)&#x3D;x^4+3x^3+x^2-2x+1,g(x)&#x3D;4x^4+x^3-2x^2+3x+3$。那么$f(x)+g(x)$中，$x^3$前面的系数就是$3+1&#x3D;4$。而$f(x)g(x)$中，$x^3$前面的系数则为$a_0b_3+a_1b_2+a_2b_1+a_3b_0+a_4b_4&#x3D;1×1+(-2)×(-2)+1×3+3×3+1×4&#x3D;21$。注意到这里的$n&#x3D;5$,除了$0+3,1+2,2+1,3+0 \equiv 3 \pmod 5$之外，$4+4\equiv 3 \pmod 5$也是成立的，因此不能把$a_4b_4$这一项漏掉。</p><h3 id="9x03-有模数情况下的计算法则"><a href="#9x03-有模数情况下的计算法则" class="headerlink" title="9x03 有模数情况下的计算法则"></a>9x03 有模数情况下的计算法则</h3><p>假如$n&#x3D;5$时两个多项式$f(x),g(x)$经过计算，得到了结果为$h(x)&#x3D;4x^4+23x^3-7x^2+9x-10$，如果我们想要对它模$15$的操作，我们又该怎么办呢？</p><p>很容易想到的就是把$23$换成$8$，化$h(x)$表达式为，$h(x)&#x3D;4x^4+8x^3-7x^2+9x-10$</p><p>不过在多数情况下，由于数字越小越容易计算，因此我们一般选择将所有的系数压缩在区间$(\dfrac {-q} 2,\dfrac q 2]$这个区间里，因此我们最好把$8$化成$-7$，$9$化成$-6$，$-10$化成$5$，因此最后我们化简后的表达式就是<br>$$<br>h(x)&#x3D;4x^4-7x^3-7x^2-6x+5<br>$$<br>特殊地，如果$q&#x3D;2$，那么我们所得到的一个多项式就是一个二进制多项式。并且平时为了简化计算，最好提前将$f(x)$与$g(x)$中的所有系数进行化简，然后再进行乘积。</p><h3 id="9x04-素数域中的乘法运算"><a href="#9x04-素数域中的乘法运算" class="headerlink" title="9x04 素数域中的乘法运算"></a>9x04 素数域中的乘法运算</h3><p>刚才我们讲到的那个例子中，模数$15$不是素数，而如果当模数是素数时，那么对于这个多项式环中的任意一个多项式$f(x)$，总存在唯一的一个$g(x)$，使得$f(x)g(x)\equiv 1 \pmod q$ 。此时我们称$g(x)$是$f(x)$的逆元。而这种情况下，我们可以使用扩展欧几里得计算两个多项式的最大公约式$&#x3D;1$和它们的模逆。这一步很容易在Sagemath中实现。</p><p>下面这张图具体地实现了$f(x)g(x)$结果和求$h(x),p(x)$的最大公因数，定义域为$GF(13)$，多项式最高次为$x^7$，取模$x^8-1$</p><p>注意到我们如果用欧几里得辗转相除法，计算出来的$\gcd (h(x),p(x))&#x3D;9x+4$。不过最后正确的答案却是$x+12$。因为最高次项系数为$1$的多项式计算总是非常方便的，多项式两边除以$9$（也就是乘上$9$模$13$的逆元$3$，就可以得到$x+12$的结果了）</p><p><img src="/2021/02/04/LatticeNotes3/2.png" alt="2"></p><p>模数不是素数的时候，有些步骤也是可以计算的，把$13$换成$15$，很多也是可行的。不过这里要用Zmod，因为$GF(15)$无意义。</p><p>回顾一下：只有某个数式素数或者素数幂的时候，$GF$域才有意义，例如$GF(2),GF(3),GF(7),GF(11)$或$GF(9),GF(256),GF(343),GF(14641)$</p><p><img src="/2021/02/04/LatticeNotes3/3.png" alt="3"></p><p>但环跟$GF$域不一样，无论环长度或者模数是不是素数， 环都是有意义的，并且在某些情况下，使用合数$q$产生的效果反而比使用素数来的更好（比如$q&#x3D;2^k$）</p><p>一般来说，如果$q$是素数$p$的幂，那么为了计算$R_q$中$ f(x)$的逆，首先计算$R_p$中的逆，然后“提升”这个值到$R_{p^2}$中的逆，然后在$R_{p^4}$中提升到逆，以此类推。 同样，如果$q$是多个素数（幂）$q_i$的乘积，则首先计算$R_{q_i}$中的逆，然后使用中国余数定理组合逆。</p><p><strong>Update 7.29 增加了具体实现方法：</strong></p><p>下面我们来讨论一下具体在$R_q$中求出某个多项式$f(x)$的逆，其中$q&#x3D;p^{e}$:</p><p>假设我们已知:<br>$$<br>f(x)F(x)\equiv 1 \pmod {x^n}<br>$$<br>那么我们有<br>$$<br>G(x)&#x3D;(2-f(x)F(x))F(x)<br>$$<br>使得$f(x)G(x)\equiv 1 \pmod {x^{2n}}$</p><p>以上所有的多项式计算都在 $R_q$ 中实现 </p><p><strong>Update 2023.12.11</strong> 这就是多项式求逆的公式！</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes2</title>
    <link href="/2021/02/03/LatticeNotes2/"/>
    <url>/2021/02/03/LatticeNotes2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记2"><a href="#huangx607087学习格密码的笔记2" class="headerlink" title="huangx607087学习格密码的笔记2"></a>huangx607087学习格密码的笔记2</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0. About"></a>0. About</h2><p>这个笔记接着之前发布的笔记1，继续往后面扩展新的内容。</p><h2 id="3-预备知识2：向量空间"><a href="#3-预备知识2：向量空间" class="headerlink" title="3. 预备知识2：向量空间"></a>3. 预备知识2：向量空间</h2><p>1.定义：向量空间是一组向量的集合，这些向量满足加法与数乘的封闭性。也就是对于任意的向量$\vec a ,\vec b \in V$，都有$\vec a+\vec b \in V$，$\lambda\vec a \in V(\lambda \in R)$。</p><p>2.线性无关：有$n$个向量，满足$a_1\vec v_1+a_2 \vec v_2+…+ a_n \vec v_n&#x3D; \vec 0$。若可以找到一组不全为$0$的实数使这个等式成立，那么我们就说$v_1,v_2,…,v_n$线性相关。否则$v_1,v_2,…,v_n$线性无关。</p><p>3.基底若$V$中有一组线性无关的向量$v_1,v_2,…,v_r$，那么当这$r$个向量是$V$中的一组基底时，任何一个向量$w \in V$都可以用$v_1$到$v_r$线性表示且表示方法唯一。而基底也一般可以被认为是一个极大线性无关组。</p><p>若$V$中有一组基底$v_1,v_2,…,v_n$，如果还有一组向量$w_1,w_2,…,w_n$也可以作为$V$的基底。那么可以推出，每个向量$w$都可以用$v_1$到$v_n$表示，且将表示系数写成矩阵，该矩阵的行列式不为$0$。</p><p><del>4.向量的长度、两向量夹角、向量的数量级内容略去，比较基础，高中的知识直接类比过来就可以了，当然大学的线性代数也是有的。</del></p><p>5.向量的标准正交基：如果有一组向量$e_1,e_2,…,e_n$是向量空间$V$的一组标准正交基，那么有$e_i·e_j&#x3D;0(i \not &#x3D;j)$和$|e_i|&#x3D;1$</p><p>6.施密特正交化方法</p><p><del>不知道的自行百度去，我直接上个C++代码走人，讲起来+证明耗费的篇章太大了。</del></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">double</span> a[<span class="hljs-number">70</span>][<span class="hljs-number">70</span>],b[<span class="hljs-number">70</span>][<span class="hljs-number">70</span>];<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">len</span><span class="hljs-params">(<span class="hljs-type">double</span> v[],<span class="hljs-type">int</span> dim)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">double</span> A=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=dim;i++)<br>A+=v[i]*v[i];<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(A);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">double</span> v[],<span class="hljs-type">double</span> w[],<span class="hljs-type">int</span> dim)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">double</span> A=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=dim;i++)<br>A+=v[i]*w[i];<br><span class="hljs-keyword">return</span> A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;a[i][j]);<br><span class="hljs-built_in">memcpy</span>(b[<span class="hljs-number">1</span>],a[<span class="hljs-number">1</span>],<span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">1</span>]));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>&#123;<br><span class="hljs-built_in">memcpy</span>(b[i],a[i],<span class="hljs-built_in">sizeof</span>(a[i]));<br><span class="hljs-type">double</span> tmp=<span class="hljs-built_in">mul</span>(a[i],b[j],m)/<span class="hljs-built_in">mul</span>(b[j],b[j],m);<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=m;k++)<br>b[i][k]-=tmp*b[j][k];<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-type">double</span> l=<span class="hljs-built_in">len</span>(b[i],m);<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>b[i][j]/=l;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%7.4lf &quot;</span>,b[i][j]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">3 4</span><br><span class="hljs-comment">1 6 2 4</span><br><span class="hljs-comment">5 3 3 -5</span><br><span class="hljs-comment">6 3 2 -4</span><br><span class="hljs-comment"> 0.1325  0.7947  0.2649  0.5298</span><br><span class="hljs-comment"> 0.5934  0.2516  0.3290 -0.6902</span><br><span class="hljs-comment"> 0.6193  0.4630 -0.2389  0.5874</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="4-格的基本定义与性质"><a href="#4-格的基本定义与性质" class="headerlink" title="4.格的基本定义与性质"></a>4.格的基本定义与性质</h2><p><strong>格的定义：设向量$v_1,v_2,…,v_n$是一组线性无关的向量，那么格就是由这$n$个向量的线性组合集，写成通解的形式就是</strong><br>$$<br>\vec w&#x3D;a_1\vec v_1+a_2\vec v_2+…+a_n\vec v_n| a_i \in Z<br>$$<br>其中，$v_1$到$v_n$称作格的基底，基底所包含的向量数成为格的维度。</p><p>当然，一个格中的向量可以互相转化。这个时候就需要用到转化矩阵，可以把一个格中的基底$V$转化成另一组基底$W$。那么我们就可以设置矩阵$T$，使得$W&#x3D;TV$。当然，也有$V&#x3D;T^{-1}W$。</p><p>不过这里就有个问题出现了：由于我们要求所有的$a$均为整数，那么我们就要保证$T,T^{-1}$中的每个元素都是整数。而满足这种条件下的$T$，必须满足$\det T&#x3D;±1$。</p><p>比如，假设某个三维格的向量的基底是$\vec v_1&#x3D;(5,4,-1),\vec v_2&#x3D;(2,1,2),\vec v_3(3,4,-4)$。我们就可以通过一个$\det T&#x3D;1$的矩阵$T$将其切换成另一基底,运用$W&#x3D;TV$，我们可以得到基底向量组$W$,与$V$等价。其中$\vec w_1&#x3D;(-2,17,11),\vec w_2&#x3D;(7,11,14),\vec w_3&#x3D;(-13,5,-7)$。其中系数矩阵$T$均为整数。同理，$V&#x3D;T^{-1}W$中，由于$\det T&#x3D;1$，因此$T,T^{-1}$中的每个数字也都是整数，符合格中向量的运算标准。</p><img src="/2021/02/03/LatticeNotes2/1.png" alt="1" style="zoom:80%;"><p>所以，格中的一组基底只需要写成矩阵的形式，并在其左边乘上一个行列式为$±1$的矩阵，就可以获得这个格的另一组基底。而这种矩阵的集合又称为线性群，用$\text{GL}_n(Z)$表示。这些矩阵每个元素都是整数，并且其逆矩阵的每个元素也都是整数。</p><p><strong>对格的定义2：如果$R^m$的子集$L$在加减法下是封闭的，那么它是一个加性的子群。如果存在一个正常数$r$，使得$L$中的任意一个向量$\vec v$和$R^m$中的任意一个向量$\vec w$，都有$|\vec v - \vec w|&lt;r$恒成立。</strong></p><p>说的通俗易懂一些，就是我在$L$中取任意向量$\vec v$，然后在$\vec v$周围画一个半径为$r$的实心球（$2D$平面上则是一个圆），那么这个球里面没有$L$的其他点。</p><p>所以根据我们刚才的理论：格与向量空间相似，只不过它里面的所有的向量都是由各个基底与整数相乘得来的，所以格一般用点阵表示。比如，一个最简单的格就是<br>$$<br>L:\text{ } \vec v&#x3D;(x,y)|x,y \in Z \text {}<br>$$<br>此时这个格就有一组基底为$\vec i &#x3D;(1,0)$和$\vec j&#x3D;(0,1)$，对应的就是二维坐标纸上的所有的整数点。</p><p><strong>基本域F：</strong>指所有基底围成的空间，写成表达式就是$F(\vec v_1,\vec v_2,…,\vec v_n)&#x3D;a_1\vec v_1+a_2 \vec v_2 +…+a_n \vec v_n$。其中$\vec v$是格中的基底向量，$a \in [0,1)$</p><p>例如，在我们刚才提到的最简单的那个格中，以$(0,0),(1,0),(0,1),(1,1)$四个点围成的正方形内部就是一个基本域，如下图中的灰色部分。</p><p>如果我们仍然是二维的格$P$，若该格$P$以$(1,2),(2,1)$为基底，那么基本域是由$(0,0),(1,2),(2,1),(3,3)$四点所围成的平行四边形。</p><p>假如$\vec t \in F,\vec v $是格$L$的一个基底，那么我们就可以得到其他的域$F+\vec v$，其中$\vec t$在域$F+\vec v$对应的向量是$\vec t + \vec v$</p><p>因此，这个可以覆盖整个$R^n$，当$n&#x3D;2$时，我们还以上面那个最简单的二维格为例，就可以得到坐标纸上其他的域。比如$F+\vec i,F-\vec j,F+2\vec i +2 \vec j$</p><p>在坐标纸上，我们根据我们的发现，可以看到每个小正方形的面积都是$1$，扩展到$n$维空间，我们可以类比：所有的基本域的体积都是相等的，因此，基本域体积不变是格中一个非常重要的性质。并且$F$的$n$维体积又被成为$L$的行列式，记为$\det L$。继续用上面的例子，$\det L &#x3D; 1,\det P &#x3D; 3$。并且这里的$\det $值，<strong>刚好是对应的向量写成矩阵形式后，矩阵行列式的值的绝对值。</strong></p><img src="/2021/02/03/LatticeNotes2/2.png" alt="2" style="zoom:130%;"><p>当然，这边还有一个<strong>推论：</strong> $\det L &#x3D; \text{Vol } F≤|\vec v_1||\vec v_2|…|\vec v_n|$，也就是基本域$F$的面积小于等于所有基底的长度。并且基底越趋近于正交，那么不等号两边越靠近。</p><h2 id="5-格中的短向量"><a href="#5-格中的短向量" class="headerlink" title="5.格中的短向量"></a>5.格中的短向量</h2><h3 id="5x01-两个问题："><a href="#5x01-两个问题：" class="headerlink" title="5x01 两个问题："></a>5x01 两个问题：</h3><p><strong>最短向量问题SVP</strong>：在格$L$中寻找一个向量，使它的长度最小。</p><p><strong>最接近向量问题CVP</strong>：给定一个$R^m$中的向量$\vec w$，要求在格中寻找一个向量$\vec v$，使得$\vec w-\vec v$的长度最小。</p><p>当然，SVP问题和CVP问题都可能有多个解，继续拿我们在第<strong>4</strong>节中所讲到的那个最简单的格的例子，格中的最短向量有$4$个，分别是$(0,1),(1,0),(0,-1),(-1,0)$。与$(0.5,0.5)$最接近的向量有$3$个，分别是$(0,1),(1,0),(1,1)$。而在<strong>笔记1</strong>中的2x04，2x05节，我们已经涉及到了相关的问题。<del>只不过未能详细地讲解</del></p><p>这两个问题，也将随着格维度的提升，计算也会变得越来越困难。不过一般情况下，CVP问题难度略高于SVP难度，所以在维度更高的情况下，CVP问题可以转化成SVP问题来缩短解决问题的时间。但实际上，这两个问题也基本上可以说是在无 Trapdoor Infomation的情况下是无解的。因此我们可以寻找一些具有特殊性质的问题，比如我们在<strong>笔记1</strong>中提到过的背包密码问题。</p><p>当然，这两个问题还有很多变体，比如</p><p><strong>最短基底问题SBP：</strong>在格$L$中寻找$n$个线性无关的向量作为基底，使得这些向量中最长的那个向量或者所有向量长度的平方和最小（这个问题有$2$个版本，因为不同情况下的要求是不同的）。</p><p><strong>近似最短向量问题apprSVP：</strong>假设$f(n)$是$n$的函数，那么要求在维数为$n$的格内，找到一个非零向量，使其长度不超过$f(n)$倍的整个格中的最短非零向量。</p><p>当然，不同的$f(n)$会导致问题的不同，例如$f(n)&#x3D;3n$或者$f(n)&#x3D;5\ln^4 n$都会导致问题的不同。不过一般情况下，若$f(n)$是多项式，或</p><p>者格的位数较低，那么这个问题或许会更好解一点。</p><p><strong>近似最接近向量问题apprCVP</strong>：类比于apprSVP问题。</p><h3 id="5x02-Hermite’s-theorem-and-Minkowski’s-theorem"><a href="#5x02-Hermite’s-theorem-and-Minkowski’s-theorem" class="headerlink" title="5x02  Hermite’s theorem and Minkowski’s theorem"></a>5x02  Hermite’s theorem and Minkowski’s theorem</h3><h4 id="52o01-Hermite定理"><a href="#52o01-Hermite定理" class="headerlink" title="52o01 Hermite定理"></a>52o01 Hermite定理</h4><p>我们在<strong>5x01</strong>中提到的问题，那么我们就得想一想了：最短的究竟有多长呢？下面说一下结论：格中最短向量的长度取决于格$L$的维数和行列式$\det L$的值。</p><p> <strong>(Hermite定理)</strong> 维数$n$的每一个格$L$都包含一个长度不超过$\sqrt n· \sqrt[n]{\det L}$的向量$\vec v$</p><p> <strong>(Hermite常数)</strong> 在给定维数下，每一个格$L$的最短非零向量$\vec v$的长度的平方都不超过$ y_n\sqrt[n]{\det^2 L} $。其中$y_2$到$y_8$和$y_{24}$的值是目前已知的。这些数字分别是$ \dfrac 4 3,2,4,8,\dfrac {64} 3,64,256,4 $。不过$y_n \in [\dfrac {n}{2 \pi e},\dfrac{n}{\pi e}]$</p><p>把这个定理扩展一下，有这样的结论：在维数为$n$的格$L$中，存在一组基底，使得这些基底中每个向量的长度的乘积不超过$\sqrt{n^n}·\det L$。这一是对我们之前结论”$\det L$不超过所有向量长度的乘积”这一定理的补充。</p><p><strong>Hadamard比率</strong>：假设$\vec v_1,\vec v_2,…,\vec v_n$是格$L$的一基底$B$，那么Hadamard比率$H(B)$计算公式满足$H(B)&#x3D;(\dfrac{\det L}{\prod_{i&#x3D;1}^n |\vec v_i|})^{1&#x2F;n}$。$H(B)$的值总是在$(0,1]$之间，并且这个值越接近$1$，就表示这一组基底中的向量越正交。</p><p><strong>封闭球：</strong>在向量空间$R^n$中，任何与向量$\vec a$距离不超过$r$的空间的集合，称作向量$\vec a$的封闭球，记为$B_r(\vec a)$，表达式为$(x_1-a_1)^2+(x_2-a_2)^2+…+(x_n-a_n)^2 ≤ r^2$。其中$x_1$到$x_n$是坐标分量，$a_1$到$a_n$时向量$\vec a$的分量。</p><p> <strong>4个定义</strong>：当$S$是向量空间$R^n$的一个子集时，我们有如下定义：</p><p><strong>Update 7.29 修改了2月份的逻辑错误表述</strong></p><p>如果存在一个实数$r$ 使得$S$中所有的向量都包含在封闭球$B_r(\vec 0)$中。在二维平面上就是包含在圆$x^2+y^2&#x3D;r^2$内。那么称$S$中向量的长度是<strong>有界的</strong>，</p><p>若$\vec a$在$S$中，$-\vec a$也在$S$中，并且$\vec a +(- \vec a)&#x3D; \vec 0$，那么称$S$中向量时<strong>对称的</strong>，</p><p>如果$S$中有任意两点$A,B$则线段$AB$上的每一个点都在$S$中，那么称$S$是<strong>凸性的</strong>，</p><p>如果对于$S$中的一点$A$，任意取值$r&gt;0$，$B_r(\vec {OA})$中都有属于$S$的点，则点$A$也在$S$中，那么称是<strong>封闭的</strong>，</p><h4 id="52o02-Minkowski定理"><a href="#52o02-Minkowski定理" class="headerlink" title="52o02   Minkowski定理"></a>52o02   Minkowski定理</h4><p><strong>（Minkowski定理）</strong>：设$L$是$R^n$中的一个格，$S$是$R^n$中的一个对称凸集，那么$S$的体积$\text{Vol }S&gt; 2^n \det L$时，$S$中就包含一个非零格向量。如果$S$是封闭的，那么上面的不等式也可以取等号。</p><h3 id="5x03-高斯启发式"><a href="#5x03-高斯启发式" class="headerlink" title="5x03 高斯启发式"></a>5x03 高斯启发式</h3><h4 id="53o01-伽马函数"><a href="#53o01-伽马函数" class="headerlink" title="53o01 伽马函数"></a>53o01 伽马函数</h4><p> 伽马函数的定义域是$s&gt;0$，表达式如下</p><p><img src="/2021/02/03/LatticeNotes2/3.png" alt="3"></p><p>这个函数具有一些很重要的性质：</p><p>$\Gamma (1)&#x3D;1,\Gamma(s+1)&#x3D;s\Gamma(s)$。因此，当$s \in N_+$时，$\Gamma(s)&#x3D;s!$</p><p>$\Gamma(\frac 1 2) &#x3D; \sqrt \pi$</p><p>斯特林公式：$\lim _{s \to ∞} \Gamma(1+s)^{\frac1 s} &#x3D;\dfrac s e$。更准确地说，应该是<br>$$<br> \lim _{s\to∞}\ln \Gamma (1+s)&#x3D; \ln^s (\dfrac s e)+\dfrac 1 2 \ln (2 \pi s)+O(1)<br>$$</p><p>而这个伽马公式，在计算$n$维球体的体积中也就用到了：<br>$$<br>\text{Vol}(B_r(\vec a))&#x3D;\dfrac{\pi^{\frac n 2}r^n}{\Gamma(1+\frac n 2)}<br>$$<br>当$n$较大的时候，这个$n$维球体的体积体积也近似于<br>$$<br>\text{Vol}(B_r(\vec a))^{\frac 1 n} ≈r\sqrt{\dfrac{2\pi e}{n}}<br>$$<br>又因为$\text{Vol}(B_r(\vec 0))≥2^n \det L$时，$B_r(0)$里面有非$0$格点。因此，当$n$较大的时候，球的半径的选取应该满足以下条件：<br>$$<br>r\sqrt{\dfrac{2\pi e}n}-2(\det L)^{\frac1n}&#x3D; 0^+<br>$$<br>因此，当$n$很大的时候，$L$中也存在一个非零向量$\vec v$，满足<br>$$<br>|\vec v|-\sqrt{\dfrac{2n}{\pi e}}&#x3D;0^-<br>$$<br>其中，有$\sqrt{\dfrac{2}{\pi e}}&#x3D;0.484$</p><p>虽然在维数很大的时候，最段向量的长度是未知的，但是我们还是可以通过以下方法使用概率参数来估计它的大小：</p><p>在$r$很大的时候，$\text{Vol }{B_r(\vec 0)}$除以基本域$F$的体积$\text{Vol }F$ 近似等于$B_r(\vec 0)$中的格点数。</p><p>举个简单的例子，$x^2+y^2&#x3D;r^2$中的整点数量约等于$\pi r^2$，也就是元的面积除以小正方形的面积$1$。</p><p>因此，我们很多情况下，都是想找到一个尽可能小的$r$值，使得球$B_r(\vec 0)$中至少有一个格点。，这就有了我们上面的估计表达式，移项，就有了<br>$$<br>r≈\sqrt{\dfrac{n}{2\pi e}}·\sqrt[n]{\det L}&#x3D;\sigma (L)<br>$$<br>这就是我们得到的启发式，用$\sigma(L)$表示。</p><p>更准确地说，对于一个$c&#x3D;0^+$的固定常数，那么对于一切维数为$n$的格$L$,都有<br>$$<br>|\vec v_{\text{shortest}}| \in[ \text{  }(1-c)\sigma(L),(1+c)\sigma(L) \text{  }]<br>$$<br>当$n$的数字较小时，对于$B_r(\vec 0)$的体积，估计式为<br>$$<br>\sigma(L)&#x3D;\dfrac{(Γ((1+\frac{n}{2})·\det L))^\frac1n}{\sqrt \pi}<br>$$<br>通过SVP问题来类比CVP问题，可以推出：$\sigma (L)$的值也是$|\vec w - \vec v|$最小值的期望值。</p><p>就像SVP一样，如果$L$包含一个比$σ(L)$更接近$\vec w$的点，那么晶格约简算法就更容易求解CVP。</p><h2 id="99-注"><a href="#99-注" class="headerlink" title="99.注"></a>99.注</h2><p>由于向量可以用坐标表示，因此此博客中，向量表示的也可以视为某个坐标，比如博客中最后一句话中的$\vec w$就是用向量的方法来表示某个点的坐标。 </p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatticeNotes1</title>
    <link href="/2021/02/01/LatticeNotes1/"/>
    <url>/2021/02/01/LatticeNotes1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习格密码的笔记1"><a href="#huangx607087学习格密码的笔记1" class="headerlink" title="huangx607087学习格密码的笔记1"></a>huangx607087学习格密码的笔记1</h1><h2 id="0-About"><a href="#0-About" class="headerlink" title="0.About"></a>0.About</h2><p>校内同级某人早就对这一方法有过较为深入的了解，而进入了2月才刚刚开始学习，一下子就比别人慢了半个月，或许自己就算4月进了校队，也无法跟那家伙拼吧（，<del>算了，还是先保住自己目前4.24的GPA吧。</del></p><h2 id="1-引入内容（Known-Unknown）"><a href="#1-引入内容（Known-Unknown）" class="headerlink" title="1.引入内容（Known -&gt; Unknown）"></a>1.引入内容（Known -&gt; Unknown）</h2><h3 id="1x01-简介"><a href="#1x01-简介" class="headerlink" title="1x01 简介"></a>1x01 简介</h3><p>众所周知，公钥密码学的安全性，往往建立在数学问题的困难性上。如 RSA 基于大数分解的困难性，DH 和 Elgamal 以及 ECC，是基于有限域上求离散对数的困难性。我们接下来要考虑一类新的难题，它们支撑了格（lattice）密码学。</p><p>对比起之前的公钥密码学体系，格密码提供了许多优势：首先，<strong>加密、解密速度可以更快</strong>（RSA 慢得难以忍受）；<strong>可以抵抗量子攻击</strong>。目前来看，暂且没有量子算法可以高效解决 lattice 难题。</p><p>在谈到格之前，我们先进行一些引入工作：</p><p>线性代数中讲过，在实数集$R$上有向量空间$V$,其中向量空间$V$是一部分向量的集合，并且任意两个向量相加，或者是某个向量的数乘，在$V$中仍然有意义。比如，假定$\vec{a},\vec{b} \in V$，则$\vec{a}+\vec{b},2\vec{a}$仍然在向量空间$V$内。</p><p>而格实际上就与向量空间相似，不过对于格中的向量的数乘，我们仅限于乘上整数。</p><h3 id="1x02-引例——一个新的密码系统"><a href="#1x02-引例——一个新的密码系统" class="headerlink" title="1x02 引例——一个新的密码系统"></a>1x02 引例——一个新的密码系统</h3><p>我们先来看一个很简单的问题，而这个问题也开始与一个维度为$2$的格有所联系了。不过由于维度很低，它的安全性很弱，但它可以作为一个很恰当的引例，因为它可以说明如何在密码分析中出现晶格，即使潜在的硬问题似乎与晶格无关。 此外，它还提供了NTRU公钥密码系统的最低维介绍。</p><p>加密开始，Alice先选择一个大的正整数$q$（不一定是素数）为一个公共参数作为公钥，并选择两个秘密的正整数$f,g$作为私钥，其中$f&lt;\sqrt{\dfrac{q}{2}},\sqrt{\dfrac{q}{4}}&lt;g&lt;\sqrt{\dfrac{q}{2}}$且$\gcd(f,q)&#x3D;1$。</p><p>​然后，Alice可以计算$h\equiv f^{-1}g\pmod q$。我们可以注意到$f,g$都小于$\sqrt q$，也就是说$f,g$的数量级是$O(\sqrt q)$的级别。而$h$的范围则是$O(q)$，在$q$很大的时候（比如$q&gt;2^{256}$）时，$h$可以说是远大于$f,g$的。这个$h$也将作为公钥。随后，Alice将公钥$q,h$公开。</p><p>作为信息发送方，Bob对信息加密的时候，也需要用到$2$个参数：明文$m$和一个随机数$r$，其中$m&lt;\sqrt{\dfrac{q}{4}},r&lt;\sqrt{\dfrac{q}{2}}$。然后他就可以计算密文$c\equiv rh+m \pmod q$。</p><p>而收到密文后，Alice的解密过程如下：首先，他计算$a\equiv fc \pmod q$和$b\equiv ad \pmod g$，其中$d$是$f$在模$g$意义下的逆元。而神奇的是，对于$a&#x3D; fc&#x3D;frh+fm&#x3D;frf^{-1}g+fm&#x3D;rg+fm$。然后，我们可以得到$b&#x3D;ad&#x3D;drg+dfm\equiv dfm \pmod g$。又因为$df\equiv 1 \pmod g$，所以我们最后算出来的$b&#x3D;m$就成立了。</p><p>我们可以用Python的代码尝试一下整个加密和解密的过程。我们以  $q&#x3D;1000170007,f&#x3D;19653,g&#x3D;18557$为一组测试数据试试看</p><p>首先，准备阶段计算$h\equiv f^{-1}g\pmod q&#x3D;999304853$,这个数字达到了$O(q)$的级别,对外公布$q,h$</p><p>加密方设置明文为$m&#x3D;12345$，选取随机数为$r&#x3D;20932$，计算$c\equiv rh+m&#x3D;893838950$。</p><p>解密方收到$c$之后，计算$a\equiv fc \pmod q&#x3D;631051409$。然后计算$d\equiv f^{-1}\pmod g&#x3D;10887$。</p><p>最后计算$b&#x3D;da&#x3D;10887×631051409&#x3D;6870256689783\equiv 12345 \pmod g$，最终获得了明文为$12345$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-comment">#PREPARE</span><br>q=<span class="hljs-number">1000170007</span> <span class="hljs-comment">#sqrt(q/4),sqrt(q/2)=15812,22362</span><br>f,g=<span class="hljs-number">19653</span>,<span class="hljs-number">18557</span><br><span class="hljs-keyword">assert</span> GCD(q,f)==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> GCD(f,g)==<span class="hljs-number">1</span><br>h=g*inverse(f,q)%q<br><span class="hljs-built_in">print</span>(q,h)<br><span class="hljs-comment">#ENCRYPT</span><br>m,r=<span class="hljs-number">12345</span>,bytes_to_long(urandom(<span class="hljs-number">80</span>))%(iroot(q//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]-<span class="hljs-number">10</span>)<br>c=(r*h+m)%q<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment">#DECRYPT</span><br>a=f*c%q<br>d=inverse(f,g)<br>b=a*d%g<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-comment">#1000170007 999304853</span><br><span class="hljs-comment">#893838950</span><br><span class="hljs-comment">#12345</span><br></code></pre></td></tr></table></figure><h3 id="1x03-对1x02中密码系统的攻击"><a href="#1x03-对1x02中密码系统的攻击" class="headerlink" title="1x03 对1x02中密码系统的攻击"></a>1x03 对1x02中密码系统的攻击</h3><p>很显然，由于$f,g$的数量级均为$O(\sqrt q)$，因此暴力枚举的的复杂度是$O(q)$。不过我们可以换一种思路来分析这个问题：攻击者的任务就是找到一组数量级$O(\sqrt q)$的数字$F,G$满足$Fh\equiv G\pmod q$。这个时候$(F,G)$就很可能会充当解密密钥。将刚才的同余式写成方程的形式，也就是$Fh&#x3D;G+Kq$。也就是$Fh-Kq&#x3D;G$。根据线性代数的相关知识，我们可以构建这样的式子：$F(1,h)-K(0,q)&#x3D;(F,G)$。也就是写成了向量加减的形式。其中$\vec a&#x3D;(1,h),\vec b&#x3D;(0,q),\vec d&#x3D;(F,G)$。这个时候，我们就可以构建一个二维的格$L&#x3D;{ A\vec a+B \vec b| A,B\in Z}$。然后在$L$中寻找向量即可。而这个方法也是非常简单的，故上面这个密码体系很容易就能被攻破了。</p><h2 id="2-子集问题和背包密码系统"><a href="#2-子集问题和背包密码系统" class="headerlink" title="2.子集问题和背包密码系统"></a>2.子集问题和背包密码系统</h2><h3 id="2x01-引入"><a href="#2x01-引入" class="headerlink" title="2x01 引入"></a>2x01 引入</h3><p>作为一个早已退役OIer$\text{(NOIP 2018 245pts)}$，对于$0,1$背包问题是非常熟悉的。不过这里的一个背包密码系统，也可以类比我以前的相关知识：</p><p>给你一个数集$M&#x3D;{a_1,a_2,a_3,\dots,a_n}$和一个整数$b$，在集合中$M$选取一个非空子集$M_0$，使得$(\sum _{i \in M_0} i)&#x3D;b$。</p><p>举个例子，比如$M&#x3D;{4,5,12,15,17},b&#x3D;24$。很显然我们可以选取$M$的子集$M_0&#x3D;{4,5,15}$，这样$M_0$中所有元素之和就等于$24$了。并且这是一个唯一的选法。当然，如果当我们把需求从$24$改成了$32$那么$M_0&#x3D;{5,12,15}$，也可以选取$M_0&#x3D;{15,17}$。这样就有两种选法了。</p><p>当然，这个子集问题，也可以采用线性代数的方法来解决。我们只需要构造一个方程$\sum _{i&#x3D;1}^n a_ix_i&#x3D;b$即可，其中$x_i\in{0,1}$。如果在已知$M$和$b$的情况，这个算法的复杂度是$O(2^n)$，因为我们可以设向量$\vec X&#x3D;(x_1,x_2,\dots,x_n)$，$\vec X$是一个$n$维向量，每个分量取值为$0$或者$1$。当然，有一种方法，可以将指数减半，这样算法复杂度就变成了$1.4143^n$</p><p>具体做法如下：</p><p>首先，假设$M$集合中的数是一个递增序列，那么我们可以将这个集合切成两半，然后枚举所有的集合$I$为集合${a_1,a_2,…,a_{n&#x2F;2}}$的子集，和枚举所有的$J$为集合${a_{n&#x2F;2+1},a_{n&#x2F;2+2},…,a_n}$的子集。并分别列出列表$A,B$分别对应所有$I$的元素之和和所有$J$的元素之和。如果存在某个$I$和某个$J$使使得这两个集合中所有元素之和等于$b$，那么我们就解决了这样的一个问题。而这，也是一个典型的中间人攻击的例子。</p><p>这个工作的时间复杂度为$O(2^{n&#x2F;2})&#x3D;O(1.4143^n)$，明显是快于原方法$O(2^n)$的。</p><p>然而，这里对于任何人来说，解密的复杂度都一样，均为$O(1.4143^n)$。即使是真正的解密者，也不会有所谓的$\text{Trapdoor Infomation}$能够快速出解，那么能不能构造一个所谓的$\text{Trapdoor Infomation}$使得持有私钥的人快速解密呢？</p><h3 id="2x02-超级递增序列"><a href="#2x02-超级递增序列" class="headerlink" title="2x02 超级递增序列"></a>2x02 超级递增序列</h3><p>下面我们引入一个超级递增序列的概念：就是对于这个集合中的每一个数，前一个数都大于等于上一个数的$2$倍，那么这个序列就可以被称作超级递增序列。比如：$(1,3,9,27,81,243,729)$和$(1,5,13,44,118,395,806)$都满足条件，因此这两个序列均为超级递增序列。</p><p>超级递增序列有个性质，就是第$i$个数大于他前面所有数字之和。那么这个时候，我们可以使用贪心算法，在$O(n)$的线性复杂度里算出密钥，具体做法如下。</p><p>假定我们选定的序列为$M&#x3D;(1,3,9,27,81,243)$，$b&#x3D;91$，那么我们可以使用这样的方法计算：首先，我们发现$81&lt;91&lt;243$，那么我们从序列第$5$位开始，计算$b-a_5&#x3D;91-81&#x3D;10$，所以解密密钥$x_5&#x3D;1$。然后，我们发现$9&lt;10&lt;27$，这个时候我们直接计算$10-9&#x3D;1$，解密密钥$x_3&#x3D;1$，最后的$1-1&#x3D;0$，所以解密密钥$x_1&#x3D;0$，因此，我们可以得到解密密钥为$\vec X&#x3D;(1,0,1,0,1,0)$。</p><p>但是这样，攻击者也可以通过相同的方法，快速破解这个密钥。</p><h3 id="2x03-一个新的公钥密码体系Merkle-Hellman-Algorithm"><a href="#2x03-一个新的公钥密码体系Merkle-Hellman-Algorithm" class="headerlink" title="2x03 一个新的公钥密码体系Merkle -Hellman  Algorithm"></a>2x03 一个新的公钥密码体系Merkle -Hellman  Algorithm</h3><p>MH-A算法是基于超级递增序列子集问题的一个公钥密码学体系，它使用同余进行伪装，然后通过创建公钥对和私钥对完成加密和解密的一系列操作。</p><p>首先，Alice创造一个超级递增序列$\vec R&#x3D;(r_1,r_2,…,r_n)$和$2$个大整数$A,B$满足$B&gt;2r_n,\gcd(A,B)&#x3D;1$。然后Alice创造一个新的序列$\vec M&#x3D;(m_1,m_2,…,m_n)$，使得$m_i \equiv Ar_i \pmod B$，并公开$M$，作为公钥。</p><p>Bob收到密钥之后，设明文为$\vec X$，其中$\vec X$是一个$n$维向量，每个分量取值为$0$或$1$。然后Bob计算$C&#x3D;\vec X ·\vec M$完成加密。</p><p>Alice收到密文后，只需要计算出$D&#x3D;A^{-1}C \pmod B$，然后求$D$在集合$\vec R$ 中的一个表示方法$\vec Q$即可解密。</p><p>简单证明一下$\vec Q&#x3D;\vec X$</p><p>由于$D\equiv A^{-1}\sum_{i&#x3D;1}^{n} x_im_i \equiv A^{-1}\sum_{i&#x3D;1}^{n} Ax_ir_i \equiv \sum_{i&#x3D;1}^{n} x_ir_i\pmod B$。而又有$B&gt;2r_n$，因此$D$就是$\vec X ·\vec R$的真实值</p><p>下面上一下代码：为了简单，我们以$5$维向量为例：假设$\vec R&#x3D;(2,5,13,34,87),A&#x3D;100,B&#x3D;227$，那么根据Alice的计算，可得$\vec M&#x3D;(200,46,165,222,24)$。</p><p>然后Bob设定的密文$\vec X&#x3D;(1,1,0,1,0)$，计算$C&#x3D;\vec X·\vec M&#x3D;468$作为密文。</p><p>Alice根据Bob的密文$C&#x3D;468$，计算$D\equiv A^{-1}C\equiv 84×468 \equiv 41 \pmod {227}$。</p><p>然后将$D$用$\vec R$中的元素进行$0,1$表示，即可还原明文$\vec X$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-comment">#PREPARE</span><br>R,A,B=[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">13</span>,<span class="hljs-number">34</span>,<span class="hljs-number">87</span>],<span class="hljs-number">100</span>,<span class="hljs-number">227</span><br><span class="hljs-keyword">assert</span> GCD(A,B)==<span class="hljs-number">1</span><br><span class="hljs-keyword">assert</span> B&gt;R[<span class="hljs-built_in">len</span>(R)-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(R)):<br>    <span class="hljs-keyword">assert</span> R[i]&gt;=<span class="hljs-number">2</span>*R[i-<span class="hljs-number">1</span>]<br>M=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> R:<br>    M.append(A*i%B)<br><span class="hljs-built_in">print</span>(M)<br><span class="hljs-comment">#ENCRYPT</span><br>X=[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]<br>C=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R)):<br>    C+=X[i]*M[i]<br><span class="hljs-built_in">print</span>(C)<br><span class="hljs-comment">#DECRYPT</span><br>D,t=C*inverse(A,B)%B,<span class="hljs-built_in">len</span>(R)-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(D)<br>Q=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(R))]<br><span class="hljs-keyword">while</span> D <span class="hljs-keyword">and</span> t+<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span>(D&gt;=R[t]):<br>        Q[t]=<span class="hljs-number">1</span><br>        D-=R[t]<br>    t-=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(Q,Q==X)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[200, 46, 165, 222, 74]</span><br><span class="hljs-string">468</span><br><span class="hljs-string">41</span><br><span class="hljs-string">[1, 1, 0, 1, 0] True</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2x04-对2x03中加密系统的攻击"><a href="#2x04-对2x03中加密系统的攻击" class="headerlink" title="2x04 对2x03中加密系统的攻击"></a>2x04 对2x03中加密系统的攻击</h3><p>2x03中我们提到的密码体系又称作子集公钥密码学系统或者背包密码学系统。其核心思想是生成一个超级递增序列，然后用模线性运算进行混淆，将混淆之后的序列作为公钥。</p><p>然而，这一密码系统也有比较大的缺点。由于$M$是一个$n$个整数的列表，每个整数有$2^n$比特长。明文的长度是$n$，密文的长度是$2n$。因此这算是一个$2-\text{to}- 1$的密码体系。当$n&#x3D;160$时，整个公钥的大小大约是$51200$位以上，远远超过了RSA,ECC等使用广泛的公钥密码系统，不过这个算法由于乘幂和取模较少，因此加密速度也远快于RSA和ECC，因此这一性质也成为了一个比较吸引人的研究点。</p><p>然而，如果我们想要获得一个$300$位，比较安全的背包密码学系统，那么整个私钥空间将超过$180\text{KB}$。因此，理论上安全的背包密码基本不存在。</p><p>而攻击者想要用向量重新计算子集的问题，那么攻击者就要从$M$中写出$S$的子集和，那么攻击者就可以形成一个这样的矩阵，其中$b&#x3D;C$，$\text{ones}&#x3D;(1,1,1,…,1)$，$E$为$n$阶单位矩阵，$M$改写成列向量的形式</p><img src="/2021/02/01/LatticeNotes1/1.png" alt="1" style="zoom:80%;"><p>在上面的例子里，我们的矩阵就是这个样子的：</p><img src="/2021/02/01/LatticeNotes1/2.png" alt="2" style="zoom:67%;"><p>把矩阵分离出行向量，那么就有$\vec v_1&#x3D;(2,0,0,0,0,200),\vec v_2&#x3D;(0,2,0,0,0,46),\vec v_3&#x3D;(0,0,2,0,0,165),\vec v_4&#x3D;(0,0,0,2,0,222),\vec v_5&#x3D;(2,0,0,0,2,74)$</p><p>然后还有一个附加向量$\vec w&#x3D;(1,1,1,1,1,468)$</p><p>然后，我们就可以构建这样一个格$L$，以${v_1,v_2,v_3,v_4,v_5,w}$为基底。那么很显然，$\vec{t}&#x3D;\sum_{i&#x3D;1}^5(2v_i-w)&#x3D;(2x_1-1,2x_2-1,2x_3-1,2x_4-1,2x_5-1,0) \in L$。由于所有的$x$的取值只有$0$和$1$。那么向量$\vec t$的出最后一个分量为$0$外均为$±1$.。我们可以得到$||\vec t||&#x3D;O(\sqrt n)$。而这个格中的向量，长度都达到了$O(4^n)$，所以向量$ \vec t$可以被认为是一个短向量。</p><p>所以，攻击者只需要找到格中的一个最短的非$0$向量，那么就可以恢复明文。</p><p>在格中找到短向量的算法称为格减算法。 其中最著名的是LLL算法</p><h3 id="2x05-LLL算法的初步实现-in-Sagemath"><a href="#2x05-LLL算法的初步实现-in-Sagemath" class="headerlink" title="2x05 LLL算法的初步实现 in Sagemath"></a>2x05 LLL算法的初步实现 in Sagemath</h3><p><img src="/2021/02/01/LatticeNotes1/3.png" alt="3"></p><p>可以看到，第一行向量是$(-1,-1,1,-1,1|0)$，取相反向量得$(1,1,-1,1,-1|0)$，加上$1$然后除以$2$，得$(1,1,0,1,0|0)$，所以通过LLL算法，我们很快就得到了答案为$(1,1,0,1,0)$。</p><p><strong>Update 8.30</strong></p><p>实际上，这边还有更好的一个矩阵构造方法如图：</p><p>也就是上面的分块矩阵中：$2E$改成$E$，$\mathrm{ones}$改成$\vec 0$，$b$改成$-b$后，结果是一模一样的。</p><p><img src="/2021/02/01/LatticeNotes1/4.png" alt="4"></p><p>用这个方法，可以直接得到答案为$(1,1,0,1,0)$，不需要对数据进行第二步的处理。</p><p>后面对于LLL算法还会有更多笔记，此处仅仅是提及一下，后面的笔记会详细讲解。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Jan4</title>
    <link href="/2021/01/29/21Jan4/"/>
    <url>/2021/01/29/21Jan4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087寒假的切题4"><a href="#huangx607087寒假的切题4" class="headerlink" title="huangx607087寒假的切题4"></a>huangx607087寒假的切题4</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>今天BUUCTF上到了2000分，后面剩下的题目就都是那些90+分，做出来的人很少的那种了，难度也是非常大的。因此打算后面几天把理论看看，<del>并且还要打杭电持续一个月的CTF，自己的人工智能项目也摸了3天了，哎</del></p><h2 id="1-GUET-CTF2019-Uncle-Sam"><a href="#1-GUET-CTF2019-Uncle-Sam" class="headerlink" title="1.[GUET-CTF2019]Uncle Sam"></a>1.[GUET-CTF2019]Uncle Sam</h2><p>我们还是先看一下加密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generkey</span>(<span class="hljs-params">k</span>):<br>p, q = getPrime(k), getPrime(k)<br>pubkey = p**<span class="hljs-number">2</span> * q<br>n = pubkey<br>l = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>) / gcd(p-<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>)<br>privkey = inverse(n, l)<br><span class="hljs-keyword">return</span> pubkey, privkey<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, pubkey</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(bytes_to_long(m), pubkey, pubkey)<br><span class="hljs-comment"># n =  *</span><br><span class="hljs-comment"># d = *</span><br><span class="hljs-comment"># c = * 给出部分略去</span><br><br></code></pre></td></tr></table></figure><p>很显然，这与RSA不一样，因为这道题公钥$n&#x3D;p^2q$，虽然貌似也出现过所谓的$p^2q$之类的分解因式法，不过这貌似也并不可分解。</p><p>注意到$l&#x3D;\text{lcm}(p-1,q-1)$，并且还给出了私钥$d$值位$n$模$l$下的逆元。查阅了相关资料，可以得知这是Schmidt-Samoa 公钥密码体系。</p><p>这一加密体系中，加密过程是$c\equiv m^n \pmod n $，而解密函数则是$m\equiv c^d\pmod{pq} $</p><p>下面简单地证明一下：</p><p>已知<br>$$<br>\phi(n)&#x3D;\phi(p^2q)&#x3D;p(p-1)(q-1)<br>$$<br>由费马小定理，可以推出<br>$$<br>a^{p(p-1)(q-1)} \equiv 1 \pmod n<br>$$<br>又因为<br>$$<br>dn\equiv 1 \pmod {(p-1)(q-1)}<br>$$<br>所以<br>$$<br>a^{nd}\equiv a^{nd \mod ((p-1)(q-1))} \equiv a<br>$$<br>所以<br>$$<br>a^{nd}-a\equiv 0 \pmod{pq}<br>$$<br>因此<br>$$<br>pq&#x3D;\gcd(a^{nd}-a,n)<br>$$<br>由于$a$是任意的数字，因此我们可以取$a&#x3D;2,3,4…$均可，为方便起见这里取$2$</p><p>解密代码非常短，不过推出这个式子还是非常不容易的（，何况这个加密方法一开始自己也没怎么接触过，看到$pq$总是会想到RSA上去。根本原因还是自己<del>太菜了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> n,c,d<br>x=GCD(n,<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n*d,n)-<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,x)))<br></code></pre></td></tr></table></figure><h2 id="2-XNUCA2018-baby-crypto"><a href="#2-XNUCA2018-baby-crypto" class="headerlink" title="2.[XNUCA2018]baby_crypto"></a>2.[XNUCA2018]baby_crypto</h2><p>题目给出的内容非常简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">The <span class="hljs-number">26</span> letters a, b, c, ..., y, z correspond to the integers <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ..., <span class="hljs-number">25</span><br><span class="hljs-built_in">len</span>(key_a) = m<br><span class="hljs-built_in">len</span>(key_k) = n<br>c[i] = (p[i] * key_a[i % m] + key_k[i % n]) % <span class="hljs-number">26</span><br>p <span class="hljs-keyword">is</span> plain text, only lowercase letters are refered to.<br>c <span class="hljs-keyword">is</span> encrypted text<br>I have appended the flag at the end of plain text, the <span class="hljs-built_in">format</span> of which <span class="hljs-keyword">is</span> like <span class="hljs-string">&#x27;flagis......&#x27;</span><br>Now you have the encrypted text, Good luck!<br></code></pre></td></tr></table></figure><p>很显然这是一个线性的加密，应该跟Vigena密码相似，我们还是一样，每$3$个字母一组，求出周期。</p><h3 id="PART-1-求周期部分"><a href="#PART-1-求周期部分" class="headerlink" title="PART 1 求周期部分"></a>PART 1 求周期部分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s;<br>map&lt;string,<span class="hljs-type">int</span>&gt;lst,mil;<br><span class="hljs-function">string <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>string c=<span class="hljs-string">&quot;&quot;</span>;<br>c+=(x/(<span class="hljs-number">26</span>*<span class="hljs-number">26</span>))<span class="hljs-number">+97</span>;<br>c+=(x%(<span class="hljs-number">26</span>*<span class="hljs-number">26</span>)/<span class="hljs-number">26</span>)<span class="hljs-number">+97</span>;<br>c+=x%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;enc.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;detPro.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br><span class="hljs-type">int</span> i,j;<br>cin&gt;&gt;s;<br>s=<span class="hljs-string">&quot; &quot;</span>+s;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;s.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(lst[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]==<span class="hljs-number">0</span>)<br>lst[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]=i;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> det=i-lst[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)];<br><span class="hljs-keyword">if</span>(mil[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]==<span class="hljs-number">0</span>)<br>mil[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]=det;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">if</span>(det&gt;<span class="hljs-number">10</span>)<br>mil[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]=<span class="hljs-built_in">min</span>(det,mil[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]);<br>lst[s.<span class="hljs-built_in">substr</span>(i,<span class="hljs-number">3</span>)]=i;<br>&#125;<br>&#125; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">26</span>*<span class="hljs-number">26</span>*<span class="hljs-number">26</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(mil[<span class="hljs-built_in">f</span>(i)]!=<span class="hljs-number">0</span>)<br>cout&lt;&lt;<span class="hljs-built_in">f</span>(i)&lt;&lt;<span class="hljs-string">&quot;   &quot;</span>&lt;&lt;mil[<span class="hljs-built_in">f</span>(i)]&lt;&lt;endl; <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>打开最后的文件，我们可以看到，最后很多的间隔都是$6$的倍数，比如$6,12,18,24,30,…$之类的数字，因此可以猜测，周期应该是$6$。</p><h3 id="PART-2-分割-求表达式"><a href="#PART-2-分割-求表达式" class="headerlink" title="PART 2 分割&amp;求表达式"></a>PART 2 分割&amp;求表达式</h3><p>得到周期是$6$之后，我们可以把原来的密文拆分成$6$个文件，间隔$6$个字母一个文件进行输出，然后分别求表达式。</p><p>求表达式的时候，由于加密是一次函数，因此我们不需要考虑加密函数，直接枚举解密函数（也是一次函数，一共有$12×26$个），然后根据字母频率分析，计算方差即可，最后将方差排个序，每次选出最小的那个即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">double</span> pos[<span class="hljs-number">26</span>],cul[<span class="hljs-number">26</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">asdf</span>&#123;<span class="hljs-type">int</span> K,B;<span class="hljs-type">double</span> loss;<br>&#125;data[<span class="hljs-number">500</span>];<br><span class="hljs-type">int</span> n,k[<span class="hljs-number">12</span>],str[<span class="hljs-number">40000</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(asdf a,asdf b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a.loss&lt;b.loss;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br>pos[<span class="hljs-number">0</span>]=<span class="hljs-number">8.15</span>,pos[<span class="hljs-number">1</span>]=<span class="hljs-number">1.44</span>,pos[<span class="hljs-number">2</span>]=<span class="hljs-number">2.76</span>,pos[<span class="hljs-number">3</span>]=<span class="hljs-number">3.79</span>;<br>pos[<span class="hljs-number">4</span>]=<span class="hljs-number">13.11</span>,pos[<span class="hljs-number">5</span>]=<span class="hljs-number">2.92</span>,pos[<span class="hljs-number">6</span>]=<span class="hljs-number">1.99</span>,pos[<span class="hljs-number">7</span>]=<span class="hljs-number">5.26</span>;<br>pos[<span class="hljs-number">8</span>]=<span class="hljs-number">6.35</span>,pos[<span class="hljs-number">9</span>]=<span class="hljs-number">0.13</span>,pos[<span class="hljs-number">10</span>]=<span class="hljs-number">0.42</span>,pos[<span class="hljs-number">11</span>]=<span class="hljs-number">3.39</span>;<br>pos[<span class="hljs-number">12</span>]=<span class="hljs-number">2.54</span>,pos[<span class="hljs-number">13</span>]=<span class="hljs-number">7.1</span>,pos[<span class="hljs-number">14</span>]=<span class="hljs-number">8</span>,pos[<span class="hljs-number">15</span>]=<span class="hljs-number">1.98</span>;<br>pos[<span class="hljs-number">16</span>]=<span class="hljs-number">0.12</span>,pos[<span class="hljs-number">17</span>]=<span class="hljs-number">6.83</span>,pos[<span class="hljs-number">18</span>]=<span class="hljs-number">6.1</span>,pos[<span class="hljs-number">19</span>]=<span class="hljs-number">10.47</span>;<br>pos[<span class="hljs-number">20</span>]=<span class="hljs-number">2.46</span>,pos[<span class="hljs-number">21</span>]=<span class="hljs-number">0.92</span>,pos[<span class="hljs-number">22</span>]=<span class="hljs-number">1.54</span>,pos[<span class="hljs-number">23</span>]=<span class="hljs-number">0.17</span>;<br>pos[<span class="hljs-number">24</span>]=<span class="hljs-number">1.98</span>,pos[<span class="hljs-number">25</span>]=<span class="hljs-number">0.08</span>; <br>FILE *fp;<br>fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;enc6.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-type">char</span> c;<br>str[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4771</span>;i++)<br>&#123;<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>str[i]=c<span class="hljs-number">-97</span>;<br>&#125;<br><span class="hljs-built_in">fclose</span>(fp);<br>k[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,k[<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>,k[<span class="hljs-number">2</span>]=<span class="hljs-number">5</span>,k[<span class="hljs-number">3</span>]=<span class="hljs-number">7</span>,k[<span class="hljs-number">4</span>]=<span class="hljs-number">9</span>,k[<span class="hljs-number">5</span>]=<span class="hljs-number">11</span>;<br>k[<span class="hljs-number">6</span>]=<span class="hljs-number">15</span>,k[<span class="hljs-number">7</span>]=<span class="hljs-number">17</span>,k[<span class="hljs-number">8</span>]=<span class="hljs-number">19</span>,k[<span class="hljs-number">9</span>]=<span class="hljs-number">21</span>,k[<span class="hljs-number">10</span>]=<span class="hljs-number">23</span>,k[<span class="hljs-number">11</span>]=<span class="hljs-number">25</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">culcvarp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">double</span> P=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>P+=(cul[i]-pos[i])*(cul[i]-pos[i]);<br><span class="hljs-keyword">return</span> P;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-type">int</span> K,<span class="hljs-type">int</span> B)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++) cul[i]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">4771</span>;i++)<br>cul[(K*str[i]+B)%<span class="hljs-number">26</span>]++;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>cul[i]/=<span class="hljs-number">47.71</span>;<br>data[++n].K=K,data[n].B=B,data[n].loss=<span class="hljs-built_in">culcvarp</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<br><span class="hljs-built_in">transform</span>(k[i],j);<br><span class="hljs-built_in">sort</span>(data<span class="hljs-number">+1</span>,data+n<span class="hljs-number">+1</span>,cmp);s<br>FILE *fp;<br>fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;fnc&amp;pso6.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;D(x)=%dx+%d:loss=%.9lf\n&quot;</span>,data[i].K,data[i].B,data[i].loss);<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>每次求出来后，我们可以发现，输出的第一个表达式的loss只有$12$左右，而第二个表达式的loss已经达到了$200+$，因此我们可以断定，第一个表达式就是我们想求的那个表达式。</p><p>求出所有解密表达式之后，我们就可以求出最后的flag了,到时候只需要直接在输出文件中找到<code>flag is...</code>的字样即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">char</span> str[<span class="hljs-number">40000</span>],ans[<span class="hljs-number">40000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br>FILE *fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;enc.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%s&quot;</span>,str);<br>n=<span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-built_in">fclose</span>(fp);<br>fp=<span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;dec.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">11</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+20</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">15</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+21</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">17</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+1</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">11</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+22</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">4</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">15</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+24</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">5</span>;i&lt;n;i+=<span class="hljs-number">6</span>)<br>ans[i]=(<span class="hljs-number">17</span>*(str[i]<span class="hljs-number">-97</span>)<span class="hljs-number">+5</span>)%<span class="hljs-number">26</span><span class="hljs-number">+97</span>;<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;%s&quot;</span>,ans);<br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-AFCTF2018-MagicNum"><a href="#3-AFCTF2018-MagicNum" class="headerlink" title="3.[AFCTF2018]MagicNum"></a>3.[AFCTF2018]MagicNum</h2><p>题目给出了$6$个浮点数，会想到以前讲过，C++的<code>float</code>和<code>int</code>都是$4$个字节，也就是$8$位十六进制数。因此，我们肯定是要把float转化成与之对应的在内存中存储方式完全一致的int值。因此我们可以考虑强制转换指针类型，将<code>float</code>指针类型输出时强制转换成<code>int</code>指针类型，代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">float</span> f;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">6</span>;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;f);<br><span class="hljs-type">float</span> *p=&amp;f;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,*(<span class="hljs-type">int</span>*) p);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//72065910510177138000000000000000.000000</span><br><span class="hljs-comment">//74636661</span><br></code></pre></td></tr></table></figure><p>最后只需要把我们每次得到的八位十六进制数一个字节一个字节地倒过来重新组装，就变成了flag</p><h2 id="4-LeftOrRight"><a href="#4-LeftOrRight" class="headerlink" title="4.LeftOrRight"></a>4.LeftOrRight</h2><p>题目给出了一个无法打开的图片，转换成txt，可以看到开始和解为都有$32$个十六进制数，转换成字符，貌似这两个字符都仅仅是打乱了顺序而已，根据题目提示，这种题目应该是给出了一棵二叉树的先序遍历和中序遍历，让你求后序遍历。</p><p>难度不大，随便在网上找一个脚本抄一下就可以得到最后的答案了（<del>我只是一个当年用6个月速成NOIP然后拿了245的fw而已</del></p><h2 id="5-XNUCA2018-Warmup"><a href="#5-XNUCA2018-Warmup" class="headerlink" title="5.[XNUCA2018]Warmup"></a>5.[XNUCA2018]Warmup</h2><p>这道题给出了$6$个人的RSA加密后的$e,n,c$，仔细观察的话可以看到第一个和第四个的$n$是相等的，因此可以直接上共模攻击的脚本解决最后的flag</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>总之，寒假4篇刷题笔记，的确让自己学到了不少东西。明天又杭电的CTF，还是要看看题目的，继续学习一点CTF知识，争取4月进校队吧（<del>趁自己大一上半年GPA 4.24，寒假还没什么事情，多学点肯定是很好的</del></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lfsr Notes</title>
    <link href="/2021/01/27/Lfsr-Notes/"/>
    <url>/2021/01/27/Lfsr-Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习lfsr的一些笔记"><a href="#huangx607087学习lfsr的一些笔记" class="headerlink" title="huangx607087学习lfsr的一些笔记"></a>huangx607087学习lfsr的一些笔记</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>本篇blog用在BUU上面刷的两道题来讲解lfsr.</p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p>LFSR，中文名称叫做线性反馈移位寄存器，由多个时钟存储元件和一个反馈路径组成。其中触发器的数量又称为<strong>度</strong>。</p><p>作用就是当给定前一个状态的输出的时候，这个输出状态会继续存入移位寄存器（同时最早的数据会被删除）。</p><p><img src="/2021/01/27/Lfsr-Notes/S1.png" alt="S1"></p><p>lfsr的基本Python实现代码如下（以下就是一个$24$位的lfsr）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br></code></pre></td></tr></table></figure><h2 id="2-解决LFSR问题的方法"><a href="#2-解决LFSR问题的方法" class="headerlink" title="2.解决LFSR问题的方法"></a>2.解决LFSR问题的方法</h2><h3 id="PART-1-24digs"><a href="#PART-1-24digs" class="headerlink" title="PART 1[24digs]"></a>PART 1[24digs]</h3><p>当lfsr的位数不超过$30$位时且知道mask的情况下，可以直接采用暴力枚举法爆破seed（又称key）比如2018强网杯streamgame1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">25</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)<br>mask=<span class="hljs-number">0x5311c</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;ab&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><h3 id="PART-2-32-digs"><a href="#PART-2-32-digs" class="headerlink" title="PART 2[32 digs]"></a>PART 2[32 digs]</h3><p>在知道mask但不知道种子的情况下，我们可以用我们上面提到的式子进行移项，就可以求出之前被丢弃的一个比特位，进而不断迭代就可以得到后面的比特位，典型例题为<strong>2018 CISCN 初赛 oldstreamgame</strong></p><p>看一下题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&quot;flag&#123;xxxxxxxxxxxxxxxx&#125;&quot;</span><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;flag&#123;&quot;</span>)<br><span class="hljs-keyword">assert</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">14</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R,mask</span>):<br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>mask = <span class="hljs-number">0b10100100000010000000100010010100</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp))<br>f.close()<br></code></pre></td></tr></table></figure><p>很显然，我们知道了mask的值，而flag则为lfsr的种子，长度为$32$位。虽然爆破也是可行的，但此处不使用爆破做法，二是递推求出lfsr的种子。</p><p>$32$位的lfsr，告诉了我们只需要知道输出的最开始的$32$个数字，我们就可以递推求出seed，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>mask = <span class="hljs-number">0b10100100000010000000100010010100</span><br>b = <span class="hljs-string">&#x27;&#x27;</span><br>N = <span class="hljs-number">32</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    b = f.read()<br>key = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(bytes_to_long(b)))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N // <span class="hljs-number">8</span>):<br>    t = b[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        key += <span class="hljs-built_in">str</span>(t &gt;&gt; j &amp; <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(key)<br>idx = <span class="hljs-number">0</span><br>ans = <span class="hljs-string">&quot;&quot;</span><br>key = key[<span class="hljs-number">31</span>] + key[:<span class="hljs-number">32</span>]<br><span class="hljs-keyword">while</span> idx &lt; <span class="hljs-number">32</span>:<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        <span class="hljs-keyword">if</span> mask &gt;&gt; i &amp; <span class="hljs-number">1</span>:<br>            tmp ^= <span class="hljs-built_in">int</span>(key[<span class="hljs-number">31</span> - i])<br>    ans = <span class="hljs-built_in">str</span>(tmp) + ans<br>    idx += <span class="hljs-number">1</span><br>    key = key[<span class="hljs-number">31</span>] + <span class="hljs-built_in">str</span>(tmp) + key[<span class="hljs-number">1</span>:<span class="hljs-number">31</span>]<br>num = <span class="hljs-built_in">int</span>(ans, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">hex</span>(num))<br></code></pre></td></tr></table></figure><p><strong>Update 2021.7.29 增加一个更简单易懂的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">padbin</span>(<span class="hljs-params">x,l=<span class="hljs-number">32</span></span>):<br>    s=<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(s)&lt;l):<br>        s=(l-<span class="hljs-built_in">len</span>(s))*<span class="hljs-string">&#x27;0&#x27;</span>+s<br>    <span class="hljs-keyword">return</span> s<br>mask=padbin(<span class="hljs-number">0x80000057</span>)<br>state=padbin(<span class="hljs-number">0x155a796b</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    s=<span class="hljs-built_in">int</span>(state[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment">#print(len(state),len(mask))</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>):<br>        s^=<span class="hljs-built_in">int</span>(mask[j])&amp;<span class="hljs-built_in">int</span>(state[j+<span class="hljs-number">1</span>])<br>    state=state+<span class="hljs-built_in">str</span>(s&amp;<span class="hljs-number">1</span>) <br>    state=state[<span class="hljs-number">1</span>:]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(state,<span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:])<br></code></pre></td></tr></table></figure><h3 id="PART-3-64-digs"><a href="#PART-3-64-digs" class="headerlink" title="PART 3[64 digs]"></a>PART 3[64 digs]</h3><p>可以求出mask的，例题为**[AFCTF2018]Tiny LFSR**，64位是无法爆破的</p><p>详细内容请见文章<strong>21Jan2</strong>，发布时间为2021.1.21</p><h3 id="PART-4-256-digs"><a href="#PART-4-256-digs" class="headerlink" title="PART 4[256 digs]"></a>PART 4[256 digs]</h3><p>我们来看这样一道题目**[De1CTF2019]Babylfsr**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> KEY,FLAG,MASK<br><span class="hljs-keyword">assert</span>(FLAG==<span class="hljs-string">&quot;de1ctf&#123;&quot;</span>+hashlib.sha256(<span class="hljs-built_in">hex</span>(KEY)[<span class="hljs-number">2</span>:].rstrip(<span class="hljs-string">&#x27;L&#x27;</span>)).hexdigest()+<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-keyword">assert</span>(FLAG[<span class="hljs-number">7</span>:<span class="hljs-number">11</span>]==<span class="hljs-string">&#x27;1224&#x27;</span>)<br>LENGTH = <span class="hljs-number">256</span><br><span class="hljs-keyword">assert</span>(KEY.bit_length()==LENGTH)<br><span class="hljs-keyword">assert</span>(MASK.bit_length()==LENGTH)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m</span>):<br>    pad_length = <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(m)<br>    <span class="hljs-keyword">return</span> pad_length*<span class="hljs-string">&#x27;0&#x27;</span>+m<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">lfsr</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, init, mask, length</span>):<br>        <span class="hljs-variable language_">self</span>.init = init<br>        <span class="hljs-variable language_">self</span>.mask = mask<br>        <span class="hljs-variable language_">self</span>.lengthmask = <span class="hljs-number">2</span>**(length+<span class="hljs-number">1</span>)-<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        nextdata = (<span class="hljs-variable language_">self</span>.init &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        i = <span class="hljs-variable language_">self</span>.init &amp; <span class="hljs-variable language_">self</span>.mask &amp; <span class="hljs-variable language_">self</span>.lengthmask <br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span>:<br>            output ^= (i &amp; <span class="hljs-number">1</span>)<br>            i = i &gt;&gt; <span class="hljs-number">1</span><br>        nextdata ^= output<br>        <span class="hljs-variable language_">self</span>.init = nextdata<br>        <span class="hljs-keyword">return</span> output<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    l = lfsr(KEY,MASK,LENGTH)<br>    r = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">63</span>):<br>        b = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            b = (b&lt;&lt;<span class="hljs-number">1</span>)+l.<span class="hljs-built_in">next</span>()<br>        r += pad(<span class="hljs-built_in">bin</span>(b)[<span class="hljs-number">2</span>:])<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(r)<br></code></pre></td></tr></table></figure><p>题目给出了一个长度为$256$位的lfsr和长度为$504$位的输出结果，并告诉你KEY以及FLAG的一些特征（sha256后的值前$4$位是$1224_h$）。</p><p>CTF WIKI提到：如果我们知道了$2n$位输出结果，就可以把mask求出来，进而求出key，这个算法就是BM算法，其时间复杂度为$O(n^2)$，空间复杂度为$O(n)$，$n$为lfsr的比特位数，这道题是$256$。</p><p><img src="/2021/01/27/Lfsr-Notes/S2.png" alt="S2"></p><p><img src="/2021/01/27/Lfsr-Notes/1.png" alt="1"></p><p>然后我们就可以得到mask的值，如下的矩阵运算</p><p><img src="/2021/01/27/Lfsr-Notes/2.png" alt="2"></p><p>这个时候我们就求出了mask值，紧接着就是求key值了。</p><p>然后我们回到题目中：$256$位的lfsr，我们要知道$512$位才可以求出最后的结果，但目前我们只知道了$504$位，缺失$8$位，因此我们可以爆破最后$8$位，得到$256$个可能的mask值，然后我们再用这$256$个mask值恢复得到$256$个key值，根据题目给出的约束条件就可以确定最后的key值了。</p><p>上面讲的应该都算是比较详细的了，直接上一下sage的脚本，注意$\det&#x3D;0$求逆矩阵会报错，因此要进行一次$\det!&#x3D;0$的判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad8</span>(<span class="hljs-params">L,K</span>):<br>    C=[]<br>    <span class="hljs-keyword">while</span> K&gt;<span class="hljs-number">0</span>:<br>        C=[K&amp;<span class="hljs-number">1</span>]+C<br>        K&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(C)&lt;<span class="hljs-number">8</span>):<br>        C=[<span class="hljs-number">0</span>]*(<span class="hljs-number">8</span>-<span class="hljs-built_in">len</span>(C))+C<br>    <span class="hljs-keyword">return</span> L+C<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>):<br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        num=num*<span class="hljs-number">2</span>+x[i]<br>    <span class="hljs-keyword">return</span> num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">mask,key</span>):<br>    idx,ans=<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;&#x27;</span><br>    key=[key[<span class="hljs-number">255</span>]]+key[:<span class="hljs-number">256</span>]<br>    <span class="hljs-keyword">while</span> idx&lt;<span class="hljs-number">256</span>:<br>        tmp=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">if</span> mask&gt;&gt;i&amp;<span class="hljs-number">1</span>:<br>                tmp=(tmp+key[<span class="hljs-number">255</span>-i])%<span class="hljs-number">2</span><br>        ans=<span class="hljs-built_in">str</span>(tmp)+ans<br>        idx+=<span class="hljs-number">1</span><br>        key=[key[<span class="hljs-number">255</span>]]+[tmp]+key[<span class="hljs-number">1</span>:<span class="hljs-number">255</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(ans,<span class="hljs-number">2</span>)<br>                <br><span class="hljs-comment">#---------MAIN BELOW---------#</span><br>S=[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    Scnt=pad8(S,i)<br>    T=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">257</span>):<br>        T.append(Scnt[j:j+<span class="hljs-number">256</span>])<br>    X=matrix(GF(<span class="hljs-number">2</span>),T[<span class="hljs-number">0</span>:<span class="hljs-number">256</span>])<br>    B=matrix(GF(<span class="hljs-number">2</span>),T[<span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">if</span>(det(X)!=<span class="hljs-number">0</span>):<br>        C=B*(X^-<span class="hljs-number">1</span>)<br>        D=matrix(ZZ,C)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(solve(f(D[<span class="hljs-number">0</span>]),S[:<span class="hljs-number">256</span>])))<br></code></pre></td></tr></table></figure><p>只给出了所有可能的key值，最后筛选很简单的，脚本就不放了</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Jan3</title>
    <link href="/2021/01/26/21Jan3/"/>
    <url>/2021/01/26/21Jan3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087寒假的切题3"><a href="#huangx607087寒假的切题3" class="headerlink" title="huangx607087寒假的切题3"></a>huangx607087寒假的切题3</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>近期BUU已经上了1500分，而szx在yydsfmyy的指导下，进步非常快，已经成为了pwn神。而jiangjiang作为一个G1DALAO也在RE有了很多进展。。。。</p><h2 id="1-NCTF2020-RDH"><a href="#1-NCTF2020-RDH" class="headerlink" title="1.[NCTF2020] RDH"></a>1.[NCTF2020] RDH</h2><p>一个题目，别人做了两天，我做了两个月。</p><p>首先来看一下题目脚本代码，查了一下，这貌似是个Paillier加密算法，加密的部分方法与RSA类似：</p><p>加密方法很简单，首先与RSA一样，选择两个大素数$p,q$，计算$n&#x3D;pq$，其中$\gcd(n,(p-1)(q-1))&#x3D;1$。然后计算$\lambda&#x3D;\text{lcm}(p-1,q-1)$。</p><p>然后选择随机整数$g$。计算密文$E(m,r)c\equiv g^mr^n\pmod {n^2}$，其中$r$是随机整数</p><p>解密方法为$D(c,\lambda)&#x3D;m\equiv \dfrac{L(c^\lambda \mod n^2)}{L(g^\lambda \mod n^2)}\pmod n$，其中$L(x)&#x3D;\dfrac{x-1}{n}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> lcm<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>(<span class="hljs-params">nbits</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">genProduct</span>(<span class="hljs-params">nbits</span>):<br>        p = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> p.bit_length() &lt; nbits:<br>            p *= random.choice(sieve_base)<br>        <span class="hljs-keyword">return</span> p<br>    P = genProduct(nbits)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(P-<span class="hljs-number">1</span>):<br>        P = genProduct(nbits)<br>    <span class="hljs-keyword">return</span> (P-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Homo</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        p, q = getMyPrime(<span class="hljs-number">512</span>), getMyPrime(<span class="hljs-number">512</span>)<br>        n = p*q<br>        g = random.randint(<span class="hljs-number">1</span>, n*n)<br>        <span class="hljs-keyword">while</span> GCD(<span class="hljs-variable language_">self</span>.L(<span class="hljs-built_in">pow</span>(g, lcm(p-<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>), n*n), n), n) != <span class="hljs-number">1</span>:<br>            g = random.randint(<span class="hljs-number">1</span>, n*n)<br>        <span class="hljs-variable language_">self</span>.g, <span class="hljs-variable language_">self</span>.n = g, n<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, g)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">self, m</span>):<br>        n = <span class="hljs-variable language_">self</span>.n<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">pow</span>(<span class="hljs-variable language_">self</span>.g, <span class="hljs-built_in">int</span>(m), n*n)*<span class="hljs-built_in">pow</span>(random.randint(<span class="hljs-number">1</span>, n), n, n*n)) % (n*n)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">L</span>(<span class="hljs-params">self, u, n</span>): <span class="hljs-keyword">return</span> (u-<span class="hljs-number">1</span>)//n<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_img</span>(<span class="hljs-params">homo, img_array</span>):<br>    cip_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img_array)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img_array[i])):<br>            cip_list.append(homo.enc(img_array[i][j]))<br>    <span class="hljs-keyword">return</span> cip_list<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">homo, flag</span>):<br>    flag_bin = <span class="hljs-built_in">bin</span>(flag)[<span class="hljs-number">2</span>:]<br>    cip_list = [homo.enc(<span class="hljs-built_in">int</span>(i) &lt;&lt; <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag_bin]<br>    <span class="hljs-keyword">return</span> cip_list<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    homo = Homo()<br>    img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./img.png&quot;</span>).convert(<span class="hljs-string">&quot;L&quot;</span>) <span class="hljs-comment"># 56x56</span><br>    img_array = np.array(img)<br>    img_enc = encrypt_img(homo, img_array)<br>    flag = bytes_to_long(flag.encode())<br>    flag_enc = encrypt_flag(homo, flag)<br>    <br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(img_enc) &gt; <span class="hljs-built_in">len</span>(flag_enc)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(img_enc)):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(flag_enc):<br>                enc = (flag_enc[i]*img_enc[i]) % (homo.n**<span class="hljs-number">2</span>)<br>                f.write(<span class="hljs-built_in">hex</span>(enc)[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot;\n&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.write(<span class="hljs-built_in">hex</span>(img_enc[i])[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment"># n = 18434491463536053807355381425234564739214857081161321309756933006496704225386021314592003940717664842835425875706674652882353813796736161102105318696602774157554627232038142092845118667433422811370679163251506433284182749390704212211677891535882993540750379419384629735499044085104591893176847835387567644762636961</span><br><span class="hljs-comment"># g = 99894228586367782940715460732971967417359410558715186789679488951080212107512884192976002563404881263875114900183845944243751294600634946131559701908524899495387780188074842981190381617301097312646907480816373003121403029154865843313001145153263200356271270964096284006748227606839491672635131818273934109984977288621523498782962389115299664149676881349445940131040928322172748228670542470966453917916224551852329336572423059849239115479150176538160893340622774682474615303826972971312087884483400100816655408278649954266707268236152380355955111697822333005733513834283677509165970313043388621472231706074701389916165894223877</span><br></code></pre></td></tr></table></figure><p>从加密代码中可以看出：这个生成的素数$p,q$满足$p+1,q+1$为光滑的数字，因此可以利用PrimeFac插件在linux环境下分解因数，在自己的电脑<code>Lenovo Legion Y7000(512G,16G)</code>上跑大概$9$分钟左右</p><p><img src="/2021/01/26/21Jan3/1.jpg" alt="1"></p><p>分解因数后，我们就可以用下面的脚本进行解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> n,p,q,g<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">L</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> (x-<span class="hljs-number">1</span>)//(n)<br><span class="hljs-comment">#-----MAIN BELOW-----#</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>b=f.read()<br>f.close()<br>C,M=[],[]<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>    <span class="hljs-keyword">if</span> b[i]==<span class="hljs-string">&#x27;\n&#x27;</span>:<br>        C.append(<span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>))<br>        s=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        s=s+b[i]<br>lm=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)//GCD(p-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(C)):<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>    m=L(<span class="hljs-built_in">pow</span>(C[i],lm,n*n))*inverse(L(<span class="hljs-built_in">pow</span>(g,lm,n*n)),n)%n<br>    M.append(m)<br>    <span class="hljs-built_in">print</span>(M)<br></code></pre></td></tr></table></figure><p>然后我们可以得到很多的数据，在记事本用$16$进制打开时这样的</p><p><img src="/2021/01/26/21Jan3/2.png" alt="2"></p><p>很显然，有些数字大于等于$100_h$，一张图片正常的灰度值应该是在$[00_h,\text{FF}_h]$之间，根据这个加密算法的加法同态性与加密代码，我们可以认为那些大于$\text{FF}_h$的数字应该对应的是flag字节中的$1$</p><p>发现最后flag比特数除以$8$的余数是$1$，所以我们应该在最前面补一个$0$，得到flag为<code>NCTF&#123;R3v3r5ibLe_D4t4_H1d1ng_1N_P4illi3r_Crypt0sy5t3m&#125;</code></p><h2 id="2-b01lers2020-safety-in-numbers"><a href="#2-b01lers2020-safety-in-numbers" class="headerlink" title="2.[b01lers2020]safety_in_numbers"></a>2.[b01lers2020]safety_in_numbers</h2><p>PublicKey读取后，我们可以看到$n$有一千多万位，$e&#x3D;65537$，$c$有$900$多万位，$\ln n-\ln c &gt; 400000$，此时直接用gmpy2中的iroot函数对$c$进行开根即可。</p><p>不过注意到这里有个<code>byteorder=&#39;little&#39;</code>，也就意味着写在最后的那个字节代表着最高位，这样才能得到正确答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> E <span class="hljs-keyword">import</span> e<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.enc&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    cipher = f.read()<br>c = <span class="hljs-built_in">int</span>.from_bytes(cipher, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br><span class="hljs-built_in">print</span>(iroot(c,e)[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><h2 id="3-INSHack2019-Yet-Another-RSA-Challenge-Part-1"><a href="#3-INSHack2019-Yet-Another-RSA-Challenge-Part-1" class="headerlink" title="3.[INSHack2019]Yet Another RSA Challenge - Part 1"></a>3.[INSHack2019]Yet Another RSA Challenge - Part 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br>p = subprocess.check_output(<span class="hljs-string">&#x27;openssl prime -generate -bits 2048 -hex&#x27;</span>)<br>q = subprocess.check_output(<span class="hljs-string">&#x27;openssl prime -generate -bits 2048 -hex&#x27;</span>)<br>flag = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;INSA&#123;REDACTED&#125;&#x27;</span>.encode(<span class="hljs-string">&#x27;hex&#x27;</span>), <span class="hljs-number">16</span>)<br>N = <span class="hljs-built_in">int</span>(p,<span class="hljs-number">16</span>) * <span class="hljs-built_in">int</span>(q,<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span> N<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;0x&#x27;</span>+p.replace(<span class="hljs-string">&#x27;9F&#x27;</span>,<span class="hljs-string">&#x27;FC&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(flag,<span class="hljs-number">65537</span>,N)<br></code></pre></td></tr></table></figure><p>题目难度较为简单，给出了一个将$p$中所有$\text{9F}_h$字节替换成了$\text{FC}_h$字节，查了一下给出的数字中一共有$4$个$\text{FC}_h$字节，因此一共有$16$个可能的的数字，直接枚举一下看看哪个整除$n$就可以把$n$分解了，难度很低。</p><h2 id="4-AFCTF2018-一道有趣的题目"><a href="#4-AFCTF2018-一道有趣的题目" class="headerlink" title="4.[AFCTF2018]一道有趣的题目"></a>4.[AFCTF2018]一道有趣的题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#加密代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plainText</span>):<br>    space = <span class="hljs-number">10</span><br>    cipherText = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(plainText)):<br>        <span class="hljs-keyword">if</span> i + space &lt; <span class="hljs-built_in">len</span>(plainText) - <span class="hljs-number">1</span>:<br>            cipherText += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(plainText[i]) ^ <span class="hljs-built_in">ord</span>(plainText[i + space]))<br>        <span class="hljs-keyword">else</span>:<br>            cipherText += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(plainText[i]) ^ <span class="hljs-built_in">ord</span>(plainText[space]))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(plainText[i]) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            space += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            space -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> cipherText<br><span class="hljs-comment"># 密码</span><br><span class="hljs-comment">#00| 15 12 0d 1a 0a</span><br><span class="hljs-comment">#05| 08 10 01 0a 03</span><br><span class="hljs-comment">#10| 1d 3e 31 00 0d</span><br><span class="hljs-comment">#15| 1d 17 0d 17 3b</span><br><span class="hljs-comment">#20| 0d 17 3b 0c 07</span><br><span class="hljs-comment">#25| 06 02 06</span><br></code></pre></td></tr></table></figure><p>我们根据最后输出的内容得到flag长度是$28$位，并且我们可以盲猜<code>flag[:6]=&#39;afctf&#123;&#39;,flag[-1]=&#39;&#125;&#39;</code></p><p>然后我们光<code>afctf&#123;</code>这个字段跑一边，得到了这样的内容：<code>afctf&#123;cr??t?n?l?sis_isih??_&#125;</code>（问号处表示未知字符）。</p><p>然后我们用下面的C++程序把这个字符带进去，考虑到最后一个下划线可能是错的，因此我们可以把最后一个下划线也改成问号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> c[<span class="hljs-number">35</span>]=&#123;<span class="hljs-number">0x15</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0xc</span> ,<span class="hljs-number">07</span> ,<span class="hljs-number">06</span> ,<span class="hljs-number">02</span>,<span class="hljs-number">06</span>&#125;;<br><span class="hljs-type">char</span> m[<span class="hljs-number">35</span>]=<span class="hljs-string">&quot;afctf&#123;cr??t?n?l?sis_isih???&#125;&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,s=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(m[i+s]==<span class="hljs-string">&#x27;?&#x27;</span>&amp;&amp;m[i]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>m[i+s]=m[i]^c[i];<br><span class="hljs-keyword">if</span>(m[i+s]!=<span class="hljs-string">&#x27;?&#x27;</span>&amp;&amp;m[i]==<span class="hljs-string">&#x27;?&#x27;</span>)<br>m[i]=m[i+s]^c[i];<br><span class="hljs-keyword">if</span>(m[i]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(m[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>++s;<br><span class="hljs-keyword">else</span> <br>--s;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">27</span>;i++)<br>cout&lt;&lt;m[i];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>然后跑出来了这个玩意：afctf{cryptWn?l&#96;sis_isiha}</p><p>盲猜最后一个单词是hard，带进去，得<code>afctf&#123;cryptWnalysis_isihard&#125;</code>。</p><p>调整一下，得<code>afctf&#123;cryptanalysis_is_hard&#125;</code>即可得出答案</p><h2 id="5-V-N2020-公开赛-Backtrace"><a href="#5-V-N2020-公开赛-Backtrace" class="headerlink" title="5.[V&amp;N2020 公开赛]Backtrace"></a>5.[V&amp;N2020 公开赛]Backtrace</h2><p>题目给出的代码<del>非常简单</del>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>flag = <span class="hljs-string">&quot;flag&#123;&quot;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)) + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        f.write(<span class="hljs-built_in">str</span>(random.getrandbits(<span class="hljs-number">32</span>)) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p> 一开始我也不知道这道题应该怎么解，直到看到了这个：</p><img src="/2021/01/26/21Jan3/4.jpg" alt="3" style="zoom:50%;"><p>才知道这是一个梅森旋转算法，给出了$1000$个状态，但前$4$个状态被做成了flag，也就是说，我们无法得知一个完整的$624$个状态</p><p>不过我们既然知道了编号为$624,625,626,627$的四个状态，就很容易会推到$0,1,2,3$这四个状态，也就是我们想要的flag，脚本代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-comment"># right shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res,shift,mask=<span class="hljs-number">0xffffffff</span>,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp&gt;&gt;shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-comment"># left shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res,shift,mask=<span class="hljs-number">0xffffffff</span>,bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits//shift):<br>        tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backtrace</span>(<span class="hljs-params">cur</span>):<br>    high = <span class="hljs-number">0x80000000</span><br>    low = <span class="hljs-number">0x7fffffff</span><br>    mask = <span class="hljs-number">0x9908b0df</span><br>    state = cur<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        tmp = state[i+<span class="hljs-number">624</span>]^state[i+<span class="hljs-number">397</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        <span class="hljs-comment"># recover highest bit</span><br>        res = tmp&amp;high<br>        <span class="hljs-comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span><br>        tmp = state[i-<span class="hljs-number">1</span>+<span class="hljs-number">624</span>]^state[i+<span class="hljs-number">396</span>]<br>        <span class="hljs-comment"># recover Y,tmp = Y</span><br>        <span class="hljs-keyword">if</span> tmp &amp; high == high:<br>            tmp ^= mask<br>            tmp &lt;&lt;= <span class="hljs-number">1</span><br>            tmp |= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp &lt;&lt;=<span class="hljs-number">1</span><br>        res |= (tmp)&amp;low<br>        state[i] = res<br>    <span class="hljs-keyword">return</span> state<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_state</span>(<span class="hljs-params">out</span>):<br>    state = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> out:<br>        i = inverse_right(i,<span class="hljs-number">18</span>)<br>        i = inverse_left(i,<span class="hljs-number">15</span>,<span class="hljs-number">0xefc60000</span>)<br>        i = inverse_left(i,<span class="hljs-number">7</span>,<span class="hljs-number">0x9d2c5680</span>)<br>        i = inverse_right(i,<span class="hljs-number">11</span>)<br>        state.append(i)<br>    <span class="hljs-keyword">return</span> state<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).readlines()<br>c = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    c.append(<span class="hljs-built_in">int</span>(f[i].strip()))<br>partS = recover_state(c)<br>state = backtrace([<span class="hljs-number">0</span>]*<span class="hljs-number">4</span>+partS)[:<span class="hljs-number">624</span>]<br><span class="hljs-comment"># print(state)</span><br>prng = Random()<br>prng.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">0</span>]),<span class="hljs-literal">None</span>))<br>flag = <span class="hljs-string">&quot;flag&#123;&quot;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(prng.getrandbits(<span class="hljs-number">32</span>)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)) + <span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>寒假第三波题目，后面还要继续加油（</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DLP Notes 1</title>
    <link href="/2021/01/24/DLP-Notes-1/"/>
    <url>/2021/01/24/DLP-Notes-1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习离散对数的笔记-1"><a href="#huangx607087学习离散对数的笔记-1" class="headerlink" title="huangx607087学习离散对数的笔记 1"></a>huangx607087学习离散对数的笔记 1</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>这两天学完了 $\text{An Introduction to Mathematical Cryptography}$那本书的第$2$章离散对数内容，做一点点笔记，<del>顺便水一篇博客</del>。</p><h2 id="1-离散对数引入"><a href="#1-离散对数引入" class="headerlink" title="1.离散对数引入"></a>1.离散对数引入</h2><p>概念1：离散对数就是解决形如$g^x\equiv h \pmod p$的一类指数同余方程，最后的结果可以记作$\dfrac{\ln(h)}{\ln g}$,例如，$3^2 \equiv 2 \pmod 7$,所以有$\dfrac{\ln(2)}{\ln3}\equiv 2 \pmod 7$。离散对数虽然是在有限域中进行的，但是它在有限域中的运算性质与正常实数范围内的运算性质一样，比如$\dfrac{\ln(a)}{\ln g}+\dfrac{\ln(b)}{\ln g}&#x3D;\dfrac{\ln(ab)}{\ln g}$</p><p>概念2：本原元：本原元是指使得$g^x\equiv 1 \pmod p$的最小非零$x$值等于$p-1$的数字。具体内容可见博客中<strong>NumberTheory 4</strong>[2021.1.22] 中的部分内容</p><h2 id="2-离散对数在密码学中的应用"><a href="#2-离散对数在密码学中的应用" class="headerlink" title="2.离散对数在密码学中的应用"></a>2.离散对数在密码学中的应用</h2><h3 id="EXP-1-Diffie-Hellman密钥交换"><a href="#EXP-1-Diffie-Hellman密钥交换" class="headerlink" title="EXP 1. Diffie-Hellman密钥交换"></a>EXP 1. Diffie-Hellman密钥交换</h3><p>Step 1：双方选定一个本原元$g$和一个大素数$p$</p><p>Step 2：Alice计算$A\equiv g^a \pmod p$，Bob计算$B\equiv g^b \pmod p$，其中$a,b$分别为Alice和Bob秘密随机选取的数字</p><p>Step 3：Alice把$A$发送给Bob，同时Bob把$B$发送给Alice</p><p>Step 4： Alice，Bob分别计算$B^a$和$A^b$，由于$A^b&#x3D;B^a&#x3D;g^{ab}$，因此可以完成密钥交换</p><p>该密钥交换过程中，公钥为$g,p,A,B$，私钥为$a,b$。</p><p>在这个应用中，离散对数仅仅用于交换密钥，因此这并不是一个完整的加密算法</p><h3 id="EXP-2-Elgamal-加密算法"><a href="#EXP-2-Elgamal-加密算法" class="headerlink" title="EXP 2.Elgamal 加密算法"></a>EXP 2.Elgamal 加密算法</h3><p><strong>生成密钥：</strong></p><p>Step 1：选取一个本原元$g$和一个大素数$p$</p><p>Step 2：选取$a\in[1,p-1]$，计算$A\equiv g^a \pmod p$，公布$A$</p><p><strong>加密：</strong></p><p>Step 3：选择明文$m$和私钥$k$，计算$c_1&#x3D;g^k,c_2&#x3D;mA^k$</p><p><strong>解密：</strong></p><p>Step 4：计算$c^{-a}_1c_2$</p><p>Elgamal加密，由$2$个密文确定$1$个明文</p><h2 id="3-计算离散对数的方法"><a href="#3-计算离散对数的方法" class="headerlink" title="3.计算离散对数的方法"></a>3.计算离散对数的方法</h2><h3 id="PART-1-暴力枚举，时间-O-N"><a href="#PART-1-暴力枚举，时间-O-N" class="headerlink" title="PART 1  暴力枚举，时间$O(N)$"></a>PART 1  暴力枚举，时间$O(N)$</h3><p><del>很low的方法</del></p><h3 id="PART-2-Baby-Step-Giant-Step"><a href="#PART-2-Baby-Step-Giant-Step" class="headerlink" title="PART 2 Baby Step Giant Step"></a>PART 2 Baby Step Giant Step</h3><p>要先求出$\mathrm{ord}(g)&#x3D;N$，复杂度为$O(\sqrt N \ln N)$</p><p>Step 1：设$n&#x3D;1+\sqrt N$，然后构造两个序列$L_1&#x3D;1,g,g^2,g^3,…,g^n$和$L_2&#x3D;h,hg^{-n},hg^{-2n},hg^{-3n},…,hg^{-n^2}$</p><p>Step2：寻找$g^a&#x3D;hg^{-bn}$，则$x&#x3D;a+bn$</p><p>上一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BSGS</span>(<span class="hljs-params">G,H,P,N</span>):<br>    L1,L2=[],[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N+<span class="hljs-number">1</span>):<br>        L1.append(<span class="hljs-built_in">pow</span>(G,i,P))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N+<span class="hljs-number">1</span>):<br>        tmp=H*inverse(<span class="hljs-built_in">pow</span>(G,i*N,P),P)%P<br>        L2.append(tmp)<br>        <span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">in</span> L1:<br>            a=L1.index(tmp)<br>            b=i<br>            <span class="hljs-keyword">return</span> b*N+a<br>p=<span class="hljs-number">17389</span><br>g=<span class="hljs-number">9704</span><br>h=<span class="hljs-number">13896</span><br>n=<span class="hljs-number">1242</span><br><span class="hljs-built_in">print</span>(BSGS(g,h,p,iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 1159</span><br></code></pre></td></tr></table></figure><h3 id="PART-3-Pohilg-Hellman算法"><a href="#PART-3-Pohilg-Hellman算法" class="headerlink" title="PART 3 Pohilg Hellman算法"></a>PART 3 Pohilg Hellman算法</h3><p>该算法利用中国剩余定理解决，如果$p-1$非常光滑（比如只有几十光滑，也就是$p-1$的最大素因数只有几十甚至十几），那么这个算法可以在极短时间内求出离散对数的值。不过该算法的复杂度也接近于$O(\sqrt N \ln N)$，$O(\sqrt N \ln N)$也是目前以来求解离散对数的最快的时间复杂度</p><p>首先先分解$p-1&#x3D;\Pi (q^e)$，其中$q$为素数，$e$为指数，然后通过枚举法（$\ln N$级别的枚举），求解每个素数及其对应的指数的$(g^{\frac{p-1}{q^e}})^x&#x3D;(h^{\frac{p-1}{q^e}})^x$，得到最终答案$X \equiv x \pmod {q^e}$，最后使用中国剩余定理即可。</p><p>上一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">p,oriex,cntex,product,rnd,g,h,mod</span>):<br>    <span class="hljs-keyword">if</span>(rnd==oriex+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> product<br>    tmpg=<span class="hljs-built_in">pow</span>(g,<span class="hljs-built_in">pow</span>(p,oriex),mod)<br>    tmph=<span class="hljs-built_in">pow</span>(h*inverse(<span class="hljs-built_in">pow</span>(g,product,mod),mod),<span class="hljs-built_in">pow</span>(p,cntex),mod)<br>    tmpans=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(tmpg,i,mod)==tmph):<br>            tmpans=i<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> solve(p,oriex,cntex-<span class="hljs-number">1</span>,product+tmpans*p**rnd,rnd+<span class="hljs-number">1</span>,g,h,mod)<br><span class="hljs-built_in">print</span>(solve(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5448</span>,<span class="hljs-number">6909</span>,<span class="hljs-number">11251</span>))<br><span class="hljs-comment">#511</span><br></code></pre></td></tr></table></figure><p>说明：调用填写参数的时候，代码中的<code>p</code>是模数减去$1$后的因数，<code>oriex,cntex</code>两个都填$q^e$中的$e$减去$1$的值，<code>product</code>和<code>rnd</code>都填$0$，<code>g,h,mod</code>分别填原来的$g,h$和模数，例如，上面是计算$5448^x\equiv6909\pmod {11251}$的结果，注意到$\text{ord}(5448)&#x3D;5^4$，但是填入的第二个和第三个参数均为$4-1&#x3D;3$。观察代码也不难发现，枚举确实是$\ln$级别的，并且$p-1$越光滑，耗时越短！</p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h2><p>其他的一些诸如环、群之类的概念看书本到第$2.10$节，不再投放</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA Notes 4</title>
    <link href="/2021/01/22/RSA-Notes4/"/>
    <url>/2021/01/22/RSA-Notes4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习RSA的笔记4"><a href="#huangx607087学习RSA的笔记4" class="headerlink" title="huangx607087学习RSA的笔记4"></a>huangx607087学习RSA的笔记4</h1><h2 id="0-简介："><a href="#0-简介：" class="headerlink" title="0.简介："></a>0.简介：</h2><p><strong>An Overview of some special kinds of RSA and their solutions.</strong></p><p>一个对过去RSA学习的回顾及其实战中题目的应对方法，很多方法在以前的笔记（<strong>RSA Notes 1 &amp; RSA in GF</strong>）中提及过，不过这次是结合了例题来讲解的，很多地方还是直接用的脚本。</p><h2 id="1-Overview-of-RSA-in-GF"><a href="#1-Overview-of-RSA-in-GF" class="headerlink" title="1. Overview of RSA in GF"></a>1. Overview of RSA in GF</h2><p>RSA在GF域上的多项式的表现形式，根据之前笔记中的内容，这种题目就是利用Sagemath把RSA中的模多项式分解成两个本原多项式，然后注意到这两个本源多项式$P,Q$的$\phi$值为$p^e-1$，其中$p$是GF域中的素因数，$e$为指数，分别取决于$P$的次数和$Q$的次数，因为所有的$p^e-1$个多项式都无法与本源多项式$P$互约。</p><p>所以我们可以先来看看这样一道题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Prime: <span class="hljs-number">43753</span><br>Modulus: <span class="hljs-number">34036</span>*y^<span class="hljs-number">177</span> + <span class="hljs-number">23068</span>*y^<span class="hljs-number">176</span> + <span class="hljs-number">13147</span>*y^<span class="hljs-number">175</span> + <span class="hljs-number">36344</span>*y^<span class="hljs-number">174</span> + <span class="hljs-number">10045</span>*y^<span class="hljs-number">173</span> + <span class="hljs-number">41049</span>*y^<span class="hljs-number">172</span> + <span class="hljs-number">17786</span>*y^<span class="hljs-number">171</span> + <span class="hljs-number">16601</span>*y^<span class="hljs-number">170</span> + <span class="hljs-number">7929</span>*y^<span class="hljs-number">169</span> + <span class="hljs-number">37570</span>*y^<span class="hljs-number">168</span> + <span class="hljs-number">990</span>*y^<span class="hljs-number">167</span> + <span class="hljs-number">9622</span>*y^<span class="hljs-number">166</span> + <span class="hljs-number">39273</span>*y^<span class="hljs-number">165</span> + <span class="hljs-number">35284</span>*y^<span class="hljs-number">164</span> + <span class="hljs-number">15632</span>*y^<span class="hljs-number">163</span> + <span class="hljs-number">18850</span>*y^<span class="hljs-number">162</span> + <span class="hljs-number">8800</span>*y^<span class="hljs-number">161</span> + <span class="hljs-number">33148</span>*y^<span class="hljs-number">160</span> + <span class="hljs-number">12147</span>*y^<span class="hljs-number">159</span> + <span class="hljs-number">40487</span>*y^<span class="hljs-number">158</span> + <span class="hljs-number">6407</span>*y^<span class="hljs-number">157</span> + <span class="hljs-number">34111</span>*y^<span class="hljs-number">156</span> + <span class="hljs-number">8446</span>*y^<span class="hljs-number">155</span> + <span class="hljs-number">21908</span>*y^<span class="hljs-number">154</span> + <span class="hljs-number">16812</span>*y^<span class="hljs-number">153</span> + <span class="hljs-number">40624</span>*y^<span class="hljs-number">152</span> + <span class="hljs-number">43506</span>*y^<span class="hljs-number">151</span> + <span class="hljs-number">39116</span>*y^<span class="hljs-number">150</span> + <span class="hljs-number">33011</span>*y^<span class="hljs-number">149</span> + <span class="hljs-number">23914</span>*y^<span class="hljs-number">148</span> + <span class="hljs-number">2210</span>*y^<span class="hljs-number">147</span> + <span class="hljs-number">23196</span>*y^<span class="hljs-number">146</span> + <span class="hljs-number">43359</span>*y^<span class="hljs-number">145</span> + <span class="hljs-number">34455</span>*y^<span class="hljs-number">144</span> + <span class="hljs-number">17684</span>*y^<span class="hljs-number">143</span> + <span class="hljs-number">25262</span>*y^<span class="hljs-number">142</span> + <span class="hljs-number">982</span>*y^<span class="hljs-number">141</span> + <span class="hljs-number">24015</span>*y^<span class="hljs-number">140</span> + <span class="hljs-number">27968</span>*y^<span class="hljs-number">139</span> + <span class="hljs-number">37463</span>*y^<span class="hljs-number">138</span> + <span class="hljs-number">10667</span>*y^<span class="hljs-number">137</span> + <span class="hljs-number">39519</span>*y^<span class="hljs-number">136</span> + <span class="hljs-number">31176</span>*y^<span class="hljs-number">135</span> + <span class="hljs-number">27520</span>*y^<span class="hljs-number">134</span> + <span class="hljs-number">32118</span>*y^<span class="hljs-number">133</span> + <span class="hljs-number">8333</span>*y^<span class="hljs-number">132</span> + <span class="hljs-number">38945</span>*y^<span class="hljs-number">131</span> + <span class="hljs-number">34713</span>*y^<span class="hljs-number">130</span> + <span class="hljs-number">1107</span>*y^<span class="hljs-number">129</span> + <span class="hljs-number">43604</span>*y^<span class="hljs-number">128</span> + <span class="hljs-number">4433</span>*y^<span class="hljs-number">127</span> + <span class="hljs-number">18110</span>*y^<span class="hljs-number">126</span> + <span class="hljs-number">17658</span>*y^<span class="hljs-number">125</span> + <span class="hljs-number">32354</span>*y^<span class="hljs-number">124</span> + <span class="hljs-number">3219</span>*y^<span class="hljs-number">123</span> + <span class="hljs-number">40238</span>*y^<span class="hljs-number">122</span> + <span class="hljs-number">10439</span>*y^<span class="hljs-number">121</span> + <span class="hljs-number">3669</span>*y^<span class="hljs-number">120</span> + <span class="hljs-number">8713</span>*y^<span class="hljs-number">119</span> + <span class="hljs-number">21027</span>*y^<span class="hljs-number">118</span> + <span class="hljs-number">29480</span>*y^<span class="hljs-number">117</span> + <span class="hljs-number">5477</span>*y^<span class="hljs-number">116</span> + <span class="hljs-number">24332</span>*y^<span class="hljs-number">115</span> + <span class="hljs-number">43480</span>*y^<span class="hljs-number">114</span> + <span class="hljs-number">33406</span>*y^<span class="hljs-number">113</span> + <span class="hljs-number">43121</span>*y^<span class="hljs-number">112</span> + <span class="hljs-number">1114</span>*y^<span class="hljs-number">111</span> + <span class="hljs-number">17198</span>*y^<span class="hljs-number">110</span> + <span class="hljs-number">22829</span>*y^<span class="hljs-number">109</span> + <span class="hljs-number">24424</span>*y^<span class="hljs-number">108</span> + <span class="hljs-number">16523</span>*y^<span class="hljs-number">107</span> + <span class="hljs-number">20424</span>*y^<span class="hljs-number">106</span> + <span class="hljs-number">36206</span>*y^<span class="hljs-number">105</span> + <span class="hljs-number">41849</span>*y^<span class="hljs-number">104</span> + <span class="hljs-number">3584</span>*y^<span class="hljs-number">103</span> + <span class="hljs-number">26500</span>*y^<span class="hljs-number">102</span> + <span class="hljs-number">31897</span>*y^<span class="hljs-number">101</span> + <span class="hljs-number">34640</span>*y^<span class="hljs-number">100</span> + <span class="hljs-number">27449</span>*y^<span class="hljs-number">99</span> + <span class="hljs-number">30962</span>*y^<span class="hljs-number">98</span> + <span class="hljs-number">41434</span>*y^<span class="hljs-number">97</span> + <span class="hljs-number">22125</span>*y^<span class="hljs-number">96</span> + <span class="hljs-number">24314</span>*y^<span class="hljs-number">95</span> + <span class="hljs-number">3944</span>*y^<span class="hljs-number">94</span> + <span class="hljs-number">18400</span>*y^<span class="hljs-number">93</span> + <span class="hljs-number">38476</span>*y^<span class="hljs-number">92</span> + <span class="hljs-number">28904</span>*y^<span class="hljs-number">91</span> + <span class="hljs-number">27936</span>*y^<span class="hljs-number">90</span> + <span class="hljs-number">41867</span>*y^<span class="hljs-number">89</span> + <span class="hljs-number">25573</span>*y^<span class="hljs-number">88</span> + <span class="hljs-number">25659</span>*y^<span class="hljs-number">87</span> + <span class="hljs-number">33443</span>*y^<span class="hljs-number">86</span> + <span class="hljs-number">18435</span>*y^<span class="hljs-number">85</span> + <span class="hljs-number">5934</span>*y^<span class="hljs-number">84</span> + <span class="hljs-number">38030</span>*y^<span class="hljs-number">83</span> + <span class="hljs-number">17563</span>*y^<span class="hljs-number">82</span> + <span class="hljs-number">24086</span>*y^<span class="hljs-number">81</span> + <span class="hljs-number">36782</span>*y^<span class="hljs-number">80</span> + <span class="hljs-number">20922</span>*y^<span class="hljs-number">79</span> + <span class="hljs-number">38933</span>*y^<span class="hljs-number">78</span> + <span class="hljs-number">23448</span>*y^<span class="hljs-number">77</span> + <span class="hljs-number">10599</span>*y^<span class="hljs-number">76</span> + <span class="hljs-number">7156</span>*y^<span class="hljs-number">75</span> + <span class="hljs-number">29044</span>*y^<span class="hljs-number">74</span> + <span class="hljs-number">23605</span>*y^<span class="hljs-number">73</span> + <span class="hljs-number">7657</span>*y^<span class="hljs-number">72</span> + <span class="hljs-number">28200</span>*y^<span class="hljs-number">71</span> + <span class="hljs-number">2431</span>*y^<span class="hljs-number">70</span> + <span class="hljs-number">3860</span>*y^<span class="hljs-number">69</span> + <span class="hljs-number">23259</span>*y^<span class="hljs-number">68</span> + <span class="hljs-number">14590</span>*y^<span class="hljs-number">67</span> + <span class="hljs-number">33631</span>*y^<span class="hljs-number">66</span> + <span class="hljs-number">15673</span>*y^<span class="hljs-number">65</span> + <span class="hljs-number">36049</span>*y^<span class="hljs-number">64</span> + <span class="hljs-number">29728</span>*y^<span class="hljs-number">63</span> + <span class="hljs-number">22413</span>*y^<span class="hljs-number">62</span> + <span class="hljs-number">18602</span>*y^<span class="hljs-number">61</span> + <span class="hljs-number">18557</span>*y^<span class="hljs-number">60</span> + <span class="hljs-number">23505</span>*y^<span class="hljs-number">59</span> + <span class="hljs-number">17642</span>*y^<span class="hljs-number">58</span> + <span class="hljs-number">12595</span>*y^<span class="hljs-number">57</span> + <span class="hljs-number">17255</span>*y^<span class="hljs-number">56</span> + <span class="hljs-number">15316</span>*y^<span class="hljs-number">55</span> + <span class="hljs-number">8948</span>*y^<span class="hljs-number">54</span> + <span class="hljs-number">38</span>*y^<span class="hljs-number">53</span> + <span class="hljs-number">40329</span>*y^<span class="hljs-number">52</span> + <span class="hljs-number">9823</span>*y^<span class="hljs-number">51</span> + <span class="hljs-number">5798</span>*y^<span class="hljs-number">50</span> + <span class="hljs-number">6379</span>*y^<span class="hljs-number">49</span> + <span class="hljs-number">8662</span>*y^<span class="hljs-number">48</span> + <span class="hljs-number">34640</span>*y^<span class="hljs-number">47</span> + <span class="hljs-number">38321</span>*y^<span class="hljs-number">46</span> + <span class="hljs-number">18760</span>*y^<span class="hljs-number">45</span> + <span class="hljs-number">13135</span>*y^<span class="hljs-number">44</span> + <span class="hljs-number">15926</span>*y^<span class="hljs-number">43</span> + <span class="hljs-number">34952</span>*y^<span class="hljs-number">42</span> + <span class="hljs-number">28940</span>*y^<span class="hljs-number">41</span> + <span class="hljs-number">13558</span>*y^<span class="hljs-number">40</span> + <span class="hljs-number">42579</span>*y^<span class="hljs-number">39</span> + <span class="hljs-number">38015</span>*y^<span class="hljs-number">38</span> + <span class="hljs-number">33788</span>*y^<span class="hljs-number">37</span> + <span class="hljs-number">12381</span>*y^<span class="hljs-number">36</span> + <span class="hljs-number">195</span>*y^<span class="hljs-number">35</span> + <span class="hljs-number">13709</span>*y^<span class="hljs-number">34</span> + <span class="hljs-number">31500</span>*y^<span class="hljs-number">33</span> + <span class="hljs-number">32994</span>*y^<span class="hljs-number">32</span> + <span class="hljs-number">30486</span>*y^<span class="hljs-number">31</span> + <span class="hljs-number">40414</span>*y^<span class="hljs-number">30</span> + <span class="hljs-number">2578</span>*y^<span class="hljs-number">29</span> + <span class="hljs-number">30525</span>*y^<span class="hljs-number">28</span> + <span class="hljs-number">43067</span>*y^<span class="hljs-number">27</span> + <span class="hljs-number">6195</span>*y^<span class="hljs-number">26</span> + <span class="hljs-number">36288</span>*y^<span class="hljs-number">25</span> + <span class="hljs-number">23236</span>*y^<span class="hljs-number">24</span> + <span class="hljs-number">21493</span>*y^<span class="hljs-number">23</span> + <span class="hljs-number">15808</span>*y^<span class="hljs-number">22</span> + <span class="hljs-number">34500</span>*y^<span class="hljs-number">21</span> + <span class="hljs-number">6390</span>*y^<span class="hljs-number">20</span> + <span class="hljs-number">42994</span>*y^<span class="hljs-number">19</span> + <span class="hljs-number">42151</span>*y^<span class="hljs-number">18</span> + <span class="hljs-number">19248</span>*y^<span class="hljs-number">17</span> + <span class="hljs-number">19291</span>*y^<span class="hljs-number">16</span> + <span class="hljs-number">8124</span>*y^<span class="hljs-number">15</span> + <span class="hljs-number">40161</span>*y^<span class="hljs-number">14</span> + <span class="hljs-number">24726</span>*y^<span class="hljs-number">13</span> + <span class="hljs-number">31874</span>*y^<span class="hljs-number">12</span> + <span class="hljs-number">30272</span>*y^<span class="hljs-number">11</span> + <span class="hljs-number">30761</span>*y^<span class="hljs-number">10</span> + <span class="hljs-number">2296</span>*y^<span class="hljs-number">9</span> + <span class="hljs-number">11017</span>*y^<span class="hljs-number">8</span> + <span class="hljs-number">16559</span>*y^<span class="hljs-number">7</span> + <span class="hljs-number">28949</span>*y^<span class="hljs-number">6</span> + <span class="hljs-number">40499</span>*y^<span class="hljs-number">5</span> + <span class="hljs-number">22377</span>*y^<span class="hljs-number">4</span> + <span class="hljs-number">33628</span>*y^<span class="hljs-number">3</span> + <span class="hljs-number">30598</span>*y^<span class="hljs-number">2</span> + <span class="hljs-number">4386</span>*y + <span class="hljs-number">23814</span><br>Ciphertext: <span class="hljs-number">5209</span>*x^<span class="hljs-number">176</span> + <span class="hljs-number">10881</span>*x^<span class="hljs-number">175</span> + <span class="hljs-number">31096</span>*x^<span class="hljs-number">174</span> + <span class="hljs-number">23354</span>*x^<span class="hljs-number">173</span> + <span class="hljs-number">28337</span>*x^<span class="hljs-number">172</span> + <span class="hljs-number">15982</span>*x^<span class="hljs-number">171</span> + <span class="hljs-number">13515</span>*x^<span class="hljs-number">170</span> + <span class="hljs-number">21641</span>*x^<span class="hljs-number">169</span> + <span class="hljs-number">10254</span>*x^<span class="hljs-number">168</span> + <span class="hljs-number">34588</span>*x^<span class="hljs-number">167</span> + <span class="hljs-number">27434</span>*x^<span class="hljs-number">166</span> + <span class="hljs-number">29552</span>*x^<span class="hljs-number">165</span> + <span class="hljs-number">7105</span>*x^<span class="hljs-number">164</span> + <span class="hljs-number">22604</span>*x^<span class="hljs-number">163</span> + <span class="hljs-number">41253</span>*x^<span class="hljs-number">162</span> + <span class="hljs-number">42675</span>*x^<span class="hljs-number">161</span> + <span class="hljs-number">21153</span>*x^<span class="hljs-number">160</span> + <span class="hljs-number">32838</span>*x^<span class="hljs-number">159</span> + <span class="hljs-number">34391</span>*x^<span class="hljs-number">158</span> + <span class="hljs-number">832</span>*x^<span class="hljs-number">157</span> + <span class="hljs-number">720</span>*x^<span class="hljs-number">156</span> + <span class="hljs-number">22883</span>*x^<span class="hljs-number">155</span> + <span class="hljs-number">19236</span>*x^<span class="hljs-number">154</span> + <span class="hljs-number">33772</span>*x^<span class="hljs-number">153</span> + <span class="hljs-number">5020</span>*x^<span class="hljs-number">152</span> + <span class="hljs-number">17943</span>*x^<span class="hljs-number">151</span> + <span class="hljs-number">26967</span>*x^<span class="hljs-number">150</span> + <span class="hljs-number">30847</span>*x^<span class="hljs-number">149</span> + <span class="hljs-number">10306</span>*x^<span class="hljs-number">148</span> + <span class="hljs-number">33966</span>*x^<span class="hljs-number">147</span> + <span class="hljs-number">43255</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">20342</span>*x^<span class="hljs-number">145</span> + <span class="hljs-number">4474</span>*x^<span class="hljs-number">144</span> + <span class="hljs-number">3490</span>*x^<span class="hljs-number">143</span> + <span class="hljs-number">38033</span>*x^<span class="hljs-number">142</span> + <span class="hljs-number">11224</span>*x^<span class="hljs-number">141</span> + <span class="hljs-number">30565</span>*x^<span class="hljs-number">140</span> + <span class="hljs-number">31967</span>*x^<span class="hljs-number">139</span> + <span class="hljs-number">32382</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">9759</span>*x^<span class="hljs-number">137</span> + <span class="hljs-number">1030</span>*x^<span class="hljs-number">136</span> + <span class="hljs-number">32122</span>*x^<span class="hljs-number">135</span> + <span class="hljs-number">42614</span>*x^<span class="hljs-number">134</span> + <span class="hljs-number">14280</span>*x^<span class="hljs-number">133</span> + <span class="hljs-number">16533</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">32676</span>*x^<span class="hljs-number">131</span> + <span class="hljs-number">43070</span>*x^<span class="hljs-number">130</span> + <span class="hljs-number">36009</span>*x^<span class="hljs-number">129</span> + <span class="hljs-number">28497</span>*x^<span class="hljs-number">128</span> + <span class="hljs-number">2940</span>*x^<span class="hljs-number">127</span> + <span class="hljs-number">9747</span>*x^<span class="hljs-number">126</span> + <span class="hljs-number">22758</span>*x^<span class="hljs-number">125</span> + <span class="hljs-number">16615</span>*x^<span class="hljs-number">124</span> + <span class="hljs-number">14086</span>*x^<span class="hljs-number">123</span> + <span class="hljs-number">13038</span>*x^<span class="hljs-number">122</span> + <span class="hljs-number">39603</span>*x^<span class="hljs-number">121</span> + <span class="hljs-number">36260</span>*x^<span class="hljs-number">120</span> + <span class="hljs-number">32502</span>*x^<span class="hljs-number">119</span> + <span class="hljs-number">17619</span>*x^<span class="hljs-number">118</span> + <span class="hljs-number">17700</span>*x^<span class="hljs-number">117</span> + <span class="hljs-number">15083</span>*x^<span class="hljs-number">116</span> + <span class="hljs-number">11311</span>*x^<span class="hljs-number">115</span> + <span class="hljs-number">36496</span>*x^<span class="hljs-number">114</span> + <span class="hljs-number">1300</span>*x^<span class="hljs-number">113</span> + <span class="hljs-number">13601</span>*x^<span class="hljs-number">112</span> + <span class="hljs-number">43425</span>*x^<span class="hljs-number">111</span> + <span class="hljs-number">10376</span>*x^<span class="hljs-number">110</span> + <span class="hljs-number">11551</span>*x^<span class="hljs-number">109</span> + <span class="hljs-number">13684</span>*x^<span class="hljs-number">108</span> + <span class="hljs-number">14955</span>*x^<span class="hljs-number">107</span> + <span class="hljs-number">6661</span>*x^<span class="hljs-number">106</span> + <span class="hljs-number">12674</span>*x^<span class="hljs-number">105</span> + <span class="hljs-number">21534</span>*x^<span class="hljs-number">104</span> + <span class="hljs-number">32132</span>*x^<span class="hljs-number">103</span> + <span class="hljs-number">34135</span>*x^<span class="hljs-number">102</span> + <span class="hljs-number">43684</span>*x^<span class="hljs-number">101</span> + <span class="hljs-number">837</span>*x^<span class="hljs-number">100</span> + <span class="hljs-number">29311</span>*x^<span class="hljs-number">99</span> + <span class="hljs-number">4849</span>*x^<span class="hljs-number">98</span> + <span class="hljs-number">26632</span>*x^<span class="hljs-number">97</span> + <span class="hljs-number">26662</span>*x^<span class="hljs-number">96</span> + <span class="hljs-number">10159</span>*x^<span class="hljs-number">95</span> + <span class="hljs-number">32657</span>*x^<span class="hljs-number">94</span> + <span class="hljs-number">12149</span>*x^<span class="hljs-number">93</span> + <span class="hljs-number">17858</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">35805</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">19391</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">30884</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">42039</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">17292</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">4694</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">1497</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">1744</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">31071</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">26246</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">24402</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">22068</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">39263</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">23703</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">21484</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">12241</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">28821</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">32886</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">43075</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">35741</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">19936</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">37219</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">33411</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">8301</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">12949</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">28611</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">42654</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">6910</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">18523</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">31144</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">21398</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">36298</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">27158</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">918</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">38601</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">4269</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">5699</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">36444</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">34791</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">37978</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">32481</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">8039</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">11012</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">11454</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">30450</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">1381</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">32403</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">8202</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">8404</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">37648</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">43696</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">34237</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">36490</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">41423</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">35792</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">36950</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">31086</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">38970</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">12439</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">7963</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">16150</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">11382</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">3038</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">20157</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">23531</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">32866</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">5428</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">21132</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">13443</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">28909</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">42716</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">6567</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">24744</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">8727</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">14895</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">28172</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">30903</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">26608</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">27314</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">42224</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">42551</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">37726</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">11203</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">36816</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">5537</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">20301</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">17591</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">41279</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">7999</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">33753</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">34551</span>*x + <span class="hljs-number">9659</span><br></code></pre></td></tr></table></figure><p>这道题给出了一个$p&#x3D;43753$，和两个多项式$n,c$，很显然，根据以往的传统，我们把$n$放到sagemath中进行分解。</p><p><img src="/2021/01/22/RSA-Notes4/11.png" alt="1-1"></p><p>不过我们发现他最后竟然带了个系数$34036$，计算了一下$\phi(34036)&#x3D;16632$，所以最后的$\phi(n)&#x3D;16632(43753^{65})(43753^{112})$，然后就是求逆元。不过最后发现这个$16632$乘不乘最后的结果都一样，不知道是为什么。</p><p>然后就是常规操作了，我们根据RSA的常规解密，就可以解出$m$。这里到最后应该是把$m$多项式的次数从低到高的系数拿出来转换成字符（而不是视为$43753$进制最后转换成$10$进制后<code>long_to_bytes</code>）,最后的答案就很简单了</p><p><img src="/2021/01/22/RSA-Notes4/12.png" alt="1-2"></p><h2 id="2-Overview-of-Coppersmith"><a href="#2-Overview-of-Coppersmith" class="headerlink" title="2.Overview of Coppersmith"></a>2.Overview of Coppersmith</h2><p>以下部分位Coppersmith相关例题讲解</p><h3 id="PART-1"><a href="#PART-1" class="headerlink" title="PART 1"></a>PART 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0x67de16e8ceaece4a123ad278b249a9acde81174d4287889d68dbb7939fdfa28f3a927c4e1c71f9b7b036c7ce287806105954fb9086bfe3dbe5f82d156f4151c9fe74e32f6ce8bb239c2d55cb6628e53941628ccbd294aa101687160b578decf716f348ea42922358946e7706daf044be08a9bcd8ea248b597eeb3a1e16781247dec66a0976046de5b2603315ab5dc17120a558db56213e66989c0895492151fb5a0784fa346dfeebf2b1f71b3c7dbf135abfd4499d4f83b6d0b4c68fe5b1fe14e383d4c7cc78065cfed1831bd2e19c06b270e4ebfb9d09f3431d613301106c7762dace771e730c3268ad549e20202ac1f77d47eb18f82693e6e974f783a88793</span><br>e=<span class="hljs-number">3</span><br>c=<span class="hljs-number">0x54d055d31d0186b4914292a281ce71ecd9e5f2a441e68180ab0d6bb3e08412254d3465b44d1aa49d5c1926f3d72507bb7f89c5614a190957c4c22da4e966ecf632c914c5cce942bd4ee916c3d28ab27863e1ec9a1058fbc10b3bf672765e51428cd8022a7985d01570a72091694d0c91a205319316dd5c1eaa8f6486673512940e19a65</span><br>(m&gt;&gt;<span class="hljs-number">72</span>)&lt;&lt;<span class="hljs-number">72</span>=<span class="hljs-number">0x464c41477b325e38727361373538393639336663363839633737633566353236326436000000000000000000</span><br></code></pre></td></tr></table></figure><p>这道题给出了$n,e,c$，同时还有一个$512$位长的$m$，不过最低的$72$位被省略了，所以现在我们就使用我在<strong>RSA Notes 1</strong>中第<strong>0x08</strong>部分发布的脚本，补充完整参数，放入sagemath-notebook中运行即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-comment">#你已知的n值</span><br>e = <span class="hljs-number">3</span><br>m = randrange(n)<span class="hljs-comment">#不要改</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<span class="hljs-comment">#不要改</span><br>beta = <span class="hljs-number">1</span><br>epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span><span class="hljs-comment">#不要改</span><br>nbits = n.nbits()<span class="hljs-comment">#不要改</span><br>kbits=<span class="hljs-comment">#m被掩盖的字位数</span><br><span class="hljs-built_in">print</span>(nbits,kbits)<br>mbar = <span class="hljs-comment">#你得到的不完整的m值</span><br>c = <span class="hljs-comment">#你得到的c值</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;upper %d bits (of %d bits) is given&quot;</span> % (nbits-kbits, nbits))<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (mbar + x)^e - c<br><span class="hljs-built_in">print</span> (m)<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor = n1</span><br><span class="hljs-built_in">print</span>( mbar + x0)<br></code></pre></td></tr></table></figure><h3 id="PART-2"><a href="#PART-2" class="headerlink" title="PART 2"></a>PART 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0x6546140f6d20fb1af8755ba3925274f8df3f175ea783e3f23748429fe6602477239b51e5c20b201b82e210402ebbfc159cb548117a4c2e1b73bbee26bbc04f5388ed3710beb66db0e1b6253030944c791529bc6cf4959851fde47602dcc116468038f852b766d418a7b2d4b83edef71e82b6465a3726d2f9d228dc0a99c01f277e28176c93d7059b3ad0b20f33b6b26785a22a3e867c11a9dc564311cc4cd6b7a3f605c9e7c7e44896181713269faf5600e98cb12450316bad55cda3e1ed24bbdac22cf4c8d23f1f4767336aebea9c638d6258f80c858e5b01be39edf7eb245c3c4639ef6de9edaf904808e09e141030ec503260418b23a0347bf224e65766f3</span><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-number">0x4f92bcf8674e17ac7901a68b125bea2b7c2e5e5b7da9d23b90db42fb8e7ae60580b6055310d1a71daa8787c3a386914212e55e89f26155228e243efb444791469f8decc7cb6663d84a8ad404ae3b0bf07e3777a90db767c1ea433cbb8cc276a01025e1ffa8f1ba92b9f90f9b2822a1789b6953ba3a1f9c948a8fc834b9873a8a0ad1c58c34ddc53a2551d85f54166b205ce53c2f883ba59fe4bd181b1bc9a9b7d9d3d9204c0310d20c14804dc7d7d8a241d360216eff12b55c87f9dbddcab23855f75c6105e0de4f44944317b04dbb89cb9bb2f381c375b0e166cf5f547967e07ab1a86287dae6e555905b8069846474169cef605af66be22ec884d3718997a</span><br>(p&gt;&gt;<span class="hljs-number">128</span>)&lt;&lt;<span class="hljs-number">128</span>=<span class="hljs-number">0x8ae08a8ccda172cc5768c98c935b06a185a5f86f1020ce864929dd61d0d6511141e94f589b4c10754fe4b278207414caedc5a0c47ca091ef3dad80c15b05776d4c574759b50106585973e7f7cda6d01db4bcfbb671151069287f276bb6c18d04cab2dfccf70a72a5edbc23fd636da98900000000000000000000000000000000</span><br></code></pre></td></tr></table></figure><p>这道题给出了$p$的值，不过$p$缺失了最后的$128$位，所以我们可以补全以下脚本，然后放入sagemath中运行即可获得完整的$p$值，进而分解$n$，常规解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-comment">#填写n值</span><br>p_fake = <span class="hljs-comment">#填写p值</span><br>pbits = p_fake.nbits()<br>kbits = <span class="hljs-comment">#填写p失去的低位位数</span><br>pbar = p_fake &amp; (<span class="hljs-number">2</span>^pbits-<span class="hljs-number">2</span>^kbits)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;upper %d bits (of %d bits) is given&quot;</span> % (pbits-kbits, pbits))<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x + pbar<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor &gt;= n^0.3</span><br>p= x0 + pbar<br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">hex</span>(p))<br></code></pre></td></tr></table></figure><h3 id="PART-3"><a href="#PART-3" class="headerlink" title="PART 3"></a>PART 3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0x8449fe9c8f1ddf7b08b53af7e3f55f9199fdc07b05ae7bda1737159ee985c8ea7d46dd1ac82cf23fef91b119822667d4fe7d98a2a46d1fc38f9dc05e9fb8e6ea07087f77d8dbda45877eb5babb7bc58af8caccdcbe89cf0cb994ce51fa5d45565fbc1b1797984663bb912ce2c9391ba6b76c92c4ac2e6b5d9c1242fdc75f36f7</span><br>e=<span class="hljs-number">3</span><br>c=<span class="hljs-number">0x4ffb1114e37dd59103dae4c48581bb592e1bc0a2ec94f10f9f391084267aad0715a09776e074464d9581e00ad0af4f4e7ec2adc0d4455c7c23b52f76d1ea3801ced06c6db167614aae99a2ad44e1c00ac3eb043405e2f80c7c2c99e72fea9bfe708972f8eb1e419cb60b724bac9b2139283d6a1c34c137c312e20c12433978d2</span><br>d%(<span class="hljs-number">2</span>**<span class="hljs-number">512</span>)=<span class="hljs-number">0xf0a11feccbadcce7330f2d3b65bac041514c5b4cec2c7260923df431b60806de728822d256becee44d84d8ff4c4f3b95b5c2a4707ced42e0184e46cc043971b</span><br></code></pre></td></tr></table></figure><p>这次，我们已知的是$n,e,c$同时还给出了$d$的最低$512$位，我们也可以直接补全以下脚本，然后放入sagemath中即可获得完整的$d$值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_p</span>(<span class="hljs-params">p0, kbits, n</span>):<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    nbits = n.nbits()<br>    f = <span class="hljs-number">2</span>^kbits*x + p0<br>    f = f.monic()<br>    roots = f.small_roots(X=<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>-kbits), beta=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span><br>    <span class="hljs-keyword">if</span> roots:<br>        x0 = roots[<span class="hljs-number">0</span>]<br>        p = gcd(<span class="hljs-number">2</span>^kbits*x0 + p0, n)<br>        <span class="hljs-keyword">return</span> ZZ(p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_p</span>(<span class="hljs-params">d0, kbits, e, n</span>):<br>    X = var(<span class="hljs-string">&#x27;X&#x27;</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e+<span class="hljs-number">1</span>):<br>        results = solve_mod([e*d0*X - k*X*(n-X+<span class="hljs-number">1</span>) + k*n == X], <span class="hljs-number">2</span>^kbits)<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> results:<br>            p0 = ZZ(x[<span class="hljs-number">0</span>])<br>            p = partial_p(p0, kbits, n)<br>            <span class="hljs-keyword">if</span> p:<br>                <span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <span class="hljs-comment">#填写n值</span><br>    e = <span class="hljs-number">3</span><br>    d = <span class="hljs-comment">#填写不完整的d值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>    beta = <span class="hljs-number">0.5</span><br>    epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span><br>    nbits = n.nbits()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;nbits:%d:&quot;</span>%(nbits))<br>    kbits = <span class="hljs-comment">#填写已知d的低位的二进制位数</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;kbits:%d&quot;</span>%(kbits))<br>    d0 = d &amp; (<span class="hljs-number">2</span>^kbits-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;lower %d bits (of %d bits) is given&quot;</span> % (kbits, nbits))<br>    p = find_p(d0, kbits, e, n)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;found p: %d&quot;</span> % p)<br>    q = n//p<br>    <span class="hljs-built_in">print</span> (<span class="hljs-built_in">hex</span>(d))<br>    dtrue=inverse_mod(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(dtrue))<br></code></pre></td></tr></table></figure><h3 id="PART-4"><a href="#PART-4" class="headerlink" title="PART 4"></a>PART 4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">e=<span class="hljs-number">3</span><br>n1=<span class="hljs-number">78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989</span><br>c1=<span class="hljs-number">23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860</span><br>n2=<span class="hljs-number">98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647</span><br>c2=<span class="hljs-number">72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676</span><br>n3=<span class="hljs-number">91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311</span><br>c3=<span class="hljs-number">22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616</span><br></code></pre></td></tr></table></figure><p>低指数广播攻击就是已知同一个明文$m$被多个不同的密钥加密后的结果，这个时候可以直接使用中国剩余定理解决，最后对结果开三次根号即位明文的值。</p><p>CRT的脚本有很多，比如说我博客中的<strong>0xGame Div 2</strong>中就有现成的脚本可以直接拿过来用，此处节省版面，不上脚本，<del>因为更重要的内容在后面</del></p><h3 id="PART-5"><a href="#PART-5" class="headerlink" title="PART 5"></a>PART 5</h3><h4 id="ORG-2021-1-22"><a href="#ORG-2021-1-22" class="headerlink" title="ORG 2021.1.22"></a>ORG 2021.1.22</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0xa1c7556e895f8268b7a81c5cae3d1377f245ceb84b86878982c9869ed9a00fd1ec11a462831b812d7f973a385a1cdae9465c78085ef1d28fa52d8b151609c737e788c3ae9848c39cc2d62c8c73b7659d19e49301171e5df0d9eb6bd0ea0c0f2d64235372c04f88e6402f202783432d2a3cca4d7290e59e41afbe1c206495134d</span><br>e=<span class="hljs-number">7</span><br>c=<span class="hljs-number">0xa0e8306ed676f8f362c78feb0f3adfbaa068f28863941777bd07a7f41f4288220efe34227d1cba72597582f5c1d372394edfd3bd1c29686f30ab9c84ab6bcbbb08920cfca210ecdf3bfac94f844b877a2b74bfeeafd47784978723e6ac78796c24022aa142f4a5715efde7be7e34a75665e6d984fea74e77d063d7e75d0b888c</span><br>x=<span class="hljs-number">0xa0e8306ed676f8f362c78feb0f3adfbaa068f28863941777bd07a7f41f4288220efe34227d1cba72935ee2338135a8152e68165e0f7adf45a898d6b32ea2fc8789f783a7af0ade6acd505e1c791058bb872d589f848e6bb5aa4eeceed04e62ff98b75d6cecd57f0b510486f3f18e9e2f3b7ec14a5ba6621d76161c54f9a5561f</span><br></code></pre></td></tr></table></figure><p>其中$x$是对$m+1$加密的结果，也就是$(m+1)^7 \mod n$</p><p>这里就涉及到了相关明文攻击：</p><h4 id="UPD-2021-2-18"><a href="#UPD-2021-2-18" class="headerlink" title="UPD 2021.2.18"></a>UPD 2021.2.18</h4><p><strong>UPD内容：删除了原版中错误的脚本代码，上了一个准确的代码</strong></p><p>所谓RSA相关明文攻击，就是在已知$c\equiv m^e \pmod p$的情况下，同时还知道了$x\equiv (m+1)^e \pmod p$的情况，这个时候启动相关明文攻击，具体内容将在后面一篇RSA笔记中提到。</p><p>下面先上一下解密脚本，这里是知道了$x$和$x+b$的情形。当然，如果一次项不同，举个例子。比如我们知道的是$c&#x3D;E(2m+3)$和$x&#x3D;E(5m+8)$。可以得到$C&#x3D;5^ec,X&#x3D;2^ex$，那么我们就获得了$C&#x3D;E(10m+15),X&#x3D;E(10m+16)$的情形，填写$b&#x3D;1,c&#x3D;C,x&#x3D;X$，那么我们就可以获得$10m \mod n$的计算结果，简单处理一下就可以获得$m$了。<del>（CTF不是ACM，因此我们不需要把所有的步骤全放在一个文件里面，自己多数都是分部计算的，故关于如何凑m前面的系数，请自己根据提示构造）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sagemath code</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">c1, c2, b, e, n</span>):<br>    PR.&lt;x&gt;=PolynomialRing(Zmod(n))<br>    g1 = x^e - c1<br>    g2 = (x+b)^e - c2<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">g1, g2</span>):<br>        <span class="hljs-keyword">while</span> g2:<br>            g1, g2 = g2, g1 % g2<br>        <span class="hljs-keyword">return</span> g1.monic()<br>    <span class="hljs-keyword">return</span> -gcd(g1, g2)[<span class="hljs-number">0</span>]<br>n=<span class="hljs-comment">#填写n值</span><br>c=<span class="hljs-comment">#填写明文加密内容</span><br>x=<span class="hljs-comment">#填写相关明文加密内容</span><br>e=<span class="hljs-comment">#填写加密指数，不宜太大，一般不超过100</span><br>b=<span class="hljs-comment">#填写一次函数相差的常数项</span><br>m = attack(c,x,b,e,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#这是已知m和m+b的情形。如果知道了Am+B,Cm+D，可以将m前面的系数统一成GCD(A,C)后再求解。</span><br></code></pre></td></tr></table></figure><h3 id="PART-6"><a href="#PART-6" class="headerlink" title="PART 6"></a>PART 6</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27</span><br>d=random.getrandbits(<span class="hljs-number">1024</span>*<span class="hljs-number">0.270</span>)<br>e=invmod(d,phin)<br><span class="hljs-built_in">hex</span>(e)=<span class="hljs-number">0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bb</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)=<span class="hljs-number">0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866c</span> <br></code></pre></td></tr></table></figure><p>很显然，看到$e$这么大，并且$\ln d &#x3D;0.27 \ln n&lt; 0.292 \ln n$,很容易想到WinerAttack</p><p>不过试了好几个weinerattack的脚本都爆破失败，原因可能是因为此处的$\dfrac{\ln d}{\ln n}&#x3D;0.27$，过于接近$0.292$了，导致了爆破的失败。</p><p>网上找到了一个与Winerattack相类似但不是Winerattack的脚本，填参后放入sagemath里用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>debug = <span class="hljs-literal">True</span><br>strict = <span class="hljs-literal">False</span><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):<br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii,ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>( nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii,jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-built_in">print</span>( a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):<br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># if it is unhelpful:</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* removing unhelpful vector&quot;</span>, ii)<br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(bound - BB[ii, ii]):<br>                    <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="hljs-string">&quot;and&quot;</span>, affected_vector_index)<br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-keyword">return</span> BB<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):<br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)<br>    Q = PR.quotient(x*y + <span class="hljs-number">1</span> - u) <span class="hljs-comment"># u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX*YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-shifts</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># x-shifts list of monomials</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials():<br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:<br>                monomials.append(monomial)<br>    monomials.sort()<br>    <br>    <span class="hljs-comment"># y-shifts (selected by Herrman and May)</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift) <span class="hljs-comment"># substitution</span><br>    <br>    <span class="hljs-comment"># y-shifts list of monomials</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u^kk * y^jj)<br><br>    <span class="hljs-comment"># construct lattice B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)<br>    <span class="hljs-keyword">if</span> helpful_only:<br>        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="hljs-number">1</span>)<br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus^mm)<br>    det = BB.det()<br>    bound = modulus^(mm*nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;Try with highers m and t.&quot;</span>)<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus^mm)<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br>    BB = BB.LLL()<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;LLL is done!&quot;</span>)<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;looking for independent vectors in the lattice&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-keyword">for</span> pol1_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> pol2_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pol1_idx + <span class="hljs-number">1</span>, nn):<br>            PR.&lt;w,z&gt; = PolynomialRing(ZZ)<br>            pol1 = pol2 = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>                pol1 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)<br>                pol2 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)<br>            PR.&lt;q&gt; = PolynomialRing(ZZ)<br>            rr = pol1.resultant(pol2)<br>            <span class="hljs-keyword">if</span> rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="hljs-string">&quot;and&quot;</span>, pol2_idx)<br>                found_polynomials = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found_polynomials:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    rr = rr(q, q)<br>    soly = rr.roots()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> solx, soly<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    N = <br>    e = <br>    c = <br>    delta = <span class="hljs-number">.291</span> <span class="hljs-comment"># this means that d &lt; N^delta</span><br>    m = <span class="hljs-number">4</span> <span class="hljs-comment"># size of the lattice (bigger the better/slower)</span><br><br>    t = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*delta) * m)  <span class="hljs-comment"># optimization from Herrmann and May</span><br>    X = <span class="hljs-number">2</span>*floor(N^delta)  <span class="hljs-comment"># this _might_ be too much</span><br>    Y = floor(N^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>))    <span class="hljs-comment"># correct if p, q are ~ same size</span><br>    P.&lt;x,y&gt; = PolynomialRing(ZZ)<br>    A = <span class="hljs-built_in">int</span>((N+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>    pol = <span class="hljs-number">1</span> + x * (A + y)<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;=== checking values ===&quot;</span>)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* delta:&quot;</span>, delta)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="hljs-number">0.292</span>)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* size of e:&quot;</span>, <span class="hljs-built_in">int</span>(log(e)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* size of N:&quot;</span>, <span class="hljs-built_in">int</span>(log(N)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;* m:&quot;</span>, m, <span class="hljs-string">&quot;, t:&quot;</span>, t)<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;=== running algorithm ===&quot;</span>)<br>        start_time = time.time()<br>    solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br>    <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;x:&quot;</span>, solx)<br>            <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>        d = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>        m = <span class="hljs-built_in">pow</span>(c,d,N)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;[-]d is &#x27;</span> + <span class="hljs-built_in">str</span>(d))<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;[-]m is: &#x27;</span> + <span class="hljs-built_in">str</span>(m))<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;[-]hex(m) is: &#x27;</span> + <span class="hljs-string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(m)))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;[!]no solution was found!&quot;</span>)<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;[!]All Done!&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>((<span class="hljs-string">&quot;[!]Timer: %s s&quot;</span> % (time.time() - start_time)))<br>        <span class="hljs-built_in">print</span>( <span class="hljs-string">&#x27;[!]All Done!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example()<br></code></pre></td></tr></table></figure><h2 id="3-End"><a href="#3-End" class="headerlink" title="3.End"></a>3.End</h2><p>这些RSA的破解都是难度较高的，后期还是需要多理解一下的。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Jan2</title>
    <link href="/2021/01/21/21Jan2/"/>
    <url>/2021/01/21/21Jan2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087寒假的切题2"><a href="#huangx607087寒假的切题2" class="headerlink" title="huangx607087寒假的切题2"></a>huangx607087寒假的切题2</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><p>在同校Soreat,Am473ur,Hermes和To1in四位密码学大佬的带领下，BUU终于上了1000分</p><h2 id="1-NPUCTF2020-认清形势，建立信心"><a href="#1-NPUCTF2020-认清形势，建立信心" class="headerlink" title="1.[NPUCTF2020]认清形势，建立信心"></a>1.[NPUCTF2020]认清形势，建立信心</h2><p>常规操作，先来看一下出题的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">25</span>)<br>e = <span class="hljs-comment"># Hidden</span><br>q = getPrime(<span class="hljs-number">25</span>)<br>n = p * q<br>m = bytes_to_long(flag.strip(<span class="hljs-string">b&quot;npuctf&#123;&quot;</span>).strip(<span class="hljs-string">b&quot;&#125;&quot;</span>))<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, e, n))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, e, n))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">8</span>, e, n))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">169169912654178</span><br><span class="hljs-string">128509160179202</span><br><span class="hljs-string">518818742414340</span><br><span class="hljs-string">358553002064450</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>可能作为NPUCTF2020的密码学签到题，这道题难度并不是很大：题目给出了$2^e,4^e,8^e$对$n$取模的值。不过对于$n,e$题目并没有给出。</p><p>根据基本的算数原理：$2^e×2^e&#x3D;4^e,2^e×4^e&#x3D;8^e$。我们假设$2^e,4^e,8^e$对$n$取模的值分别是$a,b,c$，那么我们可以得到这样两个等式：<br>$$<br>a^2-b&#x3D;k_1n<br>$$<br>$$<br>ab-c&#x3D;k_2n<br>$$</p><p>所以我们可以很快得到$a^2-b,ab-c$的值，然后直接放Sagemath中对这两个数进行因式分解即可。</p><p><img src="/2021/01/21/21Jan2/101.png" alt="1-1"></p><p>根据图片发现共同的因数是$18195301,28977097$，那么$p,q$得解。</p><p>后面直接用C++爆破$e$的值即可，得到$e&#x3D;808723997$，用时不到$10$秒，然后这道题就是正常的RSA解密了。</p><h2 id="2-AFCTF2018-MyOwnCBC"><a href="#2-AFCTF2018-MyOwnCBC" class="headerlink" title="2.[AFCTF2018]MyOwnCBC"></a>2.[AFCTF2018]MyOwnCBC</h2><p>又是一道AES解密题，不过我们可以先来了解一下CBC模式：CBC加密模式的特点就是所有的加密连接都在一起，并且每次加密的内容都依赖于上一个加密后的状态。第一个状态由初始向量iv（可以理解为第$0$个状态）决定。</p><p>继续上一下题目的出题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MyOwnCBC</span>(<span class="hljs-params">key, plain</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key)!=<span class="hljs-number">32</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error!&quot;</span><br>cipher_txt = <span class="hljs-string">b&quot;&quot;</span><br>cipher_arr = []<br>cipher = AES.new(key, AES.MODE_ECB, <span class="hljs-string">&quot;&quot;</span>)<br>plain = [plain[i:i+<span class="hljs-number">32</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plain), <span class="hljs-number">32</span>)]<br><span class="hljs-built_in">print</span> plain<br>cipher_arr.append(cipher.encrypt(plain[<span class="hljs-number">0</span>]))<br>cipher_txt += cipher_arr[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(plain)):<br>cipher = AES.new(cipher_arr[i-<span class="hljs-number">1</span>], AES.MODE_ECB, <span class="hljs-string">&quot;&quot;</span>)<br>cipher_arr.append(cipher.encrypt(plain[i]))<br>cipher_txt += cipher_arr[i]<br><span class="hljs-keyword">return</span> cipher_txt<br>key = random.getrandbits(<span class="hljs-number">256</span>)<br>key = long_to_bytes(key)<br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>s = f.read()<br>f.close()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_cipher&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(MyOwnCBC(key, s))<br>f.close()<br></code></pre></td></tr></table></figure><p>题目先把明文分成了$32$位一组然后用AES的ECB模式进行加密的，密钥就依赖于上一个明文的加密结果。所以最后的密文长度与明文长度一致。密文一共$1696$位，可以推断一共分了$53$组。</p><p>所以我们只需要逐个读取密文，然后将密文分成$53$组存在数组里，模仿他的加密代码进行解密即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_cipher.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>b=fp.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b))<br>C=[]<br>M=[]<br>S=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(b),<span class="hljs-number">32</span>):<br>    C.append(b[i:i+<span class="hljs-number">32</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(C))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">52</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    Enc=AES.new(C[i-<span class="hljs-number">1</span>],AES.MODE_ECB)<br>    M=[Enc.decrypt(C[i])]+M<br>    S+=M[<span class="hljs-number">0</span>].decode()<br><span class="hljs-built_in">print</span>(S)<br></code></pre></td></tr></table></figure><p>最后我们程序的运行结果是这样的<del>但我最后并没有求出iv，或许这个iv也是求不出来的吧</del></p><p><img src="/2021/01/21/21Jan2/201.png" alt="2-1"></p><p>根据我这个<del>fw</del>的分析，答案应该是<code>afctf&#123;Don&#39;t_be_fooled_by_yourself&#125;</code> ，最后答案也验证了这个猜想</p><h2 id="3-QCTF2018-Xman-RSA"><a href="#3-QCTF2018-Xman-RSA" class="headerlink" title="3.[QCTF2018]Xman-RSA"></a>3.[QCTF2018]Xman-RSA</h2><p>打开解密脚本：很明显，这个代码被使用了替换密码加密过了。根据自己对Python那一点点的熟悉程度的分析，很快地还原了加密源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> is_prime<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bytes_to_num</span>(<span class="hljs-params">b</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(b.encode(<span class="hljs-string">&#x27;hex&#x27;</span>), <span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">num_to_bytes</span>(<span class="hljs-params">n</span>):<br>b = <span class="hljs-built_in">hex</span>(n)[<span class="hljs-number">2</span>:-<span class="hljs-number">1</span>]<br>b = <span class="hljs-string">&#x27;0&#x27;</span> + b <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b)%<span class="hljs-number">2</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> b<br><span class="hljs-keyword">return</span> b.decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_a_prime</span>(<span class="hljs-params">l</span>):<br>random_seed = urandom(l)<br><br>num = bytes_to_num(random_seed)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> is_prime(num):<br><span class="hljs-keyword">break</span><br>num+=<span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> num<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">s, e, n</span>):<br>p = bytes_to_num(s)<br>p = <span class="hljs-built_in">pow</span>(p, e, n)<br><span class="hljs-keyword">return</span> num_to_bytes(p).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">separate</span>(<span class="hljs-params">n</span>):<br>p = n % <span class="hljs-number">4</span><br>t = (p*p) % <span class="hljs-number">4</span><br><span class="hljs-keyword">return</span> t == <span class="hljs-number">1</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>flag = f.read()<br>msg1 = <span class="hljs-string">&quot;&quot;</span><br>msg2 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br><span class="hljs-keyword">if</span> separate(i):<br>msg2 += flag[i]<br><span class="hljs-keyword">else</span>:<br>msg1 += flag[i]<br>p1 = get_a_prime(<span class="hljs-number">128</span>)<br>p2 = get_a_prime(<span class="hljs-number">128</span>)<br>p3 = get_a_prime(<span class="hljs-number">128</span>)<br>n1 = p1*p2<br>n2 = p1*p3<br>e = <span class="hljs-number">0x1001</span><br>c1 = encrypt(msg1, e, n1)<br>c2 = encrypt(msg2, e, n2)<br><span class="hljs-built_in">print</span>(c1)<br><span class="hljs-built_in">print</span>(c2)<br>e1 = <span class="hljs-number">0x1001</span><br>e2 = <span class="hljs-number">0x101</span><br>p4 = get_a_prime(<span class="hljs-number">128</span>)<br>p5 = get_a_prime(<span class="hljs-number">128</span>)<br>n3 = p4*p5<br>c1 = num_to_bytes(<span class="hljs-built_in">pow</span>(n1, e1, n3)).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>c2 = num_to_bytes(<span class="hljs-built_in">pow</span>(n1, e2, n3)).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-built_in">print</span>(c1)<br><span class="hljs-built_in">print</span>(c2)<br><span class="hljs-built_in">print</span>(base64.b64encode(num_to_bytes(n2)))<br><span class="hljs-built_in">print</span>(base64.b64encode(num_to_bytes(n3)))<br></code></pre></td></tr></table></figure><p>首先我们先对$n_2,n_3$进行Base64解码，然后转化成数字。使用我博客中的<strong>RSA Notes 1</strong>中的相关脚本，通过共模攻击求得$n_1$。求得$n_1$后，根据模不互素，直接求$\gcd(n_1,n_2)$，很快地分解了$n_1,n_2$，最后两次解密，根据他的separate函数直接拼接明文即可，难度不高。</p><p>为保险起见还是上一下最后的脚本，共模攻击见<strong>RSA Notes 1</strong>提供的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">separate</span>(<span class="hljs-params">n</span>):<br>p = n % <span class="hljs-number">4</span><br>t = (p*p) % <span class="hljs-number">4</span><br><span class="hljs-keyword">return</span> t == <span class="hljs-number">1</span><br>n2=<span class="hljs-string">&#x27;PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==&#x27;</span><br>n3=<span class="hljs-string">&#x27;TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==&#x27;</span><br>n2=bytes_to_long(b64decode(n2))<br>n3=bytes_to_long(b64decode(n3))<br>n1=<span class="hljs-number">2499586809914462821807624371088011200618603528498132509598946284572455726453497171635086810524607288333625665025664872216634366700044105279185519761587818169021167370991396691510275499486673922916370294043072503635630922980240462022218565365191228535222150496387990987123639567257124081274667568443678527637259644488779394704508217357758791670308548246801142468699716221789070607334747835552167450340441488756779323653879402176647890584656379628685893686585469918686253137796663587854943386347039389769790329948165162483370187914412810153613198247569427480466488647563900948387020677830797976534568626241686906738179</span><br>p=GCD(n1,n2)<br>q1,q2=n1//p,n2//p<br>phi1,phi2=(p-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>),(p-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d1,d2=inverse(<span class="hljs-number">0x1001</span>,phi1),inverse(<span class="hljs-number">0x1001</span>,phi2)<br>c1=<span class="hljs-number">0x1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839</span><br>c2=<span class="hljs-number">0x129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab</span><br>m1,m2=<span class="hljs-built_in">pow</span>(c1,d1,n1),<span class="hljs-built_in">pow</span>(c2,d2,n2)<br>m1,m2=long_to_bytes(m1),long_to_bytes(m2)<br>m1,m2=m1.decode(),m2.decode()<br>s,n=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-built_in">len</span>(m1)+<span class="hljs-built_in">len</span>(m2)<br>po1,po2=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">if</span>(separate(i)):<br>        s=s+m2[po2]<br>        po2+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        s=s+m1[po1]<br>        po1+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h2 id="4-NPUCTF2020-共-模-攻-击"><a href="#4-NPUCTF2020-共-模-攻-击" class="headerlink" title="4.[NPUCTF2020]共 模 攻 击"></a>4.[NPUCTF2020]共 模 攻 击</h2><h3 id="PART-1"><a href="#PART-1" class="headerlink" title="PART 1"></a>PART 1</h3><p>做题目时，发现题目给了一个hint，我们先打开看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> hint<br>m = bytes_to_long(hint)<br>p = getPrime(<span class="hljs-number">256</span>)<br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">256</span>, p)<br><span class="hljs-built_in">print</span>(p)<br>p, q = getPrime(<span class="hljs-number">256</span>), getPrime(<span class="hljs-number">256</span>)<br>n = p * q<br>e1, e2 = getPrime(<span class="hljs-number">32</span>), getPrime(<span class="hljs-number">32</span>)<br>c1, c2 = <span class="hljs-built_in">pow</span>(c, e1, n), <span class="hljs-built_in">pow</span>(c, e2, n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(e1, c1)<br><span class="hljs-built_in">print</span>(e2, c2)<br></code></pre></td></tr></table></figure><p>很显然，我们如果想解密这个hint,首先来的就是一次共模攻击，解出这个hint加密后的$c$值，然后我们就是要解同余方程$x^{256}\equiv c \pmod p$。发现$p$是素数，并且$\gcd(p-1,256)&#x3D;4$，说明方程一共有$4$个根。我们可以直接利用Sagemath解$\text{GF}$域上的方程，得到$4$个解如下图，然后一个 一个通过<code>long_to_bytes</code>转换成字符，可以得到hint：<code>m.bit_length()&lt;400</code></p><p><img src="/2021/01/21/21Jan2/401.png" alt="4-1"></p><h3 id="PART-2"><a href="#PART-2" class="headerlink" title="PART 2"></a>PART 2</h3><p>得到了hint之后，我们再进入正规的解题题目中来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>flag = flag.strip(<span class="hljs-string">b&quot;npuctf&#123;&quot;</span>).strip(<span class="hljs-string">b&quot;&#125;&quot;</span>)<br>m = bytes_to_long(flag)<br>p, q = getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e1, e2 = p, q<br>c1, c2 = <span class="hljs-built_in">pow</span>(m, e1, n), <span class="hljs-built_in">pow</span>(m, e2, n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c1)<br><span class="hljs-built_in">print</span>(c2)<br></code></pre></td></tr></table></figure><p>这道题虽然也是共模攻击，但是这两个指数很特殊，恰好就是$n$的两个素因子$p,q$。也就是说，我们知道了$m^p,m^q$的值，下面就是要考虑一下构造式子的问题。</p><p>根据之前在离散对数中探讨过的一个内容：在模$M$（$M$不一定是素数）的意义下所有的$\mathrm{ord}(x)$均为$\phi(M)$的因数，所以我们可以得到：<br>$$<br>m^p\equiv m \pmod p \Rightarrow m^p\equiv ap+m\pmod n<br>$$<br>$$<br>m^q\equiv m \pmod q \Rightarrow m^q\equiv bq+m\pmod n<br>$$</p><p>下面就是要想办法构造一下两个式子，很显然我们可以把这两个式子相乘和相加，那么就有下面两个算式<br>$$<br>F&#x3D;m^p+m^q\equiv ap+bq+2m \pmod m<br>$$<br>$$<br>G&#x3D;m^pm^q&#x3D;m^{p+q}\equiv m^2+m(ap+bq)+abpq \pmod n<br>$$</p><p>由于$n&#x3D;pq$，所以$G$式的最后一项有$abpq\equiv 0 \pmod n$，所以化简$G$式，有<br>$$<br>G \equiv m^2+m(ap+bq) \pmod n<br>$$<br>$F$式子乘上$m$，得：<br>$$<br>mF\equiv m(ap+bq)+2m^2 \pmod n<br>$$<br>再进行两步推导<br>$$<br>mF-G\equiv m^2\pmod n<br>$$<br>$$<br>m^2-mF+G\equiv 0 \pmod n<br>$$</p><p>因为$F&#x3D;c_1+c_2,G&#x3D;c_1c_2$，所以我们构建方程$m^2-(c_1+c_2)m+c_1c_2\equiv 0 \pmod n$，由于$n$并不是素数，所以我们需要换一种求根的方式，要用上hint中给出的内容，限定一下根的大小不超过$2^{400}$，即可得解</p><p><img src="/2021/01/21/21Jan2/402.png" alt="4-2"></p><h2 id="5-AFCTF2018-Tiny-LFSR"><a href="#5-AFCTF2018-Tiny-LFSR" class="headerlink" title="5[AFCTF2018]Tiny LFSR"></a>5[AFCTF2018]Tiny LFSR</h2><p>一道lfsr题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(sys.argv)&lt;<span class="hljs-number">4</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python Encrypt.py keyfile plaintext ciphername&quot;</span>)<br>exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R, mask</span>):<br>output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffffffffffff</span><br>lastbit=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>i=i&gt;&gt;<span class="hljs-number">1</span><br>output^=lastbit<br><span class="hljs-keyword">return</span> (output,lastbit)<br>R = <span class="hljs-number">0</span><br>key = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>key = f.read()<br>R = <span class="hljs-built_in">int</span>(key,<span class="hljs-number">16</span>)<br>f.close<br>mask = <span class="hljs-number">0xd800000000000000</span><br>a = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(b, <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [key[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(key), <span class="hljs-number">2</span>)]])<br>f=<span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">2</span>],<span class="hljs-string">&quot;r&quot;</span>)<br>ff = <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">3</span>],<span class="hljs-string">&quot;wb&quot;</span>)<br>s = f.read()<br>f.close()<br>lent = <span class="hljs-built_in">len</span>(s)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a)):<br>ff.write((<span class="hljs-built_in">ord</span>(s[i])^<span class="hljs-built_in">ord</span>(a[i])).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a), lent):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>    ff.write((tmp^<span class="hljs-built_in">ord</span>(s[i])).to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br>ff.close()<br></code></pre></td></tr></table></figure><p>题目给出了一个明文Plain及其加密后的样子，同时也给出了flag的密文，很显然是要求flag明文。</p><p>根据出题代码可以发现：mask的值是$16$位$16$进制数，所以密钥的长度也应该是$16$位$16$进制数（也就是$8$字节），并且最后最先给出的应该是明文与密钥的加密结果，所以我们可以直接先将明文与密钥异或一下，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>fp,gp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;[2]Plain.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>),<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;[3]cipher.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>pl,cp=fp.read().encode(),gp.read()<br>pl,cp=bytes_to_long(pl),bytes_to_long(cp)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pl^cp))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x123456789abcdef184bb2ec4d1ee7b86e3a6e926e3a6e8d203b2e03203b2f2c6226e22e6226fad1953215e7953374e745e7cf6d45f97467bf6adc09be5779eecc4444ccd535dba9f2aaa7fe85ad0b2aa800a81ff94ff680380e39205550c78208801067007b0cb6</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>注意到最后的$16$进制位数的长度是奇数（一开始我没发现，耽误了好长的时间），说明了应该在前面补$0$，那么密钥就应该是$0123456789\text {ABCDEF}_h$，这么好的数字，<del>说明我们的密钥发现是对的</del></p><p>拿到了密钥，也就说明我们就拿到了lfsr的种子,进而就可以获得最后的flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr</span>(<span class="hljs-params">R, mask</span>):<br>        output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>        i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffffffffffff</span><br>        lastbit=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>                lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>                i=i&gt;&gt;<span class="hljs-number">1</span><br>        output^=lastbit<br>        <span class="hljs-keyword">return</span> (output,lastbit)<br>R=<span class="hljs-number">0x0123456789abcdef</span><br>mask=<span class="hljs-number">0xd800000000000000</span><br>a=<span class="hljs-string">b&#x27;\x01\x23\x45\x67\x89\xab\xcd\xef&#x27;</span><br>fp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_encode.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>c=fp.read()<br>ans=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        ans+=<span class="hljs-built_in">chr</span>(a[i]^c[i])<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>,<span class="hljs-number">1213</span>):<br>        tmp=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                (R,out)=lfsr(R,mask)<br>                tmp=(tmp &lt;&lt; <span class="hljs-number">1</span>)^out<br>        ans+=<span class="hljs-built_in">chr</span>(tmp^c[i])<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21Jan1</title>
    <link href="/2021/01/18/21Jan1/"/>
    <url>/2021/01/18/21Jan1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087寒假的切题1"><a href="#huangx607087寒假的切题1" class="headerlink" title="huangx607087寒假的切题1"></a>huangx607087寒假的切题1</h1><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>近期BUUCTF的分数上到了500分，不过<del>目前的形式依然很严峻，与我同级的一个人比我强很多，而我却在这里补基础，感觉校队里同一级除web方向的人不可同时存在2个及以上，压力还是非常大的</del></p><h2 id="0x01-ECC-RSA"><a href="#0x01-ECC-RSA" class="headerlink" title="0x01 ECC &amp; RSA"></a>0x01 ECC &amp; RSA</h2><p>这是一道结合了离散对数和椭圆曲线的密码体系，我们可以先看一下加密代码和题目所给出的的各种数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastecdsa.curve <span class="hljs-keyword">import</span> P521 <span class="hljs-keyword">as</span> Curve<br><span class="hljs-keyword">from</span> fastecdsa.point <span class="hljs-keyword">import</span> Point<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, isPrime<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_rsa_primes</span>(<span class="hljs-params">G</span>):<br>urand = bytes_to_long(urandom(<span class="hljs-number">521</span>//<span class="hljs-number">8</span>))<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>s = getrandbits(<span class="hljs-number">521</span>) ^ urand<br>Q = s*G<br><span class="hljs-keyword">if</span> isPrime(Q.x) <span class="hljs-keyword">and</span> isPrime(Q.y):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ECC Private key:&quot;</span>, <span class="hljs-built_in">hex</span>(s))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;RSA primes:&quot;</span>, <span class="hljs-built_in">hex</span>(Q.x), <span class="hljs-built_in">hex</span>(Q.y))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Modulo:&quot;</span>, <span class="hljs-built_in">hex</span>(Q.x * Q.y))<br><span class="hljs-keyword">return</span> (Q.x, Q.y)<br>flag = <span class="hljs-built_in">int</span>.from_bytes(<span class="hljs-built_in">input</span>(), byteorder=<span class="hljs-string">&quot;big&quot;</span>)<br>ecc_p = Curve.p<br>a = Curve.a<br>b = Curve.b<br>Gx = Curve.gx<br>Gy = Curve.gy<br>G = Point(Gx, Gy, curve=Curve)<br>e = <span class="hljs-number">0x10001</span><br>p, q = gen_rsa_primes(G)<br>n = p*q<br>file_out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;downloads/ecc-rsa.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;ECC Curve Prime: &quot;</span> + <span class="hljs-built_in">hex</span>(ecc_p) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;Curve a: &quot;</span> + <span class="hljs-built_in">hex</span>(a) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;Curve b: &quot;</span> + <span class="hljs-built_in">hex</span>(b) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;Gx: &quot;</span> + <span class="hljs-built_in">hex</span>(Gx) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;Gy: &quot;</span> + <span class="hljs-built_in">hex</span>(Gy) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;e: &quot;</span> + <span class="hljs-built_in">hex</span>(e) + <span class="hljs-string">&quot;\n&quot;</span>)<br>file_out.write(<span class="hljs-string">&quot;p * q: &quot;</span> + <span class="hljs-built_in">hex</span>(n) + <span class="hljs-string">&quot;\n&quot;</span>)<br>c = <span class="hljs-built_in">pow</span>(flag, e, n)<br>file_out.write(<span class="hljs-string">&quot;ciphertext: &quot;</span> + <span class="hljs-built_in">hex</span>(c) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">ECC Curve Prime: 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="hljs-string">Curve a: -0x3</span><br><span class="hljs-string">Curve b: 0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span><br><span class="hljs-string">Gx: 0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span><br><span class="hljs-string">Gy: 0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span><br><span class="hljs-string">e: 0x10001</span><br><span class="hljs-string">p * q: 0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28f</span><br><span class="hljs-string">ciphertext: 0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9e</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们通过上面的加密过程可以发现：$(p,q)$实际上是椭圆曲线$y^2&#x3D;x^3+ax+b$上面的点，所以我们可以有一个等式为$q^2&#x3D;p^3+ap+b$，加上RSA中的等式$n&#x3D;pq$，两边平方后带入$q^2$表达式为$n^2&#x3D;p^5+ap^3+bp^2$，然后用以下的sagemath代码即可，注意求解多项式的根应该是$f&#x3D;0$的根，所以最后要减去一个$n^2$，把方程化成$p^5+ap^3+bp^2-n^2&#x3D;0$</p><p><img src="/2021/01/18/21Jan1/1-1.png" alt="1-1"></p><p>最后求出来$3$个解，很显然，由于RSA中$p$是素数，那么只有第二个解符合题意。此时$n$就被分解成功，进而我们就很快地能够解密了。</p><p>下面附上一些Sagemath中对密码学有关的函数供以后查阅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#整数域,有理数域和实数域</span><br>ZZ(<span class="hljs-number">3</span>)<br>QQ(<span class="hljs-number">0.25</span>)<br>RR(<span class="hljs-number">2</span>^<span class="hljs-number">0.5</span>)<br><span class="hljs-comment">#复数域</span><br>CC(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">#生成虚数单位i</span><br>i=ComplexField().gen();(<span class="hljs-number">2</span>+i)*(<span class="hljs-number">4</span>+<span class="hljs-number">3</span>*i)<br><span class="hljs-comment">#构造多项式环,返回具有给定属性和变量名的全局唯一的单变量或多元多项式环</span><br><span class="hljs-comment">#定义在整数域上的多项式环R，变量为w;ZZ也可换成其他数域</span><br>R.&lt;w&gt;=PolynomialRing(ZZ);R<br>(<span class="hljs-number">1</span> + w)^<span class="hljs-number">3</span><br><span class="hljs-comment">#有限环</span><br>RN=IntegerModRing(<span class="hljs-number">63</span>)<br>FR=Integers(<span class="hljs-number">17</span>);FR<br><span class="hljs-comment">#自身的代数扩展;exR=FR[w]/(w^2+3)</span><br>exR=FR.extension(w^<span class="hljs-number">2</span>+<span class="hljs-number">3</span>)；exR<br><span class="hljs-comment">#以python整数的形式返回所有可逆元素的列表</span><br>FR.list_of_elements_of_multiplicative_group()<br><span class="hljs-comment">#假设环的乘法群是循环的，返回这个环的乘法群的生成元</span><br>FR.multiplicative_generator()<br><span class="hljs-comment">#返回这个环的一个随机元素</span><br>FR.random_element()<br><span class="hljs-comment">#上述几种方法对如下的域同样支持</span><br><span class="hljs-comment">#有限域</span><br><span class="hljs-comment">#素数域</span><br>G1=GF(<span class="hljs-number">37</span>);G1<br><span class="hljs-comment">#伽罗瓦域</span><br>G2=GF(<span class="hljs-number">3</span>^<span class="hljs-number">5</span>);G2<br><span class="hljs-comment">#同时求商与余数</span><br>q,r=<span class="hljs-built_in">divmod</span>(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#求公约数</span><br>d=gcd(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#扩展的欧几里得算法</span><br>d,u,v=xgcd(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#12在模5下的逆</span><br>u=inverse_mod(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#生成[lb,ub)之间的随机素数,注意ub在前,lb在后,lb可缺省为0</span><br><span class="hljs-comment">#可通过这种方式生成128位的随机素数</span><br>p=random_prime(<span class="hljs-number">2L</span>**<span class="hljs-number">128</span>,<span class="hljs-number">2L</span>**<span class="hljs-number">127</span>)<br><span class="hljs-comment">#判断是否为素数</span><br>is_prime(<span class="hljs-number">65537</span>)<br><span class="hljs-comment">#第20个素数</span><br>nth_prime(<span class="hljs-number">20</span>)<br><span class="hljs-comment">#计算x^y mod n</span><br>z=power_mod(<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">17</span>)<br><span class="hljs-comment">#欧拉函数</span><br>euler_phi(<span class="hljs-number">111</span>)<br><span class="hljs-comment">#中国剩余定理,A=[a1,...,an],M=[m1,...,mn]</span><br><span class="hljs-comment">#ai=x mod mi,i=1,...,n</span><br>crt([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>])<br><span class="hljs-comment">#求自身的n次根</span><br>FR(<span class="hljs-number">12</span>).nth_root(<span class="hljs-number">7</span>,<span class="hljs-built_in">all</span>=<span class="hljs-string">&#x27;True&#x27;</span>)<br><span class="hljs-comment">#求多项式的根，roots方法必须作用在域上</span><br>R.&lt;x&gt;=PolynomialRing(G1)<br>xt=G1(<span class="hljs-number">12</span>)<br>yt=xt^<span class="hljs-number">6</span><br>f=x^<span class="hljs-number">6</span>-yt<br>f.roots()<br><span class="hljs-comment">#定义矩阵，默认定义在实数域</span><br>A = matrix([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br>A^-<span class="hljs-number">1</span><br><span class="hljs-comment">#定义在其他域上的矩阵，如有限域</span><br>A = matrix(GF(<span class="hljs-number">13</span>),[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br>A^-<span class="hljs-number">1</span><br><span class="hljs-comment">#可以看到两个逆矩阵不一样</span><br><span class="hljs-comment">#定义向量，定义在有限域，默认定义在实数域</span><br>w = vector(GF(<span class="hljs-number">13</span>),[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>])<br>Y=A*w;Y<br>Z=w*A;Z<br><span class="hljs-comment">#解线性方程组AX=Y</span><br>X = A.solve_right(Y);X<br><span class="hljs-comment">#也可以使用符号\</span><br>A\Y<br><span class="hljs-comment">#解线性方程组XA=Y</span><br>X = A.solve_left(Z);X<br><span class="hljs-comment">#格基约减</span><br>A = matrix([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]])<br><span class="hljs-comment">#LLL算法</span><br>A.LLL()<br><span class="hljs-comment">#BKZ算法</span><br>A.BKZ()<br>p=ZZ(<span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,<span class="hljs-number">16</span>)<br>a=ZZ(<span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,<span class="hljs-number">16</span>)<br>b=ZZ(<span class="hljs-string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,<span class="hljs-number">16</span>)<br><span class="hljs-comment">#有限域GF(p)上的椭圆曲线y^2 = x^3 + a*x + b mod p</span><br>E=EllipticCurve(GF(p),[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,a,b])<br><span class="hljs-comment">#基点</span><br>g=E([ZZ(<span class="hljs-string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,<span class="hljs-number">16</span>),ZZ(<span class="hljs-string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,<span class="hljs-number">16</span>)])<br><span class="hljs-comment">#基点的阶</span><br>n=ZZ(<span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<span class="hljs-number">16</span>)<br><span class="hljs-comment">#生成密钥</span><br>sk=random_prime(<span class="hljs-number">2</span>*n//<span class="hljs-number">3</span>,n//<span class="hljs-number">3</span>)<br><span class="hljs-comment">#生成公钥</span><br>G=sk*g<br><span class="hljs-comment">#通用的求离散对数的方法</span><br>x=discrete_log(a,base,<span class="hljs-built_in">ord</span>,operation)<br><span class="hljs-comment">#求离散对数的Pollard-Rho算法</span><br>x=discrete_log_rho(a,base,<span class="hljs-built_in">ord</span>,operation)<br><span class="hljs-comment">#求离散对数的Pollard-kangaroo算法(也称为lambda算法)</span><br>x=discrete_log_lambda(a,base,bounds,operation)<br><span class="hljs-comment">#小步大步法</span><br>x=bsgs(base,a,bounds,operation)<br></code></pre></td></tr></table></figure><h2 id="2-ctf-little-case-NCTF2019-easyRSA"><a href="#2-ctf-little-case-NCTF2019-easyRSA" class="headerlink" title="2.[*ctf]little case&amp;[NCTF2019]easyRSA"></a>2.[*ctf]little case&amp;[NCTF2019]easyRSA</h2><p>这两道题都是涉及到了RSA中$\gcd(p-1,q-1,e)&#x3D;e$的情况，直接查阅<strong>RSA Notes 3</strong>中的相关内容即可，此处不再赘述。</p><h2 id="3-NPUCTF2020-Mersenne-twister"><a href="#3-NPUCTF2020-Mersenne-twister" class="headerlink" title="3.[NPUCTF2020]Mersenne twister"></a>3.[NPUCTF2020]Mersenne twister</h2><p>一道梅森旋转题，还是先看一下题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify , unhexlify<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag ,seed<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">26</span><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;npuctf&#123;&#x27;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span><br>XOR = <span class="hljs-keyword">lambda</span> s1 ,s2 : <span class="hljs-built_in">bytes</span>([x1 ^ x2 <span class="hljs-keyword">for</span> x1 ,x2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s1 , s2)])<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mt73991</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self , seed</span>):<br>        <span class="hljs-variable language_">self</span>.state = [seed] + [<span class="hljs-number">0</span>] * <span class="hljs-number">232</span><br>        <span class="hljs-variable language_">self</span>.flag = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.srand()<br>        <span class="hljs-variable language_">self</span>.generate()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">srand</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">232</span>):<br>            <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] = <span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.state[i] ^ (<span class="hljs-variable language_">self</span>.state[i] &gt;&gt; <span class="hljs-number">27</span>)) - i<br>            <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">233</span>):<br>            y = (<span class="hljs-variable language_">self</span>.state[i] &amp; <span class="hljs-number">0x80000000</span>) | (<span class="hljs-variable language_">self</span>.state[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">233</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>            temp = y &gt;&gt; <span class="hljs-number">1</span><br>            temp ^= <span class="hljs-variable language_">self</span>.state[(i + <span class="hljs-number">130</span>) % <span class="hljs-number">233</span>]<br>            <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>                temp ^= <span class="hljs-number">0x9908f23f</span><br>            <span class="hljs-variable language_">self</span>.state[i] = temp<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getramdanbits</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.flag == <span class="hljs-number">233</span>:<br>            <span class="hljs-variable language_">self</span>.generate()<br>            <span class="hljs-variable language_">self</span>.flag = <span class="hljs-number">0</span><br>        bits = <span class="hljs-variable language_">self</span>.Next(<span class="hljs-variable language_">self</span>.state[<span class="hljs-variable language_">self</span>.flag]).to_bytes(<span class="hljs-number">4</span> , <span class="hljs-string">&#x27;big&#x27;</span>)<br>        <span class="hljs-variable language_">self</span>.flag += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> bits    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Next</span>(<span class="hljs-params">self , tmp</span>):<br>        tmp ^= (tmp &gt;&gt; <span class="hljs-number">11</span>)<br>        tmp ^= (tmp &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x9ddf4680</span><br>        tmp ^= (tmp &lt;&lt; <span class="hljs-number">15</span>) &amp; <span class="hljs-number">0xefc65400</span><br>        tmp ^= (tmp &gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x34adf670</span><br>        <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">key , plain</span>):<br>    tmp = md5(plain).digest()<br>    <span class="hljs-keyword">return</span> hexlify(XOR(tmp , key))<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    flag = flag.encode()<br>    random = mt73991(seed)<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./cipher.txt&#x27;</span> , <span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>        key = <span class="hljs-string">b&#x27;&#x27;</span>.join([random.getramdanbits() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>        cipher = encrypt(key , <span class="hljs-built_in">chr</span>(i).encode())<br>        f.write(cipher)<br></code></pre></td></tr></table></figure><p>这道题目与之前我博客里的**PRNG MT Notes[2020.10.26]**所涉及到的题目基本一致，只不过是将密文中的每一位的md5值与生成的随机值进行异或。我们还是只需要求出Next函数的逆即可（那篇博客也提供了对应方法，简单调参即可使用）。</p><p>不过问题是我们无法知道完全的$233$个状态，只能得知我们仅有的$104$个状态。其中一个办法就是枚举seed，枚举规模约为$43$亿，实际上跑了$16$亿多一些。<del>（不过好像可以不用枚举seed，具体方法待更新）</del></p><h3 id="Update-2021-7-20"><a href="#Update-2021-7-20" class="headerlink" title="Update 2021.7.20"></a>Update 2021.7.20</h3><p>如果我们重新观察一下代码，我们可以发现如下内容：</p><p>由于寄存器规模是$233$，而实际上只产生了$104$个随机数，因此内部的state所有内容是不变的。并且根据题目产生随机数的方式可知：在产生新的state的时候，与旧的state有如下关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">srand</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">232</span>):<br>        <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] = <span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.state[i] ^ (<span class="hljs-variable language_">self</span>.state[i] &gt;&gt; <span class="hljs-number">27</span>)) - i<br>        <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">233</span>):<br>        y = (<span class="hljs-variable language_">self</span>.state[i] &amp; <span class="hljs-number">0x80000000</span>) | (<span class="hljs-variable language_">self</span>.state[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">233</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>        temp = y &gt;&gt; <span class="hljs-number">1</span><br>        temp ^= <span class="hljs-variable language_">self</span>.state[(i + <span class="hljs-number">130</span>) % <span class="hljs-number">233</span>]<br>        <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>            temp ^= <span class="hljs-number">0x9908f23f</span><br></code></pre></td></tr></table></figure><p>因此新的<code>state[i]</code>与旧的<code>state[i],state[i+1],state[i+130]</code>有关系。而题目中已经告诉了我们flag的第一位和最后一位。因此<code>state[0],state[103]</code>都可以求出来。有<code>Newstate[103]=Oldstate[103]^Newstate[0]</code>，这样我们就可以获得<code>Oldstate[103]</code>的最高$31$位了。</p><p>这部分结果我就略去了，算出来的<code>Oldstate[103]</code>可能的$32$位结果： $\text{D7FC4AA6H or D7FC4AA7H}$</p><p>然后我们分别用以下代码验证一下就行了：注：由于<code>newstate[103]&gt;&gt;31==0</code>，因此不需要考虑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res, shift, mask=<span class="hljs-number">0xffffffff</span>, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &gt;&gt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getseedbyns104</span>(<span class="hljs-params">os104</span>):<br>    a=os104<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">103</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        a=((a+i)*<span class="hljs-number">2520285293</span>)&amp;<span class="hljs-number">0xffffffff</span><br>        a=inverse_right(a,<span class="hljs-number">27</span>)<br>    <span class="hljs-keyword">return</span> a<br>ns103,ns0=<span class="hljs-number">1167644902</span>,<span class="hljs-number">778501557</span><br>os104=(ns103^ns0)*<span class="hljs-number">2</span><br>y=os104<br><span class="hljs-comment">#os104+=2**31</span><br>a=(os104+<span class="hljs-number">103</span>)*inverse(<span class="hljs-number">1812433253</span>,<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)&amp;<span class="hljs-number">0xffffffff</span><br>a=inverse_right(a,<span class="hljs-number">27</span>)<br><span class="hljs-built_in">print</span>(a,a&amp;<span class="hljs-number">0x80000000</span>==y&amp;<span class="hljs-number">0x80000000</span>)<br><span class="hljs-built_in">print</span>(getseedbyns104(os104))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第15行注释掉:</span><br><span class="hljs-string">617247885 False</span><br><span class="hljs-string">2899787883</span><br><span class="hljs-string">第15行不注释:</span><br><span class="hljs-string">2764731549 True</span><br><span class="hljs-string">1668245885</span><br><span class="hljs-string">因此最终种子是1668245885，与之前爆破的情形一致。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-ACTF新生赛2020-crypto-aes"><a href="#4-ACTF新生赛2020-crypto-aes" class="headerlink" title="4.[ACTF新生赛2020]crypto-aes"></a>4.[ACTF新生赛2020]crypto-aes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Cryptodome.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br><span class="hljs-keyword">from</span> Cryptodome.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    key=os.urandom(<span class="hljs-number">2</span>)*<span class="hljs-number">16</span><br>    iv=os.urandom(<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(bytes_to_long(key)^bytes_to_long(iv))<br>    aes=AES.new(key,AES.MODE_CBC,iv)<br>    enc_flag = aes.encrypt(FLAG)<br>    <span class="hljs-built_in">print</span>(enc_flag)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>一道AES题目，我们可以看出key是$8$组$4$位$16$进制数，我们只需要把他给出来的第一个异或结果拿出来并输出$16$进制，发现前面是$4$组$\text{C981}_h$，而后面是不规则内容。我们只需要把不规则内容用$4$组$\text{C981}_h$进行异或即可。这样我们的key和iv就都拿到了</p><p>最后我们只需要模仿他的模式，即可解出flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>iv=<span class="hljs-string">b&#x27;\x87lQbI0\xfc\xe6\xaa\x05P\xb1\x01\xd1pL&#x27;</span><br>cip=<span class="hljs-string">b&#x27;\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p&#x27;</span><br>key=long_to_bytes(<span class="hljs-number">0xc981c981c981c981c981c981c981c981c981c981c981c981c981c981c981c981</span>)<br>aes=AES.new(key,AES.MODE_CBC,iv)<br>dec_flag = aes.decrypt(cip)<br><span class="hljs-built_in">print</span>(dec_flag)<br></code></pre></td></tr></table></figure><h2 id="5-ctf-GuessFlag-1-2"><a href="#5-ctf-GuessFlag-1-2" class="headerlink" title="5.[*ctf]GuessFlag(1)(2)"></a>5.[*ctf]GuessFlag(1)(2)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br>N=<span class="hljs-number">64</span><br>key=randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**N)<br><span class="hljs-comment"># print key</span><br>key=<span class="hljs-built_in">bin</span>(key)[<span class="hljs-number">2</span>:].rjust(N,<span class="hljs-string">&#x27;0&#x27;</span>)<br>count=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p=<span class="hljs-number">0</span><br>q=<span class="hljs-number">0</span><br>new_key=<span class="hljs-string">&#x27;&#x27;</span><br>zeros=[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br><span class="hljs-keyword">if</span> key[j]==<span class="hljs-string">&#x27;0&#x27;</span>:<br>zeros.append(j)<br>p=zeros[randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(zeros))-<span class="hljs-number">1</span>]<br>q=zeros[randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(zeros))-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">try</span>:<br>mask=<span class="hljs-built_in">int</span>(raw_input(<span class="hljs-string">&quot;mask:&quot;</span>))<br><span class="hljs-keyword">except</span>:<br>exit(<span class="hljs-number">0</span>)<br>mask=<span class="hljs-built_in">bin</span>(mask)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">if</span> p&gt;q:<br>tmp=q<br>q=p<br>p=tmp<br>cnt=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,N):<br><span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p,q+<span class="hljs-number">1</span>):<br>new_key+=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(mask[cnt])^<span class="hljs-built_in">int</span>(key[j]))<br><span class="hljs-keyword">else</span>:<br>new_key+=key[j]<br>cnt+=<span class="hljs-number">1</span><br>cnt%=<span class="hljs-built_in">len</span>(mask)<br>key=new_key<br><span class="hljs-keyword">try</span>:<br>guess=<span class="hljs-built_in">int</span>(raw_input(<span class="hljs-string">&quot;guess:&quot;</span>))<br><span class="hljs-keyword">except</span>:<br>exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> guess==<span class="hljs-built_in">int</span>(key,<span class="hljs-number">2</span>):<br>count+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Nice.&#x27;</span><br><span class="hljs-keyword">else</span>:<br>count=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Oops.&#x27;</span><br><span class="hljs-keyword">if</span> count&gt;<span class="hljs-number">2</span>:<br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><p>题目的意思很简单，服务器会保留一个随机的$64$位整数，并记录下所有的$0$位。你每次向服务器发送一个数字，然后服务器会任意选取已有密钥中$2$个$0$比特位，并将这$2$个$0$比特位之间的所有比特位依次循环异或你所发送数字的各个比特位。连续$3$次猜中密钥即可获得答案</p><p>一开始<code>print(flag)</code>是给出的，这次只需要发送三次$0$，这样密钥就保持不变，然后每次猜就猜他给出来的那个数，然后就可以获取flag</p><p>不过后面升级了,<code>print(flag)</code>这句话被删除了，这个时候就要想办法了（比如我问了一下学长，呃）。这个时候，我们只需要每次发送$1$，这样任意两个$0$之间的所有比特位都有可能被异或。不过我们多次本地实验后会发现：随着发送$1$的次数不断增多，密钥末尾的固定$1$比特位的长度越来越长，所以只需要不到$200$次的发送$1$，最后$64$个比特位就会全是$1$。所以我们每次猜密钥都猜$18446744073709551615$，也就是$2^{64}-1$，到最后就会连续$3$次猜中，最终我们就能拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ExpLog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA Notes 3</title>
    <link href="/2021/01/13/RSA-Notes3/"/>
    <url>/2021/01/13/RSA-Notes3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习RSA的笔记-3"><a href="#huangx607087学习RSA的笔记-3" class="headerlink" title="huangx607087学习RSA的笔记(3)"></a>huangx607087学习RSA的笔记(3)</h1><h2 id="O-About"><a href="#O-About" class="headerlink" title="O-About"></a>O-About</h2><p>为了期末考试，30天的CTF学习都摸了，现在风信子里面的大佬越来越多了，我也变得越来越菜。不过还好，自己的高数过了，寒假没事就可以多搞搞CTF了<del>（哦对，还有英语6级，争取大一下半年过掉）</del></p><p><strong>约定：此博客中如果出现除法，未特殊说明的，均为向下取整的整除！</strong></p><h2 id="I-RSA中-gcd-phi-e-not-1-的情况"><a href="#I-RSA中-gcd-phi-e-not-1-的情况" class="headerlink" title="I-RSA中$\gcd(\phi,e)\not &#x3D; 1$的情况"></a>I-RSA中$\gcd(\phi,e)\not &#x3D; 1$的情况</h2><h3 id="0x01-题目背景-引例"><a href="#0x01-题目背景-引例" class="headerlink" title="0x01 题目背景&amp;引例"></a>0x01 题目背景&amp;引例</h3><p>NCTF中有一道RSA题目给出了$e,\phi$不互素的情况，这就意味着$e,\phi$的逆元$d$不存在，因此我们也就无法使用常规的方法来分解因式。</p><p>为了探讨大数字的一般性结论，我们先从小的数字开始，看一个引例：</p><p>在数字极小的时候，我们假设$e&#x3D;7,p&#x3D;43,q&#x3D;29,c&#x3D;394$是已知的（这种情况下都是给出$p,q$的，并且注意到$p-1,q-1$都是$e$的倍数）。然后我们期望的$m$值是$26$（实际上应该是是未知的）。然后我们用下面的代码做一个先加密再解密的实验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e,m,p,q=<span class="hljs-number">7</span>,<span class="hljs-number">26</span>,<span class="hljs-number">43</span>,<span class="hljs-number">29</span><br>n,phi=p*q,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">print(pow(m,e,n))</span><br><span class="hljs-string">print(phi)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>c=<span class="hljs-number">394</span><br>phi=<span class="hljs-number">1176</span><br>anses=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(i,e,n)==c):<br>        anses.append(i)<br><span class="hljs-built_in">print</span>(anses)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[18, 26, 73, 114, 155, 157, 163, 200, 201, 244, 276, 287, 288, 308, 327, 329, 331, 374, 416, 421, 491, 501, 503, 534, 566, 577, 588, 636, 675, 679, 706, 714, 722, 781, 824, 851, 867, 878, 888, 972, 975, 996, 1023, 1062, 1146, 1168, 1187, 1230, 1233]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后我们可以发现：当我们尝试用枚举法<del>（反正数字小）</del>尝试枚举符合条件的答案时，发现一共有多解（并且解的个数恰好是$7^2&#x3D;49$）：我们期望的$26$只是其中的一个解。然而这里也仅仅时在数字较小的时候采用枚举法，我们必须要找到一种办法来真正地来解决这个问题。</p><h3 id="0x02-有限域内开根"><a href="#0x02-有限域内开根" class="headerlink" title="0x02  有限域内开根"></a>0x02  有限域内开根</h3><h4 id="2o01-Introduction"><a href="#2o01-Introduction" class="headerlink" title="2o01 Introduction"></a>2o01 Introduction</h4><p>基础的数学早已告诉我们，$n$次方程有$n$个根。所以当$p-1$和$e$不互素时，$x^e\equiv a \pmod p$要么有$e$个根，要么没有根（这个很容易理解，$e&#x3D;2$时，方程$x^2\equiv a\pmod p$如果$a$是模$p$二次剩余就有两个根，$a$不是模$p$的二次剩余就没根。）</p><p>所以，我们就需要求出在有限域内开$e$次根号，在这里我们无需考虑无解的情况（因为在RSA中，显然有一个解是$m$）</p><p>发现$p-1,q-1$都是$e$的 倍数后，我们可以利用sagemath，求出这$e(&#x3D;7)$个根中的其中一个根，如下图</p><p><img src="/2021/01/13/RSA-Notes3/culc1.png" alt="Picture2o01"></p><p>至于剩下的$6$个根，我们可以有这样的推导（仍然是以$e&#x3D;7$为例）：$x&#x3D;(\sqrt[7]{1×x})^7&#x3D;(\sqrt[7]1)^7×(\sqrt[7]{x})^7$。可能某些无理数在模意义下不存在，但是这没有关系，因为$x^7\equiv 1 \pmod {43}$绝对不止$1$一个根，比如$41^7\equiv 1 \pmod {43}$。我们可以用下面的脚本求出来，原理见Am4dalao博客中的网页链接</p><h4 id="Upd-2021-1-17"><a href="#Upd-2021-1-17" class="headerlink" title="Upd 2021.1.17"></a>Upd 2021.1.17</h4><p>用以下sagemath代码求特解更快（$e&gt;4200$的情况下）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">AMM</span>(<span class="hljs-params">o, r, q</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n----------------------------------------------------------------------------------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(r, o, q))<br>    g = GF(q)<br>    o = g(o)<br>    p = g(random.randint(<span class="hljs-number">1</span>, q))<br>    <span class="hljs-keyword">while</span> p ^ ((q-<span class="hljs-number">1</span>) // r) == <span class="hljs-number">1</span>:<br>        p = g(random.randint(<span class="hljs-number">1</span>, q))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find p:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(p))<br>    t = <span class="hljs-number">0</span><br>    s = q - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> s % r == <span class="hljs-number">0</span>:<br>        t += <span class="hljs-number">1</span><br>        s = s // r<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s, t))<br>    k = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (k * s + <span class="hljs-number">1</span>) % r != <span class="hljs-number">0</span>:<br>        k += <span class="hljs-number">1</span><br>    alp = (k * s + <span class="hljs-number">1</span>) // r<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Find alp:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(alp))<br>    a = p ^ (r**(t-<span class="hljs-number">1</span>) * s)<br>    b = o ^ (r*alp - <span class="hljs-number">1</span>)<br>    c = p ^ s<br>    h = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t):<br>        d = b ^ (r^(t-<span class="hljs-number">1</span>-i))<br>        <span class="hljs-keyword">if</span> d == <span class="hljs-number">1</span>:<br>            j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Calculating DLP...&#x27;</span>)<br>            j = - dicreat_log(a, d)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] Finish DLP...&#x27;</span>)<br>        b = b * (c^r)^j<br>        h = h * c^j<br>        c = c ^ r<br>    result = o^alp * h<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>p=<br>q=<br>n=p*q<br>c=<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>cMp=c%p<br>cMq=c%q<br><span class="hljs-built_in">print</span>(AMM(cMp,<span class="hljs-number">4919</span>,p))<br><span class="hljs-built_in">print</span>(AMM(cMq,<span class="hljs-number">4919</span>,q))<br><br></code></pre></td></tr></table></figure><h4 id="2o77Code"><a href="#2o77Code" class="headerlink" title="2o77Code"></a>2o77Code</h4><p>代码还是要上一下的，<del>帮助理解，万一真有人看不懂原理呢？（我相信是不存在的）</del></p><p>使用urandom的原因是因为虽然这道题的数字小，但以后的数字可能会很大，并且$\mathrm{get}(x,B)$中的$B$在$x$较大的时候也可以$40$换成更大的数字（例如$400$），如果数字太大可以使用文件输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getx</span>(<span class="hljs-params">p,B</span>):<br>    x=bytes_to_long(urandom(B))%p<br>    <span class="hljs-keyword">while</span>(x==<span class="hljs-number">0</span>):<br>        x=bytes_to_long(urandom(B))%p<br>    <span class="hljs-keyword">return</span> x<br><span class="hljs-comment">#------MAIN BELOW------#</span><br>n,p=<span class="hljs-number">7</span>,<span class="hljs-number">29</span><br><span class="hljs-keyword">assert</span> (p-<span class="hljs-number">1</span>)%n==<span class="hljs-number">0</span><br>rem=n<br>anses=[]<br><span class="hljs-keyword">while</span> rem:<br>    x=getx(p,<span class="hljs-number">40</span>)<br>    g=<span class="hljs-built_in">pow</span>(x,(p-<span class="hljs-number">1</span>)//n,p)<br>    <span class="hljs-comment">#print(g,pow(g,2*n,p))</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(g,n*<span class="hljs-number">4</span>,p)==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> g <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> anses):<br>        anses.append(g)<br>        rem=rem-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(anses)     <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">7th_root_of_1_under_condition_of_n,p=7,43:[35, 4, 41, 16, 21, 11, 1]</span><br><span class="hljs-string">7th_root_of_1_under_condition_of_n,p=7,29:[1, 7, 25, 24, 16, 23, 20]</span><br><span class="hljs-string">A_7th_root_of_394_under_condition_of_n,p=7,43:7</span><br><span class="hljs-string">A_7th_root_of_394_under_condition_of_n,p=7,29:12</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们以$n,p&#x3D;7,43$的一组解为例：$[35,4,41,16,21,11,1]$一共有七个数字，这七个数字都满足$x^7\equiv 1 \pmod {43}$。然后我们注意一下我们刚才得到的一个数字值$7$。只要我们对这里面的数字每一个都乘上$7$，得到的数列为$[30, 28, 29, 26, 18, 34, 7]$,那么就有了$x^7\equiv394\pmod {43}$，注意到$7^7\equiv 394 \pmod{43}$，因此我们可以姑且地说$\sqrt[7]{394}\equiv 7 \pmod {43}$。$n&#x3D;7,p&#x3D;29$的情况也同理。</p><h3 id="0x03：求根后两两组合，使用CRT"><a href="#0x03：求根后两两组合，使用CRT" class="headerlink" title="0x03：求根后两两组合，使用CRT"></a>0x03：求根后两两组合，使用CRT</h3><p>然后，我们回顾刚才的过程，$m\equiv \sqrt[e]{c} \pmod p,m\equiv \sqrt[e]{c} \pmod q$，一定要注意到由于模数的不同，两个$\sqrt[e]{c}$的值是不一样的，前者我们求出来的$\sqrt[7]{394}$是$[30,28,29,26,18,34,7]$，因为这是模$43$的意义下的数组。后者是模$29$意义下的数组。</p><p>然后，我们可以把结果两两组合（组合定律告诉我们一共有$e^2$种方案），下面分别使用sagemath和python做的情况。</p><h4 id="3o01：Sagemath截图"><a href="#3o01：Sagemath截图" class="headerlink" title="3o01：Sagemath截图"></a>3o01：Sagemath截图</h4><p><img src="/2021/01/13/RSA-Notes3/culc2.png" alt="3o01p1"></p><h4 id="3o02-python代码"><a href="#3o02-python代码" class="headerlink" title="3o02 python代码"></a>3o02 python代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crt2</span>(<span class="hljs-params">m1,m2,r1,r2</span>):<br>    M=m1*m2<br>    t1,t2=inverse(m2,m1),inverse(m1,m2)<br>    <span class="hljs-keyword">return</span> (r1*t1*m2+r2*t2*m1)%M<br><span class="hljs-comment">#------MAIN BELOW-----#</span><br>s43=[<span class="hljs-number">35</span>, <span class="hljs-number">4</span>, <span class="hljs-number">41</span>, <span class="hljs-number">16</span>, <span class="hljs-number">21</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>]<br>s29=[<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">20</span>]<br>ans=[]<br>p43=<span class="hljs-number">7</span><br>p29=<span class="hljs-number">12</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    s43[i]=s43[i]*p43%<span class="hljs-number">43</span><br>    s29[i]=s29[i]*p29%<span class="hljs-number">29</span><br><span class="hljs-built_in">print</span>(s43)<br><span class="hljs-built_in">print</span>(s29)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s43:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s29:<br>        ans.append(crt2(<span class="hljs-number">43</span>,<span class="hljs-number">29</span>,i,j))<br>ans.sort()<br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">s43=[30, 28, 29, 26, 18, 34, 7]</span><br><span class="hljs-string">s29=[12, 26, 10, 27, 18, 15, 8]</span><br><span class="hljs-string">ans=[18, 26, 73, 114, 155, 157, 163, 200, 201, 244, 276, 287, 288, 308, 327, 329, 331, 374, 416, 421, 491, 501, 503, 534, 566, 577, 588, 636, 675, 679, 706, 714, 722, 781, 824, 851, 867, 878, 888, 972, 975, 996, 1023, 1062, 1146, 1168, 1187, 1230, 1233]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>观察观察，是不是最后的结果与我们一开始枚举求解的结果一模一样？<del>（为了观察方便，特此对ans数组排了个序）</del></p><h3 id="0x04：-最后微调，得出答案"><a href="#0x04：-最后微调，得出答案" class="headerlink" title="0x04： 最后微调，得出答案"></a>0x04： 最后微调，得出答案</h3><p>当我们得到$49$个解之后，我们可以根据题目的需要，将解筛选出来，因为在真正的CTF比赛中，flag都是有一定格式的，本题中由于仅仅是从数论的方法来讲解，并且数字较小，<del>所以就讲了个方法，筛选是很容易的，YS9X！</del></p><h3 id="0x05：-总结一下知识点"><a href="#0x05：-总结一下知识点" class="headerlink" title="0x05： 总结一下知识点"></a>0x05： 总结一下知识点</h3><p><strong>1</strong>：解方程$x^e\equiv a \pmod p$，其中$p$为素数，那么当$\gcd(e,p-1)&#x3D;1$时，该方程有唯一解，为$a^d$，其中$de\equiv 1 \pmod p$。如果$\gcd(e,p-1)\not &#x3D; 1$，那么方程最多可以有$\gcd(e,p-1)$个解。</p><p><strong>2</strong>：当$\gcd(e,p-1)\not &#x3D;1$时。定义方程$x^e\equiv a \pmod p$中，当$a&#x3D;1$时为齐次有限域指数方程<del>（我自己定义的）</del>，当$a\not &#x3D; 1$时为非齐次有限域指数方程。齐次有限域指数方程的通解<del>（应该说是所有解）</del>可以用上面的python代码直接求出，非齐次有限域指数方程可以利用sagemath求出方程的一个特解$x_0$。然后用$x_0$乘上对应齐次方程的通解，那么就得到了非齐次方程的通解<del>（实际上我刚才说的是一种很不规范的说法，只不过是为了类比线代和高数才这样姑且地定义的）</del>。</p><h2 id="II-已知-dp-dq-p-q-c-时求解-m"><a href="#II-已知-dp-dq-p-q-c-时求解-m" class="headerlink" title="II- 已知$dp,dq,p,q,c$时求解$m$"></a>II- 已知$dp,dq,p,q,c$时求解$m$</h2><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>一些<del>过于基础的算式我就不给了，我们可以得到这样的两个式子</del>：$dp\equiv d \pmod {p-1},dq\equiv d \pmod {q-1}$</p><p>然后我们可以计算$m_1\equiv c^d \pmod p,m_2\equiv c^d \pmod q$</p><p>等式经过变形，可以得到$m_2\equiv (kp+m_1)\pmod p$</p><p>然后两边同时减去$m_1$，又有$(m_2-m_1)\equiv kp\pmod p$，即$k\equiv p^{-1}(m_2-m_1) \pmod q$</p><p>又因为$m&#x3D;c^d&#x3D; kp+m_1$，所以$c^d&#x3D;(p^{-1}(m_2-m_1)\mod q)×p+m_1$</p><p>利用$m_1\equiv c^{dq\mod (q-1)} \pmod q,m_2\equiv c^{dp\mod (p-1)}\pmod p$</p><p>就可以直接求出答案了，直接上代码，不多说了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> libnum<br>p = <br>q = <br>dp = <br>dq = <br>c = <br>invq=inverse(p,q)<br>mp=<span class="hljs-built_in">pow</span>(c,dp,p)<br>mq=<span class="hljs-built_in">pow</span>(c,dq,q)<br>m=((mp-mq)*invq%p)*q+mq<br><span class="hljs-built_in">print</span>(m)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumberTheory4</title>
    <link href="/2021/01/11/NumberTheory4/"/>
    <url>/2021/01/11/NumberTheory4/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习数论的笔记4"><a href="#huangx607087学习数论的笔记4" class="headerlink" title="huangx607087学习数论的笔记4"></a>huangx607087学习数论的笔记4</h1><h2 id="1-欧拉-phi-函数的性质"><a href="#1-欧拉-phi-函数的性质" class="headerlink" title="1.欧拉$\phi()$函数的性质"></a>1.欧拉$\phi()$函数的性质</h2><p>任何数$n$的各个因数（包括$1$和自身）的$\phi$值之和等于$n$本身</p><p>例如：$15$的因数是$1,3,5,15$，$\phi(1)+\phi(3)+\phi(5)+\phi(15)&#x3D;1+2+4+8&#x3D;15$</p><p><del>(只上结论，不讲证明)</del></p><h2 id="2-本原元（原根）"><a href="#2-本原元（原根）" class="headerlink" title="2.本原元（原根）"></a>2.本原元（原根）</h2><p><strong>概念：</strong>使得$a^e\equiv 1 \pmod p$的最小$e$值为$p-1$的$a$值成为模$p$的本原元。</p><p>例如：$2^e\equiv 1 \pmod {11}$成立的最小$e$值为$10$，所以$2$是模$11$的本原元。而$3^e\equiv 1 \pmod {11}$成立的最小$e$值为$5$，所以$3$不是模$11$意义下的本原元。</p><p>在模$11$的意义下，我们可以设$\mathrm{ord}(x)$函数，此处有$\mathrm{ord}(2)&#x3D;10,\mathrm{ord}(3)&#x3D;5$。当然，如果放在模$7$的意义下，$\mathrm{ord}(2),\mathrm{ord}(3)$的值就分别变成了$3,6$。那么模$7$意义下，$3$就是本原元，$2$不是了。</p><p>我们看看在模$11$和模$7$的意义下各个数的$\mathrm{ord}$值</p><table><thead><tr><th>$x$</th><th>$\texttt{1}$</th><th>$\texttt{2}$</th><th>$\texttt{3}$</th><th>$\texttt{4}$</th><th>$\texttt{5}$</th><th>$\texttt{6}$</th><th align="left">$\texttt{7}$</th><th>$\texttt{8}$</th><th>$\texttt{9}$</th><th>$\texttt{10}$</th></tr></thead><tbody><tr><td>$\mathrm {ord}_7(x)$</td><td>$\texttt{1}$</td><td>$\texttt{3}$</td><td>$\texttt{6}$</td><td>$\texttt{3}$</td><td>$\texttt{6}$</td><td>$\texttt{2}$</td><td align="left">$\texttt{undef}$</td><td>$\texttt{undef}$</td><td>$\texttt{undef}$</td><td>$\texttt{undef}$</td></tr><tr><td>$\mathrm {ord}_{11}(x)$</td><td>$\texttt{1}$</td><td>$\texttt{10}$</td><td>$\texttt{5}$</td><td>$\texttt{5}$</td><td>$\texttt{5}$</td><td><strong>$\texttt{10}$</strong></td><td align="left">$\texttt{10}$</td><td>$\texttt{10}$</td><td>$\texttt{5}$</td><td>$\texttt{2}$</td></tr></tbody></table><p>对于任意素数$p$来说，总有$\phi(p-1)$个本原元。例如：由于$\phi(10)&#x3D;4$，所以模$11$的意义下，一共有$4$个本原元，分别是$2,6,7,8$。现在还没有求本原元的有效方法。不过根据表格，我们还可以观察到以下$3$个规律：<br><strong>1.</strong> 任何小于$p$的$\mathrm{ord}$值均为$p-1$的因数<br><strong>2.</strong> 二次剩余一定不是本原元，并且二次剩余的$\mathrm{ord}$值恰好为$\dfrac{p-1}{2}$<br><strong>3.</strong> $\mathrm{ord}(p-1)&#x3D;2$</p><p> <strong>COSTAS阵列</strong></p><p>COSTAS阵列的性质：构建一个$p-1$阶的方阵，然后要求每行、每列都有一个$1$，其他元素均为$0$。并且任何两个$1$的连线的长度或斜率都不相同。</p><p>一般选择一个本源元即可构造一个COSTAS阵列。比如：$5$是模$7$意义下的一个本源元，于是有了序列$5,4,6,2,3,1$。所以我们可以构建一个$6×6$的矩阵$A$</p><p><img src="/2021/01/11/NumberTheory4/1.png" alt="1"></p><p>存在$k$使得$A^k&#x3D;E&#x3D;\mathrm{diag}(1,1,1,1,1,1)$</p><h2 id="3-指标（即离散对数）"><a href="#3-指标（即离散对数）" class="headerlink" title="3.指标（即离散对数）"></a>3.指标（即离散对数）</h2><p>由$2^9\equiv 5 \pmod {13}$，可以记为$I(5)&#x3D;9\equiv \dfrac{\ln5}{\ln2} \pmod {13}$</p><p>当我们规定底数$a$时，我们可以设$I(x)&#x3D;\dfrac{\ln x}{\ln a}$的对数形式，该对数的运算与数学上已知的对数形式一模一样。这也是我后面博客里谈到离散对数问题所要考虑到的东西。</p><p>我们也可以做个表，设$p&#x3D;7,a&#x3D;5$，那么$I(1)$到$I(6)$分别为$6,4,5,2,1,3$。如果我们想要计算$3×5$，我们可以查表得$I(3)&#x3D;5,I(5)&#x3D;3,5+3\equiv 1\pmod 7$所以我们可以得到$3×5\equiv1\pmod7$</p><p>不过离散对数中得密码学也是个极其难解的问题，后面如果可以，会增加相关推文。</p><h2 id="4-二项式定理模-p-扩充"><a href="#4-二项式定理模-p-扩充" class="headerlink" title="4.二项式定理模$p$扩充"></a>4.二项式定理模$p$扩充</h2><p>两个结论：<br>1.$\mathrm{C}_p^k \equiv 0 \pmod p,k \not &#x3D; 0,p$<br>2.若$p$为素数，有$(A+B)^p\equiv A^p+B^p \pmod p$</p><h2 id="5-Fibonacci数列"><a href="#5-Fibonacci数列" class="headerlink" title="5.Fibonacci数列"></a>5.Fibonacci数列</h2><p>一般的Fibonacci数列：$1,1,2,3,5,8,……$，有$F_1&#x3D;F_2&#x3D;1,F_{n}&#x3D;F_{n-1}+F_{n-2}$</p><p><strong>1.类Fibonacci数列的求通项公式的方法</strong></p><p>可以使用矩阵运算：</p><p><img src="/2021/01/11/NumberTheory4/2.png" alt="2"></p><p>并且这个方法还可以推广到矩阵快速幂的计算上去。</p><p>我们可以扩展以下：假如有一个数列$G_n&#x3D;aG_{n-1}+bG_{n-2}$，并给出初值$G_1,G_2$，我们可以构造下面的矩阵。</p><p><img src="/2021/01/11/NumberTheory4/3.png" alt="3"></p><p>如果想求通项公式，只需要求出最左边矩阵的$2$个特征值$E_1,E_2$，那么通项公式就是$G_n&#x3D;C_1E_1^n+C_2E_2^n$，带入初值即可求得待定系数。</p><p>我们可以继续扩展到三阶矩阵：$H_n&#x3D;aH_{n-1}+bH_{n-2}+cH_{n-3}$</p><p><img src="/2021/01/11/NumberTheory4/4.png" alt="4"></p><p>然后同样是求特征值之后用待定系数法利用初值列方程求解。</p><p><strong>Fibonacci数列的模$p$周期</strong></p><p>对于任意素数，有$T(p^k)&#x3D;p^{k-1}T(p)$。</p><p>$T(2)&#x3D;3,T(5)&#x3D;20$是两个特殊值</p><p>如果$p\equiv 1 \text8{ or }4 \pmod 5$，那么$T(p)&#x3D;p$。如果$p\equiv2 \text{ or } 3 \pmod 5$，那么$T(p)&#x3D;2p+2$</p><p>当$a$是合数，$p$是不同的素数时，$a&#x3D;p_1^{e_1}p_2^{e_2}…p_n^{e_n}$时，$T(a)&#x3D;T(p_1)T(p_2)…T(p_n)$。</p><p>例如：$72&#x3D;2^3×3^2$，那么有$T(72)&#x3D;T(2)T(3)&#x3D;3×8&#x3D;24$</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumberTheory3</title>
    <link href="/2021/01/10/NumberTheory3/"/>
    <url>/2021/01/10/NumberTheory3/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-学习数论的笔记3"><a href="#huangx607087-学习数论的笔记3" class="headerlink" title="huangx607087 学习数论的笔记3"></a>huangx607087 学习数论的笔记3</h1><h2 id="1-素性测试-卡米歇尔数"><a href="#1-素性测试-卡米歇尔数" class="headerlink" title="1.素性测试&amp;卡米歇尔数"></a>1.素性测试&amp;卡米歇尔数</h2><p>由费马小定理可知： $\text{isPrime}(p)&#x3D;1 \Rightarrow a^{p-1}\equiv 1 \pmod p$</p><p>然而：$a^{p-1}\equiv 1 \pmod p \not\Rightarrow \text{isPrime}(p)&#x3D;1$</p><p>卡米歇尔数就是符合$a^{p-1}\equiv 1 \pmod p $并且$ \text{isPrime}(p)&#x3D;0$的一类数字，最小的数是$561$，$10000$以内的卡米歇尔数一共有$7$个，分别是$561,1105,1729,2465,2821,6601,8911$</p><p><strong>卡米歇尔数的性质</strong> 设$C$为卡米歇尔数，$p$是$C$的质因数，则$p^2$不整除$C$，并且$p-1$可以整除$C-1$</p><p><strong>根据以上的结论，我们不可以用费马小定理判断一个数是否为素数(虽然准确率很高，但还是有错误率的)，于是我们可以得到下面的素数性质</strong></p><table><thead><tr><th>素数的的性质 2</th></tr></thead><tbody><tr><td>如果$p$是素数，那么$p$满足以下$2$个条件之一（设$p-1&#x3D;2^kq$，其中$q$为奇数）<br>1.$a^q\equiv 1 \pmod p$<br>2.$a^q,a^{2q},a^{4q},…,a^{2^{k-1}q}$中至少有一个模$p$结果为$-1\pmod p$</td></tr></tbody></table><p>所以，我们就有了以下判断素数的代码，一次误判率低于$0.25$，基本上$30$次的判断准确率就超过了费马小定理了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">izprime</span>(<span class="hljs-params">p</span>):<br>    q=p-<span class="hljs-number">1</span><br>    B=p.bit_length()<br>    K=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span>(q&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>):<br>        q&gt;&gt;=<span class="hljs-number">1</span><br>        K=K+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(q,K)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        a=bytes_to_long(urandom(B%<span class="hljs-number">700</span>))%p<br>        <span class="hljs-keyword">if</span>( <span class="hljs-built_in">pow</span>(a,q,p)==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">pow</span>(a,q,p)==p-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        E=q<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K):<br>            E=(E*<span class="hljs-number">2</span>)%p<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(a,E,p)==p-<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(izprime(<span class="hljs-number">7878787629</span>))<br></code></pre></td></tr></table></figure><h2 id="2-二次互反律和有限域开平方"><a href="#2-二次互反律和有限域开平方" class="headerlink" title="2.二次互反律和有限域开平方"></a>2.二次互反律和有限域开平方</h2><h3 id="PART-1：二次互反律"><a href="#PART-1：二次互反律" class="headerlink" title="PART 1：二次互反律"></a>PART 1：二次互反律</h3><p>二次互反律在 0xGame Div 4 里面有很详细的讲解，这里直接放一下结论。</p><p><img src="/2021/01/10/NumberTheory3/1.png" alt="1"></p><p>程序代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        x=x//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        _tmp=p<br>        p=x<br>        x=_tmp<br>        <span class="hljs-keyword">if</span> x%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br></code></pre></td></tr></table></figure><h3 id="PART-2：有限域开平方公式-UPD-2021-2-10-2021-8-5"><a href="#PART-2：有限域开平方公式-UPD-2021-2-10-2021-8-5" class="headerlink" title="PART 2：有限域开平方公式[UPD 2021 .2.10,2021.8.5]"></a>PART 2：有限域开平方公式[UPD 2021 .2.10,2021.8.5]</h3><p>解方程$x^2\equiv a \pmod p$，其中$p$是素数，那么开平方有如下公式：</p><p>当$p\equiv 3 \pmod 4$时，$x^2\equiv a \pmod p$的一个解为<br>$$<br>x&#x3D;a^{(p+1)&#x2F;4}<br>$$<br>当$p\equiv 5 \pmod 8$时，$x^2\equiv a \pmod p$的一个解为<br>$$<br>x&#x3D;2^{(p-1)&#x2F;4}a^{(p+3)&#x2F;8}<br>$$<br>这一种情况，也有版本说是$a^{(p+3)&#x2F;8}$和$2a(4a)^{(p-5)&#x2F;8}$两个数中的一个。</p><p>最困难的就是$p\equiv 1 \pmod 8$的情况了，这个方法没有公式可用。</p><p>以下就是完整的有限域开平方的代码了（实际上<code>solve_M8R1</code>这个函数适用于任何素数，但由于其他两类素数已经有公式可用，故这里只用于$p\equiv 1 \pmod8$的情况里）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span></span>):<br>        <span class="hljs-variable language_">self</span>.real=x<br>        <span class="hljs-variable language_">self</span>.imag=y<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>        x&gt;&gt;=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        x,p=p,x<br>        <span class="hljs-keyword">if</span> x&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Rand</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">return</span> bytes_to_long(urandom(<span class="hljs-number">80</span>))%p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cmul</span>(<span class="hljs-params">a,b,nr,p</span>):<br>    Real=a.real*b.real+a.imag*b.imag*nr<br>    Imag=a.real*b.imag+b.real*a.imag<br>    Res=Complex(Real%p,Imag%p)<br>    <span class="hljs-keyword">return</span> Res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cpow</span>(<span class="hljs-params">a,e,nr,p</span>):<br>    Res=Complex(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> e:<br>        <span class="hljs-keyword">if</span> e&amp;<span class="hljs-number">1</span>:<br>            Res=Cmul(a,Res,nr,p)<br>        a=Cmul(a,a,nr,p)<br>        e&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> Res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_M8R1</span>(<span class="hljs-params">n,p</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        a=Rand(p)<br>        nr=(a*a-n)%p<br>        <span class="hljs-keyword">if</span> isqr(nr,p)==-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    Res=Complex(a,<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> Cpow(Res,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,nr,p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">n,p</span>):<br>    <span class="hljs-keyword">assert</span> isPrime(p)<br>    A=<span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> isqr(n,p)==-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Solution!&quot;</span><br>    <span class="hljs-keyword">if</span> p&amp;<span class="hljs-number">3</span>==<span class="hljs-number">3</span>:<br>        A=<span class="hljs-built_in">pow</span>(n,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>    <span class="hljs-keyword">elif</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">5</span>:<br>        A=<span class="hljs-built_in">pow</span>(n,(p+<span class="hljs-number">3</span>)//<span class="hljs-number">8</span>,p)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(A,<span class="hljs-number">2</span>,p)!=n:<br>            A=<span class="hljs-number">2</span>*n*<span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>*n,(p-<span class="hljs-number">5</span>)//<span class="hljs-number">8</span>,p)%p<br>    <span class="hljs-keyword">elif</span> p&amp;<span class="hljs-number">7</span>==<span class="hljs-number">1</span>:<br>        A=solve_M8R1(n,p).real<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(A,p-A)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getQR</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        qr=Rand(p)<br>        <span class="hljs-keyword">if</span> isqr(qr,p)==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> qr<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getNR</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        nr=Rand(p)<br>        <span class="hljs-keyword">if</span> isqr(nr,p)==-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> nr<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getmod8prime</span>(<span class="hljs-params">Rem,nbits=<span class="hljs-number">100</span></span>):<br>    <span class="hljs-keyword">assert</span> Rem <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        p=getPrime(nbits)<br>        <span class="hljs-keyword">if</span>(p%<span class="hljs-number">8</span>==Rem):<br>            <span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>]:<br>        p=getmod8prime(i)<br>        qr=getQR(p)<br>        <span class="hljs-built_in">print</span>(i,qr,p)<br>        <span class="hljs-built_in">print</span>(solve(qr,p))<br>example()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1 564173686680696855894901625202 778582575909658190525427416257</span><br><span class="hljs-string">140078267336201622222046402618</span><br><span class="hljs-string">3 20669060859351317353915889852 727816416573858078097661465723</span><br><span class="hljs-string">130587125639883746397277540316</span><br><span class="hljs-string">5 791308279743632016519220848802 1167144785223888272103478393117</span><br><span class="hljs-string">544427040026345522165219328929</span><br><span class="hljs-string">7 40133816673762059960442044861 635211803801872717209601629487</span><br><span class="hljs-string">129389297469578896835881311090</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-p-a-2-b-2"><a href="#3-p-a-2-b-2" class="headerlink" title="3.$p&#x3D;a^2+b^2?$"></a>3.$p&#x3D;a^2+b^2?$</h2><p><strong>结论1：</strong>如果某素数$p$可以表示成两个正整数的平方和， 那么$p\equiv 1 \pmod 4$，反过来也同样成立。</p><p>下面用递降法求$a,b$：<br>首先，写$A^2+B^2&#x3D;Mp,M&lt;p$<br>然后，选取$u,v$，使得$u\equiv A \pmod p,v\equiv B \pmod p,u,v,\in [\dfrac{-M}{2},\dfrac{M}{2}]$<br>我们可以得到$u^2+v^2&#x3D;A^2+B^2\equiv 0 \pmod M$。从而设$u^2+v^2&#x3D;Mr,A^2+B^2&#x3D;Mp$<br>将上面两个式子相乘，得$(u^2+v^2)(A^2+B^2)&#x3D;M^2rp$<br>这个式子经过恒等变形，可以化为$(uA+vB)^2+(vA-uB)^2&#x3D;M^2rp$<br>两端同时除以$M^2$，就有$\dfrac{(uA+vB)^2+(vA-uB)^2}{M^2}&#x3D;rp$<br>可以证明，$r≤\dfrac{M}{2}$，然后继续递降即可。</p><p><strong>关于选取$A,B$时需要的注意点：</strong> 我们可以取$x^2\equiv -1 \pmod p$，那么有$A&#x3D;x,B&#x3D;1,M&#x3D;\dfrac{A^2+B^2}{p}$<br>解方程$x^2\equiv -1 \pmod p$时，我们可以随机选取一个数$t$，然后计算$b\equiv t^{\frac{(p-1)}{4}}\pmod p$。又因为$b^2\equiv(\frac{t}{p})\pmod p$。所以$t$总是有$\dfrac{1}{2}$的成功概率。</p><p>下面上一下代码，时间复杂度是$O(\ln p)$级别的，$2048$位的质数用时为$2$秒，运行起来还是很快的。</p><p><strong>Update 2021.8.8 将<code>M==1</code>的判断中 <code>return(A,B)</code>中的<code>A,B</code>加上了绝对值，因为我们只讨论正数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getA</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">assert</span>(p%<span class="hljs-number">4</span>==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        t=bytes_to_long(urandom(<span class="hljs-number">195</span>))%p<br>        s=<span class="hljs-built_in">pow</span>(t,(p-<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">pow</span>(s,<span class="hljs-number">2</span>,p)==p-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAns</span>(<span class="hljs-params">A,B,M,p</span>):<br>    <span class="hljs-keyword">if</span>(M==<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">abs</span>(A),<span class="hljs-built_in">abs</span>(B))<br>    u,v=A%M,B%M<br>    <span class="hljs-keyword">if</span>(u&gt;M//<span class="hljs-number">2</span>):<br>        u-=M<br>    <span class="hljs-keyword">if</span>(v&gt;M//<span class="hljs-number">2</span>):<br>        v-=M<br>    <span class="hljs-keyword">assert</span>((u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>)%M==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)%M==<span class="hljs-number">0</span> )<br>    r=(u**<span class="hljs-number">2</span>+v**<span class="hljs-number">2</span>)//M<br>    A2=(u*A+v*B)//M<br>    B2=(-u*B+v*A)//M<br>    <span class="hljs-keyword">return</span> getAns(A2,B2,r,p)<br><span class="hljs-comment">#------MAIN BELOW------#</span><br>p=getPrime(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">while</span>(p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>):<br>    p=getPrime(<span class="hljs-number">256</span>)<br>A=getA(p)<br>B=<span class="hljs-number">1</span><br><span class="hljs-keyword">assert</span>(A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)%p==<span class="hljs-number">0</span><br>M=(A**<span class="hljs-number">2</span>+B**<span class="hljs-number">2</span>)//p<br>Ans,Bns=getAns(A,B,M,p)<br>Ans,Bns=Ans%p,Bns%p<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,<span class="hljs-built_in">hex</span>(p)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Ans=&#x27;</span>,<span class="hljs-built_in">hex</span>(Ans)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bns=&#x27;</span>,<span class="hljs-built_in">hex</span>(Bns)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The answer is:&#x27;</span>,(Ans*Ans+Bns*Bns)%p==<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p= d01bb38ba2700cdbd299f1182d0219cc43a9fd03bcdb9c53b69ea2a38dd3cec1</span><br><span class="hljs-string">Ans= e0940478adf7d82d6c27327dbfce631f</span><br><span class="hljs-string">Bns= 354b787c45b1c0cf60b30879b3caab70</span><br><span class="hljs-string">The answer is: True</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA Notes 2</title>
    <link href="/2020/11/28/RSA-Notes2/"/>
    <url>/2020/11/28/RSA-Notes2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习RSA的笔记-2"><a href="#huangx607087学习RSA的笔记-2" class="headerlink" title="huangx607087学习RSA的笔记(2)"></a>huangx607087学习RSA的笔记(2)</h1><h2 id="O-情况说明"><a href="#O-情况说明" class="headerlink" title="O-情况说明"></a>O-情况说明</h2><p><strong>约定：此博客中如果出现除法，未特殊说明的，均为向下取整的整除！</strong></p><h2 id="I-RSA的乘法的同态性"><a href="#I-RSA的乘法的同态性" class="headerlink" title="I-RSA的乘法的同态性"></a>I-RSA的乘法的同态性</h2><h3 id="0x01-简介和-得到-m-的二进制位数"><a href="#0x01-简介和-得到-m-的二进制位数" class="headerlink" title="0x01 简介和 得到$m$的二进制位数"></a>0x01 简介和 得到$m$的二进制位数</h3><p>​CTF中有些题目会在给出$e,n,c$的情况下，允许你和服务器交互，发送你自己的密文$c’$，然后告诉你有关$c’$解密后的明文的一些高位比特信息。在这种时候，我们就需要用到RSA乘法具有同态性的这一特殊性质，那么什么是RSA的同态性呢？</p><p>​我们已经知道，RSA加密函数$c&#x3D;E(m) \equiv m^e \mod n$。其中$(e,n,c)$作为公钥，都是已知的。不过我们可以推导一下这样的公式：$E(2m)\equiv 2^em^e\equiv 2^e c\mod n$。所以如果在获得对个人密文的解密权的时候，我们就可以通过向服务器发送$2^e c$，这一就可以获得$2m$的值。同理，我们可以发送$2^{ke}c$，得到的解密结果就是$2^{k}m$。所以运行以下代码，我们得到的结果是$(12,24,48,96)$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m=<span class="hljs-number">12</span><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>n=p*q<br>e=<span class="hljs-number">65537</span><br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br>c2,c3,c4=c*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,e,n)%n,c*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>*e,n)%n,c*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>*e,n)%n<br><span class="hljs-built_in">print</span>(c2)<br>m1,m2,m3,m4=<span class="hljs-built_in">pow</span>(c,d,n),<span class="hljs-built_in">pow</span>(c2,d,n),<span class="hljs-built_in">pow</span>(c3,d,n),<span class="hljs-built_in">pow</span>(c4,d,n)<br><span class="hljs-built_in">print</span>(m1,m2,m3,m4)<br></code></pre></td></tr></table></figure><p>​这种方法我们可以确定明文的长度：假如$n$是$2048$位，每次给你最高$8$位，那么被隐藏了$2040$位。假如我们一共移动了$740$位发现高位不再为$0$，那么我们可以确定明文长度为$2040-740&#x3D;1300$位二进制数。</p><h3 id="0x02-RSA确定-m-位数后确定明文-m-的值"><a href="#0x02-RSA确定-m-位数后确定明文-m-的值" class="headerlink" title="0x02 RSA确定$m$位数后确定明文$m$的值"></a>0x02 RSA确定$m$位数后确定明文$m$的值</h3><p>​假如我们以上面那个为例子，我们确定了明文是$1300$位二进制数，那么我们现在就可以二分了：我们可以设置$L&#x3D;2^{739},R&#x3D;2^{740}$进行二分操作。</p><p>​注意在RSA中，有一个很神奇的式子：<br>$$<br>(pm)^e \equiv cp^e \mod n<br>$$</p><p>​然后我们可以得到这样的方程：$I&#x3D;\dfrac {2^{2040}}{m}∈[2^{739},2^{740}]$，也就是$I \in [2×2^{738},4×2^{738}]$。对服务器发送区间<strong>中值$M&#x3D;3×2^{738}$的加密结果乘上$c$的值</strong>，如果服务器告诉你最高的$8$位二进制数值不为$0$，则说明我们发送的数字偏大，随后我们就可以换区间右边界$R$为这一次的中值$M$,区间变成$[4×2^{737},6×2^{737}]$。若最后告诉你结果为$0$，那么说明我们发送的值偏小，然后我们可以把左边界换成$M$，然后把区间换成$[6×2^{737},8×2^{737}]$。后面以此类推。</p><p>​然而，我发现：自己的取值出了一个严重的问题，下面是一次二分过后的运行结果：</p><img src="/2020/11/28/RSA-Notes2/1-01.png" alt="2" style="zoom:77%;"><p>​分析了一下，原因很简单：因为这个时候除数是$2^{739}$到$2^{740}$左右的数量级，被除数是$2^{2040}$数量级，相差过大，于是我重新造数据：把flag的数量级降低到$2^{400}$,二分的$L,R$数量级提升到$2^{1640}$</p><p>​这一次的的运行结果，很准确：</p><img src="/2020/11/28/RSA-Notes2/1-02.png" alt="2" style="zoom:77%;"><p>​做了几次实验，发现flag规模在$2^{1000}$以下的时候无误差，$2^{1050}$规模的flag有不超过$10$的误差，$2^{1100}$规模的flag有几百的误差，$2^{1200}$的flag有几十万的误差，$2^{1300}$的flag的误差比特已经接近总比特数的一半。目测如果flag在$\sqrt{n}$内的话，就不会出现误差值。</p><p>最后贴一下测试代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetNumberBitz</span>(<span class="hljs-params">x</span>):<br>    s=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        tmp=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>        s=s*<span class="hljs-number">256</span>+tmp<br>        <span class="hljs-keyword">if</span>(s&gt;(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">5000</span>)):<br>           <span class="hljs-keyword">break</span><br>    s=s%(<span class="hljs-number">1</span>&lt;&lt;(x+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">while</span>(s.bit_length()!=x):<br>        s=GetNumberBitz(x)<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GenerateKey</span>(<span class="hljs-params">B</span>):<br>    e,p,q=getPrime(random.randrange(<span class="hljs-number">16</span>,<span class="hljs-number">20</span>)),getPrime(B//<span class="hljs-number">2</span>),getPrime(B//<span class="hljs-number">2</span>)<br>    n,phi=p*q,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    d=inverse(e,phi)<br>    <span class="hljs-keyword">return</span> e,n,d<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">judg</span>(<span class="hljs-params">CC,D,N</span>):<br>    x=<span class="hljs-built_in">pow</span>(CC,D,N)<br>    st=long_to_bytes(x,<span class="hljs-number">2048</span>//<span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">if</span>(st.startswith(<span class="hljs-string">b&quot;\x00&quot;</span>)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Attack</span>(<span class="hljs-params">E,N,C,D,B,T</span>):<br>    L,R=<span class="hljs-number">2</span>**(B),<span class="hljs-number">2</span>**(B+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">while</span> R-L&gt;<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span>(R-L).bit_length()%<span class="hljs-number">50</span>==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(L),<span class="hljs-built_in">hex</span>(R))<br>        M=(L+R)//<span class="hljs-number">2</span><br>        CC=(<span class="hljs-built_in">pow</span>(M,E,N)*C)%N<br>        check=judg(CC,D,N)<br>        <span class="hljs-keyword">if</span>(check==<span class="hljs-number">1</span>):<br>            L=M<br>        <span class="hljs-keyword">else</span>:<br>            R=M<br>    <span class="hljs-keyword">return</span> L<br><span class="hljs-comment">#----main below----#</span><br>flag=GetNumberBitz(<span class="hljs-number">400</span>)<br><span class="hljs-keyword">assert</span> flag.bit_length()==<span class="hljs-number">400</span><br>e,n,d=GenerateKey(<span class="hljs-number">2048</span>)<br><span class="hljs-keyword">while</span> n.bit_length()!=<span class="hljs-number">2048</span>:<br>      e,n,d=GenerateKey(<span class="hljs-number">2048</span>)<br>c=<span class="hljs-built_in">pow</span>(flag,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=&#x27;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2**2040//flag=&#x27;</span>,<span class="hljs-built_in">hex</span>(<span class="hljs-number">2</span>**<span class="hljs-number">2040</span>//flag))<br>F=Attack(e,n,c,d,<span class="hljs-number">2040</span>-<span class="hljs-number">400</span>,<span class="hljs-number">2040</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">2</span>**<span class="hljs-number">2040</span>//F))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-number">2</span>**<span class="hljs-number">2040</span>//(F+<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag))<br></code></pre></td></tr></table></figure><h3 id="0x03-最后一个比特位泄露破解的原理-摘自CTFWIKI，本废物还不懂"><a href="#0x03-最后一个比特位泄露破解的原理-摘自CTFWIKI，本废物还不懂" class="headerlink" title="0x03 最后一个比特位泄露破解的原理(摘自CTFWIKI，本废物还不懂)"></a>0x03 最后一个比特位泄露破解的原理(摘自CTFWIKI，<del>本废物还不懂</del>)</h3><p>​假设目前存在一个 Oracle，它会对一个给定的密文进行解密，并且会给出明文的最后一个字节。那么给定一个加密后的密文，我们只需要 $\log_{256}n$ 次就可以知道这个密文对应的明文消息。</p><p>这个其实算作 RSA parity Oracle 的扩展，既然可以泄露出最后一个字节，那么按道理我们获取密文对应明文的次数应该可以减少。</p><p>假设$C&#x3D;P^e \bmod N$</p><p>第一次时，我们可以给服务器发送$C*256^e&#x3D;(256P)^e \bmod N$</p><p>服务器会计算得到$256P \bmod N$</p><p>这里</p><ul><li>$256P$ 是偶数。</li><li>$N$ 是奇数，因为它是由两个大素数相乘得到。</li></ul><p>由于 $P$ 一般是小于$ N$ 的，那么$256P \bmod N&#x3D;256P-kn, k&lt;256$。而且对于两个不同的 $k_1,k_2$，我们有</p><p>$256P-k_1n \not\equiv 256P-k_2n \bmod 256$</p><p>我们可以利用反证法来证明上述不等式。同时 $256P-kn$ 的最后一个字节其实就是 $-kn$ 在模 $256$ 的情况下获取的。那么，其实我们可以首先枚举出 $0$~$255 $情况下的最后一个字节，构造一个 k 和最后一个字节的映射表 map</p><p>当服务器返回最后一个字节 b，那么我们可以根据上述构造的映射表得知 $k$，即减去了 $k$ 个$N$， 即 $kN \leq 256 P \leq (k+1)N$。</p><p>此后，我们使用数学归纳法来获取 P 的范围，即假设在第 i 次时，$\dfrac{xN}{256^{i}} \leq P &lt; \dfrac{xN+N}{256^{i}}$</p><p>进一步，在第 i+1 次时，我们可以发送</p><p>$C*256^{(i+1)e}$</p><p>服务器会计算得到</p><p>$256^{i+1}P \bmod N&#x3D;256^{i+1}P-kN$</p><p>$0 \leq 256^{i+1}P-kN&lt;N$</p><p>$\dfrac{kN}{256^{i+1}} \leq P &lt; \dfrac{kN+N}{256^{i+1}}$</p><p>根据第 $i$ 次的结果</p><p>$\dfrac{256xN}{256^{i+1}} \leq P &lt; \dfrac{256xN+256N}{256^{i+1}}$</p><p>我们这里可以假设 k&#x3D;256y+t， 而这里的 t 就是我们可以通过映射表获取的。</p><p>$\dfrac{256yN+tN}{256^{i+1}} \leq P &lt; \dfrac{256yN+(t+1)N}{256^{i+1}}$</p><p>与此同时，由于 P 必然存在，所以第 i+1 得到的这个范围和第 i 次得到的范围必然存在交集。</p><p>所以 y 必然与 x 相等。</p><p>进一步我们可以这么归纳，初始情况下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">lb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">ub</span> <span class="hljs-operator">=</span> N<br></code></pre></td></tr></table></figure><p>假设服务器返回了 b，那么</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">k</span> = mab[b]<br><span class="hljs-attr">interval</span> = (ub-lb)//<span class="hljs-number">256</span><br><span class="hljs-attr">lb</span> = lb + interval * k<br><span class="hljs-attr">ub</span> = lb + interval<br></code></pre></td></tr></table></figure><h2 id="II-关于一些特殊性质的-n-的因数分解"><a href="#II-关于一些特殊性质的-n-的因数分解" class="headerlink" title="II-关于一些特殊性质的$n$的因数分解"></a>II-关于一些特殊性质的$n$的因数分解</h2><h3 id="0x01-n-的值小于-512-位二进制数"><a href="#0x01-n-的值小于-512-位二进制数" class="headerlink" title="0x01 $n$的值小于$512$位二进制数"></a>0x01 $n$的值小于$512$位二进制数</h3><p>​可以用yafu或者sagemath直接分解，一般$30$分钟内就可以分解成功</p><h3 id="0x02-p-q-是两个相邻的素数"><a href="#0x02-p-q-是两个相邻的素数" class="headerlink" title="0x02 $p,q$ 是两个相邻的素数"></a>0x02 $p,q$ 是两个相邻的素数</h3><p>​这种方法是非常简单的，我们只需要用gmpy2中的iroot函数直接取整开根。然后设$q$是$\sqrt n$的下一个素数，然后我们就可以得到$p$的值了，进而成功分解$n$</p><h3 id="0x03-p-q-过大或者过小的分解"><a href="#0x03-p-q-过大或者过小的分解" class="headerlink" title="0x03 $|p-q|$过大或者过小的分解"></a>0x03 $|p-q|$过大或者过小的分解</h3><p>​$|p-q|$过大的时候，可以直接通过枚举法确定其中一个因数</p><p>​$|p-q|$过小的时候：由基本的平方差公式，有:<br>$$<br>\dfrac{(p+q)^2}{4}-n&#x3D;\dfrac{(p+q)^2}{4}-pq&#x3D;\dfrac{(p-q)^2}{4}<br>$$<br>​既然 $|p-q|$较小，那么 $\dfrac{(p-q)^2}{4}$ 自然也比较小，进而 $\dfrac{(p+q)^2}{4}$ 只是比 N 稍微大一点，所以 $\dfrac{p+q}{2}$ 与 $\sqrt{n}$ 相近。</p><p>​此时我们可以检查$\sqrt n$的每一个整数$x$，知道找到一个$x$使得$x^2-n$是平方数，记作$y^2$。然后根据平方差公式可以分解$n$</p><h3 id="0x04-p-1-光滑-摘自yulige的博客–NCTF2019题解"><a href="#0x04-p-1-光滑-摘自yulige的博客–NCTF2019题解" class="headerlink" title="0x04 $p-1$光滑(摘自yulige的博客–NCTF2019题解)"></a>0x04 $p-1$光滑(摘自yulige的博客–NCTF2019题解)</h3><h4 id="0o401-什么是光滑数"><a href="#0o401-什么是光滑数" class="headerlink" title="0o401 什么是光滑数"></a>0o401 什么是光滑数</h4><p>​首先引入光滑数的定义：若一个数的所有素因子都不超过$B$，那么称这个数为$B$光滑数，例如：由于$72&#x3D;3^2×2^3$，所有的素因子都不超过$3$，所以$72$是$3$光滑数，当然也是$5,7,11,…$光滑数。</p><h4 id="0o402-Pollards-p-1-算法"><a href="#0o402-Pollards-p-1-算法" class="headerlink" title="0o402 Pollards $p-1$ 算法"></a>0o402 Pollards $p-1$ 算法</h4><p>​这个时候我们可以使用Pollard’s $p − 1$ 算法来分解 $n$，具体原理如下：</p><p>​由费马小定理$a^{p-1} – 1 \equiv 0  \mod \ p$可知，$a^{p-1} – 1$ 是 $p$ 的倍数，也就可以认为是$a^{t(p-1)} – 1 &#x3D;k p$，其中$t,p\in N_+$。因此，简单地观察就可以知道，如果指数$\text{exp}$是 $p-1$ 的倍数，那么$a^\text{exp} – 1 $就会是 $p$ 的倍数。所以，我们只需要找到一个$\text{exp}$使得$a^\text{exp}$是$p$的倍数的时候，那么我们计算$\gcd(a^{\text{exp}},n)$，就可以得到结果，而这个结果就是$p$，所以，这里的关键就是寻找这个合适的$\text{exp}$值。</p><p>​<code>Pollard</code>的厉害之处就在于此，他发现，如果<code>p-1</code>正好是一些很小的质数的乘积，那么<code>p-1</code>就能整除$n!$，其中$n$是一个不太大的数。假设<code>p-1</code>是<code>p1, p2, ..., pk</code>这些质数的乘积，其中最大的质数是<code>pk</code>。那么，很显然<code>pk!=1·2·...·pk</code>肯定包括了<code>p1, p2, ..., pk</code>这些质数的乘积，<code>pk!</code>肯定是<code>p-1</code>的倍数。</p><p>​也就是说，$n &gt; pk$ 的时候，$n!$很大概率上就能被<code>p-1</code>整除。（考虑到<code>p1, p2, ..., pk</code>中可能有重复的情况）</p><p>​这导致了<code>Pollard&#39; p-1 method</code>：</p><p>​对于每一个$n &#x3D; 2, 3, 4, …$，我们任意选择一个底数$a$（事实上，我们可以简单地选择为$2$），并计算<br>$$<br>gcd(a^{n!-1}, N)<br>$$<br>​如果结果落在1和$n$中间，那么我们就成功了。</p><p>​当然，这里的所有操作都可以在模$N$的操作下进行，也就是计算$a^{n!-1}\ \text{mod}\ N$。并且，我们也不必计算每一个数字，选择一个恰当的间隔（比如$15$）计算可以减少耗时</p><h4 id="0o477-代码实现"><a href="#0o477-代码实现" class="headerlink" title="0o477 代码实现"></a>0o477 代码实现</h4><p>​我们可以上一下代码：这里的的$N$是$104729$光滑的（因为$104729$刚好是第$10000$个素数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pollard_p_1</span>(<span class="hljs-params">N</span>):<br>    a = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = a<br>        <span class="hljs-comment"># precompute</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">80000</span>):<br>            f = <span class="hljs-built_in">pow</span>(f, i, N)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80000</span>, <span class="hljs-number">104729</span>+<span class="hljs-number">1</span>):<br>            f = <span class="hljs-built_in">pow</span>(f, i, N)<br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>:<br>                d = GCD(f-<span class="hljs-number">1</span>, N)<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &lt; d &lt; N:<br>                    <span class="hljs-keyword">return</span> d<br>        <span class="hljs-built_in">print</span>(a)<br>        a += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="0x05-p-1-光滑-即-p-1-db-2-d"><a href="#0x05-p-1-光滑-即-p-1-db-2-d" class="headerlink" title="0x05 $p+1$光滑(即$p+1&#x3D;db^2|_{d&lt;256,\text{isPrime}(d)&#x3D;\text{True}}$)"></a>0x05 $p+1$光滑(即$p+1&#x3D;db^2|_{d&lt;256,\text{isPrime}(d)&#x3D;\text{True}}$)</h3><p>​这种情况下，我们可以使用William $p+1$算法</p><h4 id="0o501-理论基础"><a href="#0o501-理论基础" class="headerlink" title="0o501 理论基础"></a>0o501 理论基础</h4><p>​从标题中我们可以知道：如果$p+1&#x3D;db^2$的话，我们可以考虑分解$n$的值。而这实际上基于这样一个理论基础：如果$n&#x3D;pm$，并且$p$是素数，并且如果$4p$可以写成集合{$ 3b^2+1,11b^2+1,19b^2+1,43b^2+1,67b^2+1,163b^2+1$} ，其中${b\in N_+}$ 中的任意一个形式，那么我们可以在$\ln n$的复杂度里找到$p$的真实值。</p><p>​算法的原理太复杂，这里就不多讲了，直接看代码吧（</p><h4 id="0o577-算法代码"><a href="#0o577-算法代码" class="headerlink" title="0o577 算法代码"></a>0o577 算法代码</h4><p>​最后贴一下代码，$\text{Sagemath 9.1 Notebook}$中的代码，摘自$\text{NCTF 2020 WP}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">qicheng</span>(<span class="hljs-params">n: <span class="hljs-built_in">int</span></span>):<br>    R = Integers(n)<br>    js = [<span class="hljs-number">0</span>, (-<span class="hljs-number">2</span> ^ <span class="hljs-number">5</span>) ^ <span class="hljs-number">3</span>, (-<span class="hljs-number">2</span> ^ <span class="hljs-number">5</span>*<span class="hljs-number">3</span>) ^ <span class="hljs-number">3</span>, (-<span class="hljs-number">2</span> ^ <span class="hljs-number">5</span>*<span class="hljs-number">3</span>*<span class="hljs-number">5</span>*<span class="hljs-number">11</span>) ^ <span class="hljs-number">3</span>, (-<span class="hljs-number">2</span> ^ <span class="hljs-number">6</span>*<span class="hljs-number">3</span>*<span class="hljs-number">5</span>*<span class="hljs-number">23</span>*<span class="hljs-number">29</span>) ^ <span class="hljs-number">3</span>]<br>    p, q = <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> js:<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>                a = R.random_element()<br>                E = EllipticCurve([<span class="hljs-number">0</span>, a])<br>            <span class="hljs-keyword">else</span>:<br>                a = R(j)/(R(<span class="hljs-number">1728</span>)-R(j))<br>                c = R.random_element()<br>                E = EllipticCurve([<span class="hljs-number">3</span>*a*c ^ <span class="hljs-number">2</span>, <span class="hljs-number">2</span>*a*c ^ <span class="hljs-number">3</span>])<br>            x = R.random_element()<br>            z = E.division_polynomial(n, x)<br>            g = gcd(z, n)<br>            <span class="hljs-keyword">if</span> g &gt; <span class="hljs-number">1</span>:<br>                p = Integer(g)<br>                q = Integer(n)//p<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> p:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (p, q)<br><span class="hljs-built_in">print</span>(qicheng(<span class="hljs-number">1444329727510154393553799612747635457542181563961160832013134005088873165794135221</span>))<br><span class="hljs-comment">#(74611921979343086722526424506387128972933, 19357894679486057806987068960980789709937)</span><br></code></pre></td></tr></table></figure><h3 id="0x06-Pollord-Rho算法-时间复杂度-O-sqrt-4-n"><a href="#0x06-Pollord-Rho算法-时间复杂度-O-sqrt-4-n" class="headerlink" title="0x06 Pollord Rho算法(时间复杂度$O(\sqrt[4]{n})$)"></a>0x06 Pollord Rho算法(时间复杂度$O(\sqrt[4]{n})$)</h3><h4 id="0o601-算法介绍"><a href="#0o601-算法介绍" class="headerlink" title="0o601 算法介绍"></a>0o601 算法介绍</h4><p>​这个算法的核心思想就是猜一个数，看看是否为$x$的因数。</p><p>​我们可以随机地选取两$v,t$个数，然后根据$v&#x3D;v_{i-1}^2+t \mod x$ ,这样就会构成一个环。然后在循环内部猜测。即可。</p><p>​代码实现原理也比较复杂<del>（实际上是因为懒，博客写到后面也很累的）</del>，自己百度吧。上一个是百度不到的。<del>23333</del></p><h4 id="0o677-代码实现（自己打的代码，Python常数较大，能过洛谷模板题93分）"><a href="#0o677-代码实现（自己打的代码，Python常数较大，能过洛谷模板题93分）" class="headerlink" title="0o677 代码实现（自己打的代码，Python常数较大，能过洛谷模板题93分）"></a>0o677 代码实现（自己打的代码，Python常数较大，能过洛谷模板题93分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>A=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">culc</span>(<span class="hljs-params">x,c,n</span>):<br>    <span class="hljs-keyword">return</span> (x*x+c)%n<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PollardRho</span>(<span class="hljs-params">x</span>):<br>    s,t,goal,val=<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>    c=getrandbits(<span class="hljs-number">15</span>)%(x-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> det <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,goal+<span class="hljs-number">1</span>):<br>            t=culc(t,c,x)<br>            val=val*<span class="hljs-built_in">abs</span>(t-s)%x<br>            <span class="hljs-keyword">if</span>(det%<span class="hljs-number">127</span>==<span class="hljs-number">0</span>):<br>                d=GCD(val,x)<br>                <span class="hljs-keyword">if</span>(d&gt;<span class="hljs-number">1</span>):<br>                    <span class="hljs-keyword">return</span> d<br>        d=GCD(val,x)<br>        <span class="hljs-keyword">if</span>(d&gt;<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> d<br>        goal*=<span class="hljs-number">2</span><br>        s=t<br>        val=<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">global</span> A<br>    <span class="hljs-keyword">if</span>(x&lt;=A <span class="hljs-keyword">or</span> x&lt;<span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span>(isPrime(x)):<br>        A=<span class="hljs-built_in">max</span>(A,x)<br>        <span class="hljs-keyword">return</span><br>    p=x<br>    <span class="hljs-keyword">while</span>(p&gt;=x):<br>        p=PollardRho(x)<br>    <span class="hljs-keyword">while</span>((x%p)==<span class="hljs-number">0</span>):<br>        x//=p<br>    factor(x)<br>    factor(p)<br>T=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> T&gt;<span class="hljs-number">0</span>:<br>    T-=<span class="hljs-number">1</span><br>    A=<span class="hljs-number">0</span><br>    a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    <span class="hljs-keyword">if</span>(isPrime(a)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Prime&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        factor(a)<br>        <span class="hljs-built_in">print</span>(A)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UNCTFwp</title>
    <link href="/2020/11/13/UNCTFwp/"/>
    <url>/2020/11/13/UNCTFwp/</url>
    
    <content type="html"><![CDATA[<h1 id="UNCTF-WP"><a href="#UNCTF-WP" class="headerlink" title="UNCTF WP"></a>UNCTF WP</h1><h2 id="1-RSA1"><a href="#1-RSA1" class="headerlink" title="1.RSA1"></a>1.RSA1</h2><p>首先先看一下题目代码：（最后给出部分略）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><br>p = number.getPrime(<span class="hljs-number">1024</span>)<br>q = number.getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">if</span> p &gt; q:<br>    a = p + q<br>    b = p - q<br>    <span class="hljs-built_in">print</span>(a,b)<br><br>n = p * q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>m = bytes_to_long(<span class="hljs-string">b&#x27;msg&#x27;</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br><br></code></pre></td></tr></table></figure><p>题目给出了$a,b$的值，还有加密后密文$c$的值，很容易地我们可以求出来$p&#x3D;(a+b)&#x2F;2,q&#x3D;(a-b)&#x2F;2$.然后直接用RSA的最基本的方法解决即可，很水的一道题。</p><h2 id="2-大法官之失去的营养怎么补"><a href="#2-大法官之失去的营养怎么补" class="headerlink" title="2.(大法官之失去的营养怎么补)"></a>2.(大法官之失去的营养怎么补)</h2><p>这道题一开始给出了一个长为$100$的字符串如下：<code>ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</code>。然后我们可以看到，这个字符串里面只有<code>o</code>和<code>t</code>两个字符，盲猜<code>o</code>是one，<code>t</code>是two。</p><p>然后观察到密文长度刚好是$100$，符合条件长度是$5$的倍数，可以考虑培根密码。把<code>o</code>替换成<code>A</code>，<code>t</code>替换成<code>B</code>。然后随便找个网站就可以解出题目了。</p><h2 id="3-EZRSA"><a href="#3-EZRSA" class="headerlink" title="3. EZRSA"></a>3. EZRSA</h2><p>又是一道RSA的题目，题目给出了$e,n,c$数值，我们可以看到$\ln e ≈ \ln n $。自然会想到winnerattack的方法。（之前Am473ur师傅出的那道题是直接爆破$d$，可能是因为$d$的值太小了导致我一重$for$循环直接枚举出来，没有对其进行深刻研究233333）。</p><p>不多说，直接上解题代码，也就是winnerattack的脚本。到时候我会更新一下自己的RSA笔记。</p><p><del>这个脚本是在网上找到的，不是自己打的&#x3D; &#x3D;所以可以证明我的fw属性成立</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fractions_expansion</span>(<span class="hljs-params">numerator,denominator</span>):<span class="hljs-comment">#(e,N)</span><br>result=[]<br> <br>divident = numerator % denominator<br>quotient = numerator // denominator<br>result.append(quotient)<br> <br><span class="hljs-keyword">while</span> divident != <span class="hljs-number">0</span>:<br>numerator = numerator - quotient * denominator<br> <br>tmp = denominator<br>denominator = numerator<br>numerator = tmp<br> <br>divident = numerator % denominator<br>quotient = numerator // denominator<br>result.append(quotient)<br> <br><span class="hljs-keyword">return</span> result<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convergents</span>(<span class="hljs-params">expansion</span>):<br>convergents=[(expansion[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(expansion)):<br>numerator = <span class="hljs-number">1</span><br>denominator = expansion[i]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>numerator += expansion[j] * denominator<br><span class="hljs-keyword">if</span> j==<span class="hljs-number">0</span>:<br><span class="hljs-keyword">break</span><br>tmp = denominator<br>denominator = numerator<br>numerator = tmp<br>convergents.append((numerator, denominator)) <span class="hljs-comment">#(k,d)</span><br><span class="hljs-keyword">return</span> convergents<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">newtonSqrt</span>(<span class="hljs-params">n</span>):<br>approx = n // <span class="hljs-number">2</span><br>better = (approx + n // approx) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> better != approx:<br>    approx = better<br>    better = (approx + n // approx) // <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> approx<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wiener_attack</span>(<span class="hljs-params">cons, e, N</span>):<br><span class="hljs-keyword">for</span> cs <span class="hljs-keyword">in</span> cons:<br>k,d = cs<br><span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>phi_N = (e * d - <span class="hljs-number">1</span>) // k<br><span class="hljs-comment">#x**2 - ((N - phi_N) + 1) * x + N = 0</span><br>a = <span class="hljs-number">1</span><br>b = -((N - phi_N) + <span class="hljs-number">1</span>)<br>c = N<br>delta = b * b - <span class="hljs-number">4</span> * a * c<br><span class="hljs-keyword">if</span> delta &lt;= <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>x1 = (newtonSqrt(delta) - b)//(<span class="hljs-number">2</span> * a)<br>x2 = -(newtonSqrt(delta) + b)//(<span class="hljs-number">2</span> * a)<br><span class="hljs-keyword">if</span> x1 * x2 == N:<br><span class="hljs-keyword">return</span> [x1, x2, k, d]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    n = <span class="hljs-number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span><br>    e = <span class="hljs-number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span><br>    <br>    c = <span class="hljs-number">140896698267670480175739817539898638657099087197096836734243016824204113452987617610944986742919793506024892638851339015015706164412994514598564989374037762836439262224649359411190187875207060663509777017529293145434535056275850555331099130633232844054767057175076598741233988533181035871238444008366306956934</span><br>   <br>    expansion = continued_fractions_expansion(e, n)<br>    cons = convergents(expansion)<br>    p, q, k, d = wiener_attack(cons, e, n)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(m))<br><br></code></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>一道没有任何技术含量的题目，只需要打开Word文档，把字体调成Wingdings 2。然后看着图片一个一个对照就可以了（最后转成正常的字体（比如宋体）</p><h2 id="5-SignIn"><a href="#5-SignIn" class="headerlink" title="5 SignIn"></a>5 SignIn</h2><p>先看一下题目代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>random.seed(urandom(<span class="hljs-number">32</span>))<br><br>key1 = <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span> + <span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(printable) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)])<br>key2 = <span class="hljs-string">&#x27;&#x27;</span>.join([random.choice(printable) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]) + <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span><br><br>cipher1 = AES.new(key=key1.encode(), mode=AES.MODE_ECB)<br>cipher2 = AES.new(key=key2.encode(), mode=AES.MODE_ECB)<br><br>pt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You have a chance to get something: &quot;</span>)<br>pt = pt.encode()<br><br>val = <span class="hljs-built_in">len</span>(pt) % <span class="hljs-number">16</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val == <span class="hljs-number">0</span>:<br>    pt += <span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span> - val)<br><br>c1 = cipher1.encrypt(pt)<br>c2 = cipher2.encrypt(c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your cipher:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hexlify(c2)))<br><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br>c3 = cipher1.encrypt(flag)<br>c4 = cipher2.encrypt(c3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your flag:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(hexlify(c4)))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">You have a chance to get something: UNCTF2020_Enjoy_Crypto~</span><br><span class="hljs-string">Your cipher:b&#x27;01a4e429e76db218fa0eb18f03ec69c9200a2362d8b4d7ea46170ce698389bbd&#x27;</span><br><span class="hljs-string">Your flag:b&#x27;196cc94c2d685beb54beeaa14c1dc0a6f3794d65fca0d1a1274515166e4255ab367383092e42d774992f74bc138faaad&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>题目给出了一次加密的结果。从代码中我们可以看到：$key1$的前$13$位密钥全是$0$，后$3$位是未知的。而$key2$的前$3$位是未知的,后面$13$位全是$0$。</p><p>第一次对给出的内容加密，我们可以看到第一次加密的结果是$c1$，第二次加密的结果是$c2$。并且$c2$是已知的。考虑到字符库是有限的(只有$100$个可用字符）。所以我们可以暴力枚举所有$100^3&#x3D;1000000$种$pt$的加密可能，然后暴力枚举$1000000$种对$p2$解密的可能性,换句话说，我们就通过两面夹击的方式，枚举到了两种不同途径$c1$的可能结果。然后我们就可以寻找到相同的部分，就能得到$c1$字符串了。</p><p>暴力枚举代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>pt=<span class="hljs-string">b&quot;UNCTF2020_Enjoy_Crypto~&quot;</span><br>val = <span class="hljs-built_in">len</span>(pt) % <span class="hljs-number">16</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val == <span class="hljs-number">0</span>:<br>    pt += <span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span> - val)<br><span class="hljs-built_in">print</span>(pt)<br>s=printable<br>GivenChiper=<span class="hljs-string">&#x27;01a4e429e76db218fa0eb18f03ec69c9200a2362d8b4d7ea46170ce698389bbd&#x27;</span><br>GivenChiper=long_to_bytes(<span class="hljs-built_in">int</span>(GivenChiper,<span class="hljs-number">16</span>))<br>Key1=<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span><br>boxi=[]<br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> s:<br>            Keyi=Key1+i1+i2+i3<br>            cipher1 = AES.new(key=Keyi.encode(), mode=AES.MODE_ECB)<br>            f=cipher1.encrypt(pt)<br>            boxi+=[f]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data1.out&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment">#for i in range(10):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)**<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">25000</span>==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span>(i)<br>        f.write(<span class="hljs-built_in">hex</span>(bytes_to_long(boxi[i]))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>Key2=<span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span><br>boxi=[]<br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> s:<br>            Keyii=i1+i2+i3+Key2<br>            cipher2 = AES.new(key=Keyii.encode(), mode=AES.MODE_ECB)<br>            f=cipher2.decrypt(GivenChiper)<br>            boxi+=[f]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data2.out&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)**<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">25000</span>==<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">print</span>(i)<br>        f.write(<span class="hljs-built_in">hex</span>(bytes_to_long(boxi[i]))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>然后我们就出来了data1和data2两个文件，然后我们用以下的C++脚本，可以找到唯一的共同输出（这样我们可以用$O(2n)$的复杂度，而不是魔鬼般的$O(n^2)$）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;string,<span class="hljs-type">bool</span>&gt;p;<br>string s;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data2.out&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1000000</span>;i++)<br>&#123;<br>cin&gt;&gt;s;<br>p[s]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data1.out&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1000000</span>;i++)<br>&#123;<br>cin&gt;&gt;s;<br><span class="hljs-keyword">if</span>(p[s]==<span class="hljs-number">1</span>)<br>cout&lt;&lt;s&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们再一次暴力枚举，找出共同点时的密钥$k1$和$k2$被省略的$3$位数。</p><p>找到之后，我们就可以用以下脚本，解出flag了（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>key1 = <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span> +<span class="hljs-string">&#x27;W&lt;&amp;&#x27;</span><br>key2 = <span class="hljs-string">&#x27;0/i&#x27;</span> + <span class="hljs-string">&#x27;0&#x27;</span>*<span class="hljs-number">13</span><br>C=<span class="hljs-string">b&#x27;196cc94c2d685beb54beeaa14c1dc0a6f3794d65fca0d1a1274515166e4255ab367383092e42d774992f74bc138faaad&#x27;</span><br>C=long_to_bytes(<span class="hljs-built_in">int</span>(C,<span class="hljs-number">16</span>))<br><span class="hljs-built_in">print</span>(C)<br>cipher1 = AES.new(key=key1.encode(), mode=AES.MODE_ECB)<br>cipher2 = AES.new(key=key2.encode(), mode=AES.MODE_ECB)<br>D=cipher2.decrypt(C)<br>D=cipher1.decrypt(D)<br><span class="hljs-built_in">print</span>(D)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSAinGF</title>
    <link href="/2020/11/08/RSAinGF/"/>
    <url>/2020/11/08/RSAinGF/</url>
    
    <content type="html"><![CDATA[<h1 id="GF域上的RSA学习笔记"><a href="#GF域上的RSA学习笔记" class="headerlink" title="GF域上的RSA学习笔记"></a>GF域上的RSA学习笔记</h1><h2 id="0x01-学习背景"><a href="#0x01-学习背景" class="headerlink" title="0x01 学习背景"></a>0x01 学习背景</h2><p>之前我们提到了RSA在整数运算中的加密和 解密方式，今天我们来讨论讨论RSA在$GF(2^m)$域中的计算方法和解题模式。与以前的$RSA$略有不同</p><h2 id="0x02-GF域中多项式的运算"><a href="#0x02-GF域中多项式的运算" class="headerlink" title="0x02 GF域中多项式的运算"></a>0x02 GF域中多项式的运算</h2><h3 id="0o01GF域的概念-个人总结的"><a href="#0o01GF域的概念-个人总结的" class="headerlink" title="0o01GF域的概念(个人总结的)"></a>0o01GF域的概念(个人总结的)</h3><p>设$p$为质数，那么当且仅当$m&#x3D;p^k$时，$GF(m)$才有意义。例如：$GF(11),GF(81),GF(256),GF(7^{20011230})$均为有意义的GF域。然而，$GF(12)$不是有意义的$GF$域，因为$12&#x3D;2^2×3$，不能写成$p^k$的形式 。</p><h3 id="0o02-多项式在-GF-p-k-域中的形式"><a href="#0o02-多项式在-GF-p-k-域中的形式" class="headerlink" title="0o02 多项式在$GF(p^k)$域中的形式"></a>0o02 多项式在$GF(p^k)$域中的形式</h3><p>设$f(x)$是关于$x$的一个多项式。那么在$GF(P^k)$中，$f(x)$的次数为$k$，并且$f(x)$的每一项系数均小于$p$，因为$f(x)$都是要对$p$取模的。</p><p>对多项式取整数模的方法很简单：每一项系数对取那个整数取模，例如：$x^5+5x^4+10x^3+10x^2+5x+1 \equiv x^5+5x^4+x^3+x^2+5x+1 \mod 9$，$12x^3+15x^2-x+8\equiv 4x^3+7x^2+7x \mod 8$</p><p>例如：在$GF(2^k)$域中。设$f(x)&#x3D;x+1$，那么$f^2(x)&#x3D;x^2+2x+1\equiv x^2+1 \mod 2$。 </p><p>当然，在$GF(p^k)$域中，$Z_{p^k}$中的每一个整数都与对应的多项式一一对应。例如：在$GF(2^8)$中，$1$化为多项式为$1$，$2$化为多项式为$x$，$3$化为多项式为$x+1$，$13$化为多项式为$x^3+x^2+1$。也就是说，我们把对应的数化为$2$进制，然后从最低位为$0$次项一项一项地确定那一次的系数。</p><p>所以，在$GF(2^k)$域中，有$3^2&#x3D;5$也就不足为奇了，这也就说明：虽然多项式可以表示为整数，但是多项式的运算与整数运算是不一样的！</p><h3 id="0o03-什么叫做不可约多项式"><a href="#0o03-什么叫做不可约多项式" class="headerlink" title="0o03 什么叫做不可约多项式"></a>0o03 什么叫做不可约多项式</h3><p>不可约多项式可以理解为质数，也就是说：除了$1$和它本身，不可以被分解成几个因数之积的形式。例如：在$GF(2^8)$中，$x^8+x^4+x^3+x+1$就是一个不可约多项式（注意：最高项系数一定非$0$并且次数恰好为$p^k$中$k$的值。</p><p>当然，在$GF(2^8)$中，$x^3+x^2+x+1$就不是一个不可约多项式，因为它可以分解因式为$(x+1)^3$</p><h2 id="0x03-解题步骤"><a href="#0x03-解题步骤" class="headerlink" title="0x03 解题步骤"></a>0x03 解题步骤</h2><p>1.此类题目一般给出了$n(x),e$和$c$。不过我们得到$c$的值之后要将其化为$c(x)$的表达式。</p><p>2.然后，我们尝试分解$n(x)$，这一步在<strong>Sagemath的Notebook</strong>下面很容易做到。</p><p><img src="/2020/11/08/RSAinGF/2.png" alt="2"></p><p>值得注意的是，我们这里分解到的是两个不可约多项式$p(x)$和$q(x)$，显然，这是两个多项式而不是数字。我们该如何计算$\phi$值呢？</p><p>以前当$p,q$均为质数的时候，$\phi(p)&#x3D;(p-1),\phi(q)&#x3D;(q-1) $。我们回归一下$\phi(A)$的定义：在$Z_A$与$A$互质的数字个数。所以，在$GF(2^k)$中，由于除了这个多项式自己之外，其他一共$2^{k}-1$个多项式都与这个不q可约多项式互质，所以在这里，由于$p(x)$的最高次项为$821$，那么$\phi[p(x)]&#x3D;2^{821}-1$。同理，$\phi[q(x)]&#x3D;2^{1227}-1$，故这里的$\phi[n(x)]&#x3D;\phi[p(x)]\phi[q(x)]$</p><p>下一步，我们可以计算$d$的值，这里贴一下Sagemath中的代码</p><p><img src="/2020/11/08/RSAinGF/3.png" alt="3"></p><p>在求出$d$的时候，我们就可以计算$c^d(x) \mod n(x)$的多项式$m(x)$</p><p><img src="/2020/11/08/RSAinGF/4.png" alt="4"></p><p>把运行结果复制到一个TXT文档中(例如1.txt或者1.in)，然后化成二进制数（C++脚本很好打的，不过本<del>fw</del>怕忘掉怎么打这个C++脚本还是把脚本贴了上来）</p><p><strong>多项式转二进制数的脚本(多项式中加号与每一项之间存在空格，所以直接判断长度是否≥$3$即可)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">bool</span> b[<span class="hljs-number">2048</span>]=&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Trans</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> A=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;s.<span class="hljs-built_in">length</span>();i++)<br>&#123;<br>A=A*<span class="hljs-number">10</span>+s[i]<span class="hljs-number">-48</span>; <br>&#125; <br><span class="hljs-keyword">return</span> A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;2.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;2.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br><span class="hljs-type">int</span> i,j;<br>string s;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;s)<br>&#123;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>()&gt;=<span class="hljs-number">3</span>)<br>b[<span class="hljs-built_in">Trans</span>(s)]=<span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2047</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br>cout&lt;&lt;b[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>二进制数转多项式的脚本（注意删去最后的加号）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s;<br><span class="hljs-type">bool</span> b[<span class="hljs-number">2090</span>]=&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;1.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;1.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br><span class="hljs-type">char</span> c;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2047</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br>cin&gt;&gt;c;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;x^&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>;<br>&#125;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>最后，我们把$m(x)$化为它所对应的数值，然后将其转化为字符串就可以得到答案了</p><p><img src="/2020/11/08/RSAinGF/5.png" alt="5"></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumberTheory2</title>
    <link href="/2020/11/04/NumberTheory2/"/>
    <url>/2020/11/04/NumberTheory2/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-学习数论的笔记2"><a href="#huangx607087-学习数论的笔记2" class="headerlink" title="huangx607087 学习数论的笔记2"></a>huangx607087 学习数论的笔记2</h1><h2 id="1-素数及其计数-数论概论-12-13-章"><a href="#1-素数及其计数-数论概论-12-13-章" class="headerlink" title="1.素数及其计数(数论概论$12,13$章)"></a>1.素数及其计数(数论概论$12,13$章)</h2><p><strong>定理1.$2$是唯一的偶素数</strong></p><p><strong>定理2.素数有无穷多个，若$a,m$为任意整数，满足$\gcd(a,m)&#x3D;1$,那么有无穷多个素数$p$满足$p\equiv a \mod m$.</strong></p><p><strong>定理3.区间$[x,2x]$内必有一个素数</strong></p><p><strong>定理4.设$\pi(x)$为不超过$x$的素数个数，那么$\pi(x)$接近于$\frac{x}{\ln x}$，也就是$\lim_{x \to +\infty} \frac{\pi(x) \ln(x)}{x}&#x3D;1$</strong></p><p>哥德巴赫猜想：每一个大于等于$4$的偶数都可以表示为$2$个素数之和。</p><p>孪生素数：$p,p+2$均为素数，那么$(p,p+2)$构成一对孪生素数，猜想有无限多个这样的素数组。</p><p>素数猜想3：可能存在无穷多个$n^2+1$类型的素数</p><h2 id="2-梅森素数-形如-2-p-1-的素数-数论概论-14-15-章"><a href="#2-梅森素数-形如-2-p-1-的素数-数论概论-14-15-章" class="headerlink" title="2.梅森素数(形如$2^p-1$的素数)(数论概论$14,15$章)"></a>2.梅森素数(形如$2^p-1$的素数)(数论概论$14,15$章)</h2><p>若$a^n-1$是素数，那么$a&#x3D;2$</p><p><strong>性质1：若$n$被$m$整除，那么$2^n-1$被$2^m-1$整除。</strong>所以我们有推论：若$2^p-1$是个素数，则$p$一定是个素数。</p><p><strong>性质2：如果$2^p-1$是素数，那么$2^{p-1}(2^p-1)$是个完全数（完全数是指除了它的本身之外，这个数的所有因子之和等于它本身，比如$6,28$）</strong></p><p><strong>性质3：所有大于$6$的完全数在$6$进制中均以$44$结尾</strong></p><p>设$\sigma(x)$为$x$的所有因子之和（包括$1,x$两个数），例如：$\sigma(3)&#x3D;4,\sigma(15)&#x3D;24$</p><p><strong>性质4:若$\gcd(m,n)&#x3D;1$,则$\sigma(m)\sigma(n)&#x3D;\sigma(mn)$。</strong></p><p><strong>性质5:若$p$为素数，则$\sigma(p^n)&#x3D;\sum_{i&#x3D;0}^{n}p^i$。也就是对于任何素数$p$，均有$\sigma(p)&#x3D;p+1$。</strong></p><p>以下为求$\sigma(a^b)$结果的后8位十进制数的代码，也就是$\sigma(a^b)$对一亿取模的值，其中用到了二分快速加，可以推导一下（等比数列里千万不不要用除法！！！！）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,T,mod=<span class="hljs-number">100000000</span>;<br><span class="hljs-type">int</span> p[<span class="hljs-number">4000</span>],c[<span class="hljs-number">4000</span>],num;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dividing</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i*i&lt;=x;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(x%i==<span class="hljs-number">0</span>)<br>&#123;<br>p[++num]=i;<br>c[num]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(!(x%i)) x/=i,++c[num];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) p[++num]=x,c[num]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">pw</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> S=<span class="hljs-built_in">pw</span>(x,y/<span class="hljs-number">2</span>)%mod;<br><span class="hljs-keyword">if</span>(y%<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> S*S*x%mod;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> S*S%mod;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ad</span><span class="hljs-params">(<span class="hljs-type">int</span> q,<span class="hljs-type">int</span> k)</span><span class="hljs-comment">//求以1为首项，公比为q，最高项次数为k的等比数列 之和 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> q<span class="hljs-number">+1</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> S=<span class="hljs-built_in">ad</span>(q,(k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> S+<span class="hljs-built_in">pw</span>(q,(k<span class="hljs-number">+1</span>)/<span class="hljs-number">2</span>)*S%mod;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> S+<span class="hljs-built_in">pw</span>(q,k/<span class="hljs-number">2</span>)*S+<span class="hljs-built_in">pw</span>(q,k)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> a,b;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br><span class="hljs-built_in">dividing</span>(a);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> S=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=num;i++)<br>&#123;<br>S*=<span class="hljs-built_in">ad</span>(p[i],c[i]);<br>S%=mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,S);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-二分快速幂-数论概论第-16-章"><a href="#3-二分快速幂-数论概论第-16-章" class="headerlink" title="3.二分快速幂 (数论概论第$16$章)"></a>3.二分快速幂 (数论概论第$16$章)</h2><p>二分快速幂的C++代码 (Python中直接用<code>pow(x,y,z)</code>函数，很方便)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">pw</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> S=<span class="hljs-built_in">pw</span>(x,y/<span class="hljs-number">2</span>)%mod;<br><span class="hljs-keyword">if</span>(y%<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> S*S*x%mod;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> S*S%mod;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="4-解方程-x-e-equiv-c-mod-n-数论概论第-17-章"><a href="#4-解方程-x-e-equiv-c-mod-n-数论概论第-17-章" class="headerlink" title="4.解方程$x^e \equiv c \mod n$ (数论概论第$17$章)"></a>4.解方程$x^e \equiv c \mod n$ (数论概论第$17$章)</h2><p><strong>前提条件：$\gcd(c,n)&#x3D;1$且$\gcd(e,\phi(m))&#x3D;1$。</strong></p><p>步骤：<br>1.计算$\phi(n)$<br>2.求$e$的逆元$d$<br>3.计算$x&#x3D;c^d \mod n$</p><p>举个例子：求$x^7 \equiv 5 \mod 39$<br>1.计算$\phi(39)&#x3D;24$<br>2.$e&#x3D;7$在模$24$的意义下乘法逆元为$d&#x3D;7$<br>3.$x&#x3D;c^d&#x3D;5^7&#x3D;78125 \equiv 8 \mod 39$</p><p>这是什么？？ <strong>RSA解密 RSA解密 RSA解密</strong>！！ 密码学的知识成功地跟数论联系起来了<del>（奇怪的知识增加了）23333333</del></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumberTheory1</title>
    <link href="/2020/11/02/NumberTheory1/"/>
    <url>/2020/11/02/NumberTheory1/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087-学习数论的笔记1"><a href="#huangx607087-学习数论的笔记1" class="headerlink" title="huangx607087 学习数论的笔记1"></a>huangx607087 学习数论的笔记1</h1><h2 id="1-勾股定理及费马大定理（数论概论-2-3-4-章）"><a href="#1-勾股定理及费马大定理（数论概论-2-3-4-章）" class="headerlink" title="1.勾股定理及费马大定理（数论概论$2,3,4$章）"></a>1.勾股定理及费马大定理（数论概论$2,3,4$章）</h2><p><strong>表达式：</strong>$a^2+b^2&#x3D;c^2$</p><p><strong>本源勾股数组：</strong>满足$\gcd(a,b,c)&#x3D;1$</p><p><strong>生成本源勾股数组：</strong> $a&#x3D;st,b&#x3D;\frac{s^2-t^2}{2},c&#x3D;\frac{s^2+t^2}{2}$。其中$s&gt;t≥1$且$s,t$均为奇数且$\gcd(s,t)&#x3D;1$</p><p><strong>本源勾股数组的性质：</strong> $a,b$一定是一个奇数一个偶数，$a,b$中一定有一个是$3$的倍数，$a,b,c$中一定有一个是$5$的倍数</p><p><strong>费马大定理</strong>：**$n≥3$时，方程$a^n+b^n&#x3D;c^n$无正整数解。**</p><h2 id="2-最大公约数-gcd-的相关性质-数论概论-5-6-章"><a href="#2-最大公约数-gcd-的相关性质-数论概论-5-6-章" class="headerlink" title="2.最大公约数$\gcd$的相关性质(数论概论$5,6$章)"></a>2.最大公约数$\gcd$的相关性质(数论概论$5,6$章)</h2><p><strong>互质:</strong>$\gcd(a,b)&#x3D;1$</p><p><strong>求 $\gcd$ 的方法：欧几里得辗转相除</strong>，时间复杂度：$O(\ln b)$</p><p><strong>C++代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> x;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(y,x%y);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>线性方程：</strong> $ax+by&#x3D;\gcd(a,b)$</p><p>求解$x,y$的C++代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> b,<span class="hljs-type">long</span> <span class="hljs-type">long</span> &amp;x,<span class="hljs-type">long</span> <span class="hljs-type">long</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!b)<br>&#123;<br>x=<span class="hljs-number">1</span>;<br>y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> R=<span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>y-=x*(a/b);<br><span class="hljs-keyword">return</span> R;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>逆元代码：</strong>(Python直接用命令<code>inverse(a,p)</code>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">modinverse</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x0,y0;<br><span class="hljs-built_in">exgcd</span>(a,p,x0,y0);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> A=(x0<span class="hljs-number">+750</span>*p)%p;<br><span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-余数与整除-数论概论-7-8-9-10-11-章"><a href="#3-余数与整除-数论概论-7-8-9-10-11-章" class="headerlink" title="3.余数与整除(数论概论$7,8,9,10,11$章)"></a>3.余数与整除(数论概论$7,8,9,10,11$章)</h2><p>1.表示方法：如果$m$ 整除$a-b$，可以记作：$a \equiv b \mod m$。例如：$7+6 \equiv 3 \mod 10$ </p><p><strong>性质1.若$a\equiv A \mod m,b\equiv B\mod  m$：有：$a+b \equiv A+B \mod m,ab \equiv AB \mod m$.</strong></p><p>设关于$x$的同余方程：$ax \equiv c \mod m$，求$x$?</p><p><strong>性质2.设$g&#x3D;\gcd(a,m)$,若$c\equiv 0 \mod g$ 那么这个方程有$g$个解。我们可以求$au+mv&#x3D;g$这个方程的解。然后计算$x_0&#x3D;\frac {cu}{g}$这样我们就可以求出$x_0$。然后我们设$\delta &#x3D;\frac{m}{g}$（显然$\delta$是整数）那么$x_1&#x3D;x+\delta,x_n&#x3D;x_{n-1}+\delta$,$n&#x3D;1,2,3,..,g-1$.</strong></p><p>举个例子：</p><p>假如我们要求方程$4x \equiv 6 \mod 18$的值，我们计算：$g&#x3D;\gcd(4,18)&#x3D;2$，所以这个方程有$2$个解。$\delta&#x3D;\frac{18}{2}&#x3D;9$。我们可以计算出：$u&#x3D;-4\equiv 14 \mod 18$。那么$x_0&#x3D;\frac {6×14}{2} \equiv 6 \mod 18$。那么$x_1&#x3D;x_0+\delta&#x3D;6+9&#x3D;15$。所以这个方程有两解$6$和$15$</p><p>若推广到高次方程，我们可以得到$f(x)&#x3D;\sum_{i&#x3D;0}^{n} a_ix^i \equiv 0 \mod p$ 至多有$n$个在$Z_p$内的解。</p><p><strong>性质3.费马小定理：$a^{p-1} \equiv 1 \mod p $ 其中$a \not\equiv 0 \mod p$.</strong></p><p>利用这个定理，我们可以在$\ln p$级别的时间复杂度内判断$p$是不是素数。例如：由于$2^{1234566} \equiv 899557 \mod 1234567$。所以$1234567$不是素数。而$535776^{998244352}\equiv 1 \mod 998244353$ 所以$998244353$是素数。</p><p>注意：这个方法实际上是有反例的。也就是说，$a^{p-1} \equiv 1 \mod p $ 是“$p$是素数”的 <strong>必要不充分条件。</strong>最小的一个反例是$561$ .这个结论将在笔记$3$中提到。</p><p><strong>性质4.推广费马小定理: $a^{\phi(m)} \equiv 1 \mod m$其中$m \not\equiv 0 \mod a$.</strong></p><p>$\phi(x)$表示在小于$x$的数中与$x$互质的数个数。其中：对于质数$p$有$\phi(p)&#x3D;p-1$,$\phi(p^k) &#x3D; p^k-p^{k-1}$。对于任何数字有$\phi(ab)&#x3D;\phi(a)\phi(b)$</p><p><strong>性质5.中国剩余定理。见<a href="https://huangx607087.github.io/2020/10/16/0xGameDiv2/">0xGame  Div 2 的第一题wp</a>.</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM Code 1</title>
    <link href="/2020/10/30/ACMCode1/"/>
    <url>/2020/10/30/ACMCode1/</url>
    
    <content type="html"><![CDATA[<h1 id="ACM-Code-1"><a href="#ACM-Code-1" class="headerlink" title="ACM Code 1"></a>ACM Code 1</h1><h3 id="1-SPFA"><a href="#1-SPFA" class="headerlink" title="1.SPFA"></a>1.SPFA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">int</span> e[<span class="hljs-number">900000</span>],w[<span class="hljs-number">900000</span>],head[<span class="hljs-number">900000</span>],next[<span class="hljs-number">900000</span>],k=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> q[<span class="hljs-number">3350000</span>],d[<span class="hljs-number">900000</span>];<br><span class="hljs-type">bool</span> v[<span class="hljs-number">900000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">memset</span>(d,<span class="hljs-number">19</span>,<span class="hljs-built_in">sizeof</span>(d));<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);<br>e[++k]=y;w[k]=z;next[k]=head[x];head[x]=k;<br>e[++k]=x;w[k]=z;next[k]=head[y];head[y]=k;<br>&#125;<br>d[s]=<span class="hljs-number">0</span>;<br>q[<span class="hljs-number">1</span>]=s;<br><span class="hljs-type">int</span> f=<span class="hljs-number">1</span>,r=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(f&lt;=r)<br>&#123;<br><span class="hljs-type">int</span> x=q[f++];<br>k=head[x];<br><span class="hljs-keyword">while</span>(k!=<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(d[x]+w[k]&lt;d[e[k]])<br>&#123;<br>d[e[k]]=d[x]+w[k];<br><span class="hljs-keyword">if</span>(!v[e[k]])<br>&#123;<br>q[++r]=e[k];<br>v[e[k]]=<span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>k=next[k];<br>&#125;<br>v[x]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,d[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Dijkstra-Heap"><a href="#2-Dijkstra-Heap" class="headerlink" title="2.Dijkstra+Heap"></a>2.Dijkstra+Heap</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s;<br><span class="hljs-type">int</span> e[<span class="hljs-number">1750000</span>],w[<span class="hljs-number">1750000</span>],head[<span class="hljs-number">950000</span>],next[<span class="hljs-number">1750000</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">950000</span>];<br><span class="hljs-type">bool</span> v[<span class="hljs-number">950000</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">zxcv</span>&#123;<span class="hljs-type">int</span> first, second;<br>&#125;;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; ( <span class="hljs-type">const</span> zxcv &amp;a, <span class="hljs-type">const</span> zxcv &amp;b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.first&gt;b.first;<br>&#125;<br>priority_queue&lt;zxcv&gt; h;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">D</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(h.<span class="hljs-built_in">empty</span>()==<span class="hljs-number">0</span>)<br>    &#123;<br>        zxcv now=h.<span class="hljs-built_in">top</span>();<br>        h.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> dii=now.first,x=now.second;<br>        <span class="hljs-keyword">if</span>(!v[x])<br>        &#123;<br>            v[x]=<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> k=head[x];<br>            <span class="hljs-keyword">while</span>(k)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(w[k]+d[x]&lt;d[e[k]])<br>                &#123;<br>                    d[e[k]]=d[x]+w[k];<br>                    <span class="hljs-keyword">if</span>(!v[e[k]])<br>                    &#123;<br>                        zxcv midd;<br>                        midd.first=d[e[k]];<br>                        midd.second=e[k];<br>                        h.<span class="hljs-built_in">push</span>(midd);<br>                    &#125;<br>                &#125;<br>                k=next[k];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">40</span>,<span class="hljs-built_in">sizeof</span>(d));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);<br>    d[s]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y,z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);<br>        e[++k]=y; w[k]=z; next[k]=head[x]; head[x]=k;<br>    &#125;<br>    zxcv tmp;<br>    tmp.first=<span class="hljs-number">0</span>;<br>    tmp.second=s;<br>    h.<span class="hljs-built_in">push</span>(tmp);<br>    <span class="hljs-built_in">D</span>();<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,d[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-树状数组"><a href="#3-树状数组" class="headerlink" title="3.树状数组"></a>3.树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,T;<br><span class="hljs-type">int</span> tri[<span class="hljs-number">607087</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)<br>    &#123;<br>        tri[x]+=y;<br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">S</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> A=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)<br>    &#123;<br>        A+=tri[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">bool</span> h)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(h) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">S</span>(y)-<span class="hljs-built_in">S</span>(x<span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">addedge</span>(x,y);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a=i,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b);<br>        <span class="hljs-built_in">addedge</span>(a,b);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> t,a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;t,&amp;a,&amp;b);<br>        <span class="hljs-built_in">work</span>(a,b,t<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-线段树"><a href="#4-线段树" class="headerlink" title="4.线段树"></a>4.线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc(x) x*2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc(x) x*2+1</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,T;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tri[<span class="hljs-number">607087</span>],lazy[<span class="hljs-number">607087</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mid=(a+b)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(a==l&amp;&amp;b==r)<br>    &#123;<br>        tri[x]+=(b-a)*k;<br>        lazy[x]+=k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    tri[<span class="hljs-built_in">lc</span>(x)]+=(mid-a)*lazy[x];<br>    lazy[<span class="hljs-built_in">lc</span>(x)]+=lazy[x];<br>    tri[<span class="hljs-built_in">rc</span>(x)]+=(b-mid)*lazy[x];<br>    lazy[<span class="hljs-built_in">rc</span>(x)]+=lazy[x];<br>    lazy[x]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(mid&lt;=l)<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-built_in">rc</span>(x),mid,b,l,r,k);<br>    <span class="hljs-keyword">if</span>(mid&gt;=r)<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-built_in">lc</span>(x),a,mid,l,r,k);<br>    <span class="hljs-keyword">if</span>(mid&lt;r&amp;&amp;mid&gt;l)<br>    &#123;<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-built_in">lc</span>(x),a,mid,l,mid,k);<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-built_in">rc</span>(x),mid,b,mid,r,k);<br>    &#125;<br>    tri[x]=tri[<span class="hljs-built_in">lc</span>(x)]+tri[<span class="hljs-built_in">rc</span>(x)];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">S</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> now,mid=(a+b)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(a==l&amp;&amp;b==r) <span class="hljs-keyword">return</span> tri[x];<br>    tri[<span class="hljs-built_in">lc</span>(x)]+=(mid-a)*lazy[x];<br>    lazy[<span class="hljs-built_in">lc</span>(x)]+=lazy[x];<br>    tri[<span class="hljs-built_in">rc</span>(x)]+=(b-mid)*lazy[x];<br>    lazy[<span class="hljs-built_in">rc</span>(x)]+=lazy[x];<br>    lazy[x]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(mid&lt;=l)<br>        now=<span class="hljs-built_in">S</span>(<span class="hljs-built_in">rc</span>(x),mid,b,l,r);<br>    <span class="hljs-keyword">if</span>(mid&gt;=r)<br>        now=<span class="hljs-built_in">S</span>(<span class="hljs-built_in">lc</span>(x),a,mid,l,r);<br>    <span class="hljs-keyword">if</span>(mid&gt;l&amp;&amp;mid&lt;r)<br>        now=<span class="hljs-built_in">S</span>(<span class="hljs-built_in">lc</span>(x),a,mid,l,mid)+<span class="hljs-built_in">S</span>(<span class="hljs-built_in">rc</span>(x),mid,b,mid,r);<br>    tri[x]=tri[<span class="hljs-built_in">lc</span>(x)]+tri[<span class="hljs-built_in">rc</span>(x)];<br>    <span class="hljs-keyword">return</span> now;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        <span class="hljs-built_in">addedge</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n<span class="hljs-number">+1</span>,i,i<span class="hljs-number">+1</span>,tmp);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> tipic;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tipic);<br>        <span class="hljs-keyword">if</span>(tipic==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x,y,k;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;k);<br>            <span class="hljs-built_in">addedge</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n<span class="hljs-number">+1</span>,x,y<span class="hljs-number">+1</span>,k);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tipic==<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">S</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n<span class="hljs-number">+1</span>,x,y<span class="hljs-number">+1</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-CRT"><a href="#5-CRT" class="headerlink" title="5.CRT"></a>5.CRT</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,a[<span class="hljs-number">5000</span>],m[<span class="hljs-number">5000</span>],S=<span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> Pim=<span class="hljs-number">1</span>,M[<span class="hljs-number">5000</span>],t[<span class="hljs-number">5000</span>];<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> b,<span class="hljs-type">long</span> <span class="hljs-type">long</span> &amp;x,<span class="hljs-type">long</span> <span class="hljs-type">long</span> &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!b)<br>&#123;<br>x=<span class="hljs-number">1</span>;<br>y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> R=<span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>y-=x*(a/b);<br><span class="hljs-keyword">return</span> R;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">modinverse</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x,<span class="hljs-type">long</span> <span class="hljs-type">long</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> x0,y0;<br><span class="hljs-built_in">exgcd</span>(x,y,x0,y0);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> A=(x0<span class="hljs-number">+750</span>*y)%y;<br><span class="hljs-keyword">return</span> A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;m[i]&gt;&gt;a[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) Pim*=m[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) M[i]=Pim/m[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) t[i]=<span class="hljs-built_in">modinverse</span>(M[i],m[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) S+=a[i]*t[i]*M[i];<br>cout&lt;&lt;S%Pim;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-ST-表"><a href="#6-ST-表" class="headerlink" title="6.ST 表"></a>6.ST 表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,pw[<span class="hljs-number">30</span>]=&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> f[<span class="hljs-number">3500000</span>][<span class="hljs-number">30</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> s,<span class="hljs-type">int</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> p=s,q=t;<br>s=<span class="hljs-built_in">min</span>(p,q),t=<span class="hljs-built_in">max</span>(p,q);<br><span class="hljs-type">int</span> mid=<span class="hljs-built_in">log</span>(t-s<span class="hljs-number">+1</span>)/<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//对数换底公式 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">max</span>(f[s][mid],f[t-pw[mid]<span class="hljs-number">+1</span>][mid]));<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,k,T;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">29</span>;i++) pw[i]=pw[i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;T);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;f[i][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-built_in">log</span>(n)/<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<span class="hljs-number">+1</span>;k++)<br>&#123;<br>i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i+pw[k]&lt;=n<span class="hljs-number">+1</span>)<br>&#123;<br>f[i][k]=<span class="hljs-built_in">max</span>(f[i][k<span class="hljs-number">-1</span>],f[i+pw[k<span class="hljs-number">-1</span>]][k<span class="hljs-number">-1</span>]);<br><span class="hljs-comment">//状态转移方程，非常重要 </span><br>++i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> L,R;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;L,&amp;R);<br><span class="hljs-built_in">find</span>(L,R);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-树——-链"><a href="#7-树——-链" class="headerlink" title="7.树——&gt;链"></a>7.树——&gt;链</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,r,p,cnt=<span class="hljs-number">0</span>,A=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> e[<span class="hljs-number">423500</span>],hd[<span class="hljs-number">423500</span>],nxt[<span class="hljs-number">423500</span>];<br><span class="hljs-type">int</span> tri[<span class="hljs-number">423500</span>],lazy[<span class="hljs-number">423500</span>];<br><span class="hljs-type">int</span> wold[<span class="hljs-number">423500</span>],wnew[<span class="hljs-number">423500</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">423500</span>],d[<span class="hljs-number">423500</span>],sz[<span class="hljs-number">423500</span>];<br><span class="hljs-type">int</span> hson[<span class="hljs-number">423500</span>],rk[<span class="hljs-number">423500</span>],top[<span class="hljs-number">423500</span>],id[<span class="hljs-number">423500</span>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">名称解释 </span><br><span class="hljs-comment">f[u]保存结点u的父亲节点</span><br><span class="hljs-comment">d[u]保存结点u的深度值</span><br><span class="hljs-comment">sz[u]保存以u为根的子树节点个数</span><br><span class="hljs-comment">hson[u]保存重儿子</span><br><span class="hljs-comment">rk[u]保存当前dfs标号在树中所对应的节点</span><br><span class="hljs-comment">top[u]保存当前节点所在链的顶端节点</span><br><span class="hljs-comment">id[u]保存树中每个节点剖分以后的新编号（DFS的执行顺序</span><br><span class="hljs-comment">函数临时变量均为对应大写首字母:F,D,S,H,R,T,I </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buildtree</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>tri[x]=wnew[l]%p;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">buildtree</span>(<span class="hljs-number">2</span>*x,l,mid);<br><span class="hljs-built_in">buildtree</span>(<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>,mid<span class="hljs-number">+1</span>,r);<br>tri[x]=(tri[<span class="hljs-number">2</span>*x]+tri[<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>])%p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(lazy[x])<br>&#123;<br>lazy[<span class="hljs-number">2</span>*x]+=lazy[x];<br>lazy[<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>]+=lazy[x];<br>tri[<span class="hljs-number">2</span>*x]+=(mid-l<span class="hljs-number">+1</span>)*lazy[x];<br>tri[<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>]+=(r-mid)*lazy[x];<br>tri[<span class="hljs-number">2</span>*x]%=p;<br>tri[<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>]%=p;<br>lazy[x]=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(a&lt;=l&amp;&amp;r&lt;=b)<br>&#123;<br>lazy[x]+=k;<br>tri[x]+=k*(r-l<span class="hljs-number">+1</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">pushdown</span>(x,l,r);<br><span class="hljs-keyword">if</span>(a&lt;=mid) <span class="hljs-built_in">update</span>(<span class="hljs-number">2</span>*x,l,mid,a,b,k);<br><span class="hljs-keyword">if</span>(b&gt;mid) <span class="hljs-built_in">update</span>(<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>,mid<span class="hljs-number">+1</span>,r,a,b,k);<br>tri[x]=tri[x*<span class="hljs-number">2</span>]+tri[x*<span class="hljs-number">2</span><span class="hljs-number">+1</span>];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(a&lt;=l&amp;&amp;r&lt;=b)<br>&#123;<br>A+=tri[x];<br>A%=p;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">pushdown</span>(x,l,r);<br><span class="hljs-keyword">if</span>(a&lt;=mid) <span class="hljs-built_in">visit</span>(<span class="hljs-number">2</span>*x,l,mid,a,b);<br><span class="hljs-keyword">if</span>(b&gt;mid) <span class="hljs-built_in">visit</span>(<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>,mid<span class="hljs-number">+1</span>,r,a,b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> F,<span class="hljs-type">int</span> D)</span></span><br><span class="hljs-function"></span>&#123;<br>d[x]=D,f[x]=F,sz[x]=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> maxx=<span class="hljs-number">-1</span>,k=hd[x];<br><span class="hljs-keyword">while</span>(k)<br>&#123;<br><span class="hljs-keyword">if</span>(e[k]-F)<br>&#123;<br><span class="hljs-built_in">dfs1</span>(e[k],x,D<span class="hljs-number">+1</span>);<br>sz[x]+=sz[e[k]];<br><span class="hljs-keyword">if</span>(sz[e[k]]&gt;maxx)<br>&#123;<br>maxx=sz[wold[k]];<br>hson[x]=e[k];<br>&#125;<br>&#125;<br>k=nxt[k];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> T)</span></span><br><span class="hljs-function"></span>&#123;<br>top[x]=T,id[x]=++cnt,rk[cnt]=x;<br>wnew[cnt]=wold[x];<br><span class="hljs-keyword">if</span>(!hson[x]) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">dfs2</span>(hson[x],T);<br><span class="hljs-type">int</span> k=hd[x];<br><span class="hljs-keyword">while</span>(k)<br>&#123;<br><span class="hljs-keyword">if</span>(e[k]-hson[x]&amp;&amp;e[k]-f[x]) <span class="hljs-built_in">dfs2</span>(e[k],e[k]);<br>k=nxt[k];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updrange</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>k%=p;<br><span class="hljs-keyword">while</span>(top[x]-top[y])<br>&#123;<br><span class="hljs-keyword">if</span>(d[top[x]]&lt;d[top[y]]) <span class="hljs-built_in">swap</span>(x,y);<br><span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[top[x]],id[x],k);<br>x=f[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(d[x]&gt;d[y]) <span class="hljs-built_in">swap</span>(x,y);<br><span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[x],id[y],k);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qrange</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> rns=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(top[x]-top[y])<br>&#123;<br><span class="hljs-keyword">if</span>(d[top[x]]&lt;d[top[y]]) <span class="hljs-built_in">swap</span>(x,y);<br>A=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">visit</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[top[x]],id[x]);<br>rns+=A,rns%=p;<br>x=f[top[x]];<br>&#125;<br><span class="hljs-keyword">if</span>(d[x]&gt;d[y]) <span class="hljs-built_in">swap</span>(x,y);<br>A=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">visit</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[x],id[y]);<br>rns+=A;<br><span class="hljs-keyword">return</span> rns%p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qson</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>A=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">visit</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[x],id[x]+sz[x]<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span> A;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">updson</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[x],id[x]+sz[x]<span class="hljs-number">-1</span>,k);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,k=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;r,&amp;p);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;wold[i]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> x,y;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>e[++k]=y,nxt[k]=hd[x],hd[x]=k;<br>e[++k]=x,nxt[k]=hd[y],hd[y]=k;<br>&#125;<br><span class="hljs-built_in">dfs1</span>(r,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs2</span>(r,r);<br><span class="hljs-built_in">buildtree</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-type">int</span> tipic,x,y,z;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tipic);<br><span class="hljs-keyword">switch</span>(tipic)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);<br><span class="hljs-built_in">updrange</span>(x,y,z); <br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">qrange</span>(x,y)); <br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br><span class="hljs-built_in">updson</span>(x,y);<br><span class="hljs-keyword">break</span>;<br>&#125; <br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">qson</span>(x));<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-基本二叉树操作"><a href="#8-基本二叉树操作" class="headerlink" title="8.基本二叉树操作"></a>8.基本二叉树操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,ask;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">asdf</span>&#123;<span class="hljs-type">int</span> val,lson,rson,taim,size;&#125;tri[<span class="hljs-number">2607087</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addedge</span><span class="hljs-params">(<span class="hljs-type">int</span> loc,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!n)<br>&#123;<br>n=<span class="hljs-number">1</span>,tri[<span class="hljs-number">1</span>].size=<span class="hljs-number">1</span>,tri[<span class="hljs-number">1</span>].val=x,tri[<span class="hljs-number">1</span>].taim=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>tri[loc].size++;<br><span class="hljs-keyword">if</span>(tri[loc].val==x) <br>&#123;<br>tri[loc].taim++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tri[loc].val&gt;x)<br>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].lson) <span class="hljs-built_in">addedge</span>(tri[loc].lson,x);<br><span class="hljs-keyword">else</span><br>&#123;<br>tri[++n].val=x;tri[n].taim=<span class="hljs-number">1</span>;<br>tri[n].size=<span class="hljs-number">1</span>;tri[loc].lson=n;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(tri[loc].val&lt;x)<br>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].rson)<span class="hljs-built_in">addedge</span>(tri[loc].rson,x);<br><span class="hljs-keyword">else</span><br>&#123;<br>tri[++n].val=x;tri[n].taim=<span class="hljs-number">1</span>;<br>tri[n].size=<span class="hljs-number">1</span>;tri[loc].rson=n;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findlow</span><span class="hljs-params">(<span class="hljs-type">int</span> loc,<span class="hljs-type">int</span> subget)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].val&gt;=ask)<br>&#123;<br><span class="hljs-keyword">if</span>(!tri[loc].lson) <span class="hljs-keyword">return</span> subget;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">findlow</span>(tri[loc].lson,subget);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(!tri[loc].rson)<br>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].val&lt;ask) <span class="hljs-keyword">return</span> tri[loc].val;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> subget;<br>&#125;<br><span class="hljs-keyword">if</span>(tri[loc].taim) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findlow</span>(tri[loc].rson,tri[loc].val);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">findlow</span>(tri[loc].rson,subget);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findhigh</span><span class="hljs-params">(<span class="hljs-type">int</span> loc,<span class="hljs-type">int</span> subget)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].val&lt;=ask)<br>&#123;<br><span class="hljs-keyword">if</span>(!tri[loc].rson) <span class="hljs-keyword">return</span> subget;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">findhigh</span>(tri[loc].rson,subget);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(!tri[loc].lson)<br>&#123;<br><span class="hljs-keyword">if</span>(tri[loc].val&gt;ask) <span class="hljs-keyword">return</span> tri[loc].val;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> subget;<br>&#125;<br><span class="hljs-keyword">if</span>(tri[loc].size) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findhigh</span>(tri[loc].lson,tri[loc].val);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">findhigh</span>(tri[loc].lson,subget);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findrank</span><span class="hljs-params">(<span class="hljs-type">int</span> loc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!loc) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(ask==tri[loc].val) <span class="hljs-keyword">return</span> tri[tri[loc].lson].size;<br><span class="hljs-keyword">if</span>(ask&gt;tri[loc].val) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findrank</span>(tri[loc].rson)+tri[loc].taim+tri[tri[loc].lson].size;<br><span class="hljs-keyword">if</span>(ask&lt;tri[loc].val) <span class="hljs-keyword">return</span> <span class="hljs-built_in">findrank</span>(tri[loc].lson);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findnum</span><span class="hljs-params">(<span class="hljs-type">int</span> loc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!loc) <span class="hljs-keyword">return</span> <span class="hljs-number">2147483647</span>;<br><span class="hljs-keyword">if</span>(tri[tri[loc].lson].size&gt;=ask)<span class="hljs-keyword">return</span> <span class="hljs-built_in">findnum</span>(tri[loc].lson);<br><span class="hljs-keyword">if</span>(tri[tri[loc].lson].size+tri[loc].taim&gt;=ask) <span class="hljs-keyword">return</span> tri[loc].val;<br>ask-=tri[tri[loc].lson].size+tri[loc].taim;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">findnum</span>(tri[loc].rson);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;1.hx902in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-type">int</span> i,j,T;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-type">int</span> tipic; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tipic);<br><span class="hljs-keyword">switch</span>(tipic)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//求x的排名</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ask);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">1</span>+<span class="hljs-built_in">findrank</span>(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//求排名x的数</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ask);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">findnum</span>(<span class="hljs-number">1</span>));<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//求x的前驱</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ask);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">findlow</span>(<span class="hljs-number">1</span>,<span class="hljs-number">-2147483647</span>));<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-comment">//求x的后继</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ask);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">findhigh</span>(<span class="hljs-number">1</span>,<span class="hljs-number">+2147483647</span>));<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-comment">//插入x</span><br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ask); <span class="hljs-built_in">addedge</span>(<span class="hljs-number">1</span>,ask);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-Manacher"><a href="#9-Manacher" class="headerlink" title="9.Manacher"></a>9.Manacher</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,A,f[<span class="hljs-number">45000000</span>];<br><span class="hljs-type">char</span> c[<span class="hljs-number">45000000</span>];<br><span class="hljs-type">int</span> Maxnum,Maxlen;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;testdata.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,c);<br>n=<span class="hljs-built_in">strlen</span>(c)*<span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(i=n;i&gt;<span class="hljs-number">1</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>) c[i]=<span class="hljs-string">&#x27;*&#x27;</span>;<br><span class="hljs-keyword">else</span> c[i]=c[i/<span class="hljs-number">2</span><span class="hljs-number">-1</span>];<br>&#125;<br>c[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;@&#x27;</span>,c[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;*&#x27;</span>,c[n<span class="hljs-number">+1</span>]=<span class="hljs-string">&#x27;*&#x27;</span>,c[n<span class="hljs-number">+2</span>]=<span class="hljs-string">&#x27;~&#x27;</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(Maxlen+Maxnum&gt;i) f[i]=<span class="hljs-built_in">min</span>(Maxlen+Maxnum<span class="hljs-number">-1</span>,f[<span class="hljs-number">2</span>*Maxnum-i]);<br><span class="hljs-keyword">else</span> f[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(c[i-f[i]]==c[i+f[i]]) ++f[i];<br><span class="hljs-keyword">if</span>(f[i]&gt;Maxlen) Maxlen=f[i],Maxnum=i;<br>A=<span class="hljs-built_in">max</span>(A,f[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,A<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="10-网络流"><a href="#10-网络流" class="headerlink" title="10. 网络流"></a>10. 网络流</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s,t,A;<br><span class="hljs-type">int</span> e[<span class="hljs-number">900000</span>],w[<span class="hljs-number">900000</span>],nxt[<span class="hljs-number">900000</span>];<br><span class="hljs-type">int</span> hd[<span class="hljs-number">900000</span>],dep[<span class="hljs-number">900000</span>],q[<span class="hljs-number">3430000</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> f=<span class="hljs-number">1</span>,r=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(dep,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dep));<br>dep[s]=<span class="hljs-number">1</span>;q[<span class="hljs-number">1</span>]=s;<br><span class="hljs-keyword">while</span>(f&lt;=r)<br>&#123;<br><span class="hljs-type">int</span> x=q[f++],k=hd[x];<br><span class="hljs-keyword">while</span>(k)<br>&#123;<br><span class="hljs-keyword">if</span>((dep[e[k]]==<span class="hljs-number">0</span>)&amp;&amp;(w[k]&gt;<span class="hljs-number">0</span>))<br>&#123;<br>dep[e[k]]=dep[x]<span class="hljs-number">+1</span>;<br>q[++r]=e[k];<br>&#125;<br>k=nxt[k];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> dep[t];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> flow)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==t) <span class="hljs-keyword">return</span> flow;<br><span class="hljs-type">int</span> k=hd[x];<br><span class="hljs-keyword">while</span>(k)<br>&#123;<br><span class="hljs-keyword">if</span>((w[k])&amp;&amp;(dep[e[k]]==dep[x]<span class="hljs-number">+1</span>))<br>&#123;<br><span class="hljs-type">int</span> dis=<span class="hljs-built_in">dfs</span>(e[k],<span class="hljs-built_in">min</span>(flow,w[k]));<br><span class="hljs-keyword">if</span>(dis&gt;<span class="hljs-number">0</span>) <br>&#123;<br>w[k]-=dis;<br><span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>) w[k<span class="hljs-number">+1</span>]+=dis;<br><span class="hljs-keyword">else</span> w[k<span class="hljs-number">-1</span>]+=dis;<br><span class="hljs-keyword">return</span> dis;<br>&#125;<br>&#125;<br>k=nxt[k];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> B=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">bfs</span>())<br>&#123;<br><span class="hljs-keyword">while</span>(B=<span class="hljs-built_in">dfs</span>(s,<span class="hljs-number">20011230</span>)) A+=B;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//freopen(&quot;flow1.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);<br>e[++k]=y,w[k]=z,nxt[k]=hd[x],hd[x]=k;<br>e[++k]=x,w[k]==<span class="hljs-number">0</span>,nxt[k]=hd[y],hd[y]=k;<br>&#125;<br><span class="hljs-built_in">dinic</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,A);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-LCA"><a href="#11-LCA" class="headerlink" title="11.LCA"></a>11.LCA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,s,h[<span class="hljs-number">1607087</span>];<br><span class="hljs-type">int</span> e[<span class="hljs-number">1607087</span>],hd[<span class="hljs-number">1607087</span>],nxt[<span class="hljs-number">1607087</span>];<br><span class="hljs-type">int</span> a[<span class="hljs-number">1607087</span>],b[<span class="hljs-number">1607087</span>],ans[<span class="hljs-number">1607087</span>];<br><span class="hljs-type">bool</span> v[<span class="hljs-number">1607087</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x-h[x]) <span class="hljs-keyword">return</span> h[x]=<span class="hljs-built_in">find</span>(h[x]);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,now=hd[x];<br>v[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(now)<br>&#123;<br><span class="hljs-keyword">if</span>(!v[e[now]])<br>&#123;<br><span class="hljs-built_in">lca</span>(e[now]);<br>h[e[now]]=x;<br>&#125;<br>now=nxt[now];<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]==x&amp;&amp;v[b[i]]) ans[i]=<span class="hljs-built_in">find</span>(b[i]);<br><span class="hljs-keyword">if</span>(b[i]==x&amp;&amp;v[a[i]]) ans[i]=<span class="hljs-built_in">find</span>(a[i]);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j,k=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-type">int</span> x,y;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>e[++k]=y,nxt[k]=hd[x],hd[x]=k;<br>e[++k]=x,nxt[k]=hd[y],hd[y]=k;<br>&#125;<br><span class="hljs-built_in">memset</span>(v,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(v));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++) h[i]=i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a[i],&amp;b[i]);<br><span class="hljs-built_in">lca</span>(s);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SelfSkills</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Skills</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGameDiv4</title>
    <link href="/2020/10/29/0xGameDiv4/"/>
    <url>/2020/10/29/0xGameDiv4/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame-Div-4-题解"><a href="#0xGame-Div-4-题解" class="headerlink" title="0xGame Div 4 题解"></a>0xGame Div 4 题解</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>4周过去，7172分，不过自己的CTF学习进入了第二阶段，很快就要进入数论了。 然而最近又在参加学校ACM菜鸟赛（<del>（作为一个当年距离1&#x3D;只差15分的2&#x3D;蒟蒻，我该怎么办）</del></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-littleTrick"><a href="#1-littleTrick" class="headerlink" title="1.  littleTrick"></a>1.  littleTrick</h3><p>一道并不算很难得题目，<del>但我这个fw还是用了4个小时才做出来，wtcl</del></p><p>首先先看一下题目的主要代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-variable language_">self</span>.send(BANNER)<br>       <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.proof_of_work():<br>           <span class="hljs-keyword">return</span><br>       <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">44</span><br>       p, q = getPrime(<span class="hljs-number">1024</span>), getPrime(<span class="hljs-number">1024</span>)<br>       <span class="hljs-variable language_">self</span>.m = flag.encode()<br>       <span class="hljs-variable language_">self</span>.n = p*q<br>       <span class="hljs-variable language_">self</span>.e = <span class="hljs-number">65537</span><br>       <span class="hljs-variable language_">self</span>.d = inverse(<span class="hljs-variable language_">self</span>.e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>       <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;n : &quot;</span> + <span class="hljs-built_in">hex</span>(<span class="hljs-variable language_">self</span>.n)[<span class="hljs-number">2</span>:].encode())<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           <span class="hljs-variable language_">self</span>.send(MENU, newline=<span class="hljs-literal">False</span>)<br>           choice = <span class="hljs-variable language_">self</span>.recv()<br>           <span class="hljs-keyword">if</span> choice == <span class="hljs-string">b&quot;1&quot;</span>:<br>               mask = <span class="hljs-variable language_">self</span>.recvhex(prompt=<span class="hljs-string">b&quot;Your mask (in hex): &quot;</span>)<br>               mask = long_to_bytes(<span class="hljs-built_in">pow</span>(mask,<span class="hljs-variable language_">self</span>.d,<span class="hljs-variable language_">self</span>.n))<br>               <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(mask) &gt;= <span class="hljs-number">44</span>:<br>                   <span class="hljs-keyword">break</span><br>               gift = <span class="hljs-variable language_">self</span>.m[:-<span class="hljs-built_in">len</span>(mask)] + mask<br>               gift = <span class="hljs-built_in">pow</span>(bytes_to_long(gift),<span class="hljs-variable language_">self</span>.e,<span class="hljs-variable language_">self</span>.n)<br>               <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">hex</span>(gift)[<span class="hljs-number">2</span>:].encode())<br>               <span class="hljs-keyword">continue</span><br>           <span class="hljs-variable language_">self</span>.request.close()<br>           <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>题目一开始，会给出$n$的值(此处相关的题目代码省略了)，$e&#x3D;65537$为固定值</p><p>从代码中我们可以知道：这是一个很明显的RSA题目，flag的长度是$44$位，每当我们输入一个$16$进制数，系统会用解密函数对这个数字进行解密，如果超过flag的长度$44$位直接推出交互。否则将答案的最后替换为解密结果之后加密计算$c’$</p><p>很显然，对于每次交互的内容，我们必须<del>慎重考虑</del>。 根据通识可知：flag的最后一位一定是<code>&#125;</code>,，其ASCII码为$125$。所以我们可以先对服务器发送数值$125$通过加密后的数字（以$16$进制格式）发送给服务器，这样我们就得到了正确的$c$值了</p><p>得到正确的$c$值之后，我们可以每次枚举字符串的前一位，加密后发送给服务器，如果服务器返回的值与刚才得到的正确的$c$值完全一致，那么我们就认为这一位是正确的（因为这样相当于原密文没有被替换）。枚举结束我们就得到了flag</p><p>下面附上<del>低清有码</del>的脚本代码，别看<del>因为我可菜了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16len,s64len</span>):<br>LTSNMS=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP\mathrm&#123;QR&#125;STUVWXYZ0123456789&quot;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16len)==<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64len)==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">if</span> sha256((i1+i2+i3+i4+s16len).encode()).hexdigest()==s64len:<br><span class="hljs-keyword">return</span> i1+i2+i3+i4<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">incode</span>(<span class="hljs-params">m,p</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">pow</span>(m,<span class="hljs-number">65537</span>,p))[<span class="hljs-number">2</span>:]<br><span class="hljs-comment">##------main below------#</span><br>sh=remote(<span class="hljs-string">&quot;49.235.239.97&quot;</span>,<span class="hljs-number">10004</span>)<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">if</span>(str1[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]==<span class="hljs-string">&quot;sha256&quot;</span>):<br><span class="hljs-keyword">break</span><br>flag=<span class="hljs-string">&quot;&#125;&quot;</span><br>yanzhengma=(getyanzhengma(str1[<span class="hljs-number">12</span>:<span class="hljs-number">28</span>],str1[<span class="hljs-number">33</span>:<span class="hljs-number">97</span>]))<br>sh.send(yanzhengma)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[NOTE]SENT YANZHENGMA&quot;</span>)<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>n=<span class="hljs-built_in">int</span>(str1[<span class="hljs-number">18</span>:],<span class="hljs-number">16</span>) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>str1=sh.recv(numb=<span class="hljs-number">4</span>,timeout=<span class="hljs-number">20000</span>)<br>sh.send(<span class="hljs-string">b&quot;1&quot;</span>)<br>str1=sh.recv(numb=<span class="hljs-number">40</span>,timeout=<span class="hljs-number">20000</span>)<br>sh.send(incode(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>),n))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sent numbers&quot;</span>)<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>C=<span class="hljs-built_in">int</span>(str1,<span class="hljs-number">16</span>)<br>cnt=<span class="hljs-number">42</span><br><span class="hljs-keyword">while</span> cnt!=-<span class="hljs-number">1</span>:<br><span class="hljs-comment">#print(cnt)</span><br>konst=<span class="hljs-string">b&quot;1234567890abcdefxGame&#123;-&#125;&quot;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> konst:<br>tmp=<span class="hljs-built_in">str</span>(j)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>str1=sh.recv(numb=<span class="hljs-number">4</span>,timeout=<span class="hljs-number">20000</span>)<br>sh.send(<span class="hljs-string">b&quot;1&quot;</span>)<br>str1=sh.recv(numb=<span class="hljs-number">44</span>,timeout=<span class="hljs-number">20000</span>)<br>sh.send(incode(bytes_to_long(tmp+flag),n))<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>C1=<span class="hljs-built_in">int</span>(str1,<span class="hljs-number">16</span>)<br><span class="hljs-keyword">if</span> C1==C:<br>flag=tmp+flag<br><span class="hljs-built_in">print</span>(flag)<br>cnt=cnt-<span class="hljs-number">1</span><br><span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="2-ElGamal"><a href="#2-ElGamal" class="headerlink" title="2.ElGamal"></a>2.ElGamal</h3><p>密码学压轴题&#x3D; &#x3D;，虽然不是远程题目但是最难的。代码量不大但思维量很大，因为这道题与数论联系极其紧密。<del>虽然我以前打过OI，但学得不深，更别谈既有OI基础又有数学竞赛基础的Hermesdalao相比了。所以我在得到1..hint之后，才做了出来</del>。由于这题很难所以WP<del>(自己的学习笔记)</del>要认真地写一下。<br><strong>我们约定一下:以下凡无特殊说明，所有的数字均为整数，所有的除法均为整除</strong></p><hr><h4 id="Note-1-ElGamal基本加密方法"><a href="#Note-1-ElGamal基本加密方法" class="headerlink" title="Note 1:ElGamal基本加密方法"></a>Note 1:ElGamal基本加密方法</h4><p>step1：选择一个大质数$p$，和集合$Z_p^*$上的一个生成元$g$</p><p>step2：选择一个数字$k$在$[0,p-2]$内，计算$y&#x3D;g^k \mod p$，也就是$g^k\equiv y \mod p$</p><p>step3：随机选取$r∈Z_{p-1}$，加密函数为$E(k,x,r)&#x3D;(y_1,y_2)$ 其中$y_1\equiv g^r \mod p$，$y_2\equiv my^r \mod p$</p><p>其中：$k$是私钥，$p,g,y$是公钥</p><hr><h4 id="Note-2-ElGamal基本解密方法"><a href="#Note-2-ElGamal基本解密方法" class="headerlink" title="Note 2:ElGamal基本解密方法"></a>Note 2:ElGamal基本解密方法</h4><p>解密函数：$D(y_1,y_2)&#x3D;y_2(y_1^k) \mod p \equiv m(g^k)^r(g^{kr})^{-1}\equiv m \mod p$</p><hr><p>很显然，ElGamal是一个基于离散对数的加密算法，想求出私钥$k$基本上是不可能的，目前最有效爆破离散对数的算法的复杂度为$O(\sqrt{p})$，但对于高达$512$位二进制数的大质数$p$，这个算法复杂度是非常高的。</p><p><strong>根据西电大佬shallow在MOECTF的《Crypto入门指北》中所说：CTF中所有的密码学题目都是通过有漏洞的加密方式实现的。重点就是要从中找出漏洞，并且在没有密钥的情况下恢复明文。</strong></p><p>所以，我们回归一下题目实现算法的源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> ElGamal<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">notSquare</span>(<span class="hljs-params">p</span>):<br>    r = randint(<span class="hljs-number">2</span>, p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">pow</span>(r, (p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, p) == <span class="hljs-number">1</span>:<br>        r = randint(<span class="hljs-number">2</span>, p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> r<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Square</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(randint(<span class="hljs-number">2</span>, p-<span class="hljs-number">2</span>), <span class="hljs-number">2</span>, p)<br>flag = <span class="hljs-built_in">bin</span>(bytes_to_long(flag.encode()))[<span class="hljs-number">2</span>:]<br>key = ElGamal.generate(<span class="hljs-number">512</span>, Random.new().read)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    plaintexts = &#123;<span class="hljs-string">&quot;0&quot;</span>: Square(<span class="hljs-built_in">int</span>(key.p)), <span class="hljs-string">&quot;1&quot;</span>: notSquare(<span class="hljs-built_in">int</span>(key.p))&#125;<br>    c = key._encrypt(plaintexts[i], randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(key.p)-<span class="hljs-number">2</span>))<br>    f.writelines(<span class="hljs-built_in">hex</span>(c[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot;, &quot;</span>+<span class="hljs-built_in">hex</span>(c[<span class="hljs-number">1</span>])[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot;\n&quot;</span>)<br>f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y =&quot;</span>, key.y)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, key.g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, key.p)<br></code></pre></td></tr></table></figure><p>密文先被转化成了二进制，然后根据每一位是$0$还是$1$，用一个数字加密了，其中当这一位为$0$时选取的数字是个平方数对$p$取模的值，这一位是$1$时选取的数字不是一个平方数对$p$取模的值。然后将这个数字记为中间密文$x$，再产生一个随机数$r$作为指数将其加密。</p><p>既然这里涉及到了平方，而一个完全平方数对某个数取模一定会有某些特殊的性质，<del>在hint的指引下</del>，我们来看看什么叫做模$p$平方剩余和二次互反律：<strong>注:本题解&#x2F;博客只讲解归纳法得到的性质，不讲解证明是<del>因为我也不会，实际上是因为懒</del></strong></p><hr><h4 id="Note-3-模-p-平方剩余"><a href="#Note-3-模-p-平方剩余" class="headerlink" title="Note 3:模$p$平方剩余"></a>Note 3:模$p$平方剩余</h4><p>我们都知道：$3^2 \equiv 2 \mod 7$，所以$∃ x\in Z_7^*$，使得$x^2\equiv 2 \mod 7$有解，此时我们称$2$是模$7$的二次剩余</p><p><strong>性质1：很显然在普通的一元二次方程中，$x^2&#x3D;a^2$有两解$a$和$-a$，所以解方程$x^2\equiv 2 \mod 7$也有两解为$3$和$-3$（也就是$4$，因为$-3 \equiv 4 \mod7$）。由此可见$x^2\equiv (p-x)^2 \mod p$(直接展开即可证明其正确性)</strong></p><p>我们可以继续看：在$Z_7^*$里面的$6$个数的平方分别为$1,4,2,2,4,1$。所以$1,2,4$是模$7$意义下的二次剩余，$3,5,6$不是模$7$的二次剩余</p><p><em><em>性质2：可以证明，对于任何质数$p$，在$Z_p^</em>$中，总是有一半的数是模$p$的二次剩余，也总有一半的数为模$p$的二次非剩余</em>*</p><p>我们记$\mathrm{\mathrm{QR}}$为二次剩余，$\mathrm{\mathrm{NR}}$为二次非剩余，在模$7$意义下，$\mathrm{QR}&#x3D;{1,2,4},\mathrm{NR}&#x3D;{3,5,6}$。观察下列等式，我们可以得到性质3</p><p>（1）$2×4\equiv 1 \mod 7$   (2)$3×4\equiv 5 \mod 7$   (3)$3×5\equiv 1 \mod 7$</p><p><strong>性质3：$\mathrm{QR}×\mathrm{QR}&#x3D;\mathrm{QR}$,$\mathrm{QR}×\mathrm{NR}&#x3D;\mathrm{NR}$,$\mathrm{NR}×\mathrm{NR}&#x3D;\mathrm{QR}$</strong></p><p>所以，我们可以类比$1$和$-1$两个数，将$\mathrm{\mathrm{QR}}$理解成$1$，$\mathrm{\mathrm{NR}}$理解成$-1$，</p><p>所以我们引入勒让德符号$(\frac{a}{b})$，意义为$a$是否为模$b$意义下的二次剩余，如果是，该值为$1$，如果不是，该值为$-1$</p><p>例如：$(\frac{4}{7})&#x3D;1,(\frac{3}{7})&#x3D;-1$</p><p><strong>性质4：根据性质2，3中的结论，我们可以推出以下公式$(\frac{ab}{p})&#x3D;(\frac{a}{p})(\frac{b}{p})$</strong></p><p>由于任何一个数都可以写成几个质数乘方的乘积，而多数情况下我们只研究$a,b$均为奇数的情况，所以我们需要进一步研究几个性质</p><hr><h4 id="Note-4-两个特殊的数：-1-和-2"><a href="#Note-4-两个特殊的数：-1-和-2" class="headerlink" title="Note 4:两个特殊的数：$-1$和$2$"></a>Note 4:两个特殊的数：$-1$和$2$</h4><p>观察以下式子，我们可以得出性质5和性质6</p><p>$(\frac{-1}{3})&#x3D;-1$ ，$(\frac{-1}{5})&#x3D;1$，$(\frac{-1}{7})&#x3D;-1$，$(\frac{-1}{11})&#x3D;-1$ $(\frac{-1}{13})&#x3D;1$ $(\frac{-1}{17})&#x3D;1$，$(\frac{-1}{19})&#x3D;-1$</p><p>$(\frac{2}{3})&#x3D;-1$，$(\frac{2}{5})&#x3D;-1$，$(\frac{2}{7})&#x3D;1$，$(\frac{2}{11})&#x3D;-1$，$(\frac{2}{13})&#x3D;-1$，$(\frac{2}{17})&#x3D;1$，$(\frac{2}{19})&#x3D;-1$</p><p><strong>性质5：对于质数$p$，若$p\equiv 1 \mod 4$,则$(\frac{-1}{p})&#x3D;1$。若$p\equiv 3\mod 4$,则$(\frac{-1}{p})&#x3D;-1$ (在模$4$意义下，$3$可以理解成$-1$)</strong></p><p><strong>性质6：对于质数$p$，若$p\equiv 1 \mod 8$,或者$p\equiv 7 \mod 8$，有$(\frac{-1}{p})&#x3D;1$。若$p\equiv 3\mod 8$或者$p\equiv 5 \mod 8$,则$(\frac{-1}{p})&#x3D;-1$</strong></p><hr><h4 id="Note-5：二次互反律"><a href="#Note-5：二次互反律" class="headerlink" title="Note 5：二次互反律"></a>Note 5：二次互反律</h4><p>性质4可以进行推广到多个整数相乘，可以验证$(\frac{70}{41})&#x3D;(\frac{2}{41})(\frac{5}{41})(\frac{7}{41})$。所以我们在面对较大整数的时候，可以使用因式分解。然而面对特别大的整数的时候，<del>你想想这真的可行?RSA怎么解释？</del></p><p>类比欧几里得算法，由于$\gcd(a,b)&#x3D;\gcd(b,a)$，所以我们能不能尝试交换一下符号中的分子和分母<del>(姑且这么说吧，实际上是很不规范的说法)</del>，看看里面的性质呢？</p><p><del>此处不多介绍，自己找几个数字归纳归纳吧，直接放上结果</del>,$m,k\in Z$</p><p>**性质7：$(\frac{4k+1}{4m+1})&#x3D;(\frac{4m+1}{4k+1})$ ， $(\frac{4k+3}{4m+1})&#x3D;(\frac{4m+1}{4k+3})$ ， $(\frac{4k+3}{4m+3})&#x3D;-(\frac{4m+3}{4k+3})$ **</p><p>也就是说，两个数字如果都模$4$等于$3$时，交换分子分母要变号，否则可以直接交换,此处这里的两个奇数可以无所谓是质数还是合数，只要是奇数就行了,如果为偶数，分解出所有的$2$因子</p><p>举个例子，假如我们要计算$(\frac{37603}{48611})$，我们可以这样做：</p><p>$(\frac{37603}{48611})&#x3D;-(\frac{48611}{37603})&#x3D;-(\frac{11008}{37603})&#x3D;-(\frac{2^8×43}{37603})&#x3D;-(\frac{43}{37603})&#x3D;(\frac{37603}{43})&#x3D;(\frac{21}{43})&#x3D;(\frac{43}{21})&#x3D;(\frac{1}{21})&#x3D;1$</p><p>约定$(\frac{1}{p})\equiv 1$</p><hr><p>讲了这么多性质，我们可以得到这样的判断代码：<strong>很短，但是技术含量非常高</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        x=x//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        _tmp=p<br>        p=x<br>        x=_tmp<br>        <span class="hljs-keyword">if</span> x%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br></code></pre></td></tr></table></figure><p>我们发现：这道题的$y$和$g$都是$p$的二次剩余！根据$y_1\equiv g^r \mod p$，$y_2\equiv my^r \mod p$，$D(y_1,y_2)&#x3D;y_2(y_1^k)$和性质 3 可知：这里的$m$就是明文，所以我们只要判断一下<code>isqr(y1,p)*isqr(y2,p)</code>的值是$1$还是$-1$，就可以知道明文是否为二次剩余值，然后就可以判断那一位是$0$还是$1$了。</p><p>下面放上所有的代码，我们发现给出来了$350$组数字，可以判断最前面缺了$2$位$00$,flag一共是$44$位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> g,p,y<br><span class="hljs-keyword">from</span> c0s <span class="hljs-keyword">import</span> c0<br><span class="hljs-keyword">from</span> c1s <span class="hljs-keyword">import</span> c1<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqr</span>(<span class="hljs-params">x,p</span>):<br>    <span class="hljs-keyword">if</span> p==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    sgn=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        x=x//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> p%<span class="hljs-number">8</span>==<span class="hljs-number">5</span>:<br>            sgn=-sgn<br>    <span class="hljs-keyword">if</span> x&lt;p:<br>        _tmp=p<br>        p=x<br>        x=_tmp<br>        <span class="hljs-keyword">if</span> x%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> <span class="hljs-keyword">and</span> p%<span class="hljs-number">4</span>==<span class="hljs-number">3</span> :<br>            sgn=-sgn<br>    <span class="hljs-keyword">return</span> sgn*isqr(x%p,p)<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">350</span>):<br>    a=isqr(c0[i],p)*isqr(c1[i],p)<br>    <span class="hljs-keyword">if</span> a==<span class="hljs-number">1</span>:<br>        s+=<span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-keyword">elif</span> a==-<span class="hljs-number">1</span>:<br>        s+=<span class="hljs-string">&quot;1&quot;</span><br>s=<span class="hljs-string">&quot;00&quot;</span>+s<br>t=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>    t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(s[<span class="hljs-number">8</span>*i:<span class="hljs-number">8</span>*i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><hr><h4 id="Note-6：解出题目之后的一些思考："><a href="#Note-6：解出题目之后的一些思考：" class="headerlink" title="Note 6：解出题目之后的一些思考："></a>Note 6：解出题目之后的一些思考：</h4><p>这道题$y$是$p$二次剩余,$g$也是二次剩余，所以这道题有很多性质可以利用。试想一下，假如$y$不是$p$的二次剩余又会是怎样一种情况呢？</p><p>在Am473ur师傅的启发下，我得出了这样的结论：</p><p>当$y$不是$p$的二次剩余时，说明$g$必定不是$p$的二次剩余，根据$g^k\equiv y \mod p$可知，这里的$k$必定是一个奇数。</p><p>所以，根据之前的加密函数$D(y_1,y_2)&#x3D;y_2(y_1^k) \mod p \equiv m(g^k)^r(g^{kr})^{-1}\equiv m \mod p$，简单思考，我可以得到这样的结果：</p><p>$y&#x3D;\mathrm{NR}$时：</p><p>若$y_1&#x3D;\mathrm{NR},y_2&#x3D;\mathrm{NR}\Rightarrow m&#x3D;\mathrm{QR}$</p><p>若$y_1&#x3D;\mathrm{NR},y_2&#x3D;\mathrm{QR}\Rightarrow m&#x3D;\mathrm{NR}$</p><p>若$y_1&#x3D;\mathrm{QR},y_2&#x3D;\mathrm{NR}\Rightarrow m&#x3D;\mathrm{NR}$</p><p>若$y_1&#x3D;\mathrm{QR},y_2&#x3D;\mathrm{QR}\Rightarrow m&#x3D;\mathrm{QR}$</p><p>所以，无论$y$是何值，只要求出$(\frac{y_1}{p})(\frac{y_2}{p})$的值，这就是$(\frac m p)$的勒让德符号了。</p><hr><p><strong>目前，自己的《深入浅出密码学》还剩下第5、10、11、12、13五章没来得及看，这五章可以快速地浏览一遍各种新的加密算法，CTFWIKI上也有很多有用的资源值得被我利用，预计11月10日大概能够把这本书结束<del>（11月的SET4和CET4压力还是有点大的，虽然学长们告诉我SET4和CET4很简单，不过我还是希望SET4能够拿到B，CET4考到470分以上），并且后面还要去ACM那边玩玩。</del></strong></p><p><strong>当《深入浅出密码学》看完之后，就得开始学习数学知识了，前者告诉你一些基本加密算法，后面就要找各类算法给出的性质，这样才能找到漏洞~解决问题</strong></p><p><strong>huangx607087学习CTF第1阶段，结束。第2阶段，开始</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PRNG MT Notes</title>
    <link href="/2020/10/26/MT/"/>
    <url>/2020/10/26/MT/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087关于PRNG-MT-的学习笔记"><a href="#huangx607087关于PRNG-MT-的学习笔记" class="headerlink" title="huangx607087关于PRNG MT 的学习笔记"></a>huangx607087关于PRNG MT 的学习笔记</h1><h2 id="0x00-博客背景"><a href="#0x00-博客背景" class="headerlink" title="0x00 博客背景"></a>0x00 博客背景</h2><p> 9月25日做出的0xCTF上的PRNG2，不过那道题源码不小心被我删掉了Orz，一个月后会回顾一下之前的笔记，记录自己当时的学习过程</p><h2 id="0x01-MT简介"><a href="#0x01-MT简介" class="headerlink" title="0x01 MT简介"></a>0x01 MT简介</h2><p>梅森旋转(Mersenne Twister)是一个PRNG伪随机数发生算法，基于有限二进制字段上的矩阵递归<del>（反正我也不懂）</del>，周期高达$2^{17399}-1$</p><p>步骤：<br>1.获得基础的梅森旋转链<br>2.对于旋转链进行旋转算法<br>3.对于旋转算法所得结果进行处理<br>注:该算法的实现过程中参数的选取主要取决于梅森素数</p><p>涉及变量：<br>$w$ ：加密长度，以bit为单位，$w$位整数。<br>$n$ ：递归长度<br>$m$：周期参数，用于第三阶段的偏移量<br>$a$：旋转矩阵的参数<br>$r$：低位掩码，即低位要提取的位数<br>$f$：初始化旋转链所需参数<br>$b,c$：TGFSR的掩码<br>$s,t$：TGFSR的位移量<br>$u,d,l$ 额外的梅森旋转所需要的掩码和位移量</p><h2 id="0x02-加密方法"><a href="#0x02-加密方法" class="headerlink" title="0x02 加密方法"></a>0x02 加密方法</h2><p>1.初始化，将传入的seed值赋值给$ MT_0 $作为初值，并递推得到旋转链<br>递推式：$MT_i&#x3D;f×(MT_{i-1})$ xor $((MT_{i-1})&gt;&gt;(w-2))+i$</p><p>2.执行旋转算法<br>连接$MT_{i}$的高$w-r$位和$MT_{i+1}$的低$r$位，若这个组合后的二进制数末位为$0$，将其除以$2$.。否则将这个数除以$2$后再与$a$进行异或。假设我们最终得到的数字为$P$<br>所以我们的递推式为$MT_i&#x3D;MT_{i+m}$ xor $P$</p><p>3.对于旋转算法所得结果进行处理：<br>设$x$为该序列下一个值，$y$是一个临时的中间变量，$z$是算法返回值<br>以下为处理过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">y=x <span class="hljs-built_in">xor</span>((x&gt;&gt;u)&amp;d)<br>y=y <span class="hljs-built_in">xor</span>((y&lt;&lt;s)&amp;b)<br>y=y <span class="hljs-built_in">xor</span>((y&lt;&lt;t)&amp;c)<br>z=y <span class="hljs-built_in">xor</span>(y&gt;&gt;l)<br></code></pre></td></tr></table></figure><h2 id="0x03-解密方法"><a href="#0x03-解密方法" class="headerlink" title="0x03 解密方法"></a>0x03 解密方法</h2><p><strong>解密关键：求出一个周期内的全部内容，然后就可以顺推得出前面所有的情况了</strong></p><p>逆向处理。加密一共$4$步，都是异或运算，所以我们可以写出逆算法</p><p>我们先来看看加密的最后一步：<code>z=y xor (y&gt;&gt;l)</code>，很显然，这一操作时不影响$y$的最高$l$位的，所以$z$的最高$l$位就是$y$的最高$l$位，我们可以通过$y&gt;&gt;l$的高$2l$位（最高$l$位全是$0$），从而我们可以得到$y$的$2l$位，进而得到$y&gt;&gt;l$的高$3l$位…….</p><p>上面的可能有点抽象，在此举个例子：</p><p>$y&#x3D;10110110_b,t&#x3D;10011011_b,l&#x3D;2,y&#x2F;4&#x3D;00101011_b$（已知量只有$t,l$）</p><p>根据$t$的高$2$位，我们知道$y$的高$2$位为$10_b$，我们可以得到$y&#x2F;4$的高$4$位为$0010_b$，由于$y$的高$4$位异或$y&#x2F;4$的高$4$位可以得到$t$的高$4$位，所以$y$的高$4$位可以算出来,进而我们就可以算法出$y$的高$6$位了……</p><p>这样，我们就可以把第4步逆出来了。</p><p>关于逆出第3步，$y_1&#x3D;y$ xor$((y&lt;&lt;t)$&amp;$c)$，我们可以发现：$y_1$的低$t$位就是$y$的低$t$位异或$c$的低$t$位求出来的结果，所以$y_1$的低$t$位与$c$的低$t$位异或以下即为$y$的低$t$位，进而我们可以得到$(y&lt;&lt;t)$的低$2t$位，模仿上面的方法得到$y$的所有位</p><p>第2步和第1步分别于第3步和第4步同理，我们可以直接放上解密脚本<del>（这么好的代码当然不是我这个fw能写出来的）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># right shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right</span>(<span class="hljs-params">res, shift, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &gt;&gt; shift<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-comment"># right shift with mask inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_right_mask</span>(<span class="hljs-params">res, shift, mask, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &gt;&gt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-comment"># left shift inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left</span>(<span class="hljs-params">res, shift, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &lt;&lt; shift<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-comment"># left shift with mask inverse</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse_left_mask</span>(<span class="hljs-params">res, shift, mask, bits=<span class="hljs-number">32</span></span>):<br>    tmp = res<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bits // shift):<br>        tmp = res ^ tmp &lt;&lt; shift &amp; mask<br>    <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">y</span>):<br>    y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>    y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>    y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">y</span>):<br>    y = inverse_right(y,<span class="hljs-number">18</span>)<br>    y = inverse_left_mask(y,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    y = inverse_left_mask(y,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    y = inverse_right(y,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> y&amp;<span class="hljs-number">0xffffffff</span><br><span class="hljs-built_in">print</span>(recover(<span class="hljs-number">0xf1c680f8</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for i in s:</span><br><span class="hljs-string">    print(recover(i))</span><br><span class="hljs-string"></span><br><span class="hljs-string">y = extract_number(o)</span><br><span class="hljs-string">print(&#x27;y=&#x27;,y,&#x27;o=&#x27;,o)</span><br><span class="hljs-string">print(recover(y) == o)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>MT32的一些基本属性：<br>$(w,n,m,r)&#x3D;(32,624,397,31)$<br>$(a,f)&#x3D;(9908B0DF_h,1812433253)$<br>$(u,d,s,b,t,c)&#x3D;(11,FFFFFFFF_h,7,9D2C5680_h,15,EFC60000_h)$<br>$l&#x3D;18$</p><h2 id="0x04-具体题目中分析"><a href="#0x04-具体题目中分析" class="headerlink" title="0x04 具体题目中分析"></a>0x04 具体题目中分析</h2><p><strong>0xCTF PRNG2详解</strong></p><p>首先我们看一下源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;0xCTF&#123;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.state = [seed]+[<span class="hljs-number">0</span>]*<span class="hljs-number">23</span><br>        <span class="hljs-variable language_">self</span>.flag = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.srand()<br>        <span class="hljs-variable language_">self</span>.generateNumbers()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">srand</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">23</span>):<br>            <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] = <span class="hljs-number">1812433253</span> *  (<span class="hljs-variable language_">self</span>.state[i] ^ (<span class="hljs-variable language_">self</span>.state[i] &gt;&gt; <span class="hljs-number">27</span>)) - i<br>            <span class="hljs-variable language_">self</span>.state[i+<span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xffffffff</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateNumbers</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>):<br>            y = (<span class="hljs-variable language_">self</span>.state[i] &amp; <span class="hljs-number">0x80000000</span>) | (<br>                <span class="hljs-variable language_">self</span>.state[(i+<span class="hljs-number">1</span>) % <span class="hljs-number">24</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>            temp = y &gt;&gt; <span class="hljs-number">1</span><br>            temp ^= <span class="hljs-variable language_">self</span>.state[(i + <span class="hljs-number">12</span>) % <span class="hljs-number">24</span>]<br>            <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>                temp ^= <span class="hljs-number">0x9908b0df</span><br>            <span class="hljs-variable language_">self</span>.state[i] = temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getRandomBits</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.flag == <span class="hljs-number">24</span>:<br>            <span class="hljs-variable language_">self</span>.generateNumbers()<br>            <span class="hljs-variable language_">self</span>.flag = <span class="hljs-number">0</span><br>        bits = <span class="hljs-variable language_">self</span>.Next(<span class="hljs-variable language_">self</span>.state[<span class="hljs-variable language_">self</span>.flag])<br>        <span class="hljs-variable language_">self</span>.flag += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> long_to_bytes(bits)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Next</span>(<span class="hljs-params">self, tmp</span>):<br>        tmp ^= (tmp &gt;&gt; <span class="hljs-number">11</span>)<br>        tmp ^= (tmp &lt;&lt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">0x9d2c5680</span><br>        tmp ^= (tmp &lt;&lt; <span class="hljs-number">15</span>) &amp; <span class="hljs-number">0xefc60000</span><br>        tmp ^= (tmp &gt;&gt; <span class="hljs-number">18</span>)<br>        <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">key, char</span>):<br>    key = bytes_to_long(key)<br>    temp = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-built_in">ord</span>(char), <span class="hljs-number">65537</span>, <span class="hljs-number">2</span>**<span class="hljs-number">8</span>-<span class="hljs-number">1</span>) ^ key)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(temp))+temp<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    mt = MT(getRandomNBitInteger(<span class="hljs-number">32</span>))<br>    c = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        c += Encrypt(<span class="hljs-string">b&#x27;&#x27;</span>.join([mt.getRandomBits() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]), flag[i])<br>    <span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>这道题对标准的MT进行一下分析：与标准算法相比，只有$n$的值从$624$变成了$24$。</p><p>然而一个很显然的事实是：<del>我这个密码学fw根本看不懂这么长的代码，怎么办？</del>答案当然是靠输出来调试调试程序究竟是如何运行的。通过加运行可以看到：对于每一位字符，这个处理器会处理$4$次，然而每一次，会对第$4$次求出的结果进行异或。。</p><p>题目给出了一个很长的$c$字符$16$进制字符串，所以我们可以用C++等工具，把字符串$c$分为$8$位一小组(每组刚好是$32$位二进制数)，$4$小组以大组。根据代码调试分析一下，每一大组的最后一个数字与明文对应的字符进行了异或操作，所以对于这$6$个数字来说，我们可以通过Win10自带的计算机(或者手搓)，可以得到异或前的数字，也就是程序最后输出的bytes</p><p>例如：第一行最后一个数为$617d7a88_h$我们可以根据第一个字符为<code>&#39;0&#39;</code>，推断出第一次异或的内容为$30_h$，进而得到异或前的bytes值为$617d7aB8_h$</p><p>根据题目assert内容，我们知道了字符串前$6$位，因此我们可以上脚本考虑恢复原来的寄存器内部的$24$位。</p><p>在这里有一个小细节：$x^{65537} \equiv x\mod 255$.因为$\phi(255)&#x3D;128$，所以根据费马小定理有$x^{65536}\equiv 1\mod 255$，这个结论我们就推出来了。</p><p>把我们分割出来的前$24$个并进行简单处理过的十六进制数代入上面的求逆脚本，我们就可以得到第一组寄存器内的内容了。</p><p>简单地改一下代码初始化部分，删去<code>__init__</code>中的srand和<code>generateNumbers</code>。把初始化的<code>seed</code>参数和主函数中的<code>getRandomNBitInteger(32)</code>删去。然后每次输出<code>mt.getRandomBits()</code>，就可以得到一个个解（推荐$4$个一行，以$16$进制输出）</p><p>如果你是按照推荐的做法做的，我们可以一个一个比对一下(左边为程序输出结果，右边为给出来的数值)，此处为程序输出与给出数值第$7$到第$9$行的比较。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a46e5465</span> <span class="hljs-number">533477</span>c6 <span class="hljs-number">3</span>f7f5649 cc96ec79 | a46e5465 <span class="hljs-number">533477</span>c6 <span class="hljs-number">3</span>f7f5649 cc96ec49<br><span class="hljs-attribute">8bebeb18</span> c6f90a3c <span class="hljs-number">38</span>ff0c8a <span class="hljs-number">0837182</span>e | <span class="hljs-number">8</span>bebeb18 c6f90a3c <span class="hljs-number">38</span>ff0c8a <span class="hljs-number">0837181</span>b<br><span class="hljs-attribute">31ba3fa7</span> efaee340 f9b70a82 a6fafa6f | <span class="hljs-number">31</span>ba3fa7 efaee340 f9b70a82 a6fafa57<br></code></pre></td></tr></table></figure><p>很显然，正如我们预期：最后的一个数字不一样，并且刚好有点略微的差别，这就说明这是个跟某个数异或过的结果，而那个数，恰好就是那一位字符的ASCII码值。我们只需要用C++的<code>freopen</code>提取出两处的第$4$位，然后异或一下就得出结果了(如果你用的C++务必把数值类型设置成<code>unsigned</code>而不是<code>int</code>，不然十六进制中大于等于$80000000_h$会被标记为负数，导致异或结果出错)</p><p>最后异或完成的结果就是flag。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGameDiv3</title>
    <link href="/2020/10/22/0xGameDiv3/"/>
    <url>/2020/10/22/0xGameDiv3/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame-Div-3-题解"><a href="#0xGame-Div-3-题解" class="headerlink" title="0xGame Div 3 题解"></a>0xGame Div 3 题解</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>第三周，密码学难度还可以，前2题难度不大，第3题难度有点大，不过还是能够用一天的时间切出来了。不过第三周结束还没有到达到7000分，<del>第一周就有很多全栈大佬7000了，我还没他们1&#x2F;3的效率高。</del>看来奖励拿不到了。。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-signinRSA"><a href="#1-signinRSA" class="headerlink" title="1. signinRSA"></a>1. signinRSA</h3><p>这道题看到时签到题，读了一下代码，这跟上一周的<strong>parityOracle</strong>竟然有$99$%的相似。</p><p>不多说，直接复制上周写好的脚本 ,改一下nc地址，把上周脚本的倒数第$8$行的<code>recnum=int(recnum[-1])</code>改为<code>recnum=int(recnum[-1],16)</code>，然后把倒数第$7$行和倒数第$5$行的对recnum的判断加上%$4$操作（如下），直接运行，几分钟就出结果了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> recnum%<span class="hljs-number">4</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> recnum%<span class="hljs-number">4</span>==<span class="hljs-number">3</span>:<br>L=M+<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> recnum%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> recnum%<span class="hljs-number">4</span>==<span class="hljs-number">2</span>:<br>R=M-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2-easyRSA"><a href="#2-easyRSA" class="headerlink" title="2.easyRSA"></a>2.easyRSA</h3><p>先看一下题目的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag.encode())<br>e = <span class="hljs-number">65537</span><br>p, q = getPrime(<span class="hljs-number">1024</span>), getPrime(<span class="hljs-number">1024</span>)<br>d = inverse(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>x = <span class="hljs-number">11</span>*d+<span class="hljs-number">7</span>*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m, e, p*q)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, p*q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>, x)<br><span class="hljs-comment">## 给出部分略</span><br></code></pre></td></tr></table></figure><p>题目给出了$n,c,x$的值（当然也有$e&#x3D;65537$），其中$x&#x3D;11d+7\phi$ ，所以这道题不同寻常之处就是给出了$x$,故突破口在x处。</p><p>通过之前RSA中相关知识可知：$d$ 是$e$在模$\phi$意义下的乘法逆元，也就是$ed \equiv 1 \mod \phi$ 。而由于$p,q$均为质数，所以$\phi&#x3D;(p-1)(q-1)$</p><p>既然题目给出$x&#x3D;11d+7phi$ ，而$d,phi$均为未知量。所以根据方程校园思想，我们可以两边同乘$d$，得到$ex&#x3D;11de+7e \phi$ 。这个式子对$\phi$取模之后，我们可以得到$ex \equiv 11 \mod \phi$，这时候这个式子仅剩下一个未知数，所以我们可以提出$\phi$ ，得到$k\phi&#x3D;ex-11$</p><p>在$\phi&#x3D;(p-1)(q-1)&#x3D;pq-p-q+1&#x3D;n-p-q+1$，由于$p,q$均为$1024$位，$n$为$2047$位，远远大于$p+q$。故$\phi$的二进制位数跟$n$应该基本是一样的，计算可知，$phi$是$2068$位，所以$k$应当是$21$位或者$22$位，也就是$k∈[2^{21},2^{22})$。</p><p>我们用以下脚本枚举$k$，然后直接进行<code>long_to_bytes</code> 的操作，虽然有大概$50$多组解，然而最像flag的只有一组，故我们就得到了flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> given <span class="hljs-keyword">import</span> n,x,e,c<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">T</span>):<br>    tot=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">20</span>,<span class="hljs-number">2</span>**<span class="hljs-number">22</span>):<br>        <span class="hljs-keyword">if</span> T%i==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> T//i%<span class="hljs-number">2</span>^<span class="hljs-number">1</span> :<br>            P=T//i<br>            d=inverse(e,P)<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br>T=e*x-<span class="hljs-number">11</span><br>solve(T)<br><br></code></pre></td></tr></table></figure><h3 id="3-paddingOracle"><a href="#3-paddingOracle" class="headerlink" title="3. paddingOracle"></a>3. paddingOracle</h3><p>又是一道Oracle，想到上一条Oracle我搞了好久&#x3D; &#x3D;。果然，上题12小时，还没人做出来。上题18小时后，才有人拿一血。<del>我就比较逊了。上题35小时才把2血拿到。感觉后面密码学题目会越来越难的样子，awsl</del></p><p>简单地看了一下相关资料，<del>然而本人太菜，连书都看不懂</del>，最后摸索了12小时才搞懂题目意思，就让我用<del>简洁</del>的语言讲一下这道题的意思吧</p><p>首先，服务器会给你一个长度为$32$位的$16$进制数为初始向量，然后再给你$32k$个$16$进制数为密文（本题中$k&#x3D;3$，也就是一共$96$位）。有些题目它直接给你一个$32(k+1)$位的$16$进制数，这个时候就默认最前面$32$位为初始向量，后面的$32k$位作为密文。</p><p>得到初始向量后，将密文分为$k$组，每组$32$位。记初始向量为$I_0$,后面的密文组为$I_1,I_2,I_3,…,I_k$</p><p>这个时候，我们还需要$3$个$16$位数组：$Clc$、$Tlc$和$Alc$，分别用于存储每一次解密的枚举值、中间值和破解出来的明文</p><p>第一轮枚举，我们枚举$Clc$最后一个数字也就是$Clc_{15}$，当服务器返回success时，计算$Tlc_{15}&#x3D;Clc_{15}$xor$1$的值，然后轮数进入第二轮，用$Tlc_{15}$更新$Clc_{15}$,也就是$Clc_{15}&#x3D;Tlc_{15}$ xor $2$。</p><p>需要注意的是：第$p$轮枚举，我们枚举的值是$Clc_{16-p}$,用$Clc_{16-p}$更新$Tlc_{16-p}$为$Clc_{16-p}$ xor $p$，然后轮数进入$p+1$，这时<strong>我们需要用$Tlc_{16-p}$及其以后所有解出来的$Tlc$去改变所有已知的$Clc$值，也就是把后面所有的$Clc$改为 $Tlc$ xor $p+1$<strong>。换句话讲就是说</strong>$Tlc$解出来之后永远不能变，$Clc$每一次解出来以后会被不断更新。$Clc$更新$Tlc$,只更新最新解出来的一位，$Tlc$更新$Clc$，需要更新解出来的所有$Clc$内容</strong></p><p>上面的解释可能比较抽象，那我就用下面的例子来解释一下吧(数字下标$h$表示$16$进制，也就是$14_h$的真实值为十进制的$20$：</p><p><strong>Round 0</strong></p><p>初始状态：</p><p>$Clc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]_h$</p><p>$Tlc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]_h$</p><p><strong>Round 1(枚举 $Clc_{15}$ )</strong></p><p>第$1$轮，我们枚举$Clc_{15}$的值，假设我们枚举到$Clc_{15}&#x3D;78_h$的时候服务器发回Success</p><p>那么此时：$Clc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$78$</font>]$_h$</p><p>用$Clc_{15}$更新$Tlc_{15}$，$Tlc_{15}&#x3D;Clc_{15}$ xor $1$（轮数）$&#x3D;79_h$</p><p>$Tlc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$79$</font>]$_h$</p><p><strong>Round 2(枚举$Clc_{14}$ )</strong></p><p>然后进入第$2$轮，我们首先得更新一下$Clc_{15}$的值为$Tlc_{15}$ xor $2&#x3D;7B_h$</p><p>此时$Clc$发生了变化：$Clc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$7B$</font>]$_h$</p><p>然后我们枚举$Clc_{14}$的值，假如我们枚举到$Clc_{14}&#x3D;52_h$时服务器返回Success</p><p>那么此时：$Clc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$52$</font>$,7B]_h$</p><p>用$Clc_{14}$更新$Tlc_{14}$，$Tlc_{14}&#x3D;Clc_{14}$ xor $2$（轮数）$&#x3D;50_h$</p><p>此时的$Tlc$：$Tlc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$50$</font>$,79]_h$</p><p><strong>Round 3(枚举$Clc_{13}$)</strong></p><p>进入第$3$轮，此时一个易错点（敲黑板）出现了：<strong>由于此时已经出来了$Clc_{14}$和$Clc_{15}$，第$3$轮异或值为$3$，所以我们要对$Clc_{14}$和$Clc_{15}$都进行异或$3$的操作</strong></p><p>此时：$Clc&#x3D;[00,00,00,00,00,00,00,00,00,00,00,00,00,00,$<font color="red">$53,78$</font>$]_h$,<strong>两位都进行了更新</strong></p><p>所以以上操作就是我们所讲的：$Clc$更新$Tlc$ 只更新这次解出来的<strong>一位</strong>，而$Tlc$更新$Clc$，需要更新$Clc$中已经解出来的<strong>所有</strong>$Clc$值</p><p>$16$个$Tlc$解出来后，本轮$Alc$就等于$Tlc$ xor $I_{m-1}$($m$为第$m$解密)。然后重新初始化，进行下一大轮的解密。$k$轮解密结束，我们就得到了所有的明文了（注意过滤掉里面的无关字符）</p><p><del>这个该死的脚本写了我98行，7个子函数。还是比较烦人的</del>。因为一开始没规划好导致一会用$16$位数组（每个正数不超过$255$），一会用$32$位数组（每个正数不超过$15$）。虽然写起来简单，但还是<del>减少了代码的可读性</del>，究其原因，只有一个：<del>作为密码学废物的我太菜了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16len,s64len</span>):<br>LTSNMS=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16len)==<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64len)==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">if</span> sha256((i1+i2+i3+i4+s16len).encode()).hexdigest()==s64len:<br><span class="hljs-keyword">return</span> i1+i2+i3+i4<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Transnbs</span>(<span class="hljs-params">s</span>):<br>T=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>T[i]=<span class="hljs-built_in">int</span>(s[<span class="hljs-number">2</span>*i:<span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br><span class="hljs-keyword">return</span> T<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Transstr</span>(<span class="hljs-params">x32</span>):<br>Cmb=<span class="hljs-string">b&quot;&quot;</span><br>Qld=<span class="hljs-string">b&quot;0123456789abcdef&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>Cmb+=Qld[x32[i]]<br><span class="hljs-keyword">return</span> Cmb<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">x32tox16</span>(<span class="hljs-params">x32</span>):<br>X16=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>X16[i]=x32[<span class="hljs-number">2</span>*i]*<span class="hljs-number">16</span>+x32[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]<br><span class="hljs-keyword">return</span> X16<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">x16tox32</span>(<span class="hljs-params">x16</span>):<br>X32=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>X32[<span class="hljs-number">2</span>*i]=x16[i]//<span class="hljs-number">16</span><br>X32[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>]=x16[i]%<span class="hljs-number">16</span><br><span class="hljs-keyword">return</span> X32<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findtwonum</span>(<span class="hljs-params">x32,loc,sender,Strcchp</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You are entered&quot;</span>)<br>S32=x32<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>S32[<span class="hljs-number">2</span>*loc]=i//<span class="hljs-number">16</span><br>S32[<span class="hljs-number">2</span>*loc+<span class="hljs-number">1</span>]=i%<span class="hljs-number">16</span><br>Te=Transstr(x32)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>Info1=sender.recvline(keepends=<span class="hljs-literal">False</span>)<br>Info1=sender.recv(numb=<span class="hljs-number">44</span>,timeout=<span class="hljs-number">20000</span>)<br>sender.send(<span class="hljs-string">b&quot;1&quot;</span>)<br>Info1=sender.recv(numb=<span class="hljs-number">44</span>,timeout=<span class="hljs-number">20000</span>)<br>sender.send(Te)<br>Info1=sender.recv(numb=<span class="hljs-number">44</span>,timeout=<span class="hljs-number">20000</span>)<br>sender.send(Strcchp)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(Te)==<span class="hljs-number">32</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(Strcchp)==<span class="hljs-number">32</span><br>R=sender.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">if</span>(R[:<span class="hljs-number">4</span>]==<span class="hljs-string">&quot;succ&quot;</span>):<br><span class="hljs-keyword">return</span> S32<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Decrypt1</span>(<span class="hljs-params">iiv,cchp,Strcchp,sender</span>):<br>Cel=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>Tlc=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>Alc=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>cnt,Rnd=<span class="hljs-number">15</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span>(cnt+<span class="hljs-number">1</span>):<br>Cel=findtwonum(Cel,cnt,sender,Strcchp)<br>Clc=x32tox16(Cel)<br>Tlc[<span class="hljs-number">16</span>-Rnd]=Rnd^Clc[<span class="hljs-number">16</span>-Rnd]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Tlc=&#x27;</span>,Tlc)<br>Rnd+=<span class="hljs-number">1</span><br>cnt-=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Rnd-<span class="hljs-number">1</span>):<br>Clc[<span class="hljs-number">15</span>-i]=Tlc[<span class="hljs-number">15</span>-i]^Rnd<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Tlc xor&#x27;</span>,Rnd,<span class="hljs-string">&#x27;=&#x27;</span>, Clc)<br>Cel=x16tox32(Clc)<br><span class="hljs-built_in">print</span>(Transstr(Cel))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>Alc[i]=iiv[i]^Tlc[i]<br><span class="hljs-keyword">return</span> Alc<br><span class="hljs-comment">#--------MAIN BELOW---------#</span><br>sh=remote(<span class="hljs-string">&quot;49.235.239.97&quot;</span>,<span class="hljs-number">10003</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-keyword">if</span>(str1[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]==<span class="hljs-string">&quot;sha256&quot;</span>):<br><span class="hljs-keyword">break</span><br>yanzhengma=(getyanzhengma(str1[<span class="hljs-number">12</span>:<span class="hljs-number">28</span>],str1[<span class="hljs-number">33</span>:<span class="hljs-number">97</span>]))<br>sh.send(yanzhengma)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[NOTE]SENT YANZHENGMA&quot;</span>)<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>iv=str1[<span class="hljs-number">19</span>:]<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(str1)<br>y=str1[<span class="hljs-number">12</span>:]<br>BA,BB,BC=y[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>],y[<span class="hljs-number">32</span>:<span class="hljs-number">64</span>],y[<span class="hljs-number">64</span>:<span class="hljs-number">96</span>]<br>I,A,B,C=Transnbs(iv),Transnbs(BA),Transnbs(BB),Transnbs(BC)<br>Ans=Decrypt1(I,A,BA,sh)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Ans=&#x27;</span>,Ans)<br>Bns=Decrypt1(A,B,BB,sh)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Bns=&#x27;</span>,Bns)<br>Cns=Decrypt1(B,C,BC,sh)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Cns=&#x27;</span>,Cns)<br><span class="hljs-built_in">print</span>(Ans,Bns,Cns)<br><span class="hljs-comment">#[48, 120, 71, 97, 109, 101, 123, 55, 48, 54, 52, 97, 98, 52, 56, 45]</span><br><span class="hljs-comment">#[51, 99, 53, 102, 45, 52, 50, 99, 49, 45, 97, 100, 51, 51, 45, 54]</span><br><span class="hljs-comment">#[99, 101, 98, 101, 98, 98, 102, 101, 101, 57, 101, 125, 4, 4, 4, 4]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA Notes 1</title>
    <link href="/2020/10/17/RSA-Notes/"/>
    <url>/2020/10/17/RSA-Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="huangx607087学习RSA的笔记1"><a href="#huangx607087学习RSA的笔记1" class="headerlink" title="huangx607087学习RSA的笔记1"></a>huangx607087学习RSA的笔记1</h1><h2 id="I-What-is-RSA"><a href="#I-What-is-RSA" class="headerlink" title="I-What is RSA"></a>I-What is RSA</h2><p>体制：<br>1.选择两个大质数$p$,$q$，计算$n&#x3D;p×q$</p><p>2.计算$\phi&#x3D;(p-1)(q-1)$，也就是$n$的欧拉函数（也就是小于$n$的正整数中与$n$互质数量的个数）</p><p>3.取一个数字$e$，使$e,\phi$互质</p><p>4.计算$d$，使$ed\equiv 1 \mod \phi$</p><p>5.加密函数：$c&#x3D;E(m)&#x3D;m^e \mod n $</p><p>6.解密函数：$m&#x3D;D(c)&#x3D;c^d \mod n $</p><h2 id="II-11种RSA题型的总结"><a href="#II-11种RSA题型的总结" class="headerlink" title="II-11种RSA题型的总结"></a>II-11种RSA题型的总结</h2><h3 id="0x01-直接给出-p-q-c-e-或者-n-p-k-的题目"><a href="#0x01-直接给出-p-q-c-e-或者-n-p-k-的题目" class="headerlink" title="0x01 直接给出$p,q,c,e$或者$n&#x3D;p^k$的题目"></a>0x01 直接给出$p,q,c,e$或者$n&#x3D;p^k$的题目</h3><p>直接根据加密体制计算即可，有crypto这个python库的可以直接用<code>inverse(e, (p-1)*(q-1))</code>求出$d$</p><p>$n&#x3D;p^k$时，$\phi&#x3D;p^k-p^{k-1}$</p><h3 id="0x02-只给出了-n-c-e"><a href="#0x02-只给出了-n-c-e" class="headerlink" title="0x02 只给出了$n,c,e$"></a>0x02 只给出了$n,c,e$</h3><p>这种情况一般$n$是可以暴力分解的，上yafu即可</p><h3 id="0x03-只给出了-n-c-e-并且-e-3-的情况"><a href="#0x03-只给出了-n-c-e-并且-e-3-的情况" class="headerlink" title="0x03 只给出了$n,c,e$并且$e&#x3D;3$的情况"></a>0x03 只给出了$n,c,e$并且$e&#x3D;3$的情况</h3><p>根据$c&#x3D;E(m)&#x3D;m^3 \mod n $,也就是$m^3&#x3D;c+kn,k∈${$0,1,2,3,…$}，这个时候可以枚举$k$的值，通过二分$m$确定$m$的值，一般$k$不会太大的</p><h3 id="0x04-只给出了-n-c-e-并且-ln-e≈-ln-n-（也就是-e-非常大的时候"><a href="#0x04-只给出了-n-c-e-并且-ln-e≈-ln-n-（也就是-e-非常大的时候" class="headerlink" title="0x04 只给出了$n,c,e$并且$\ln e≈\ln n$（也就是$e$非常大的时候)"></a>0x04 只给出了$n,c,e$并且$\ln e≈\ln n$（也就是$e$非常大的时候)</h3><p>使用winnerattack算法，具体代码见下<del>（别看，这个代码不是本fw打的）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continued_fractions_expansion</span>(<span class="hljs-params">numerator,denominator</span>):<span class="hljs-comment">#(e,N)</span><br>result=[]<br>divident = numerator % denominator<br>quotient = numerator // denominator<br>result.append(quotient)<br><span class="hljs-keyword">while</span> divident != <span class="hljs-number">0</span>:<br>numerator = numerator - quotient * denominator<br>tmp = denominator<br>denominator = numerator<br>numerator = tmp<br>divident = numerator % denominator<br>quotient = numerator // denominator<br>result.append(quotient)<br><span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convergents</span>(<span class="hljs-params">expansion</span>):<br>convergents=[(expansion[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(expansion)):<br>numerator = <span class="hljs-number">1</span><br>denominator = expansion[i]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>numerator += expansion[j] * denominator<br><span class="hljs-keyword">if</span> j==<span class="hljs-number">0</span>:<br><span class="hljs-keyword">break</span><br>tmp = denominator<br>denominator = numerator<br>numerator = tmp<br>convergents.append((numerator, denominator)) <span class="hljs-comment">#(k,d)</span><br><span class="hljs-keyword">return</span> convergents<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">newtonSqrt</span>(<span class="hljs-params">n</span>):<br>approx = n // <span class="hljs-number">2</span><br>better = (approx + n // approx) // <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> better != approx:<br>    approx = better<br>    better = (approx + n // approx) // <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> approx<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wiener_attack</span>(<span class="hljs-params">cons, e, N</span>):<br><span class="hljs-keyword">for</span> cs <span class="hljs-keyword">in</span> cons:<br>k,d = cs<br><span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>phi_N = (e * d - <span class="hljs-number">1</span>) // k<br><span class="hljs-comment">#x**2 - ((N - phi_N) + 1) * x + N = 0</span><br>a = <span class="hljs-number">1</span><br>b = -((N - phi_N) + <span class="hljs-number">1</span>)<br>c = N<br>delta = b * b - <span class="hljs-number">4</span> * a * c<br><span class="hljs-keyword">if</span> delta &lt;= <span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>x1 = (newtonSqrt(delta) - b)//(<span class="hljs-number">2</span> * a)<br>x2 = -(newtonSqrt(delta) + b)//(<span class="hljs-number">2</span> * a)<br><span class="hljs-keyword">if</span> x1 * x2 == N:<br><span class="hljs-keyword">return</span> [x1, x2, k, d]<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    n = <span class="hljs-comment">#填写n的值</span><br>    e = <span class="hljs-comment">#填写e的值</span><br>    c = <span class="hljs-comment">#填写c的值</span><br>    expansion = continued_fractions_expansion(e, n)<br>    cons = convergents(expansion)<br>    p, q, k, d = wiener_attack(cons, e, n)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(m))<br><br></code></pre></td></tr></table></figure><h3 id="0x05-给出了-n-c-e-并且给出-f-d-phi-的一个一次式"><a href="#0x05-给出了-n-c-e-并且给出-f-d-phi-的一个一次式" class="headerlink" title="0x05 给出了$n,c,e$并且给出$f(d,\phi)$的一个一次式"></a>0x05 给出了$n,c,e$并且给出$f(d,\phi)$的一个一次式</h3><p>直接求出$ef(d,\phi)$的值,然后确定模数</p><h3 id="0x06-已知-n-c-e-，-e-3-并且得知-m-m-mod-2-k-的值"><a href="#0x06-已知-n-c-e-，-e-3-并且得知-m-m-mod-2-k-的值" class="headerlink" title="0x06 已知$n,c,e$，$e&#x3D;3$,并且得知$m-(m \mod 2^k)$的值"></a>0x06 已知$n,c,e$，$e&#x3D;3$,并且得知$m-(m \mod 2^k)$的值</h3><p>这种情况下根本不可能用0x03的方法，因为$k$值也很大</p><p>在Sagemath中的Notebook上打开网页，创建一个Sagemath网页文件，把以下代码补完整后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-comment">#你已知的n值</span><br>e = <span class="hljs-number">3</span><br>m = randrange(n)<span class="hljs-comment">#不要改</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<span class="hljs-comment">#不要改</span><br>beta = <span class="hljs-number">1</span><br>epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span><span class="hljs-comment">#不要改</span><br>nbits = n.nbits()<span class="hljs-comment">#不要改</span><br>kbits=<span class="hljs-comment">#m被掩盖的字位数</span><br><span class="hljs-built_in">print</span>(nbits,kbits)<br>mbar = <span class="hljs-comment">#你得到的不完整的m值</span><br>c = <span class="hljs-comment">#你得到的c值</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;upper %d bits (of %d bits) is given&quot;</span> % (nbits-kbits, nbits))<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (mbar + x)^e - c<br><span class="hljs-built_in">print</span> (m)<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor = n1</span><br><span class="hljs-built_in">print</span>( mbar + x0)<br></code></pre></td></tr></table></figure><h3 id="0x07-Parity-Oracle"><a href="#0x07-Parity-Oracle" class="headerlink" title="0x07 Parity Oracle"></a>0x07 Parity Oracle</h3><p>直接看0xGame Div 2的相关内容</p><h3 id="0x08已知-n-c-e-，-e-3-和-p-p-mod-2-k-的值"><a href="#0x08已知-n-c-e-，-e-3-和-p-p-mod-2-k-的值" class="headerlink" title="0x08已知$n,c,e$，$e&#x3D;3$和$p-(p \mod 2^k)$的值"></a>0x08已知$n,c,e$，$e&#x3D;3$和$p-(p \mod 2^k)$的值</h3><p>在Sagemath中的Notebook上打开网页，创建一个Sagemath网页文件，把以下代码补完整后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-comment">#你得到的n值</span><br>p_fake = <span class="hljs-comment">#你得到的不完整的p值</span><br>pbits = p_fake.nbits()<br>kbits = <span class="hljs-comment">#p失去的低位</span><br>pbar = p_fake &amp; (<span class="hljs-number">2</span>^pbits-<span class="hljs-number">2</span>^kbits)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;upper %d bits (of %d bits) is given&quot;</span> % (pbits-kbits, pbits)<br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x + pbar<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># find root &lt; 2^kbits with factor &gt;= n^0.3</span><br>p= x0 + pbar<br><span class="hljs-built_in">print</span> p<br></code></pre></td></tr></table></figure><p>有$p$就可以得到$q$，进而就很简单了</p><h3 id="0x09-已知-n-c-e-，-e-3-和-d-mod-2-k-值"><a href="#0x09-已知-n-c-e-，-e-3-和-d-mod-2-k-值" class="headerlink" title="0x09 已知$n,c,e$，$e&#x3D;3$和$d \mod 2^k$值"></a>0x09 已知$n,c,e$，$e&#x3D;3$和$d \mod 2^k$值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">partial_p</span>(<span class="hljs-params">p0, kbits, n</span>):<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    nbits = n.nbits()<br>    f = <span class="hljs-number">2</span>^kbits*x + p0<br>    f = f.monic()<br>    roots = f.small_roots(X=<span class="hljs-number">2</span>^(nbits//<span class="hljs-number">2</span>-kbits), beta=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># find root &lt; 2^(nbits//2-kbits) with factor &gt;= n^0.3</span><br>    <span class="hljs-keyword">if</span> roots:<br>        x0 = roots[<span class="hljs-number">0</span>]<br>        p = gcd(<span class="hljs-number">2</span>^kbits*x0 + p0, n)<br>        <span class="hljs-keyword">return</span> ZZ(p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_p</span>(<span class="hljs-params">d0, kbits, e, n</span>):<br>    X = var(<span class="hljs-string">&#x27;X&#x27;</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, e+<span class="hljs-number">1</span>):<br>        results = solve_mod([e*d0*X - k*X*(n-X+<span class="hljs-number">1</span>) + k*n == X], <span class="hljs-number">2</span>^kbits)<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> results:<br>            p0 = ZZ(x[<span class="hljs-number">0</span>])<br>            p = partial_p(p0, kbits, n)<br>            <span class="hljs-keyword">if</span> p:<br>                <span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <span class="hljs-comment">#你得到的n值</span><br>    e = <span class="hljs-number">3</span><br>    d = <span class="hljs-comment">#你得到的d的低位</span><br>    beta = <span class="hljs-number">0.5</span><br>    epsilon = beta^<span class="hljs-number">2</span>/<span class="hljs-number">7</span><br>    nbits = n.nbits()<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;nbits:%d:&quot;</span>%(nbits)<br>    <span class="hljs-comment">#kbits = floor(nbits*(beta^2+epsilon))</span><br>    kbits = nbits - d.nbits()-<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;kbits:%d&quot;</span>%(kbits)<br>    d0 = d &amp; (<span class="hljs-number">2</span>^kbits-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;lower %d bits (of %d bits) is given&quot;</span> % (kbits, nbits)<br>    p = find_p(d0, kbits, e, n)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;found p: %d&quot;</span> % p<br>    q = n//p<br>    <span class="hljs-built_in">print</span> d<br>    <span class="hljs-built_in">print</span> inverse_mod(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br></code></pre></td></tr></table></figure><h3 id="0x0A-两个模数-n-1-n-2-不互素（模不互素）"><a href="#0x0A-两个模数-n-1-n-2-不互素（模不互素）" class="headerlink" title="0x0A 两个模数$n_1,n_2$不互素（模不互素）"></a>0x0A 两个模数$n_1,n_2$不互素<strong>（模不互素）</strong></h3><p>这种题目一般给出$2$组$n,e,c$的值，我们可以求一下$\gcd (n_1,n_2)$ 如果不等于$1$的话，我们就得到了$n$的一个因数$p$,一除就得到了$q_1,q_2$，分别求解即可得到明文。</p><h3 id="0x0B-模数-n-相同-指数-e-不同（共模攻击）"><a href="#0x0B-模数-n-相同-指数-e-不同（共模攻击）" class="headerlink" title="0x0B 模数$n$相同,指数$e$不同（共模攻击）"></a>0x0B 模数$n$相同,指数$e$不同<strong>（共模攻击）</strong></h3><p>这种题目一般也是给出$2$组$n,e,c$的值。也就是$5$个数字：$n,e_1,e_2,c_1,c_2$。此时可以不求$d_1,d_2$也可以直接获得明文。</p><p>步骤：<br>显然，多数情况下$\gcd(e_1,e_2)&#x3D;1$，所以有$e_1s_1+e_2s_2&#x3D;1$，一般$s_1,s_2$为一正一负的两个整数，用EXGCD可以求得该式子的一组解</p><p>我们可以得到算式 ：$(c1^{s1}c2^{s2})\mod n &#x3D; ((m^{e1}\mod n)^{s1}(m^{e2}\mod n)^{s2})\mod n$ .<strong>(1)</strong></p><p>化简，有：$(c1^{s1}c2^{s2})\mod n &#x3D; (m^{(e1^{s1}+e2^{s2})})\mod n$  .<strong>(2)</strong></p><p>又$e_1s_1+e_2s_2&#x3D;1$   . <strong>(3)</strong></p><p>所以由**(2)(3)**可知：$c1^{s1}*c2^{s2} \equiv  m \mod n $</p><p>所以我们可以写出以下的脚本：<del>别膜，这很显然不是我这个fw能够写出来的！，我有过这样的码风？</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s,s2n<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">egcd</span>(<span class="hljs-params">a, b</span>):<br>  <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">else</span>:<br>    g, y, x = egcd(b % a, a)<br>    <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  n = <span class="hljs-comment">#填写n值</span><br>  c1 = <span class="hljs-comment">#填写c1值</span><br>  c2 = <span class="hljs-comment">#填写c2值</span><br>  e1 = <span class="hljs-comment">#填写e1值</span><br>  e2 = <span class="hljs-comment">#填写e2值</span><br>  s = egcd(e1, e2)<br>  s1 = s[<span class="hljs-number">1</span>]<br>  s2 = s[<span class="hljs-number">2</span>]<br>  <span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>    s1 = - s1<br>    c1 = invert(c1, n)<br>  <span class="hljs-keyword">elif</span> s2&lt;<span class="hljs-number">0</span>:<br>    s2 = - s2<br>    c2 = invert(c2, n)<br>  m = <span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n) % n<br>  <span class="hljs-built_in">print</span> n2s(m)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main()<br></code></pre></td></tr></table></figure><h3 id="0x0C-给出pem和bin文件的RSA题目"><a href="#0x0C-给出pem和bin文件的RSA题目" class="headerlink" title="0x0C 给出pem和bin文件的RSA题目"></a>0x0C 给出pem和bin文件的RSA题目</h3><p>在脚本前加上这些内容。然后pub1和pub2都有两个值(n和e，没有c)</p><p>这个脚本的后半部分也可以作为一个更加简洁的共模攻击觉得脚本。<del>我就是个只会利用别人脚本的fw55555555555</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>c1=libnum.s2n(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipher1.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())<br>c2=libnum.s2n(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipher2.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read())<br>pub1=RSA.importKey(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;publickey1.pem&#x27;</span>).read())<br>pub2=RSA.importKey(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;publickey2.pem&#x27;</span>).read())<br><span class="hljs-comment">#注：如果文件是bin类型的话，应该写成这样：</span><br><span class="hljs-comment">#c=bytes_to_long(open(&#x27;cipher.bin&#x27;,&#x27;rb&#x27;).read())</span><br>n=pub1.n<br>e1,e2=pub1.e,pub2.e<br>s = gmpy2.gcdext(pub1.e,pub2.e)<br>s1,s2=s[<span class="hljs-number">1</span>],s[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>    s1 = -s1<br>    c1 = gmpy2.invert(c1, n)<br><span class="hljs-keyword">elif</span> s2&lt;<span class="hljs-number">0</span>:<br>    s2 = -s2<br>    c2 = gmpy2.invert(c2, n)<br>m=<span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n)%n<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGameDiv2</title>
    <link href="/2020/10/16/0xGameDiv2/"/>
    <url>/2020/10/16/0xGameDiv2/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame-Div-2-题解"><a href="#0xGame-Div-2-题解" class="headerlink" title="0xGame  Div 2 题解"></a>0xGame  Div 2 题解</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>第二周，难度比第一周大好多，只切了两道密码题，到极限了，<del>然后只有3800多分，Top1，2两个全栈大佬都有9000+分，我果然好菜啊</del></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-SmallModulus"><a href="#1-SmallModulus" class="headerlink" title="1.SmallModulus"></a>1.SmallModulus</h3><p>提示：做这道题的时候！手速！一定要快！一定要快！一定要快！！！！！，无论是输4位验证码还是输入提示中的1！！！<del>我TM因为手速太慢导致远程连接超时，整个下午都耗费在上面了，忍不住吐槽两句，太草了！</del></p><p>虽然我不知道sha256是个什么东西，原理是什么，不过我还是用一个python脚本，四重循环枚举出了每次需要输入的验证码内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br>s=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br>t=<span class="hljs-string">&quot;5d755ec7addaff634907855979bc02d0c279ab60ce736754faa895a81938b3c9&quot;</span><br>R=<span class="hljs-string">&quot;EsHH8BQQsfIMp7gC&quot;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(R)==<span class="hljs-number">16</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(t)==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> s:<br>                XXXX=i1+i2+i3+i4<br>                <span class="hljs-keyword">if</span> sha256((XXXX+R).encode()).hexdigest()==t:<br>                    <span class="hljs-built_in">print</span> (XXXX)<br><br></code></pre></td></tr></table></figure><p>最终我还是手速加快，迅速地得到了许许多多组数据… …，其中一组输出提示：<code>flag mod 9c7f17669e90b219  (in hex) : 3316d33a70b0a941</code>。</p><p>加上程序的核心代码可知，输出提示mod后买你的那个数字是质数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> choice == <span class="hljs-string">b&quot;1&quot;</span>:<br>                module = getPrime(<span class="hljs-number">64</span>)<br>                <span class="hljs-variable language_">self</span>.send((<span class="hljs-string">&quot;flag mod &#123;&#125; (in hex) : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                    <span class="hljs-built_in">hex</span>(module)[<span class="hljs-number">2</span>:], <span class="hljs-built_in">hex</span>(m % module)[<span class="hljs-number">2</span>:])).encode())<br>                <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>显然，这道题想告诉你的消息无非是许多组类似：$x \equiv a_i \mod m_i$ ，(其中$m$为质数)。根据我这个<del>密码学废物和oi废物</del>的理解，这道题应该是考中国剩余定理（CRT）。</p><p>查了一下，百度百科上是这样讲解CRT的：</p><p>设$M&#x3D;\prod_{i&#x3D;1}^n m_i$，$M_i&#x3D;M&#x2F;m_i$，$t_i$为$M_i$模$m_i$的逆元，也就是$M_it_i \equiv 1 \mod m_i$。则$x \equiv \sum_{i&#x3D;1}^{n} a_it_iM_i \mod M$。也就是$x &#x3D; \sum_{i&#x3D;1}^{n}a_it_iM_i  +k M$</p><p>所以，我们只需要处理一下得到的数据，然后将其放入数组$a$和$m$中。还要用到求逆元的代码(直接从上一个脚本直接移植过来的)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> MsandAs <span class="hljs-keyword">import</span> m,a<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">EX_GCD</span>(<span class="hljs-params">a,b,arr</span>): <span class="hljs-comment">#扩展欧几里得</span><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> a<br>    g = EX_GCD(b, a % b, arr)<br>    t = arr[<span class="hljs-number">0</span>]<br>    arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">1</span>]<br>    arr[<span class="hljs-number">1</span>] = t - (a // b) * arr[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> g<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ModReverse</span>(<span class="hljs-params">a,n</span>): <span class="hljs-comment">#ax=1(mod n) 求a模n的乘法逆x</span><br>    arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,]<br>    gcd = EX_GCD(a,n,arr)<br>    <span class="hljs-keyword">if</span> gcd == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> (arr[<span class="hljs-number">0</span>] % n + n) % n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,]<br><br><span class="hljs-comment"># FUNCTION MAIN#</span><br>piM=<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    piM*=m[i]<br><span class="hljs-built_in">print</span>(piM)<br>t =[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)]<br>M =[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    M[i]=piM//m[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    t[i]=ModReverse(M[i],m[i])<br>B=<span class="hljs-number">0</span> <span class="hljs-comment">#B为所有atM之积的和</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    B+=a[i]*t[i]*M[i]<br>B%=piM<br><span class="hljs-built_in">print</span>(B)<br><span class="hljs-built_in">print</span>(long_to_bytes(B))<br><br></code></pre></td></tr></table></figure><p>最后的<code>long_to_bytes(B)</code>算出来的就是答案了。</p><p><strong>2021.3.9更新</strong></p><p>CRT只能解决模数互素的情况，而模数不互素的情况下可以使用exCRT，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">LCM</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">return</span> a*b//GCD(a,b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> b:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>    x,y=exgcd(b,a%b)<br>    <span class="hljs-keyword">return</span> y,x-y*(a//b)<br><span class="hljs-comment">#Main Below</span><br>m=[<span class="hljs-number">11</span>,<span class="hljs-number">25</span>,<span class="hljs-number">33</span>]<br>a=[<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">17</span>]<br>r1,m1=a[<span class="hljs-number">0</span>],m[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(m)):<br>    r2,m2=a[i],m[i]<br>    d=GCD(m1,m2)<br>    l1,l2=exgcd(m1//d,m2//d)<br>    r1,m1=(r1+(r2-r1)//d*l1*m1)%LCM(m1,m2),LCM(m1,m2)<br><span class="hljs-built_in">print</span>(r1)<br><span class="hljs-comment">#809</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">809%11==6</span><br><span class="hljs-string">809%25==9</span><br><span class="hljs-string">809%33==17</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-parityOracle"><a href="#2-parityOracle" class="headerlink" title="2.parityOracle"></a>2.parityOracle</h3><p>这道题需要用到Pwntools，也就意味着需要安装虚拟机。<del>本fw安装一个虚拟机安装了三天，太废了</del>。</p><p>我们先了解以下Pwntools在密码学题目里面抓包时需要用到的几个指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">本地 ：sh = porcess(<span class="hljs-string">&quot;./level0&quot;</span>)<br>远程：sh = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10001</span>)<br>关闭连接：sh.close()  <br>sh.send(data)  <span class="hljs-comment">#发送数据</span><br>sh.sendline(data)  <span class="hljs-comment">#发送一行数据，相当于在数据后面加\n</span><br>sh.recv(numb = <span class="hljs-number">2048</span>, timeout = dufault) <span class="hljs-comment"># 接受数据，numb指定接收的字节，timeout指定超时</span><br>sh.recvline(keepends=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#接受一行数据，keepends为是否保留行尾的\n</span><br>sh.recvuntil(<span class="hljs-string">&quot;Hello,World\n&quot;</span>,drop=fasle)<span class="hljs-comment">#  接受数据直到我们设置的标志出现</span><br>sh.recvall() <span class="hljs-comment"># 一直接收直到EOF</span><br>sh.recvrepeat(timeout = default) <span class="hljs-comment"># 持续接受直到EOF或timeout</span><br>sh.interactive() <span class="hljs-comment"># 直接进行交互，相当于回到shell的模式，在取得shell之后使用</span><br></code></pre></td></tr></table></figure><p>然后再看一下题目程序中的给出的最核心的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> choice == <span class="hljs-string">b&quot;1&quot;</span>:<br>                cip = <span class="hljs-variable language_">self</span>.recvhex(prompt=<span class="hljs-string">b&quot;Your cipher (in hex): &quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cip:<br>                    <span class="hljs-keyword">break</span><br>                result = <span class="hljs-built_in">pow</span>(cip, <span class="hljs-variable language_">self</span>.d, <span class="hljs-variable language_">self</span>.n) % <span class="hljs-number">4</span><br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-built_in">hex</span>(result)[<span class="hljs-number">2</span>:].encode())<br></code></pre></td></tr></table></figure><p>查阅CTFWIKI上的资料可以知道，我们第$k$次发送只需要向服务器发送数值$C×2^{pk} \mod N$即可。不过需要注意的是要把$10$进制数字转化为$16$进制的字符串发送（不含前缀<code>0x</code>），并且每次向服务器发送的所有内容要转换成bytes类型(包括指令<code>1</code>)。</p><p>每次截取字符串的时候可以通过输入看看截取到字符串的是什么东西，然后根据字符串的下标关系（这个要在调试的时候自己数）选择自己需要的部分并保存。某些地方也可以自己加一点输出提示看看程序是否在运行。当然，为了确保自己抓到的内容正确，也可以加几个<code>assert</code>语句试试看看是否出现了报错。</p><p>初始化工作做好之后，我们就可以开始进行二分过程了。根据CTFWIKI上的提示：设$L,R$为二分的两端(初始值为$L&#x3D;0,R&#x3D;N$)。.然后每次取$M$&#x3D;$(L+R)&#x2F;2$。如果得到的数字是奇数。那么我们我们下一次截取$(M,R)$区间继续二分。如果得到的数字是偶数，那么我们截取$(L,M)$区间进行二分。由于CTFWIKI上对这一块的原理进行了详细讲述，故此处不多赘述。</p><p>最后，我们可以用下面的脚本来进行二分操作。（前面抓取验证码的程序与上一题的验证码程序一模一样）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getyanzhengma</span>(<span class="hljs-params">s16len,s64len</span>):<br>LTSNMS=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(s16len)==<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s64len)==<span class="hljs-number">64</span><br><span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i2 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i3 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">for</span> i4 <span class="hljs-keyword">in</span> LTSNMS:<br><span class="hljs-keyword">if</span> sha256((i1+i2+i3+i4+s16len).encode()).hexdigest()==s64len:<br><span class="hljs-keyword">return</span> i1+i2+i3+i4<br>sh=remote(<span class="hljs-string">&quot;49.235.239.97&quot;</span>,<span class="hljs-number">10001</span>)<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>str1=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">if</span>(str1[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]==<span class="hljs-string">&quot;sha256&quot;</span>):<br><span class="hljs-keyword">break</span><br>yanzhengma=(getyanzhengma(str1[<span class="hljs-number">12</span>:<span class="hljs-number">28</span>],str1[<span class="hljs-number">33</span>:<span class="hljs-number">97</span>]))<br>sh.send(yanzhengma)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[NOTE]SENT YANZHENGMA&quot;</span>)<br>e,n,c=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>str2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>e=str2[<span class="hljs-number">18</span>:]<br>str2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>n=str2[<span class="hljs-number">4</span>:]<br>str2=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>c=str2[<span class="hljs-number">4</span>:]<br>e,n,c=<span class="hljs-built_in">int</span>(e),<span class="hljs-built_in">int</span>(n),<span class="hljs-built_in">int</span>(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[NOTE]F=GOT enc&quot;</span>)<br>L,R,Clk=<span class="hljs-number">0</span>,n,<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> L&lt;=R:<br><span class="hljs-keyword">if</span>(Clk%<span class="hljs-number">50</span>==<span class="hljs-number">0</span>):<br><span class="hljs-built_in">print</span>(L,R,Clk)<br>M=(L+R)//<span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>str3=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>sh.send(<span class="hljs-string">b&quot;1&quot;</span>)<br>a=(c*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,e*Clk,n))%n<br>sh.send(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(a))[<span class="hljs-number">2</span>:].encode())<br>recnum=sh.recvline(keepends=<span class="hljs-literal">False</span>)<br>recnum=<span class="hljs-built_in">int</span>(recnum[-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">if</span> recnum==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> recnum==<span class="hljs-number">3</span>:<br>L=M+<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> recnum==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> recnum==<span class="hljs-number">2</span>:<br>R=M-<span class="hljs-number">1</span><br>Clk+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(L)<br><span class="hljs-built_in">print</span>(long_to_bytes(L))<br></code></pre></td></tr></table></figure><p><strong>注意：每次程序跑的时候会存在一定误差,不过一般不超过$100$，这就意味着解出来的字符串的最后$1$到$2$位可能会不对。不过我们可以根据最后一个字符是否成词，或者根据题目中的提示，也可以解出来最后的flag</strong></p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nfsr</title>
    <link href="/2020/10/08/Nfsr/"/>
    <url>/2020/10/08/Nfsr/</url>
    
    <content type="html"><![CDATA[<h1 id="关于NFSR学习的一些笔记"><a href="#关于NFSR学习的一些笔记" class="headerlink" title="关于NFSR学习的一些笔记"></a>关于NFSR学习的一些笔记</h1><h2 id="0x01解题背景"><a href="#0x01解题背景" class="headerlink" title="0x01解题背景"></a>0x01解题背景</h2><p>10月6日刚把0xCTF上的所有密码学题目AK，这道题卡了我一周，得到了学长的帮助，查了CTFWIKI和学长的博客才勉强做出来，太难了</p><h2 id="0x02简介"><a href="#0x02简介" class="headerlink" title="0x02简介"></a>0x02简介</h2><p>NFSR，又称非线性移位寄存器，在模$2$的意义下，异或可以视作加法，按位与可以视作乘法。所以LFSR一般都是只有异或，而NFSR有与运算。并且与运算的性质可以知道，这是一个不可逆的运算 。</p><p>一般情况下，NFSR是多个LFSR通过一个函数$F(r_1,r_2,…,r_n)$，其中$F$函数中与运算和异或运算均存在，根据与运算的不可逆性，可知$F$函数的不可逆性，所以显然，我们写不出$F$函数的逆函数$F^{-1}$。</p><h2 id="0x03-解题方法"><a href="#0x03-解题方法" class="headerlink" title="0x03 解题方法"></a>0x03 解题方法</h2><p>我们可以一开始枚举每一个lfsr及其输出结果，看看$F(r_1,r_2,…,r_n)&#x3D;r_i,i∈${$1,2,3,…,n$}的概率$P_i$。找出所有不为概率不为$0.5$的$P_i$，然后用以下的C++脚本暴力枚举$r_i$的初始值。</p><p>一般先定义$N&#x3D;30$，区间筛选邻域$U(P,0.05)$判断存在性，然后不断调大$N$为$100,200,400,600,900,1200,2700$，直到最后运行只剩下一个结果即可，逐步调大主要是为了判断结果的存在性和检验参数的正确性。</p><p>如果$N$超过$600$算出来的数值仍然比较多的话，我们可以把区间筛选邻域由$U(P,0.05)$为$U(P,0.03)$或者$U(P,0.02)$增大筛选要求。</p><p>本代码以$18$位，概率$0.625$为例，实际应用应当调参</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 900 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[N<span class="hljs-number">+12</span>];<br><span class="hljs-type">double</span> G=<span class="hljs-number">0</span>; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">culc</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=x,s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(k)<br>&#123;<br>s+=k%<span class="hljs-number">2</span>;<br>k/=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lfsr</span><span class="hljs-params">(<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t=(r&lt;&lt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0xffffff</span>;<br><span class="hljs-type">int</span> s=<span class="hljs-built_in">culc</span>(r&amp;m)&amp;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> (t^s);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> B,<span class="hljs-type">int</span> msk,<span class="hljs-type">double</span> pos1,<span class="hljs-type">double</span> pos2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> r1,i,s1;<br><span class="hljs-keyword">for</span> (r1=(<span class="hljs-number">1</span>&lt;&lt;(B<span class="hljs-number">-1</span>));r1&lt;(<span class="hljs-number">1</span>&lt;&lt;(B));r1++)<br>&#123;<br>s1=r1;<br>G=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br>s1=<span class="hljs-built_in">lfsr</span>(s1,msk);<br><span class="hljs-keyword">if</span>(a[i]==(s1&amp;<span class="hljs-number">1</span>)) ++G;<br>&#125; <br><span class="hljs-keyword">if</span>((G/N&gt;pos1)&amp;&amp;(G/N&lt;pos2))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:pos=%.4lf%\n&quot;</span>,r1,G/N);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>&#123;<br><span class="hljs-type">char</span> c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;c);<br>a[i]=(c==<span class="hljs-string">&#x27;1&#x27;</span>); <br>&#125;<br><span class="hljs-built_in">solve</span>(<span class="hljs-number">18</span>,<span class="hljs-number">0x3da61</span>,<span class="hljs-number">0.595</span>,<span class="hljs-number">0.655</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后剩下的$0.5$的概率数量如果只有$1$个或者$2$个，可以开暴力枚举（$2$个的话请保证能够两重循环可行）</p><p>如果最后仍然剩下很难暴力枚举的$0.5$的概率，可以把未知的量跟已知的构造异或函数，使概率较大地偏离$0.5$（取$&lt;0.4$或者$&gt;0.6$的值为宜）。将已知的和未知的同步起来，也可以解出最后的答案。</p><p>所有的lfsr都解出来的时候，我们的题目也就解出来了，就可以得到flag了。</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGameDiv1</title>
    <link href="/2020/10/07/0xGameDiv1/"/>
    <url>/2020/10/07/0xGameDiv1/</url>
    
    <content type="html"><![CDATA[<h1 id="0xGame-Div-1-题解"><a href="#0xGame-Div-1-题解" class="headerlink" title="0xGame Div 1 题解"></a>0xGame Div 1 题解</h1><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>第一周题目还算<del>比较简单</del>，把密码切了两题，Misc简单看了看。搞了<del>2000</del>多分，很多大佬7000多分，wtcl</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-Calendar"><a href="#1-Calendar" class="headerlink" title="1.Calendar"></a>1.Calendar</h3><p>根据给的日历图片，THU1表示<strong>第一行</strong>的星期四对应的日期，同理，TUE2表示<strong>第二行</strong>的星期二对应的日期，<strong>不是这个月第二个星期二对应的日期</strong>。纠错方法：有个码是<strong>TUE4</strong>，如果按照后者进行理解，那么得到的值是$27$。同时题目给了提示为：“明文<strong>字母</strong>全为小写，请将明文包含在0xGame{}内提交”，说明每个数字不会超过$26$。（因为我一开始就是错误的理解，然后发现了问题）</p><p>这个可以直接手打出所有的数字，保存在一个txt文件中,然后用下面的脚本就可以得出flag了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,x<span class="hljs-number">+96</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-easyXor"><a href="#2-easyXor" class="headerlink" title="2.easyXor"></a>2.easyXor</h3><p><strong>必备常识：已知$a$ xor $ b &#x3D; c$ ，可以得到$c$ xor $b &#x3D; a$</strong></p><p>下面是题目的Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>flag+=<span class="hljs-string">&quot;^&quot;</span><br>cipher=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)-<span class="hljs-number">1</span>):<br>    cipher.append(<span class="hljs-built_in">ord</span>(flag[i])^<span class="hljs-built_in">ord</span>(flag[i+<span class="hljs-number">1</span>]))<br><span class="hljs-built_in">print</span>(cipher)<br><span class="hljs-comment">#[72, 63, 38, 12, 8, 30, 30, 6, 82, 4, 84, 88, 92, 7, 79, 29, 8, 90, 85, 26, 25, 87, 80, 10, 20, 20, 9, 4, 80, 73, 31, 5, 82, 0, 1, 92, 0, 0, 94, 81, 4, 85, 27, 35]</span><br><br></code></pre></td></tr></table></figure><p>很显然，题目给出了最终的输出，也知道最后增加的一位内容。从最后一位出发，我们可以一个一个回推以前的步骤。</p><p>将最后的输出结果复制到一个txt文件中，用替换功能把所有的逗号换成空格，删除无关符号，用以下的C++脚本代码运行即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-type">int</span>&gt;s,r;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-type">int</span> x;<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x))<br>&#123;<br>s.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><span class="hljs-type">int</span> t=<span class="hljs-string">&#x27;^&#x27;</span>;<br><span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())<br>&#123;<br>t=t^s.<span class="hljs-built_in">top</span>();<br>r.<span class="hljs-built_in">push</span>(t);<br>s.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(!r.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,r.<span class="hljs-built_in">top</span>());<br>r.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-Superaffine"><a href="#3-Superaffine" class="headerlink" title="3.Superaffine"></a>3.Superaffine</h3><p>我们先来看一下程序代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&quot;0xGame&#123;&quot;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>table = ascii_letters+digits<span class="hljs-comment"># 先小写，再大写，再数字</span><br>MOD = <span class="hljs-built_in">len</span>(table)<span class="hljs-comment">#mod = 62</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">affine</span>(<span class="hljs-params">x, a, b</span>): <span class="hljs-keyword">return</span> a*x+b<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genKey</span>():<br>    a = [randint(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    b = [randint(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-keyword">while</span> GCD(MOD, a[<span class="hljs-number">0</span>]*a[<span class="hljs-number">1</span>]*a[<span class="hljs-number">2</span>]) != <span class="hljs-number">1</span>:<br>        a = [randint(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>    <span class="hljs-keyword">return</span> a, b<br><br><br>cipher = <span class="hljs-string">&quot;&quot;</span><br>A, B = genKey()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> table:<br>        cipher += i<br>    <span class="hljs-keyword">else</span>:<br>        cipher += table[affine(affine(affine(table.find(i),A[<span class="hljs-number">0</span>], B[<span class="hljs-number">0</span>]), A[<span class="hljs-number">1</span>], B[<span class="hljs-number">1</span>]), A[<span class="hljs-number">2</span>], B[<span class="hljs-number">2</span>]) % MOD]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cipher =&quot;</span>, cipher)<br><span class="hljs-comment"># cipher = t6b7Tn&#123;2GByBZBB-aan2-JRWn-GnZB-Jyf7a722ffnZ&#125;</span><br><br></code></pre></td></tr></table></figure><p>很显然，这是一个仿射密码，单层加密过程为一个一次函数$y&#x3D;e(x)\equiv ax+b \mod m$ </p><p>Python中，ascii_letters对应一个字符串为“abc……xyzABC….XYZ”,digits对应一个字符串为”0123456789”，所以此处有$MOD&#x3D;62$。</p><p>根据defgenkey可知：此处的$a_0,a_1,a_2,b_0,b_1,b_2$均为随机生成的$[1,63]$内的整数，如果暴力枚举，复杂度为$O(63^6)≈625.2亿$。所以暴力是不可以的。</p><p>化简加密公式，我们可以得到解密公式$x&#x3D; d(y)\equiv a^{-1}(y-b)$。所以这里涉及到求逆元。又由于$62$为合数，$phi(62)&#x3D;30$，也就是只有$30$个字符可以正确地加密并解密，说明本替换密码的密钥空间为$30×62&#x3D;1860$，并不是很大。</p><p>下面我们探讨一下两重仿射密码 $e_1(x)\equiv a_1x+b_1 \mod m$ 和$e_2(x)\equiv a_2x+b_2 \mod m$，所以$e_2(e_1(x))&#x3D;a_2a_1x+a_2b_1+b_2 \equiv m$，仍然是一个一次函数，还是能够写成$E&#x3D;Ax+B$的形式，密钥空间不变，仍然是$30×62&#x3D;1860$。所以得到一个很重要的结论：无论仿射加密有几层，密钥空间总是不变！因为可正常转换的字符数量本来就是有限的。</p><p>所以，我们根据推出的公式：$E(x)&#x3D;a_2a_1a_0x+a_2a_1b_0+a_2b_1+b_2 \mod m$，写成$E(x)\equiv Ax+B \mod m$的形式，并且由于密钥空间不变，$A,B$仍然是$[1,63]$中的整数。所以我们根据代码assert的内容，写出如下的C++脚本</p><p>注：C++中不等于a!&#x3D;b可以写成a-b（很毒瘤的一种写法）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">52</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-19</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">23</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-58</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">32</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">0</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-59</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">12</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-45</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>((a*<span class="hljs-number">4</span>+b<span class="hljs-number">+62</span>*<span class="hljs-number">8</span>)%<span class="hljs-number">62</span><span class="hljs-number">-13</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-type">int</span> i,j;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">63</span>;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">63</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(i,j))  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A=%d B=%d\n&quot;</span>,i,j);<br> &#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><span class="hljs-comment">//运行结果：A=35，B=59</span><br></code></pre></td></tr></table></figure><p>$y&#x3D;E(x)\equiv 35x+59 \mod 62$</p><p>然后我们可以用Python的脚本，求出$35$在模$62$的意义下乘法逆元为$39$,脚本如下（下一题用到的也是这个脚本，这个脚本可以求最大公约数和逆元）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">EX_GCD</span>(<span class="hljs-params">a,b,arr</span>): <span class="hljs-comment">#扩展欧几里得</span><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> a<br>    g = EX_GCD(b, a % b, arr)<br>    t = arr[<span class="hljs-number">0</span>]<br>    arr[<span class="hljs-number">0</span>] = arr[<span class="hljs-number">1</span>]<br>    arr[<span class="hljs-number">1</span>] = t - (a // b) * arr[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> g<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ModReverse</span>(<span class="hljs-params">a,n</span>): <span class="hljs-comment">#ax=1(mod n) 求a模n的乘法逆x</span><br>    arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,]<br>    gcd = EX_GCD(a,n,arr)<br>    <span class="hljs-keyword">if</span> gcd == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> (arr[<span class="hljs-number">0</span>] % n + n) % n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>arr = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,]<br><br><br>a=<span class="hljs-number">35</span>,b=<span class="hljs-number">62</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;niyuan&quot;</span>,ModReverse(a,b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;zuidagonyueshu&#x27;</span>,EX_GCD(a,b,arr))<br><br></code></pre></td></tr></table></figure><p>由于$62-59&#x3D;3$,所以$59$在模$62$的意义下加法逆元为$3$,所以解密函数为$x&#x3D;D(y)\equiv 39y+3 \mod 62$</p><p>同样，将密文放入一个txt文件，用C++写一个脚本，即可求出明文</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> string s=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> ((x<span class="hljs-number">+3</span>)*<span class="hljs-number">39</span>)%<span class="hljs-number">62</span>;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-type">char</span> c;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;tst2002.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-keyword">while</span>(cin&gt;&gt;c)<br>&#123;<br><span class="hljs-keyword">if</span>((<span class="hljs-type">int</span>)(s.<span class="hljs-built_in">find</span>(c))==<span class="hljs-number">-1</span>) cout&lt;&lt;c;<br><span class="hljs-keyword">else</span> <br>&#123;<br>cout&lt;&lt;s[<span class="hljs-built_in">f</span>(s.<span class="hljs-built_in">find</span>(c))] ;<br>&#125; <br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="4-equationSet"><a href="#4-equationSet" class="headerlink" title="4.equationSet"></a>4.equationSet</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag.encode())<br>p, q, r = getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>), getPrime(<span class="hljs-number">512</span>)<br><br>n = p*q*r<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(p+q+r)<br><span class="hljs-built_in">print</span>(p*q+p*r)<br><span class="hljs-comment"># 给出部分略</span><br></code></pre></td></tr></table></figure><p>这是一个简单的RSA变式，三个质数相乘，根据我们得到的线索：有以下3个数据可用：$S&#x3D;p+q+r$，$n&#x3D;p×q×r$，$T&#x3D;p×(q+r)$。</p><p>由于$p,q,r$均为质数，我们只需要求$T$和$n$的最大公约数即为$p$的值，然后我们很快就得到以下两个数字：$M_2&#x3D;q×r$和$T_2&#x3D;q+r$。</p><p>怎么解$q,r$？ 换元解二次方程？显然很麻烦！</p><p>实际上我们不需要解出来这2个值，因为RSA加密为$c&#x3D;m^e \mod n$，解密为$m&#x3D;c^d \mod n$，其中$d$是$e$在模$phi(n)$的逆元，所以我们只需要求$phi(n)$，又因为$p,q,r$均为质数，所以$phi(n)&#x3D;phi(p)×phi(q)×phi(r)&#x3D;(p-1)(q-1)(r-1)&#x3D;(p-1)(M_2-T_2+1)$</p><p>然后我们再用上一题的那个脚本解出$d$,进而得到$m$</p><p>得到$m$后，来一波long_to_bytes操作就得到了flag。</p><p>注：未配置相关环境的话，可以使用进制分解的手段，将$m$分解为$256$进制，然后一位一位逐一转成字符</p><h3 id="5-Fibonacci"><a href="#5-Fibonacci" class="headerlink" title="5.Fibonacci"></a>5.Fibonacci</h3><p>先放一下题目中最核心的代码，并且题目给出了 $r,n,c,N$ 这 $4$ 个数的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">n = reduce(<span class="hljs-keyword">lambda</span> a, b: a*b, [getPrime(<span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>r = getRandomNBitInteger(<span class="hljs-number">67</span>)<br>S = <span class="hljs-built_in">sum</span>([F(i) % n <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r)])<br>p = next_prime(S**<span class="hljs-number">16</span>)<br>q = getPrime(p.bit_length())<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, p*q)<br>N=p*q<br><span class="hljs-comment">#n=34969</span><br><span class="hljs-comment">#r,c,N数字过大，此处略去</span><br></code></pre></td></tr></table></figure><p>这仍然是个RSA的变式题。首先我们可以看到 $p$ 跟$S$的值是密切相关的。所以我们应当先求出$S &#x3D; \sum_{i&#x3D;1}^r (F_i \mod 34969) $的值</p><p>根据斐波那契数列的递推公式$F_i&#x3D;F_{i-1}+F_{i-2}$，其中$F_1&#x3D;F_2&#x3D;1$，我们可以知道：如果所有的$F_i$对同一个数取模，这个数列应当是有周期性的，所以我们应当求这个数列的周期。而模数为$34969$，并不是一个很大的数字，所以我们可以估计周期不超过$500万$，用以下的C++脚本确定周期</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,f[<span class="hljs-number">9607087</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,j;<br>f[<span class="hljs-number">1</span>]=f[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">5000000</span>;i++)<br>&#123;<br>f[i]=(f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>])%<span class="hljs-number">34969</span>;<br><span class="hljs-keyword">if</span>(f[i]==f[i<span class="hljs-number">-1</span>]&amp;&amp;f[i]==<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i<span class="hljs-number">-1</span>); <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于输出的第一个数字为$33661$，说明$f_{33661}&#x3D;f_{33662}&#x3D;1$，确定周期为$33660$，这样我们可以求出一个周期内的数字之和$S_T &#x3D; \sum_{i&#x3D;1}^{33660} (F_i \mod 34969)$。</p><p>然后，我们在python中计算<code>r//33660</code>和<code>r%33660</code>的值，然后就可以确定数据的组数和多出来的组数了。</p><p>最终，我们得到$S&#x3D;\lfloor r&#x2F;33660 \rfloor × S_T +$ $ \sum_{i&#x3D;1}^{r \mod 33660} (F_i \mod 34969)$。然后我们可以计算出$p$的值，进而求出$q$的值。</p><p>有了$p,q$两个数字，我们就可以求出$N$的欧拉函数 然后用跟上一题一样的脚本(Superaffine中提到的求最大公约数和逆元的脚本)，用RSA解密方法迅速得出$d$和$m$，来一波<code>long_to_bytes</code>，得出flag。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1-签到题"><a href="#1-签到题" class="headerlink" title="1.签到题"></a>1.签到题</h3><p>这个就不写题解了吧~Rules能找到</p><h3 id="2-easeBase"><a href="#2-easeBase" class="headerlink" title="2.easeBase"></a>2.easeBase</h3><p>随便在百度上找个Base64加密解密网页，可以得到以下内容:<code>307847616D657B68407070794D4953435F4D4953435F4D4953437D</code></p><p>观察可知这是一个$16$进制的数字，应该是ASCII码。存入一个文本文档中，然后两位一组按一个回车。最后用以下C++脚本即可得到flag</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%x&quot;</span>,&amp;x))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,x);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-lowerBase64"><a href="#3-lowerBase64" class="headerlink" title="3.lowerBase64"></a>3.lowerBase64</h3><p>根据<code>0xgame</code>的开头Base64加密可知：这边应该是把正确的密文全部小写后得到给出的字符串</p><p>使用以下的python脚本，每次在$k$后面加$2$位字符，可以确定后面$1$到$2$个$f$的内容，就这样手动地一步一步地扩充字符串$k$和$f$的内容，当$f$内容完整时，我们就得到了flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> *<br>f=<span class="hljs-string">&#x27;0xgame&#123;&#x27;</span><br>k=<span class="hljs-string">&#x27;mhhnyw1le&#x27;</span><br>s=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789-&#123;&#125;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span>((b64encode((f+i+j).encode()).decode().lower()).startswith(k)):<br>            <span class="hljs-built_in">print</span> (i+j)<br></code></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>由于本人没选择web方向，所以web简单切了2题，这两题对于主修web的是非常非常$H_2O$但我还是用了很久才做出来</p><h3 id="1-View-Source"><a href="#1-View-Source" class="headerlink" title="1.View Source"></a>1.View Source</h3><p>按<code>F12</code>就出来Flag了，Pass</p><h3 id="2-robots协议"><a href="#2-robots协议" class="headerlink" title="2.robots协议"></a>2.robots协议</h3><p>网址后面加<code>/robots.txt</code>得到一个界面，看到了<code>Disallow</code>内容，最后把<code>/robots.txt</code>改为<code>/flaaaggg.php</code>就得到flag了</p>]]></content>
    
    
    <categories>
      
      <category>CTFSeason1</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
